{"config":{"lang":["en"],"separator":"[\\s\\-\\$]+|(pl_|Series_|DataFrame_|LazyFrame_|GroupBy_|LazyGroupBy_|RollingGroupBy_|DynamicGroupBy_|ExprList_|ExprBin_|ExprCat_|ExprDT_|ExprMeta_|ExprName_|ExprStr_|ExprStruct_|ExprArr_|Expr_|IO_|RThreadHandle_|SQLContext_|S3_)","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#polars","title":"polars","text":"<p>The polars package for R gives users access to a lightning fast Data Frame library written in Rust. Polars\u2019 embarrassingly parallel execution, cache efficient algorithms and expressive API makes it perfect for efficient data wrangling, data pipelines, snappy APIs, and much more besides. Polars also supports \u201cstreaming mode\u201d for out-of-memory operations. This allows users to analyze datasets many times larger than RAM.</p> <p>Examples of common operations:</p> <ul> <li>read CSV, JSON, Parquet, and other file formats;</li> <li>filter rows and select columns;</li> <li>modify and create new columns;</li> <li>group by and aggregate;</li> <li>reshape data;</li> <li>join and concatenate different datasets;</li> <li>sort data;</li> <li>work with dates and times;</li> <li>handle missing values;</li> <li>use the lazy execution engine for maximum performance and     memory-efficient operations</li> </ul> <p>Note that this package is rapidly evolving and there are a number of breaking changes at each version. Be sure to check the changelog when updating <code>polars</code>.</p>"},{"location":"index.html#install","title":"Install","text":"<p>The recommended way to install this package is via R-universe:</p> <pre><code>Sys.setenv(NOT_CRAN = \"true\")\ninstall.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\")\n</code></pre> <p>The \u201cInstall\u201d vignette (<code>vignette(\"install\", \"polars\")</code>) gives more details on how to install this package and other ways to install it.</p>"},{"location":"index.html#quickstart-example","title":"Quickstart example","text":"<p>To avoid conflicts with other packages and base R function names, polars\u2019s top level functions are hosted in the <code>pl</code> namespace, and accessible via the <code>pl$</code> prefix. This means that <code>polars</code> queries written in Python and in R are very similar.</p> <p>For example, rewriting the Python example from https://github.com/pola-rs/polars in R:</p> <pre><code>library(polars)\n\ndf = pl$DataFrame(\n  A = 1:5,\n  fruits = c(\"banana\", \"banana\", \"apple\", \"apple\", \"banana\"),\n  B = 5:1,\n  cars = c(\"beetle\", \"audi\", \"beetle\", \"beetle\", \"beetle\")\n)\n\n# embarrassingly parallel execution &amp; very expressive query language\ndf$sort(\"fruits\")$select(\n  \"fruits\",\n  \"cars\",\n  pl$lit(\"fruits\")$alias(\"literal_string_fruits\"),\n  pl$col(\"B\")$filter(pl$col(\"cars\") == \"beetle\")$sum(),\n  pl$col(\"A\")$filter(pl$col(\"B\") &gt; 2)$sum()$over(\"cars\")$alias(\"sum_A_by_cars\"),\n  pl$col(\"A\")$sum()$over(\"fruits\")$alias(\"sum_A_by_fruits\"),\n  pl$col(\"A\")$reverse()$over(\"fruits\")$alias(\"rev_A_by_fruits\"),\n  pl$col(\"A\")$sort_by(\"B\")$over(\"fruits\")$alias(\"sort_A_by_B_by_fruits\")\n)\n#&gt; shape: (5, 8)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 cars   \u2506 literal_stri \u2506 B   \u2506 sum_A_by_car \u2506 sum_A_by_fru \u2506 rev_A_by_fru \u2506 sort_A_by_B_ \u2502\n#&gt; \u2502 ---    \u2506 ---    \u2506 ng_fruits    \u2506 --- \u2506 s            \u2506 its          \u2506 its          \u2506 by_fruits    \u2502\n#&gt; \u2502 str    \u2506 str    \u2506 ---          \u2506 i32 \u2506 ---          \u2506 ---          \u2506 ---          \u2506 ---          \u2502\n#&gt; \u2502        \u2506        \u2506 str          \u2506     \u2506 i32          \u2506 i32          \u2506 i32          \u2506 i32          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 beetle \u2506 fruits       \u2506 11  \u2506 4            \u2506 7            \u2506 4            \u2506 4            \u2502\n#&gt; \u2502 apple  \u2506 beetle \u2506 fruits       \u2506 11  \u2506 4            \u2506 7            \u2506 3            \u2506 3            \u2502\n#&gt; \u2502 banana \u2506 beetle \u2506 fruits       \u2506 11  \u2506 4            \u2506 8            \u2506 5            \u2506 5            \u2502\n#&gt; \u2502 banana \u2506 audi   \u2506 fruits       \u2506 11  \u2506 2            \u2506 8            \u2506 2            \u2506 2            \u2502\n#&gt; \u2502 banana \u2506 beetle \u2506 fruits       \u2506 11  \u2506 4            \u2506 8            \u2506 1            \u2506 1            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The Get Started vignette (<code>vignette(\"polars\")</code>) provides a more detailed introduction to polars.</p>"},{"location":"index.html#extensions","title":"Extensions","text":"<p>While one can use polars as-is, other packages build on it to provide different syntaxes:</p> <ul> <li>polarssql provides a     polars backend for DBI and     dbplyr.</li> <li>tidypolars allows one to     use the tidyverse syntax while using     the power of polars.</li> </ul>"},{"location":"index.html#getting-help","title":"Getting help","text":"<p>The online documentation can be found at https://rpolars.github.io/.</p> <p>If you encounter a bug, please file an issue with a minimal reproducible example on GitHub.</p> <p>Consider joining our Discord subchannel for additional help and discussion.</p>"},{"location":"LICENSE.html","title":"MIT License","text":"<p>Copyright (c) 2022 S\u00f8ren Havelund Welling</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"NEWS.html","title":"NEWS","text":""},{"location":"NEWS.html#polars-r-package-development-version","title":"Polars R Package (development version)","text":""},{"location":"NEWS.html#breaking-changes-due-to-rust-polars-update","title":"Breaking changes due to Rust-polars update","text":"<ul> <li>rust-polars is updated to 0.38.3 (#937).<ul> <li>New argument <code>non_existent</code> in <code>$dt$replace_time_zone()</code> to specify what should   happen when a datetime doesn't exist.</li> <li>In rolling aggregation functions (such as <code>$rolling_mean()</code>), the default   value of argument <code>closed</code> now is <code>NULL</code>. Using <code>closed</code> with a fixed   <code>window_size</code> now throws an error.</li> </ul> </li> </ul>"},{"location":"NEWS.html#other-breaking-changes","title":"Other breaking changes","text":"<ul> <li> <p>Several functions have been rewritten to match the behavior of Python Polars.</p> <ul> <li> <p>In <code>pl$Series()</code> arguments are changed.</p> <ul> <li>The argument <code>x</code> is renamed <code>values</code> (#933).</li> <li>The argument <code>values</code> has a new default value <code>NULL</code> (#966).</li> <li> <p>Using positional arguments in <code>pl$Series()</code> throws a warning, since the   argument positions will be changed in the future (#966).</p> <pre><code># polars 0.15.1 or earlier\n# The first argument is `x`, the second argument is `name`.\npl$Series(1:3, \"foo\")\n\n# The code above will warn in 0.16.0\n# Use named arguments to silence the warning.\npl$Series(values = 1:3, name = \"foo\")\npl$Series(name = \"foo\", values = 1:3)\n\n# polars 0.17.0 or later (future version)\n# The first argument is `name`, the second argument is `values`.\npl$Series(\"foo\", 1:3)\n</code></pre> <p>This warning can also be silenced by replacing <code>pl$Series(&lt;values&gt;, &lt;name&gt;)</code> by <code>as_polars_series(&lt;values&gt;, &lt;name&gt;)</code>.</p> </li> </ul> </li> </ul> <ul> <li><code>pl$implode(...)</code> is rewritten to be a syntactic sugar for <code>pl$col(...)$implode()</code> (#923).</li> <li>Unify names of input/output function arguments (#935).<ul> <li>All arguments except the first argument must be named arguments.</li> <li>In <code>pl$read_*</code> and <code>pl$scan_*</code> functions, the first argument is now <code>source</code>.</li> <li>In <code>&lt;DataFrame&gt;$write_*</code> functions, the first argument is now <code>file</code>.</li> <li>In <code>&lt;LazyFrame&gt;$sink_*</code> functions, the first argument is now <code>path</code>.</li> </ul> </li> <li>In <code>$dt$convert_time_zone()</code> and <code>$dt$replace_time_zone()</code>, the <code>tz</code> argument   is renamed to <code>time_zone</code> (#944).</li> <li>In <code>&lt;DataFrame&gt;$rolling()</code>, <code>&lt;LazyFrame&gt;$rolling()</code>, <code>&lt;DataFrame&gt;$group_by_dynamic()</code>   and <code>&lt;LazyFrame&gt;$group_by_dynamic()</code>, the <code>by</code> argument is renamed to <code>group_by</code> (#983).</li> <li>In <code>&lt;DataFrame&gt;$rolling()</code> and <code>&lt;DataFrame&gt;$group_by_dynamic()</code>, all arguments   except <code>index_column</code> must be named arguments (#983).</li> <li>In <code>$dt$replace_time_zone()</code>, all arguments except <code>time_zone</code> must be named   arguments (#944).</li> <li>In <code>$bin$decode()</code>, the <code>strict</code> argument must be a named argument (#980).</li> <li><code>pl$date_range()</code> is completely rewritten (#950).<ul> <li>The argument <code>end</code> must be specified.</li> <li>The default value of <code>interval</code> is changed to <code>\"1d\"</code>.</li> <li>The unused argument (not working in recent versions) <code>explode</code> is removed.</li> <li>The arguments <code>closed</code>, <code>time_unit</code>, and <code>time_zone</code> must be named arguments.</li> <li>No longer accepts numeric values to <code>start</code> and <code>end</code>.</li> <li>The usage of <code>pl$date_range()</code> to create a range of <code>Datetime</code> data type is deprecated.   <code>pl$date_range()</code> will always create a range of <code>Date</code> data type in the future.   Please use <code>pl$datetime_range()</code> if you want to create a range of <code>Datetime</code> instead.</li> <li><code>&lt;DataFrame&gt;$get_columns()</code> now returns an unnamed list instead of a named list (#991).</li> </ul> </li> </ul> </li> </ul> <ul> <li>The argument <code>columns</code> in <code>$drop()</code> is removed. <code>$drop()</code> now accepts several   character scalars, such as <code>$drop(\"a\", \"b\", \"c\")</code> (#912).</li> <li>In <code>pl$col()</code>, the <code>name</code> argument is removed, and the <code>...</code> argument no longer   accepts a list of characters and <code>RPolarsSeries</code> class objects (#923).</li> <li>Removed <code>$argsort()</code> which was an old alias for <code>$arg_sort()</code> (#930).</li> <li>Removed <code>pl$expr_to_r()</code> which was an alias for <code>$to_r()</code> (#938).</li> <li><code>&lt;Series&gt;$to_r_list()</code> is renamed <code>&lt;Series&gt;$to_list()</code> (#938).</li> <li>Removed <code>&lt;Series&gt;$to_r_vector()</code> which was an old alias for   <code>&lt;Series&gt;$to_vector()</code> (#938).</li> <li>In <code>$str$contains()</code>, the arguments <code>literal</code> and <code>strict</code> should be named arguments (#982).</li> <li>In <code>$str$contains_any()</code>, the <code>ascii_case_insensitive</code> argument must be named (#986).</li> <li>In <code>$str$count_matches()</code>, <code>$str$replace()</code> and <code>$str$replace_all()</code>,   the <code>literal</code> argument must be named (#987).</li> <li>In <code>$str$strptime()</code>, <code>$str$to_date()</code>, <code>$str$to_datetime()</code>, and   <code>$str$to_time()</code>, all arguments (except the first one) must be named (#939).</li> <li>In <code>$str$strptime()</code>, the argument <code>datatype</code> is renamed <code>dtype</code> (#939).</li> <li><code>$unique()</code> for <code>DataFrame</code> and <code>LazyFrame</code> have several changes (#953):<ul> <li>New default value <code>\"any\"</code> for argument <code>keep</code>.</li> <li>Arguments <code>keep</code> and <code>maintain_order</code> must be named.</li> </ul> </li> <li>The following deprecated functions are now removed: <code>pl$threadpool_size()</code>,   <code>&lt;DataFrame&gt;$with_row_count()</code>, <code>&lt;LazyFrame&gt;$with_row_count()</code> (#965).</li> </ul>"},{"location":"NEWS.html#new-features","title":"New features","text":"<ul> <li>New functions <code>pl$datetime()</code>, <code>pl$date()</code>, and <code>pl$time()</code> to easily create   Expr of class datetime, date, and time via columns and literals (#918).</li> <li>New function <code>pl$arg_where()</code> to get the indices that match a condition (#922).</li> <li>New function <code>is_polars_dtype()</code> (#927).</li> <li>New function <code>pl$datetime_range()</code> (#950).</li> <li>New method <code>&lt;LazyFrame&gt;$to_dot()</code> to print the query plan of a LazyFrame with   graphviz dot syntax (#928).</li> <li>Argument <code>ambiguous</code> can now take the value <code>\"null\"</code> to convert ambigous   datetimes to null values (#937).</li> <li>New function <code>pl$mean_horizontal()</code> (#959).</li> <li>New argument <code>raise_if_undetermined</code> of <code>&lt;Expr&gt;$meta$output_name()</code> (#961).</li> <li>New function <code>pl$arg_sort_by()</code> (#929).</li> <li>New functions <code>pl$date_ranges()</code> and <code>pl$datetime_ranges()</code> (#962).</li> <li>Export the <code>Duration</code> datatype (#955).</li> <li>New functions <code>pl$int_range()</code> and <code>pl$int_ranges()</code> (#968).</li> <li>New string method <code>$str$extract_groups()</code> (#979).</li> <li>New string method <code>$str$find()</code> (#985).</li> <li>New argument <code>n</code> in <code>$str$replace()</code> (#987).</li> <li>Method <code>$over()</code> gains an argument <code>mapping_strategy</code> (#984, #988).</li> <li>New method <code>$item()</code> for <code>DataFrame</code> and <code>Series</code> (#992).</li> </ul>"},{"location":"NEWS.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>The <code>join_nulls</code> and <code>validate</code> arguments of <code>&lt;DataFrame&gt;$join()</code> now work   correctly (#945).</li> <li>We said in the changelog of 0.14.0 that all <code>row_count_*</code> args in I/O functions   were renamed <code>row_index_*</code>, but this change was not made for CSV and IPC   functions. This renaming is now made (#964).</li> <li>Evaluating <code>Series</code> methods from <code>Expr</code> inside functions now works correctly (#973).   Thanks @Yunuuuu for the report.</li> <li>The dependent crate <code>extendr-api</code> is updated to 2024-03-31 unreleased version (#995).   The issue that the R session crashes when a panic occurs in the Rust side is resolved.   Thanks @CGMossa for the upstream fix.</li> </ul>"},{"location":"NEWS.html#polars-r-package-0151","title":"Polars R Package 0.15.1","text":""},{"location":"NEWS.html#new-features_1","title":"New features","text":"<ul> <li>rust-polars is updated to 0.38.2 (#907).<ul> <li>Minimum supported Rust version (MSRV) is now 1.76.0.</li> </ul> </li> <li><code>as_polars_df(&lt;nanoarrow_array&gt;)</code> is added (#893).</li> <li>It is now possible to create an empty <code>DataFrame</code> with a specific schema   with <code>pl$DataFrame(schema = my_schema)</code> (#901).</li> <li>New arguments <code>dtype</code> and <code>nan_to_null</code> for <code>pl$Series()</code> (#902).</li> <li>New method <code>&lt;DataFrame&gt;$partition_by()</code> (#898).</li> </ul>"},{"location":"NEWS.html#bug-fixes_1","title":"Bug fixes","text":"<ul> <li>The default value of the <code>format</code> of <code>$str$strptime()</code> is now correctly set (#892).</li> </ul>"},{"location":"NEWS.html#other-improvements","title":"Other improvements","text":"<ul> <li>Performance of <code>as_polars_df(&lt;nanoarrow_array_stream&gt;)</code> is improved (#896).</li> </ul>"},{"location":"NEWS.html#polars-r-package-0150","title":"Polars R Package 0.15.0","text":""},{"location":"NEWS.html#breaking-changes-due-to-rust-polars-update_1","title":"Breaking changes due to Rust-polars update","text":"<ul> <li>rust-polars is updated to 0.38.1 (#865, #872).<ul> <li>in <code>$pivot()</code>, arguments <code>aggregate_function</code>, <code>maintain_order</code>,   <code>sort_columns</code> and <code>separator</code> must be named. Values that are passed   by position are ignored.</li> <li>in <code>$describe()</code>, the name of the first column changed from <code>\"describe\"</code>   to <code>\"statistic\"</code>.</li> <li><code>$mod()</code> methods and <code>%%</code> works correctly to guarantee   <code>x == (x %% y) + y * (x %/% y)</code>.</li> </ul> </li> </ul>"},{"location":"NEWS.html#other-breaking-changes_1","title":"Other breaking changes","text":"<ul> <li>Removed <code>as.list()</code> for class <code>RPolarsExpr</code> as it is a simple wrapper around   <code>list()</code> (#843).</li> <li>Several functions have been rewritten to match the behavior of Python Polars.<ul> <li><code>pl$col(...)</code> requires at least one argument. (#852)</li> <li><code>pl$head()</code>, <code>pl$tail()</code>, <code>pl$count()</code>, <code>pl$first()</code>, <code>pl$last()</code>, <code>pl$max()</code>,   <code>pl$min()</code>, <code>pl$mean()</code>, <code>pl$media()</code>, <code>pl$std()</code>, <code>pl$sum()</code>, <code>pl$var()</code>,   <code>pl$n_unique()</code>, and <code>pl$approx_n_unique()</code> are syntactic sugar for   <code>pl$col(...)$&lt;method()&gt;</code>. The argument <code>...</code> now only accepts characters,   that are either column names or regular expressions (#852).</li> <li>There is no argument for <code>pl$len()</code>. If you want to measure the length of   specific columns, you should use <code>pl$count(...)</code> (#852).</li> <li><code>&lt;Expr&gt;$str$concat()</code> method's <code>delimiter</code> argument's default value is   changed from <code>\"-\"</code> to <code>\"\"</code> (#853).</li> <li><code>&lt;Expr&gt;$str$concat()</code> method's <code>ignore_nulls</code> argument must be a   named argument (#853).</li> <li><code>pl$Datetime()</code>'s arguments are renamed: <code>tu</code> to <code>time_unit</code>,   and <code>tz</code> to <code>time_zone</code> (#887).</li> </ul> </li> <li><code>pl$Categorical()</code> has been improved to allow specifying the <code>ordering</code> type   (either lexical or physical). This also means that calling <code>pl$Categorical</code>   doesn't create a <code>DataType</code> anymore. All calls to <code>pl$Categorical</code> must be   replaced by <code>pl$Categorical()</code> (#860).</li> <li><code>&lt;Series&gt;$rem()</code> is removed. Use <code>&lt;Series&gt;$mod()</code> instead (#886).</li> <li> <p>The conversion strategy between the POSIXct type without time zone attribute   and Polars datetime has been changed (#878).   <code>POSIXct</code> class vectors without a time zone attribute have UTC time internally   and is displayed based on the system's time zone. Previous versions of <code>polars</code>   only considered the internal value and interpreted it as UTC time, so the   time displayed as <code>POSIXct</code> and in Polars was different.</p> <pre><code># polars 0.14.1\nSys.setenv(TZ = \"Europe/Paris\")\ndatetime = as.POSIXct(\"1900-01-01\")\ndatetime\n#&gt; [1] \"1900-01-01 PMT\"\n\ns = polars::as_polars_series(datetime)\ns\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ms]]\n#&gt; [\n#&gt;  1899-12-31 23:50:39\n#&gt; ]\n\nas.vector(s)\n#&gt; [1] \"1900-01-01 PMT\"\n</code></pre> <p>Now the internal value is updated to match the displayed value.</p> <pre><code># polars 0.15.0\nSys.setenv(TZ = \"Europe/Paris\")\ndatetime = as.POSIXct(\"1900-01-01\")\ndatetime\n#&gt; [1] \"1900-01-01 PMT\"\n\ns = polars::as_polars_series(datetime)\ns\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ms]]\n#&gt; [\n#&gt;  1900-01-01 00:00:00\n#&gt; ]\n\nas.vector(s)\n#&gt; [1] \"1900-01-01 PMT\"\n</code></pre> <p>This update may cause errors when converting from Polars to <code>POSIXct</code> for non-existent or ambiguous times. It is recommended to explicitly add a time zone before converting from Polars to R.</p> <pre><code>Sys.setenv(TZ = \"America/New_York\")\nambiguous_time = as.POSIXct(\"2020-11-01 01:00:00\")\nambiguous_time\n#&gt; [1] \"2020-11-01 01:00:00 EDT\"\n\npls = polars::as_polars_series(ambiguous_time)\npls\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ms]]\n#&gt; [\n#&gt;  2020-11-01 01:00:00\n#&gt; ]\n\n## This will be error!\n# pls |&gt; as.vector()\n\npls$dt$replace_time_zone(\"UTC\") |&gt; as.vector()\n#&gt; [1] \"2020-11-01 01:00:00 UTC\"\n</code></pre> </li> </ul> <ul> <li>Removed argument <code>eager</code> in <code>pl$date_range()</code> and <code>pl$struct()</code> for more   consistency of output. It is possible to replace <code>eager = TRUE</code> by calling   <code>$to_series()</code> (#882).</li> </ul>"},{"location":"NEWS.html#new-features_2","title":"New features","text":"<ul> <li>In the when-then-otherwise expressions, the last <code>$otherwise()</code> is now optional,   as in Python Polars. If <code>$otherwise()</code> is not specified, rows that don't respect   the condition set in <code>$when()</code> will be filled with <code>null</code> (#836).</li> <li><code>&lt;DataFrame&gt;$head()</code> and <code>&lt;DataFrame&gt;$tail()</code> methods now support negative   row numbers (#840).</li> <li><code>$group_by()</code> now works with named expressions (#846).</li> <li>New methods for the <code>arr</code> subnamespace: <code>$median()</code>, <code>$var()</code>, <code>$std()</code>,   <code>$shift()</code>, <code>$to_struct()</code> (#867).</li> <li><code>$min()</code> and <code>max()</code> now work on categorical variables (#868).</li> <li>New methods for the <code>list</code> subnamespace: <code>$n_unique()</code>, <code>$gather_every()</code>   (#869).</li> <li>Converts <code>clock_time_point</code> and <code>clock_zoned_time</code> objects from   the <code>{clock}</code> package to Polars datetime type (#861).</li> <li>New methods for the <code>name</code> subnamespace: <code>$prefix_fields()</code> and   <code>suffix_fields()</code> (#873).</li> <li><code>pl$Datetime()</code>'s <code>time_zone</code> argument now accepts <code>\"*\"</code> to match   any time zone (#887).</li> </ul>"},{"location":"NEWS.html#bug-fixes_2","title":"Bug fixes","text":"<ul> <li>R no longer crashes when calling an invalid Polars object that points   to a null pointer (#874). This was occurring, such as when a Polars object   was saved in an RDS file and loaded from another session.</li> </ul>"},{"location":"NEWS.html#polars-r-package-0141","title":"Polars R Package 0.14.1","text":""},{"location":"NEWS.html#breaking-changes","title":"Breaking changes","text":"<ul> <li>Since most of the methods of <code>Expr</code> are now available for <code>Series</code>, the   experimental <code>&lt;Series&gt;$expr</code> subnamespace is removed (#831).   Use <code>&lt;Series&gt;$&lt;method&gt;</code> instead of <code>&lt;Series&gt;$expr$&lt;method&gt;</code>.</li> </ul>"},{"location":"NEWS.html#new-features_3","title":"New features","text":"<ul> <li>New active bindings <code>$flags</code> for <code>DataFrame</code> to show the flags used internally   for each column. The output of <code>$flags</code> for <code>Series</code> was also improved and now   contains <code>FAST_EXPLODE</code> for <code>Series</code> of type <code>list</code> and <code>array</code> (#809).</li> <li>Most of <code>Expr</code> methods are also available for <code>Series</code> (#819, #828, #831).</li> <li><code>as_polars_df()</code> for <code>data.frame</code> is more memory-efficient and new arguments   <code>schema</code> and <code>schema_overrides</code> are added (#817).</li> <li>Use <code>polars_code_completion_activate()</code> to enable code suggestions and   autocompletion after <code>$</code> on polars objects. This is an experimental feature   that is disabled by default. For now, it is only supported in the native R   terminal and in RStudio (#597).</li> </ul>"},{"location":"NEWS.html#bug-fixes_3","title":"Bug fixes","text":"<ul> <li><code>&lt;Series&gt;$list</code> sub namespace methods returns <code>Series</code> class object correctly (#819).</li> </ul>"},{"location":"NEWS.html#polars-r-package-0140","title":"Polars R Package 0.14.0","text":""},{"location":"NEWS.html#breaking-changes-due-to-rust-polars-update_2","title":"Breaking changes due to Rust-polars update","text":"<ul> <li>rust-polars is updated to 0.37.0 (#776).<ul> <li>Minimum supported Rust version (MSRV) is now 1.74.1.</li> <li><code>$with_row_count()</code> for <code>DataFrame</code> and <code>LazyFrame</code> is deprecated and   will be removed in 0.15.0. It is replaced by <code>$with_row_index()</code>.</li> <li><code>pl$count()</code> is deprecated and will be removed in 0.15.0. It is replaced   by <code>pl$len()</code>.</li> <li><code>$explode()</code> for <code>DataFrame</code> and <code>LazyFrame</code> doesn't work anymore on   string columns.</li> <li><code>$list$join()</code> and <code>pl$concat_str()</code> gain an argument <code>ignore_nulls</code>.   The current behavior is to return a <code>null</code> if the row contains any <code>null</code>.   Setting <code>ignore_nulls = TRUE</code> changes that.</li> <li>All <code>row_count_*</code> args in reading/scanning functions are renamed   <code>row_index_*</code>.</li> <li><code>$sort()</code> for <code>Series</code> gains an argument <code>nulls_last</code>.</li> <li><code>$str$extract()</code> and <code>$str$zfill()</code> now accept an <code>Expr</code> and parse   strings as column names. Use <code>pl$lit()</code> to recover the old behavior.</li> <li><code>$cum_count()</code> now starts from 1 instead of 0.</li> </ul> </li> </ul>"},{"location":"NEWS.html#other-breaking-changes_2","title":"Other breaking changes","text":"<ul> <li>The <code>simd</code> feature of the Rust library is removed in favor of   the new <code>nightly</code> feature (#800).   If you specified <code>simd</code> via the <code>LIBR_POLARS_FEATURES</code> environment variable   during source installations, please use <code>nightly</code> instead;   there is no change if you specified <code>full_features</code> because   it now contains <code>nightly</code> instead of <code>simd</code>.</li> <li>The following functions were deprecated in 0.13.0 and are now removed (#783):<ul> <li><code>$list$lengths()</code> -&gt; <code>$list$len()</code></li> <li><code>pl$from_arrow()</code> -&gt; <code>as_polars_df()</code> or <code>as_polars_series()</code></li> <li><code>pl$set_options()</code> and <code>pl$reset_options()</code> -&gt; <code>polars_options()</code></li> </ul> </li> <li><code>$is_between()</code> had several changes (#788):<ul> <li>arguments <code>start</code> and <code>end</code> are renamed <code>lower_bound</code> and <code>upper_bound</code>.   Their behaviour doesn't change.</li> <li><code>include_bounds</code> is renamed <code>closed</code> and must be one of <code>\"left\"</code>,   <code>\"right\"</code>, <code>\"both\"</code>, or <code>\"none\"</code>.</li> </ul> </li> <li><code>polars_info()</code> returns a slightly changed list.<ul> <li><code>$threadpool_size</code>, which means the number of threads used by Polars,   is changed to <code>$thread_pool_size</code> (#784)</li> <li><code>$version</code>, which indicates the version of this package,   is changed to <code>$versions$r_package</code> (#791).</li> <li><code>$rust_polars</code>, which indicates the version of the dependent Rust Polars,   is changed to <code>$versions$rust_crate</code> (#791).</li> </ul> </li> <li>New behavior when creating a <code>DataFrame</code> with a single list-variable.   <code>pl$DataFrame(x = list(1:2, 3:4))</code> used to create a <code>DataFrame</code> with two   columns named \"new_column\" and \"new_column_1\", which was unexpected. It now   produces a <code>DataFrame</code> with a single <code>list</code> variable. This also applies to   list-column created in <code>$with_columns()</code> and <code>$select()</code> (#794).</li> </ul>"},{"location":"NEWS.html#deprecations","title":"Deprecations","text":"<ul> <li><code>pl$threadpool_size()</code> is deprecated and will be removed in 0.15.0. Use   <code>pl$thread_pool_size()</code> instead (#784).</li> </ul>"},{"location":"NEWS.html#new-features_4","title":"New features","text":"<ul> <li>Implementation of the subnamespace <code>$arr</code> for expressions on <code>array</code>-type   columns. An <code>array</code> column is similar to a <code>list</code> column, but is stricter as   each sub-array must have the same number of elements (#790).</li> </ul>"},{"location":"NEWS.html#other-improvements_1","title":"Other improvements","text":"<ul> <li>The <code>sql</code> feature is included in the default feature (#800).   This means that functionality related to the <code>RPolarsSQLContext</code> class   is now always included in the binary package.</li> </ul>"},{"location":"NEWS.html#polars-r-package-0131","title":"Polars R Package 0.13.1","text":""},{"location":"NEWS.html#new-features_5","title":"New features","text":"<ul> <li>New method <code>$write_parquet()</code> for DataFrame (#758).</li> <li>S3 methods of <code>as.data.frame()</code> for <code>RPolarsDataFrame</code> and <code>RPolarsLazyFrame</code>   accepts more arguments of <code>as_polars_df()</code> and <code>&lt;DataFrame&gt;$to_data_frame()</code> (#762).</li> <li>S3 methods of <code>arrow::as_arrow_table()</code> and <code>arrow::as_record_batch_reader()</code> for   <code>RPolarsDataFrame</code> no longer need the <code>{nanoarrow}</code> package (#754).</li> <li>Some S3 methods for the <code>{nanoarrow}</code> package are added (#730).<ul> <li><code>as_polars_df(&lt;nanoarrow_array_stream&gt;)</code></li> <li><code>as_polars_series(&lt;nanoarrow_array&gt;)</code></li> <li><code>as_polars_series(&lt;nanoarrow_array_stream&gt;)</code></li> </ul> </li> </ul>"},{"location":"NEWS.html#bug-fixes_4","title":"Bug fixes","text":"<ul> <li><code>$sort()</code> no longer panicks when <code>descending = NULL</code> (#748).</li> </ul>"},{"location":"NEWS.html#other-enhancements","title":"Other enhancements","text":"<ul> <li><code>downlit::autolink()</code> now recognize the reference pages of this package (#739).</li> </ul>"},{"location":"NEWS.html#polars-r-package-0130","title":"Polars R Package 0.13.0","text":""},{"location":"NEWS.html#breaking-changes_1","title":"Breaking changes","text":"<ul> <li><code>&lt;Expr&gt;$where()</code> is removed. Use <code>&lt;Expr&gt;$filter()</code> instead (#718).</li> <li>Deprecated functions from 0.12.x are removed (#714).<ul> <li><code>&lt;Expr&gt;$apply()</code> and <code>&lt;Expr&gt;$map()</code>, use <code>$map_elements()</code> and   <code>$map_batches()</code> instead.</li> <li><code>pl$polars_info()</code>, use <code>polars_info()</code> instead.</li> </ul> </li> <li>The environment variables used when building the library have been changed   (#693). This only affects selecting the feature flag and selecting profiles   during source installation.<ul> <li><code>RPOLARS_PROFILE</code> is renamed to <code>LIBR_POLARS_PROFILE</code></li> <li><code>RPOLARS_FULL_FEATURES</code> is removed and <code>LIBR_POLARS_FEATURES</code> is added.   To select the <code>full_features</code>, set <code>LIBR_POLARS_FEATURES=\"full_features\"</code>.</li> <li><code>RPOLARS_RUST_SOURCE</code>, which was used for development, has been removed.   If you want to use library binaries located elsewhere, use <code>LIBR_POLARS_PATH</code>   instead.</li> </ul> </li> <li>Remove the <code>eager</code> argument of <code>&lt;SQLContext&gt;$execute()</code>.   Use the <code>$collect()</code> method after <code>$execute()</code> or <code>as_polars_df</code> to get the   result as a <code>DataFrame</code>. (#719)</li> <li>The argument <code>name_generator</code> of <code>$list$to_struct()</code> is renamed <code>fields</code>   (#724).</li> <li>The S3 method <code>[</code> for the <code>$list</code> subnamespace is removed (#724).</li> <li>The option <code>polars.df_print</code> has been renamed <code>polars.df_knitr_print</code> (#726).</li> </ul>"},{"location":"NEWS.html#deprecations_1","title":"Deprecations","text":"<ul> <li><code>$list$lengths()</code> is deprecated and will be removed in 0.14.0. Use   <code>$list$len()</code> instead (#724).</li> <li><code>pl$from_arrow()</code> is deprecated and will be removed in 0.14.0.   Use <code>as_polars_df()</code> or <code>as_polars_series()</code> instead (#728).</li> <li><code>pl$set_options()</code> and <code>pl$reset_options()</code> are deprecated and will be   removed in 0.14.0. See <code>?polars_options</code> for details (#726).</li> </ul>"},{"location":"NEWS.html#new-features_6","title":"New features","text":"<ul> <li>For compatibility with CRAN, the number of threads used by Polars is automatically set to 2   if the environment variable <code>POLARS_MAX_THREADS</code> is not set (#720).   To disable this behavior and have the maximum number of threads used automatically,   one of the following ways can be used:<ul> <li>Build the Rust library with the <code>disable_limit_max_threads</code> feature.</li> <li>Set the <code>polars.limit_max_threads</code> option to <code>FALSE</code> with the <code>options()</code> function   before loading the package.</li> </ul> </li> <li>New method <code>$rolling()</code> for <code>DataFrame</code> and <code>LazyFrame</code>. When this is   applied, it creates an object of class <code>RPolarsRollingGroupBy</code> (#682, #694).</li> <li>New method <code>$group_by_dynamic()</code> for <code>DataFrame</code> and <code>LazyFrame</code>. When this   is applied, it creates an object of class <code>RPolarsDynamicGroupBy</code> (#691).</li> <li>New method <code>$sink_ndjson()</code> for LazyFrame (#681).</li> <li>New function <code>pl$duration()</code> to create a duration by components (week, day,   hour, etc.), and use them with date(time) variables (#692).</li> <li>New methods <code>$list$any()</code> and <code>$list$all()</code> (#709).</li> <li>New function <code>pl$from_epoch()</code> to convert a Unix timestamp to a date(time)   variable (#708).</li> <li>New methods for the <code>list</code> subnamespace: <code>$set_union()</code>, <code>$set_intersection()</code>,   <code>$set_difference()</code>, <code>$set_symmetric_difference()</code> (#712).</li> <li>New option <code>int64_conversion</code> to specify how Int64 columns (that don't have   equivalent in base R) should be converted. This option can either be set   globally with <code>pl$set_options()</code> or on a case-by-case basis, e.g with   <code>$to_data_frame(int64_conversion =)</code> (#706).</li> <li>Several changes in <code>$join()</code> for <code>DataFrame</code> and <code>LazyFrame</code> (#716):<ul> <li><code>&lt;LazyFrame&gt;$join()</code> now errors if <code>other</code> is not a <code>LazyFrame</code> and   <code>&lt;DataFrame&gt;$join()</code> errors if <code>other</code> is not a <code>DataFrame</code>.</li> <li>Some arguments have been reordered (e.g <code>how</code> now comes before <code>left_on</code>).   This can lead to bugs if the user didn't use argument names.</li> <li>Argument <code>how</code> now accepts <code>\"outer_coalesce\"</code> to coalesce the join keys   automatically after joining.</li> <li>New argument <code>validate</code> to perform some checks on join keys (e.g ensure   that there is a one-to-one matching between join keys).</li> <li>New argument <code>join_nulls</code> to consider <code>null</code> values as a valid key.</li> </ul> </li> <li><code>&lt;DataFrame&gt;$describe()</code> now works with all datatypes. It also gains an   <code>interpolation</code> argument that is used for quantiles computation (#717).</li> <li><code>as_polars_df()</code> and <code>as_polars_series()</code> for the <code>arrow</code> package classes have been   rewritten and work better (#727).</li> <li>Options handling has been rewritten to match the standard option handling in   R (#726):<ul> <li>Options are now passed via <code>options()</code>. The option names don't change but   they must be prefixed with <code>\"polars.\"</code>. For example, we can now pass   <code>options(polars.strictly_immutable = FALSE)</code>.</li> <li>Options can be accessed with <code>polars_options()</code>, which returns a named   list (this is the replacement of <code>pl$options</code>).</li> <li>Options can be reset with <code>polars_options_reset()</code> (this is the   replacement of <code>pl$reset_options()</code>).</li> </ul> </li> <li>New function <code>polars_envvars()</code> to print the list of environment variables   related to polars (#735).</li> </ul>"},{"location":"NEWS.html#polars-r-package-0122","title":"Polars R Package 0.12.2","text":"<p>This is a small release including a few documentation improvements and internal updates.</p>"},{"location":"NEWS.html#polars-r-package-0121","title":"Polars R Package 0.12.1","text":"<p>This version includes a few additional features and a large amount of documentation improvements.</p>"},{"location":"NEWS.html#deprecations_2","title":"Deprecations","text":"<ul> <li><code>pl$polars_info()</code> is moved to <code>polars_info()</code>. <code>pl$polars_info()</code> is deprecated   and will be removed in 0.13.0 (#662).</li> </ul>"},{"location":"NEWS.html#rust-polars-update","title":"Rust-polars update","text":"<ul> <li>rust-polars is updated to 0.36.2 (#659). Most of the changes from 0.35.x to 0.36.2   were covered in R polars 0.12.0.   The main change is that <code>pl$Utf8</code> is replaced by <code>pl$String</code>.   <code>pl$Utf8</code> is an alias and will keep working, but <code>pl$String</code> is now preferred   in the documentation and in new code.</li> </ul>"},{"location":"NEWS.html#whats-changed","title":"What's changed","text":"<ul> <li>New methods <code>$str$reverse()</code>, <code>$str$contains_any()</code>, and <code>$str$replace_many()</code>   (#641).</li> <li>New methods <code>$rle()</code> and <code>$rle_id()</code> (#648).</li> <li>New functions <code>is_polars_df()</code>, <code>is_polars_lf()</code>, <code>is_polars_series()</code> (#658).</li> <li><code>$gather()</code> now accepts negative indexing (#659).</li> </ul>"},{"location":"NEWS.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Remove the <code>Makefile</code> in favor of <code>Taskfile.yml</code>.   Please use <code>task</code> instead of <code>make</code> as a task runner in the development (#654).</li> </ul>"},{"location":"NEWS.html#polars-r-package-0120","title":"Polars R Package 0.12.0","text":""},{"location":"NEWS.html#breaking-changes-due-to-rust-polars-update_3","title":"BREAKING CHANGES DUE TO RUST-POLARS UPDATE","text":"<ul> <li>rust-polars is updated to 2023-12-25 unreleased version (#601, #622).   This is the same version of Python Polars package 0.20.2, so please check   the upgrade guide for details too.<ul> <li><code>pl$scan_csv()</code> and <code>pl$read_csv()</code>'s <code>comment_char</code> argument is renamed <code>comment_prefix</code>.</li> <li><code>&lt;DataFrame&gt;$frame_equal()</code> and <code>&lt;Series&gt;$series_equal()</code> are renamed   to <code>&lt;DataFrame&gt;$equals()</code> and <code>&lt;Series&gt;$equals()</code>.</li> <li><code>&lt;Expr&gt;$rolling_*</code> functions gained an argument <code>warn_if_unsorted</code>.</li> <li><code>&lt;Expr&gt;$str$json_extract()</code> is renamed to <code>&lt;Expr&gt;$str$json_decode()</code>.</li> <li>Change default join behavior with regard to <code>null</code> values.</li> <li>Preserve left and right join keys in outer joins.</li> <li><code>count</code> now ignores null values.</li> <li><code>NaN</code> values are now considered equal.</li> <li><code>$gather_every()</code> gained an argument <code>offset</code>.</li> </ul> </li> </ul>"},{"location":"NEWS.html#breaking-changes-and-deprecations","title":"Breaking changes and deprecations","text":"<ul> <li><code>$apply()</code> on an Expr or a Series is renamed <code>$map_elements()</code>, and <code>$map()</code>   is renamed <code>$map_batches()</code>. <code>$map()</code> and <code>$apply()</code> will be removed in 0.13.0 (#534).</li> <li>Removed <code>$days()</code>, <code>$hours()</code>, <code>$minutes()</code>, <code>$seconds()</code>, <code>$milliseconds()</code>,   <code>$microseconds()</code>, <code>$nanoseconds()</code>. Those were deprecated in 0.11.0 (#550).</li> <li><code>pl$concat_list()</code>: elements being strings are now interpreted as column names.   Use <code>pl$lit</code> to concat with a string.</li> <li><code>&lt;RPolarsExpr&gt;$lit_to_s()</code> is renamed to <code>&lt;RPolarsExpr&gt;$to_series()</code> (#582).</li> <li><code>&lt;RPolarsExpr&gt;$lit_to_df()</code> is removed (#582).</li> <li>Change class names and function names associated with class names.<ul> <li>The class name of all objects created by polars (<code>DataFrame</code>, <code>LazyFrame</code>,   <code>Expr</code>, <code>Series</code>, etc.) has changed. They now start with <code>RPolars</code>, for example   <code>RPolarsDataFrame</code>. This will only break your code if you directly use those   class names, such as in S3 methods (#554, #585).</li> <li>Private methods have been unified so that they do not have the <code>RPolars</code> prefix (#584).</li> </ul> </li> </ul>"},{"location":"NEWS.html#whats-changed_1","title":"What's changed","text":"<ul> <li>The Extract function (<code>[</code>) for DataFrame can use columns not included in the   result for filtering (#547).</li> <li>The Extract function (<code>[</code>) for LazyFrame can filter rows with Expressions (#547).</li> <li><code>as_polars_df()</code> for <code>data.frame</code> has a new argument <code>rownames</code> for to convert   the row.names attribute to a column.   This option is inspired by the <code>tibble::as_tibble()</code> function (#561).</li> <li><code>as_polars_df()</code> for <code>data.frame</code> has a new argument <code>make_names_unique</code> (#561).</li> <li>New methods <code>$str$to_date()</code>, <code>$str$to_time()</code>, <code>$str$to_datetime()</code> as   alternatives to <code>$str$strptime()</code> (#558).</li> <li>The <code>dim()</code> function for DataFrame and LazyFrame correctly returns integer instead of   double (#577).</li> <li>The conversion of R's <code>POSIXct</code> class to Polars datetime now works correctly with millisecond   precision (#589).</li> <li><code>&lt;LazyFrame&gt;$filter()</code>, <code>&lt;DataFrame&gt;$filter()</code>, and <code>pl$when()</code> now allow multiple conditions   to be separated by commas, like <code>lf$filter(pl$col(\"foo\") == 1, pl$col(\"bar\") != 2)</code> (#598).</li> <li>New method <code>$replace()</code> for expressions (#601).</li> <li>Better error messages for trailing argument commas such as <code>pl$DataFrame()$select(\"a\",)</code> (#607).</li> <li>New function <code>pl$threadpool_size()</code> to get the number of threads used by Polars (#620).   Thread pool size is also included in the output of <code>pl$polars_info()</code>.</li> </ul>"},{"location":"NEWS.html#polars-r-package-0110","title":"Polars R Package 0.11.0","text":""},{"location":"NEWS.html#breaking-changes-due-to-rust-polars-update_4","title":"BREAKING CHANGES DUE TO RUST-POLARS UPDATE","text":"<ul> <li>rust-polars is updated to 0.35.0 (2023-11-17) (#515)<ul> <li>changes in <code>$write_csv()</code> and <code>sink_csv()</code>: <code>has_header</code> is renamed   <code>include_header</code> and there's a new argument <code>include_bom</code>.</li> <li><code>pl$cov()</code> gains a <code>ddof</code> argument.</li> <li><code>$cumsum()</code>, <code>$cumprod()</code>, <code>$cummin()</code>, <code>$cummax()</code>, <code>$cumcount()</code> are   renamed <code>$cum_sum()</code>, <code>$cum_prod()</code>, <code>$cum_min()</code>, <code>$cum_max()</code>,   <code>$cum_count()</code>.</li> <li><code>take()</code> and <code>take_every()</code> are renamed <code>$gather()</code> and <code>gather_every()</code>.</li> <li><code>$shift()</code> and <code>$shift_and_fill()</code> now accept Expr as input.</li> <li>when <code>reverse = TRUE</code>, <code>$arg_sort()</code> now places null values in the first   positions.</li> <li>Removed argument <code>ambiguous</code> in <code>$dt$truncate()</code> and <code>$dt$round()</code>.</li> <li><code>$str$concat()</code> gains an argument <code>ignore_nulls</code>.</li> </ul> </li> </ul>"},{"location":"NEWS.html#breaking-changes-and-deprecations_1","title":"Breaking changes and deprecations","text":"<ul> <li>The rowwise computation when several columns are passed to <code>pl$min()</code>, <code>pl$max()</code>,   and <code>pl$sum()</code> is deprecated and will be removed in 0.12.0. Passing several   columns to these functions will now compute the min/max/sum in each column   separately. Use <code>pl$min_horizontal()</code> <code>pl$max_horizontal()</code>, and   <code>pl$sum_horizontal()</code> instead for rowwise computation (#508).</li> <li><code>$is_not()</code> is deprecated and will be removed in 0.12.0. Use <code>$not()</code> instead   (#511, #531).</li> <li><code>$is_first()</code> is deprecated and will be removed in 0.12.0. Use <code>$is_first_distinct()</code>   instead (#531).</li> <li>In <code>pl$concat()</code>, the argument <code>to_supertypes</code> is removed. Use the suffix   <code>\"_relaxed\"</code> in the <code>how</code> argument to cast columns to their shared supertypes   (#523).</li> <li>All duration methods (<code>days()</code>, <code>hours()</code>, <code>minutes()</code>, <code>seconds()</code>,   <code>milliseconds()</code>, <code>microseconds()</code>, <code>nanoseconds()</code>) are renamed, for example   from <code>$dt$days()</code> to <code>$dt$total_days()</code>. The old usage is deprecated and will   be removed in 0.12.0 (#530).</li> <li>DataFrame methods <code>$as_data_frame()</code> is removed in favor of <code>$to_data_frame()</code> (#533).</li> <li>GroupBy methods <code>$as_data_frame()</code> and <code>$to_data_frame()</code> which were used to   convert GroupBy objects to R data frames are removed.   Use <code>$ungroup()</code> method and the <code>as.data.frame()</code> function instead (#533).</li> </ul>"},{"location":"NEWS.html#whats-changed_2","title":"What's changed","text":"<ul> <li>Fix the installation issue on Ubuntu 20.04 (#528, thanks @brownag).</li> <li>New methods <code>$write_json()</code> and <code>$write_ndjson()</code> for DataFrame (#502).</li> <li>Removed argument <code>name</code> in <code>pl$date_range()</code>, which was deprecated for a while   (#503).</li> <li>New private method <code>.pr$DataFrame$drop_all_in_place(df)</code> to drop <code>DataFrame</code>   in-place, to release memory without invoking gc(). However, if there are other   strong references to any of the underlying Series or arrow arrays, that memory   will specifically not be released. This method is aimed for r-polars extensions,   and will be kept stable as much as possible (#504).</li> <li>New functions <code>pl$min_horizontal()</code>, <code>pl$max_horizontal()</code>, <code>pl$sum_horizontal()</code>,   <code>pl$all_horizontal()</code>, <code>pl$any_horizontal()</code> (#508).</li> <li>New generic functions <code>as_polars_df()</code> and <code>as_polars_lf()</code> to create polars   DataFrames and LazyFrames (#519).</li> <li>New method <code>$ungroup()</code> for <code>GroupBy</code> and <code>LazyGroupBy</code> (#522).</li> <li>New method <code>$rolling()</code> to apply an Expr over a rolling window based on   date/datetime/numeric indices (#470).</li> <li>New methods <code>$name$to_lowercase()</code> and <code>$name$to_uppercase()</code> to transform   variable names (#529).</li> <li>New method <code>$is_last_distinct()</code> (#531).</li> <li>New methods of the Expressions class, <code>$floor_div()</code>, <code>$mod()</code>, <code>$eq_missing()</code>   and <code>$neq_missing()</code>. The base R operators <code>%/%</code> and <code>%%</code> for Expressions are   now translated to <code>$floor_div()</code> and <code>$mod()</code> (#523).<ul> <li>Note that <code>$mod()</code> of Polars is different from the R operator <code>%%</code>, which is   not guaranteed <code>x == (x %% y) + y * (x %/% y)</code>.   Please check the upstream issue pola-rs/polars#10570.</li> </ul> </li> <li>The extract function (<code>[</code>) for polars objects now behave more like for base R objects (#543).</li> </ul>"},{"location":"NEWS.html#polars-r-package-0101","title":"Polars R Package 0.10.1","text":""},{"location":"NEWS.html#whats-changed_3","title":"What's changed","text":"<ul> <li>The argument <code>quote_style</code> in <code>$write_csv()</code> and <code>$sink_csv()</code> can now take   the value <code>\"never\"</code> (#483).</li> <li><code>pl$DataFrame()</code> now errors if the variables specified in <code>schema</code> do not exist   in the data (#486).</li> <li>S3 methods for base R functions are well documented (#494).</li> <li>A bug that failing <code>pl$SQLContext()$register()</code> without load the package was fixed (#496).</li> </ul>"},{"location":"NEWS.html#polars-r-package-0100","title":"Polars R Package 0.10.0","text":""},{"location":"NEWS.html#breaking-changes-due-to-rust-polars-update_5","title":"BREAKING CHANGES DUE TO RUST-POLARS UPDATE","text":"<ul> <li>rust-polars is updated to 2023-10-25 unreleased version (#442)<ul> <li>Minimum supported Rust version (MSRV) is now 1.73.</li> <li>New subnamespace <code>\"name\"</code> that contains methods <code>$prefix()</code>, <code>$suffix()</code> <code>keep()</code> (renamed from <code>keep_name()</code>) and <code>map()</code> (renamed from <code>map_alias()</code>).</li> <li><code>$dt$round()</code> gains an argument <code>ambiguous</code>.</li> <li>The following methods now accept an <code>Expr</code> as input: <code>$top_k()</code>, <code>$bottom_k()</code>,   <code>$list$join()</code>, <code>$str$strip_chars()</code>, <code>$str$strip_chars_start()</code>,   <code>$str$strip_chars_end()</code>, <code>$str$split_exact()</code>.</li> <li>The following methods were renamed:<ul> <li><code>$str$n_chars()</code> -&gt; <code>$str$len_chars()</code></li> <li><code>$str$lengths()</code> -&gt; <code>$str$len_bytes()</code></li> <li><code>$str$ljust()</code> -&gt; <code>$str$pad_end()</code></li> <li><code>$str$rjust()</code> -&gt; <code>$str$pad_start()</code></li> </ul> </li> <li><code>$concat()</code> with <code>how = \"diagonal\"</code> now accepts an argument <code>to_supertypes</code>   to automatically convert concatenated columns to the same type.</li> <li><code>pl$enable_string_cache()</code> doesn't take any argument anymore. The string cache   can now be disabled with <code>pl$disable_string_cache()</code>.</li> <li><code>$scan_parquet()</code> gains an argument <code>hive_partitioning</code>.</li> <li><code>$meta$tree_format()</code> has a better formatted output.</li> </ul> </li> </ul>"},{"location":"NEWS.html#breaking-changes_2","title":"Breaking changes","text":"<ul> <li><code>$scan_csv()</code> and <code>$read_csv()</code> now match more closely the Python-Polars API (#455):<ul> <li><code>sep</code> is renamed <code>separator</code>, <code>overwrite_dtypes</code> is renamed <code>dtypes</code>,   <code>parse_dates</code> is renamed <code>try_parse_dates</code>.</li> <li>new arguments <code>rechunk</code>, <code>eol_char</code>, <code>raise_if_empty</code>, <code>truncate_ragged_lines</code></li> <li><code>path</code> can now be a vector of characters indicating several paths to CSV files.   This only works if all CSV files have the same schema.</li> </ul> </li> </ul>"},{"location":"NEWS.html#whats-changed_4","title":"What's changed","text":"<ul> <li>New class <code>RPolarsSQLContext</code> and its methods to perform SQL queries on DataFrame-   like objects. To use this feature, needs to build Rust library with full features   (#457).</li> <li>New methods <code>$peak_min()</code> and <code>$peak_max()</code> to find local minima and maxima in   an Expr (#462).</li> <li>New methods <code>$read_ndjson()</code> and <code>$scan_ndjson()</code> (#471).</li> <li>New method <code>$with_context()</code> for <code>LazyFrame</code> to have access to columns from   other Data/LazyFrames during the computation (#475).</li> </ul>"},{"location":"NEWS.html#polars-r-package-090","title":"Polars R Package 0.9.0","text":""},{"location":"NEWS.html#breaking-changes-due-to-rust-polars-update_6","title":"BREAKING CHANGES DUE TO RUST-POLARS UPDATE","text":"<ul> <li>rust-polars is updated to 0.33.2 (#417)<ul> <li>In all date-time related methods, the argument <code>use_earliest</code> is replaced by <code>ambiguous</code>.</li> <li>In <code>$sample()</code> and <code>$shuffle()</code>, the argument <code>fixed_seed</code> is removed.</li> <li>In <code>$value_counts()</code>, the arguments <code>multithreaded</code> and <code>sort</code>   (sometimes called <code>sorted</code>) have been swapped and renamed <code>sort</code> and <code>parallel</code>.</li> <li><code>$str$count_match()</code> gains a <code>literal</code> argument.</li> <li><code>$arg_min()</code> doesn't consider <code>NA</code> as the minimum anymore (this was already the behavior of <code>$min()</code>).</li> <li>Using <code>$is_in()</code> with <code>NA</code> on both sides now returns <code>NA</code> and not <code>TRUE</code> anymore.</li> <li>Argument <code>pattern</code> of <code>$str$count_matches()</code> can now use expressions.</li> <li>Needs Rust toolchain <code>nightly-2023-08-26</code> for to build with full features.</li> </ul> </li> <li>Rename R functions to match rust-polars<ul> <li><code>$str$count_match()</code> -&gt; <code>$str$count_matches()</code> (#417)</li> <li><code>$str$strip()</code> -&gt; <code>$str$strip_chars()</code> (#417)</li> <li><code>$str$lstrip()</code> -&gt; <code>$str$strip_chars_start()</code> (#417)</li> <li><code>$str$rstrip()</code> -&gt; <code>$str$strip_chars_end()</code> (#417)</li> <li><code>$groupby()</code> is renamed <code>$group_by()</code>. (#427)</li> </ul> </li> </ul>"},{"location":"NEWS.html#breaking-changes_3","title":"Breaking changes","text":"<ul> <li>Remove some deprecated methods.<ul> <li>Method <code>$with_column()</code> has been removed (it was deprecated since 0.8.0).   Use <code>$with_columns()</code> instead (#402).</li> <li>Subnamespace <code>$arr</code> has been removed (it was deprecated since 0.8.1).   Use <code>$list</code> instead (#402).</li> </ul> </li> <li>Setting and getting polars options is now made with <code>pl$options</code>,   <code>pl$set_options()</code> and <code>pl$reset_options()</code> (#384).</li> </ul>"},{"location":"NEWS.html#whats-changed_5","title":"What's changed","text":"<ul> <li>Bump supported R version to 4.2 or later (#435).</li> <li><code>pl$concat()</code> now also supports <code>Series</code>, <code>Expr</code> and <code>LazyFrame</code> (#407).</li> <li>New method <code>$unnest()</code> for <code>LazyFrame</code> (#397).</li> <li>New method <code>$sample()</code> for <code>DataFrame</code> (#399).</li> <li>New method <code>$meta$tree_format()</code> to display an <code>Expr</code> as a tree (#401).</li> <li>New argument <code>schema</code> in <code>pl$DataFrame()</code> and <code>pl$LazyFrame()</code> to override the   automatic type detection (#385).</li> <li>Fix bug when calling R from polars via e.g. <code>$map()</code> where query would not   complete in one edge case (#409).</li> <li>New method <code>$cat$get_categories()</code> to list unique values of categorical   variables (#412).</li> <li>New methods <code>$fold()</code> and <code>$reduce()</code> to apply an R function rowwise (#403).</li> <li>New function <code>pl$raw_list</code> and class <code>rpolars_raw_list</code> a list of R Raw's, where missing is   encoded as <code>NULL</code> to aid conversion to polars binary Series. Support back and forth conversion   from polars binary literal and Series to R raw (#417).</li> <li>New method <code>$write_csv()</code> for <code>DataFrame</code> (#414).</li> <li>New method <code>$sink_csv()</code> for <code>LazyFrame</code> (#432).</li> <li>New method <code>$dt$time()</code> to extract the time from a <code>datetime</code> variable (#428).</li> <li>Method <code>$profile()</code> gains optimization arguments and plot-related arguments (#429).</li> <li>New method <code>pl$read_parquet()</code> that is a shortcut for <code>pl$scan_parquet()$collect()</code> (#434).</li> <li>Rename <code>$str$str_explode()</code> to <code>$str$explode()</code> (#436).</li> <li>New method <code>$transpose()</code> for <code>DataFrame</code> (#440).</li> <li>New argument <code>eager</code> of <code>LazyFrame$set_optimization_toggle()</code> (#439).</li> <li> <p><code>{polars}</code> can now be installed with \"R source package with Rust library binary\",   by a mechanism copied from the prqlr package.</p> <pre><code>Sys.setenv(NOT_CRAN = \"true\")\ninstall.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\")\n</code></pre> <p>The URL and SHA256 hash of the available binaries are recorded in <code>tools/lib-sums.tsv</code>. (#435, #448, #450, #451)</p> </li> </ul>"},{"location":"NEWS.html#polars-r-package-081","title":"Polars R Package 0.8.1","text":""},{"location":"NEWS.html#whats-changed_6","title":"What's changed","text":"<ul> <li>New string method <code>to_titlecase()</code> (#371).</li> <li>Although stated in news for PR (#334) <code>strip = true</code> was not actually set for the   \"release-optimized\" compilation profile. Now it is, but the binary sizes seems unchanged (#377).</li> <li>New vignette on best practices to improve <code>polars</code> performance (#188).</li> <li>Subnamespace name \"arr\" as in <code>&lt;Expr&gt;$arr$</code> &amp; <code>&lt;Series&gt;$arr$</code> is deprecated   in favor of \"list\". The subnamespace \"arr\" will be removed in polars 0.9.0 (#375).</li> </ul>"},{"location":"NEWS.html#polars-r-package-080","title":"Polars R Package 0.8.0","text":""},{"location":"NEWS.html#breaking-changes-due-to-rust-polars-update_7","title":"BREAKING CHANGES DUE TO RUST-POLARS UPDATE","text":"<p>rust-polars was updated to 0.32.0, which comes with many breaking changes and new features. Unrelated breaking changes and new features are put in separate sections (#334):</p> <ul> <li>update of rust toolchain: nightly bumped to nightly-2023-07-27 and MSRV is   now &gt;=1.70.</li> <li>param <code>common_subplan_elimination = TRUE</code> in <code>&lt;LazyFrame&gt;</code> methods <code>$collect()</code>,   <code>$sink_ipc()</code> and <code>$sink_parquet()</code> is renamed and split into   <code>comm_subplan_elim = TRUE</code> and <code>comm_subexpr_elim = TRUE</code>.</li> <li>Series_is_sorted: nulls_last argument is dropped.</li> <li><code>when-then-otherwise</code> classes are renamed to <code>When</code>, <code>Then</code>, <code>ChainedWhen</code>   and <code>ChainedThen</code>. The syntactically illegal methods have been removed, e.g.   chaining <code>$when()</code> twice.</li> <li>Github release + R-universe is compiled with <code>profile=release-optimized</code>,   which now includes <code>strip=false</code>, <code>lto=fat</code> &amp; <code>codegen-units=1</code>. This should   make the binary a bit smaller and faster. See also FULL_FEATURES=<code>true</code> env   flag to enable simd with nightly rust. For development or faster compilation,   use instead <code>profile=release</code>.</li> <li><code>fmt</code> arg is renamed <code>format</code> in <code>pl$Ptimes</code> and <code>&lt;Expr&gt;$str$strptime</code>.</li> <li><code>&lt;Expr&gt;$approx_unique()</code> changed name to <code>&lt;Expr&gt;$approx_n_unique()</code>.</li> <li><code>&lt;Expr&gt;$str$json_extract</code> arg <code>pat</code> changed to <code>dtype</code> and has a new argument   <code>infer_schema_length = 100</code>.</li> <li>Some arguments in <code>pl$date_range()</code> have changed: <code>low</code> -&gt; <code>start</code>,   <code>high</code> -&gt; <code>end</code>, <code>lazy = TRUE</code> -&gt; <code>eager = FALSE</code>. Args <code>time_zone</code> and <code>time_unit</code>   can no longer be used to implicitly cast time types. These two args can only   be used to annotate a naive time unit. Mixing <code>time_zone</code> and <code>time_unit</code> for   <code>start</code> and <code>end</code> is not allowed anymore.</li> <li><code>&lt;Expr&gt;$is_in()</code> operation no longer supported for dtype <code>null</code>.</li> <li>Various subtle changes:<ul> <li><code>(pl$lit(NA_real_) == pl$lit(NA_real_))$lit_to_s()</code> renders now to <code>null</code>   not <code>true</code>.</li> <li><code>pl$lit(NA_real_)$is_in(pl$lit(NULL))$lit_to_s()</code> renders now to <code>false</code>   and before <code>true</code></li> <li><code>pl$lit(numeric(0))$sum()$lit_to_s()</code> now yields <code>0f64</code> and not <code>null</code>.</li> </ul> </li> <li><code>&lt;Expr&gt;$all()</code> and <code>&lt;Expr&gt;$any()</code> have a new arg <code>drop_nulls = TRUE</code>.</li> <li><code>&lt;Expr&gt;$sample()</code> and <code>&lt;Expr&gt;$shuffle()</code> have a new arg <code>fix_seed</code>.</li> <li><code>&lt;DataFrame&gt;$sort()</code> and <code>&lt;LazyFrame&gt;$sort()</code> have a new arg   <code>maintain_order = FALSE</code>.</li> </ul>"},{"location":"NEWS.html#other-breaking-changes_3","title":"OTHER BREAKING CHANGES","text":"<ul> <li><code>$rpow()</code> is removed. It should never have been translated. Use <code>^</code> and <code>$pow()</code>   instead (#346).</li> <li><code>&lt;LazyFrame&gt;$collect_background()</code> renamed <code>&lt;LazyFrame&gt;$collect_in_background()</code>   and reworked. Likewise <code>PolarsBackgroundHandle</code> reworked and renamed to   <code>RThreadHandle</code> (#311).</li> <li><code>pl$scan_arrow_ipc</code> is now called <code>pl$scan_ipc</code> (#343).</li> </ul>"},{"location":"NEWS.html#other-changes","title":"Other changes","text":"<ul> <li>Stream query to file with <code>pl$sink_ipc()</code> and <code>pl$sink_parquet()</code> (#343)</li> <li>New method <code>$explode()</code> for <code>DataFrame</code> and <code>LazyFrame</code> (#314).</li> <li>New method <code>$clone()</code> for <code>LazyFrame</code> (#347).</li> <li>New method <code>$fetch()</code> for <code>LazyFrame</code> (#319).</li> <li>New methods <code>$optimization_toggle()</code> and <code>$profile()</code> for <code>LazyFrame</code> (#323).</li> <li><code>$with_column()</code> is now deprecated (following upstream <code>polars</code>). It will be   removed in 0.9.0. It should be replaced with <code>$with_columns()</code> (#313).</li> <li>New lazy function translated: <code>concat_str()</code> to concatenate several columns   into one (#349).</li> <li>New stat functions <code>pl$cov()</code>, <code>pl$rolling_cov()</code> <code>pl$corr()</code>, <code>pl$rolling_corr()</code> (#351).</li> <li>Add functions <code>pl$set_global_rpool_cap()</code>, <code>pl$get_global_rpool_cap()</code>, class <code>RThreadHandle</code> and   <code>in_background = FALSE</code> param to <code>&lt;Expr&gt;$map()</code> and <code>$apply()</code>. It is now possible to run R code   with <code>&lt;LazyFrame&gt;collect_in_background()</code> and/or let polars parallize R code in an R processes   pool. See <code>RThreadHandle-class</code> in reference docs for more info. (#311)</li> <li>Internal IPC/shared-mem channel to serialize and send R objects / polars DataFrame across   R processes. (#311)</li> <li>Compile environment flag RPOLARS_ALL_FEATURES changes name to RPOLARS_FULL_FEATURES. If 'true'   will trigger something like <code>Cargo build --features \"full_features\"</code> which is not exactly the same   as <code>Cargo build --all-features</code>. Some dev features are not included in \"full_features\" (#311).</li> <li>Fix bug to allow using polars without library(polars) (#355).</li> <li>New methods <code>&lt;LazyFrame&gt;$optimization_toggle()</code> + <code>$profile()</code> and enable rust-polars feature   CSE: \"Activate common subplan elimination optimization\" (#323)</li> <li>Named expression e.g. <code>pl$select(newname = pl$lit(2))</code> are no longer experimental   and allowed as default (#357).</li> <li>Added methods <code>pl$enable_string_cache()</code>, <code>pl$with_string_cache()</code> and <code>pl$using_string_cache()</code>   for joining/comparing Categorical series/columns (#361).</li> <li>Added an S3 generic <code>as_polars_series()</code> where users or developers of extensions   can define a custom way to convert their format to Polars format. This generic   must return a Polars series. See #368 for an example (#369).</li> <li>Private API Support for Arrow Stream import/export of DataFrame between two R packages that uses   rust-polars. See R package example here   (#326).</li> </ul>"},{"location":"NEWS.html#polars-r-package-070","title":"Polars R Package 0.7.0","text":""},{"location":"NEWS.html#breaking-changes_4","title":"BREAKING CHANGES","text":"<ul> <li>Replace the argument <code>reverse</code> by <code>descending</code> in all sorting functions. This   is for consistency with the upstream Polars (#291, #293).</li> <li>Bump rust-polars from 2023-04-20 unreleased version to version 0.30.0 released in 2023-05-30 (#289).<ul> <li>Rename <code>concat_lst</code> to <code>concat_list</code>.</li> <li>Rename <code>$str$explode</code> to <code>$str$str_explode</code>.</li> <li>Remove <code>tz_aware</code> and <code>utc</code> arguments from <code>str_parse</code>.</li> <li>in <code>$date_range</code>'s the <code>lazy</code> argument is now <code>TRUE</code> by default.</li> </ul> </li> <li>The functions to read CSV have been renamed <code>scan_csv</code> and <code>read_csv</code> for   consistency with the upstream Polars. <code>scan_xxx</code> and <code>read_xxx</code> functions are now accessed via <code>pl</code>,   e.g. <code>pl$scan_csv()</code> (#305).</li> </ul>"},{"location":"NEWS.html#whats-changed_7","title":"What's changed","text":"<ul> <li>New method <code>$rename()</code> for <code>LazyFrame</code> and <code>DataFrame</code> (#239)</li> <li><code>&lt;DataFrame&gt;$unique()</code> and <code>&lt;LazyFrame&gt;$unique()</code> gain a <code>maintain_order</code> argument (#238).</li> <li>New <code>pl$LazyFrame()</code> to quickly create a <code>LazyFrame</code>, mostly in examples or   for demonstration purposes (#240).</li> <li>Polars is internally moving away from string errors to a new error-type called <code>RPolarsErr</code> both on rust- and R-side. Final error messages should look very similar (#233).</li> <li><code>$columns()</code>, <code>$schema()</code>, <code>$dtypes()</code> for <code>LazyFrame</code> implemented (#250).</li> <li>Improvements to internal <code>RPolarsErr</code>. Also <code>RPolarsErr</code> will now print each context of the error on a separate line (#250).</li> <li>Fix memory leak on error bug. Fix printing of <code>%</code> bug. Prepare for renaming of polars classes (#252).</li> <li>Add helpful reference landing page at <code>polars.github.io/reference_home</code> (#223, #264).</li> <li>Supports Rust 1.65 (#262, #280)<ul> <li>rust-polars' <code>simd</code> feature is now disabled by default. To enable it, set the environment variable   <code>RPOLARS_ALL_FEATURES</code> to <code>true</code> when build r-polars (#262).</li> <li><code>opt-level</code> of <code>argminmax</code> is now set to <code>1</code> in the <code>release</code> profile to support Rust &lt; 1.66.   The profile can be changed by setting the environment variable <code>RPOLARS_PROFILE</code> (when set to <code>release-optimized</code>,   <code>opt-level</code> of <code>argminmax</code> is set to <code>3</code>).</li> </ul> </li> <li>A new function <code>pl$polars_info()</code> will tell which features enabled (#271, #285, #305).</li> <li><code>select()</code> now accepts lists of expressions. For example, <code>&lt;DataFrame&gt;$select(l_expr)</code>   works with <code>l_expr = list(pl$col(\"a\"))</code> (#265).</li> <li>LazyFrame gets some new S3 methods: <code>[</code>, <code>dim()</code>, <code>dimnames()</code>, <code>length()</code>, <code>names()</code> (#301)</li> <li><code>&lt;DataFrame&gt;$glimpse()</code> is a fast <code>str()</code>-like view of a <code>DataFrame</code> (#277).</li> <li><code>$over()</code> now accepts a vector of column names (#287).</li> <li>New method <code>&lt;DataFrame&gt;$describe()</code> (#268).</li> <li>Cross joining is now possible with <code>how = \"cross\"</code> in <code>$join()</code> (#310).</li> <li>Add license info of all rust crates to <code>LICENSE.note</code> (#309).</li> <li>With CRAN 0.7.0 release candidate (#308).<ul> <li>New author accredited, SHIMA Tatsuya  @eitsupi).</li> <li>DESCRIPTION revised.</li> </ul> </li> </ul>"},{"location":"NEWS.html#polars-r-package-061","title":"Polars R Package 0.6.1","text":""},{"location":"NEWS.html#whats-changed_8","title":"What's changed","text":"<ul> <li>use <code>pl$set_polars_options(debug_polars = TRUE)</code> to profile/debug method-calls of a polars query (#193)</li> <li>add <code>&lt;DataFrame&gt;$melt(), &lt;DataFrame&gt;$pivot() + &lt;LazyFrame&gt;$melt()</code> methods (#232)</li> <li>lazy functions translated: <code>pl$implode</code>, <code>pl$explode</code>, <code>pl$unique</code>, <code>pl$approx_unique</code>, <code>pl$head</code>, <code>pl$tail</code> (#196)</li> <li><code>pl$list</code> is deprecated, use <code>pl$implode</code> instead. (#196)</li> <li>Docs improvements. (#210, #213)</li> <li>Update nix flake. (#227)</li> </ul>"},{"location":"NEWS.html#polars-r-package-060","title":"Polars R Package 0.6.0","text":""},{"location":"NEWS.html#breaking-changes_5","title":"BREAKING CHANGES","text":"<ul> <li>Bump rust-polars from 2023-02-17 unreleased version to 2023-04-20 unreleased version. (#183)<ul> <li><code>top_k</code>'s <code>reverse</code> option is removed. Use the new <code>bottom_k</code> method instead.</li> <li>The name of the <code>fmt</code> argument of some methods (e.g. <code>parse_date</code>) has been changed to <code>format</code>.</li> </ul> </li> </ul>"},{"location":"NEWS.html#whats-changed_9","title":"What's changed","text":"<ul> <li><code>DataFrame</code> objects can be subsetted using brackets like standard R data frames: <code>pl$DataFrame(mtcars)[2:4, c(\"mpg\", \"hp\")]</code> (#140 @vincentarelbundock)</li> <li>An experimental <code>knit_print()</code> method has been added to DataFrame that outputs HTML tables   (similar to py-polars' HTML output) (#125 @eitsupi)</li> <li><code>Series</code> gains new methods: <code>$mean</code>, <code>$median</code>, <code>$std</code>, <code>$var</code> (#170 @vincentarelbundock)</li> <li>A new option <code>use_earliest</code> of <code>replace_time_zone</code>. (#183)</li> <li>A new option <code>strict</code> of <code>parse_int</code>. (#183)</li> <li>Perform joins on nearest keys with method <code>join_asof</code>. (#172)</li> </ul>"},{"location":"NEWS.html#polars-r-package-v050","title":"Polars R Package v0.5.0","text":""},{"location":"NEWS.html#breaking-change","title":"BREAKING CHANGE","text":"<ul> <li>The package name was changed from <code>rpolars</code> to <code>polars</code>. (#84)</li> </ul>"},{"location":"NEWS.html#whats-changed_10","title":"What's changed","text":"<ul> <li>Several new methods for DataFrame, LazyFrame &amp; GroupBy translated (#103, #105 @vincentarelbundock)</li> <li>Doc fixes (#102, #109 @etiennebacher)</li> <li>Experimental opt-in auto completion (#96 @sorhawell)</li> <li>Base R functions work on DataFrame and LazyFrame objects via S3 methods: as.data.frame, as.matrix, dim, head, length, max, mean, median, min, na.omit, names, sum, tail, unique, ncol, nrow (#107 @vincentarelbundock).</li> </ul>"},{"location":"NEWS.html#new-contributors","title":"New Contributors","text":"<ul> <li>@etiennebacher made their first contribution in #102</li> <li>@vincentarelbundock made their first contribution in #103</li> </ul> <p>Release date: 2023-04-16. Full changelog: v0.4.6...v0.5.0</p>"},{"location":"about.html","title":"About","text":""},{"location":"about.html#developers","title":"Developers","text":"<p>The primary developer of the upstream Polars project is Ritchie Vink (@ritchie46). This R port is maintained by S\u00f8ren Welling (@sorhawell) and contributors.</p> <p>Development occurs on Github: https://github.com/pola-rs/r-polars</p> <p>Consider joining our Discord (subchannel) for additional help and discussion.</p> <p>'Polars' is a query engine/syntax for multiple languages. The R specific implementation can be referred to as r-polars and is derived from rust-polars.</p> <p>The polars package for R is published under the MIT license.</p>"},{"location":"about.html#mit-license","title":"MIT License","text":"<p>Copyright (c) 2023 polars authors (polars the R package)</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference_home.html","title":"Reference","text":"<p><code>polars</code> provides a large number of functions for numerous data types and this can sometimes be a bit overwhelming. Overall, you should be able to do anything you want with <code>polars</code> by specifying the data structure you want to use and then by applying expressions in a particular context.</p>"},{"location":"reference_home.html#data-structure","title":"Data structure","text":"<p>As explained in some vignettes, one of <code>polars</code> biggest strengths is the ability to choose between eager and lazy evaluation, that require respectively a <code>DataFrame</code> and a <code>LazyFrame</code> (with their counterparts <code>GroupBy</code> and <code>LazyGroupBy</code> for grouped data).</p> <p>We can apply functions directly on a <code>DataFrame</code> or <code>LazyFrame</code>, such as <code>rename()</code> or <code>drop()</code>. Most functions that can be applied to <code>DataFrame</code>s can also be used on <code>LazyFrame</code>s, but some are specific to one or the other. For example:</p> <ul> <li><code>$equals()</code> exists for <code>DataFrame</code> but not for <code>LazyFrame</code>;</li> <li><code>$collect()</code> executes a lazy query, which means it can only be applied   on a <code>LazyFrame</code>.</li> </ul> <p>Another common data structure is the <code>Series</code>, which can be considered as the equivalent of R vectors in <code>polars</code>\u2019 world. Therefore, a <code>DataFrame</code> is a list of <code>Series</code>.</p> <p>Operations on <code>DataFrame</code> or <code>LazyFrame</code> are useful, but many more operations can be applied on columns themselves by using various expressions in different contexts.</p>"},{"location":"reference_home.html#contexts","title":"Contexts","text":"<p>A context simply is the type of data modification that is done. There are 3 types of contexts:</p> <ul> <li>select and modify columns with <code>select()</code> and <code>with_columns()</code>;</li> <li>filter rows with <code>filter()</code>;</li> <li>group and aggregate rows with <code>group_by()</code> and <code>agg()</code></li> </ul> <p>Inside each context, you can use various expressions (aka. <code>Expr</code>). Some expressions cannot be used in some contexts. For example, in <code>with_columns()</code>, you can only apply expressions that return either the same number of values or a single value that will be duplicated on all rows:</p> <pre><code>test = pl$DataFrame(mtcars)\n</code></pre> <pre><code># this works\ntest$with_columns(\n  pl$col(\"mpg\") + 1\n)\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 23.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 19.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 31.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 16.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 20.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 16.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 22.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># this doesn't work because it returns only 2 values, while mtcars has 32 rows.\ntest$with_columns(\n  pl$col(\"mpg\")$slice(0, 2)\n)\n</code></pre> <p>By contrast, in an <code>agg()</code> context, any number of return values are possible, as they are returned in a list, and only the new columns or the grouping columns are returned.</p> <pre><code>test$group_by(pl$col(\"cyl\"))$agg(\n  pl$col(\"mpg\"), # varying number of values\n  pl$col(\"mpg\")$slice(0, 2)$name$suffix(\"_sliced\"), # two values\n  # aggregated to one value and implicitly unpacks list\n  pl$col(\"mpg\")$sum()$name$suffix(\"_summed\")\n)\n#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg                  \u2506 mpg_sliced   \u2506 mpg_summed \u2502\n#&gt; \u2502 --- \u2506 ---                  \u2506 ---          \u2506 ---        \u2502\n#&gt; \u2502 f64 \u2506 list[f64]            \u2506 list[f64]    \u2506 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 [21.0, 21.0, \u2026 19.7] \u2506 [21.0, 21.0] \u2506 138.2      \u2502\n#&gt; \u2502 8.0 \u2506 [18.7, 14.3, \u2026 15.0] \u2506 [18.7, 14.3] \u2506 211.4      \u2502\n#&gt; \u2502 4.0 \u2506 [22.8, 24.4, \u2026 21.4] \u2506 [22.8, 24.4] \u2506 293.3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference_home.html#expressions","title":"Expressions","text":"<p>Expressions are the building blocks that give all the flexibility we need to modify or create new columns.</p> <p>Two important expressions starters are <code>pl$col()</code> (names a column in the context) and <code>pl$lit()</code> (wraps a literal value or vector/series in an Expr). Most other expression starters are syntactic sugar derived from thereof, e.g.\u00a0<code>pl$sum(_)</code> is actually <code>pl$col(_)$sum()</code>.</p> <p>Expressions can be chained with more than 170 expression methods such as <code>$sum()</code> which aggregates e.g.\u00a0the column with summing.</p> <pre><code># two examples of starting, chaining and combining expressions\npl$DataFrame(a = 1:4)$with_columns(\n  # compute the cosine of column \"a\"\n  a_cos = pl$col(\"a\")$cos()$sin(),\n  # standardize the values of column \"a\"\n  a_stand = (pl$col(\"a\") - pl$col(\"a\")$mean()) / pl$col(\"a\")$std(),\n  # take 1:3, name it, then sum, then multiply by two\n  lit_sum_add_two = pl$lit(1:3)$sum() * 2L\n)\n#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 a_cos     \u2506 a_stand   \u2506 lit_sum_add_two \u2502\n#&gt; \u2502 --- \u2506 ---       \u2506 ---       \u2506 ---             \u2502\n#&gt; \u2502 i32 \u2506 f64       \u2506 f64       \u2506 i32             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 0.514395  \u2506 -1.161895 \u2506 12              \u2502\n#&gt; \u2502 2   \u2506 -0.404239 \u2506 -0.387298 \u2506 12              \u2502\n#&gt; \u2502 3   \u2506 -0.836022 \u2506 0.387298  \u2506 12              \u2502\n#&gt; \u2502 4   \u2506 -0.608083 \u2506 1.161895  \u2506 12              \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Some methods share a common name but their behavior might be very different depending on the input type. For example, <code>$decode()</code> doesn\u2019t do the same thing when it is applied on binary data or on string data.</p> <p>To be able to distinguish those usages and to check the validity of a query, <code>polars</code> stores methods in subnamespaces. For each datatype other than numeric (floats and integers), there is a subnamespace containing the available methods: <code>dt</code> (datetime), <code>list</code> (list), <code>str</code> (strings), <code>struct</code> (structs), <code>cat</code> (categoricals) and <code>bin</code> (binary). As a sidenote, there is also an exotic subnamespace called <code>meta</code> which is rarely used to manipulate the expressions themselves. Each subsection in the \u201cExpressions\u201d section lists all operations available for a specific subnamespace.</p> <p>For a concrete example for <code>dt</code>, suppose we have a column containing dates and that we want to extract the year from these dates:</p> <pre><code># Create the DataFrame\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-01-01\"),\n    as.Date(\"2023-01-02\"),\n    interval = \"1y\"\n  )\n)\ndf\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 date       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 \u2502\n#&gt; \u2502 2021-01-01 \u2502\n#&gt; \u2502 2022-01-01 \u2502\n#&gt; \u2502 2023-01-01 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The function <code>year()</code> only makes sense for date-time data, so we look for functions in the <code>dt</code> subnamespace (for date-time):</p> <pre><code>df$with_columns(\n  year = pl$col(\"date\")$dt$year()\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 year \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2502\n#&gt; \u2502 date       \u2506 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 \u2506 2020 \u2502\n#&gt; \u2502 2021-01-01 \u2506 2021 \u2502\n#&gt; \u2502 2022-01-01 \u2506 2022 \u2502\n#&gt; \u2502 2023-01-01 \u2506 2023 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Similarly, to convert a string column to uppercase, we use the <code>str</code> prefix before using <code>to_uppercase()</code>:</p> <pre><code># Create the DataFrame\npl$DataFrame(foo = c(\"jake\", \"mary\", \"john peter\"))$\n  with_columns(upper = pl$col(\"foo\")$str$to_uppercase())\n#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo        \u2506 upper      \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2502\n#&gt; \u2502 str        \u2506 str        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 jake       \u2506 JAKE       \u2502\n#&gt; \u2502 mary       \u2506 MARY       \u2502\n#&gt; \u2502 john peter \u2506 JOHN PETER \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_class.html","title":"Inner workings of the DataFrame-class","text":""},{"location":"man/DataFrame_class.html#description","title":"Description","text":"<p>The <code>DataFrame</code>-class is simply two environments of respectively the public and private methods/function calls to the polars Rust side. The instantiated <code>DataFrame</code>-object is an <code>externalptr</code> to a low-level Rust polars DataFrame object.</p> <p>The S3 method <code>.DollarNames.RPolarsDataFrame</code> exposes all public <code>$foobar()</code>-methods which are callable onto the object. Most methods return another <code>DataFrame</code>- class instance or similar which allows for method chaining. This class system could be called \"environment classes\" (in lack of a better name) and is the same class system <code>extendr</code> provides, except here there are both a public and private set of methods. For implementation reasons, the private methods are external and must be called from <code>.pr$DataFrame$methodname()</code>. Also, all private methods must take any <code>self</code> as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications.</p>"},{"location":"man/DataFrame_class.html#details","title":"Details","text":"<p>Check out the source code in R/dataframe_frame.R to see how public methods are derived from private methods. Check out extendr-wrappers.R to see the <code>extendr</code>-auto-generated methods. These are moved to <code>.pr</code> and converted into pure external functions in after-wrappers.R. In zzz.R (named <code>zzz</code> to be last file sourced) the <code>extendr</code>-methods are removed and replaced by any function prefixed <code>DataFrame_</code>.</p>"},{"location":"man/DataFrame_class.html#active-bindings","title":"Active bindings","text":"columns  <p><code>$columns</code> returns a character vector with the column names.</p>  dtypes  <p><code>$dtypes</code> returns a unnamed list with the data type of each column.</p>  flags  <p><code>$flags</code> returns a nested list with column names at the top level and column flags in each sublist.</p> <p>Flags are used internally to avoid doing unnecessary computations, such as sorting a variable that we know is already sorted. The number of flags varies depending on the column type: columns of type <code>array</code> and <code>list</code> have the flags <code>SORTED_ASC</code>, <code>SORTED_DESC</code>, and <code>FAST_EXPLODE</code>, while other column types only have the former two.</p> <ul> <li> <code>SORTED_ASC</code> is set to <code>TRUE</code> when we sort a column in increasing order, so that we can use this information later on to avoid re-sorting it.  </li> <li> <code>SORTED_DESC</code> is similar but applies to sort in decreasing order.  </li> </ul>  height  <p><code>$height</code> returns the number of rows in the DataFrame.</p>  schema  <p><code>$schema</code> returns a named list with the data type of each column.</p>  shape  <p><code>$shape</code> returns a numeric vector of length two with the number of rows and the number of columns.</p>  width  <p><code>$width</code> returns the number of columns in the DataFrame.</p>"},{"location":"man/DataFrame_class.html#conversion-to-r-data-types-considerations","title":"Conversion to R data types considerations","text":"<p>When converting Polars objects, such as DataFrames to R objects, for example via the <code>as.data.frame()</code> generic function, each type in the Polars object is converted to an R type. In some cases, an error may occur because the conversion is not appropriate. In particular, there is a high possibility of an error when converting a Datetime type without a time zone. A Datetime type without a time zone in Polars is converted to the POSIXct type in R, which takes into account the time zone in which the R session is running (which can be checked with the <code>Sys.timezone()</code> function). In this case, if ambiguous times are included, a conversion error will occur. In such cases, change the session time zone using <code>Sys.setenv(TZ = \"UTC\")</code> and then perform the conversion, or use the <code>$dt$replace_time_zone()</code> method on the Datetime type column to explicitly specify the time zone before conversion.</p> <pre># Due to daylight savings, clocks were turned forward 1 hour on Sunday, March 8, 2020, 2:00:00 am\n# so this particular date-time doesn't exist\nnon_existent_time = as_polars_series(\"2020-03-08 02:00:00\")\\$str\\$strptime(pl\\$Datetime(), \"%F %T\")\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    tryCatch(\n      # This causes an error due to the time zone (the `TZ` env var is affected).\n      as.vector(non_existent_time),\n      error = function(e) e\n    )\n  }\n)\n#&gt; &lt;error: in to_r: ComputeError(ErrString(\"datetime '2020-03-08 02:00:00' is non-existent in time zone 'America/New_York'. You may be able to use `non_existent='null'` to return `null` in this case.\")) When calling: devtools::document()&gt;\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    # This is safe.\n    as.vector(non_existent_time\\$dt\\$replace_time_zone(\"UTC\"))\n  }\n)\n#&gt; [1] \"2020-03-08 02:00:00 UTC\"\n</pre>"},{"location":"man/DataFrame_class.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# see all public exported method names (normally accessed via a class\n# instance with $)\nls(.pr$env$RPolarsDataFrame)\n</code></pre> <pre><code>#&gt;  [1] \"clone\"            \"columns\"          \"describe\"         \"drop\"            \n#&gt;  [5] \"drop_in_place\"    \"drop_nulls\"       \"dtype_strings\"    \"dtypes\"          \n#&gt;  [9] \"equals\"           \"estimated_size\"   \"explode\"          \"fill_nan\"        \n#&gt; [13] \"fill_null\"        \"filter\"           \"first\"            \"flags\"           \n#&gt; [17] \"get_column\"       \"get_columns\"      \"glimpse\"          \"group_by\"        \n#&gt; [21] \"group_by_dynamic\" \"head\"             \"height\"           \"item\"            \n#&gt; [25] \"join\"             \"join_asof\"        \"last\"             \"lazy\"            \n#&gt; [29] \"limit\"            \"max\"              \"mean\"             \"median\"          \n#&gt; [33] \"melt\"             \"min\"              \"n_chunks\"         \"null_count\"      \n#&gt; [37] \"partition_by\"     \"pivot\"            \"print\"            \"quantile\"        \n#&gt; [41] \"rechunk\"          \"rename\"           \"reverse\"          \"rolling\"         \n#&gt; [45] \"sample\"           \"schema\"           \"select\"           \"shape\"           \n#&gt; [49] \"shift\"            \"shift_and_fill\"   \"slice\"            \"sort\"            \n#&gt; [53] \"std\"              \"sum\"              \"tail\"             \"to_data_frame\"   \n#&gt; [57] \"to_list\"          \"to_series\"        \"to_struct\"        \"transpose\"       \n#&gt; [61] \"unique\"           \"unnest\"           \"var\"              \"width\"           \n#&gt; [65] \"with_columns\"     \"with_row_index\"   \"write_csv\"        \"write_json\"      \n#&gt; [69] \"write_ndjson\"     \"write_parquet\"\n</code></pre> <pre><code># see all private methods (not intended for regular use)\nls(.pr$DataFrame)\n</code></pre> <pre><code>#&gt;  [1] \"clone_in_rust\"             \"columns\"                  \n#&gt;  [3] \"default\"                   \"drop_all_in_place\"        \n#&gt;  [5] \"drop_in_place\"             \"dtype_strings\"            \n#&gt;  [7] \"dtypes\"                    \"equals\"                   \n#&gt;  [9] \"estimated_size\"            \"export_stream\"            \n#&gt; [11] \"from_arrow_record_batches\" \"get_column\"               \n#&gt; [13] \"get_columns\"               \"lazy\"                     \n#&gt; [15] \"melt\"                      \"n_chunks\"                 \n#&gt; [17] \"new_with_capacity\"         \"null_count\"               \n#&gt; [19] \"partition_by\"              \"pivot_expr\"               \n#&gt; [21] \"print\"                     \"rechunk\"                  \n#&gt; [23] \"sample_frac\"               \"sample_n\"                 \n#&gt; [25] \"schema\"                    \"select\"                   \n#&gt; [27] \"select_at_idx\"             \"set_column_from_robj\"     \n#&gt; [29] \"set_column_from_series\"    \"set_column_names_mut\"     \n#&gt; [31] \"shape\"                     \"to_list\"                  \n#&gt; [33] \"to_list_tag_structs\"       \"to_list_unwind\"           \n#&gt; [35] \"to_struct\"                 \"transpose\"                \n#&gt; [37] \"unnest\"                    \"with_columns\"             \n#&gt; [39] \"with_row_index\"            \"write_csv\"                \n#&gt; [41] \"write_json\"                \"write_ndjson\"             \n#&gt; [43] \"write_parquet\"\n</code></pre> <pre><code># make an object\ndf = as_polars_df(iris)\n\n# call an active binding\ndf$shape\n</code></pre> <pre><code>#&gt; [1] 150   5\n</code></pre> <pre><code># use a private method, which has mutability\nresult = .pr$DataFrame$set_column_from_robj(df, 150:1, \"some_ints\")\n\n# Column exists in both dataframes-objects now, as they are just pointers to\n# the same object\n# There are no public methods with mutability.\ndf2 = df\n\ndf$columns\n</code></pre> <pre><code>#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n#&gt; [6] \"some_ints\"\n</code></pre> <pre><code>df2$columns\n</code></pre> <pre><code>#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n#&gt; [6] \"some_ints\"\n</code></pre> <pre><code># Show flags\ndf$sort(\"Sepal.Length\")$flags\n</code></pre> <pre><code>#&gt; $Sepal.Length\n#&gt; $Sepal.Length$SORTED_ASC\n#&gt; [1] TRUE\n#&gt; \n#&gt; $Sepal.Length$SORTED_DESC\n#&gt; [1] FALSE\n#&gt; \n#&gt; \n#&gt; $Sepal.Width\n#&gt; $Sepal.Width$SORTED_ASC\n#&gt; [1] FALSE\n#&gt; \n#&gt; $Sepal.Width$SORTED_DESC\n#&gt; [1] FALSE\n#&gt; \n#&gt; \n#&gt; $Petal.Length\n#&gt; $Petal.Length$SORTED_ASC\n#&gt; [1] FALSE\n#&gt; \n#&gt; $Petal.Length$SORTED_DESC\n#&gt; [1] FALSE\n#&gt; \n#&gt; \n#&gt; $Petal.Width\n#&gt; $Petal.Width$SORTED_ASC\n#&gt; [1] FALSE\n#&gt; \n#&gt; $Petal.Width$SORTED_DESC\n#&gt; [1] FALSE\n#&gt; \n#&gt; \n#&gt; $Species\n#&gt; $Species$SORTED_ASC\n#&gt; [1] FALSE\n#&gt; \n#&gt; $Species$SORTED_DESC\n#&gt; [1] FALSE\n#&gt; \n#&gt; \n#&gt; $some_ints\n#&gt; $some_ints$SORTED_ASC\n#&gt; [1] FALSE\n#&gt; \n#&gt; $some_ints$SORTED_DESC\n#&gt; [1] FALSE\n</code></pre> <pre><code># set_column_from_robj-method is fallible and returned a result which could\n# be \"ok\" or an error.\n# No public method or function will ever return a result.\n# The `result` is very close to the same as output from functions decorated\n# with purrr::safely.\n# To use results on the R side, these must be unwrapped first such that\n# potentially errors can be thrown. `unwrap(result)` is a way to communicate\n# errors happening on the Rust side to the R side. `Extendr` default behavior\n# is to use `panic!`(s) which would cause some unnecessarily confusing and\n# some very verbose error messages on the inner workings of rust.\n# `unwrap(result)` in this case no error, just a NULL because this mutable\n# method does not return any ok-value.\n\n# Try unwrapping an error from polars due to unmatching column lengths\nerr_result = .pr$DataFrame$set_column_from_robj(df, 1:10000, \"wrong_length\")\ntryCatch(unwrap(err_result, call = NULL), error = \\(e) cat(as.character(e)))\n</code></pre> <pre><code>#&gt; Error in unwrap(err_result, call = NULL): could not find function \"unwrap\"\n</code></pre>"},{"location":"man/DataFrame_clone.html","title":"Clone a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_clone.html#description","title":"Description","text":"<p>This makes a very cheap deep copy/clone of an existing <code>DataFrame</code>. Rarely useful as <code>DataFrame</code>s are nearly 100% immutable. Any modification of a <code>DataFrame</code> should lead to a clone anyways, but this can be useful when dealing with attributes (see examples).</p>"},{"location":"man/DataFrame_clone.html#usage","title":"Usage","text":"<pre><code>DataFrame_clone()\n</code></pre>"},{"location":"man/DataFrame_clone.html#value","title":"Value","text":"<p>A DataFrame</p>"},{"location":"man/DataFrame_clone.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf1 = pl$DataFrame(iris)\n\n# Make a function to take a DataFrame, add an attribute, and return a DataFrame\ngive_attr = function(data) {\n  attr(data, \"created_on\") = \"2024-01-29\"\n  data\n}\ndf2 = give_attr(df1)\n\n# Problem: the original DataFrame also gets the attribute while it shouldn't!\nattributes(df1)\n</code></pre> <pre><code>#&gt; $class\n#&gt; [1] \"RPolarsDataFrame\"\n#&gt; \n#&gt; $created_on\n#&gt; [1] \"2024-01-29\"\n</code></pre> <pre><code># Use $clone() inside the function to avoid that\ngive_attr = function(data) {\n  data = data$clone()\n  attr(data, \"created_on\") = \"2024-01-29\"\n  data\n}\ndf1 = pl$DataFrame(iris)\ndf2 = give_attr(df1)\n\n# now, the original DataFrame doesn't get this attribute\nattributes(df1)\n</code></pre> <pre><code>#&gt; $class\n#&gt; [1] \"RPolarsDataFrame\"\n</code></pre>"},{"location":"man/DataFrame_describe.html","title":"Summary statistics for a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_describe.html#description","title":"Description","text":"<p>This returns the total number of rows, the number of missing values, the mean, standard deviation, min, max, median and the percentiles specified in the argument <code>percentiles</code>.</p>"},{"location":"man/DataFrame_describe.html#usage","title":"Usage","text":"<pre><code>DataFrame_describe(percentiles = c(0.25, 0.75), interpolation = \"nearest\")\n</code></pre>"},{"location":"man/DataFrame_describe.html#arguments","title":"Arguments","text":"<code>percentiles</code>  One or more percentiles to include in the summary statistics. All values must be in the range <code>\\[0; 1\\]</code>.  <code>interpolation</code>  Interpolation method for computing quantiles. One of <code>\u201cnearest\u201d</code>, <code>\u201chigher\u201d</code>, <code>\u201clower\u201d</code>, <code>\u201cmidpoint\u201d</code>, or <code>\u201clinear\u201d</code>."},{"location":"man/DataFrame_describe.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_describe.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$describe()\n</code></pre> <pre><code>#&gt; shape: (9, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 statistic  \u2506 Sepal.Length     \u2506 Sepal.Width      \u2506 Petal.Length    \u2506 Petal.Width     \u2506 Species   \u2502\n#&gt; \u2502 ---        \u2506 ---              \u2506 ---              \u2506 ---             \u2506 ---             \u2506 ---       \u2502\n#&gt; \u2502 str        \u2506 str              \u2506 str              \u2506 str             \u2506 str             \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 count      \u2506 150              \u2506 150              \u2506 150             \u2506 150             \u2506 150       \u2502\n#&gt; \u2502 null_count \u2506 0                \u2506 0                \u2506 0               \u2506 0               \u2506 0         \u2502\n#&gt; \u2502 mean       \u2506 5.84333333333333 \u2506 3.05733333333333 \u2506 3.7579999999999 \u2506 1.1993333333333 \u2506 null      \u2502\n#&gt; \u2502            \u2506 4                \u2506 32               \u2506 996             \u2506 336             \u2506           \u2502\n#&gt; \u2502 std        \u2506 0.82806612797786 \u2506 0.43586628493669 \u2506 1.7652982332594 \u2506 0.7622376689603 \u2506 null      \u2502\n#&gt; \u2502            \u2506 3                \u2506 82               \u2506 664             \u2506 466             \u2506           \u2502\n#&gt; \u2502 min        \u2506 4.3              \u2506 2.0              \u2506 1.0             \u2506 0.1             \u2506 setosa    \u2502\n#&gt; \u2502 25%        \u2506 5.1              \u2506 2.8              \u2506 1.6             \u2506 0.3             \u2506 null      \u2502\n#&gt; \u2502 50%        \u2506 5.8              \u2506 3.0              \u2506 4.4             \u2506 1.3             \u2506 null      \u2502\n#&gt; \u2502 75%        \u2506 6.4              \u2506 3.3              \u2506 5.1             \u2506 1.8             \u2506 null      \u2502\n#&gt; \u2502 max        \u2506 7.9              \u2506 4.4              \u2506 6.9             \u2506 2.5             \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># string, date, boolean columns are also supported:\ndf = pl$DataFrame(\n  int = 1:3,\n  string = c(letters[1:2], NA),\n  date = c(as.Date(\"2024-01-20\"), as.Date(\"2024-01-21\"), NA),\n  cat = factor(c(letters[1:2], NA)),\n  bool = c(TRUE, FALSE, NA)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 int \u2506 string \u2506 date       \u2506 cat  \u2506 bool  \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 ---        \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 i32 \u2506 str    \u2506 date       \u2506 cat  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 a      \u2506 2024-01-20 \u2506 a    \u2506 true  \u2502\n#&gt; \u2502 2   \u2506 b      \u2506 2024-01-21 \u2506 b    \u2506 false \u2502\n#&gt; \u2502 3   \u2506 null   \u2506 null       \u2506 null \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$describe()\n</code></pre> <pre><code>#&gt; shape: (9, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 statistic  \u2506 int \u2506 string \u2506 date       \u2506 cat  \u2506 bool  \u2502\n#&gt; \u2502 ---        \u2506 --- \u2506 ---    \u2506 ---        \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 str        \u2506 str \u2506 str    \u2506 str        \u2506 str  \u2506 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 count      \u2506 3   \u2506 2      \u2506 2          \u2506 2    \u2506 2     \u2502\n#&gt; \u2502 null_count \u2506 0   \u2506 1      \u2506 1          \u2506 1    \u2506 1     \u2502\n#&gt; \u2502 mean       \u2506 2.0 \u2506 null   \u2506 null       \u2506 null \u2506 null  \u2502\n#&gt; \u2502 std        \u2506 1.0 \u2506 null   \u2506 null       \u2506 null \u2506 null  \u2502\n#&gt; \u2502 min        \u2506 1   \u2506 a      \u2506 2024-01-20 \u2506 a    \u2506 false \u2502\n#&gt; \u2502 25%        \u2506 2.0 \u2506 null   \u2506 null       \u2506 null \u2506 null  \u2502\n#&gt; \u2502 50%        \u2506 2.0 \u2506 null   \u2506 null       \u2506 null \u2506 null  \u2502\n#&gt; \u2502 75%        \u2506 3.0 \u2506 null   \u2506 null       \u2506 null \u2506 null  \u2502\n#&gt; \u2502 max        \u2506 3   \u2506 b      \u2506 2024-01-21 \u2506 b    \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_drop.html","title":"Drop columns of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_drop.html#description","title":"Description","text":"<p>Drop columns of a DataFrame</p>"},{"location":"man/DataFrame_drop.html#usage","title":"Usage","text":"<pre><code>DataFrame_drop(...)\n</code></pre>"},{"location":"man/DataFrame_drop.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters of column names to drop. Passed to <code>pl$col()</code>."},{"location":"man/DataFrame_drop.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_drop.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$drop(c(\"mpg\", \"hp\"))\n</code></pre> <pre><code>#&gt; shape: (32, 9)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 disp  \u2506 drat \u2506 wt    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---  \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64   \u2506 f64  \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.62  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.875 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 4.0 \u2506 108.0 \u2506 3.85 \u2506 2.32  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 6.0 \u2506 258.0 \u2506 3.08 \u2506 3.215 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 8.0 \u2506 360.0 \u2506 3.15 \u2506 3.44  \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026     \u2506 \u2026    \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 4.0 \u2506 95.1  \u2506 3.77 \u2506 1.513 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 8.0 \u2506 351.0 \u2506 4.22 \u2506 3.17  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 145.0 \u2506 3.62 \u2506 2.77  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 8.0 \u2506 301.0 \u2506 3.54 \u2506 3.57  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 4.0 \u2506 121.0 \u2506 4.11 \u2506 2.78  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># equivalent\npl$DataFrame(mtcars)$drop(\"mpg\", \"hp\")\n</code></pre> <pre><code>#&gt; shape: (32, 9)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 disp  \u2506 drat \u2506 wt    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---  \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64   \u2506 f64  \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.62  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.875 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 4.0 \u2506 108.0 \u2506 3.85 \u2506 2.32  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 6.0 \u2506 258.0 \u2506 3.08 \u2506 3.215 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 8.0 \u2506 360.0 \u2506 3.15 \u2506 3.44  \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026     \u2506 \u2026    \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 4.0 \u2506 95.1  \u2506 3.77 \u2506 1.513 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 8.0 \u2506 351.0 \u2506 4.22 \u2506 3.17  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 145.0 \u2506 3.62 \u2506 2.77  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 8.0 \u2506 301.0 \u2506 3.54 \u2506 3.57  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 4.0 \u2506 121.0 \u2506 4.11 \u2506 2.78  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_drop_in_place.html","title":"Drop in place","text":"<p>Source code</p>"},{"location":"man/DataFrame_drop_in_place.html#description","title":"Description","text":"<p>Drop a single column in-place and return the dropped column.</p>"},{"location":"man/DataFrame_drop_in_place.html#usage","title":"Usage","text":"<pre><code>DataFrame_drop_in_place(name)\n</code></pre>"},{"location":"man/DataFrame_drop_in_place.html#arguments","title":"Arguments","text":"<code>name</code>  string Name of the column to drop."},{"location":"man/DataFrame_drop_in_place.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/DataFrame_drop_in_place.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat = pl$DataFrame(iris)\nx = dat$drop_in_place(\"Species\")\nx\n</code></pre> <pre><code>#&gt; polars Series: shape: (150,)\n#&gt; Series: 'Species' [cat]\n#&gt; [\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \u2026\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt; ]\n</code></pre> <pre><code>dat$columns\n</code></pre> <pre><code>#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"\n</code></pre>"},{"location":"man/DataFrame_drop_nulls.html","title":"Drop nulls (missing values)","text":"<p>Source code</p>"},{"location":"man/DataFrame_drop_nulls.html#description","title":"Description","text":"<p>Drop all rows that contain nulls (which correspond to <code>NA</code> in R).</p>"},{"location":"man/DataFrame_drop_nulls.html#usage","title":"Usage","text":"<pre><code>DataFrame_drop_nulls(subset = NULL)\n</code></pre>"},{"location":"man/DataFrame_drop_nulls.html#arguments","title":"Arguments","text":"<code>subset</code>  A character vector with the names of the column(s) for which nulls are considered. If <code>NULL</code> (default), use all columns."},{"location":"man/DataFrame_drop_nulls.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_drop_nulls.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ntmp = mtcars\ntmp[1:3, \"mpg\"] = NA\ntmp[4, \"hp\"] = NA\ntmp = pl$DataFrame(tmp)\n\n# number of rows in `tmp` before dropping nulls\ntmp$height\n</code></pre> <pre><code>#&gt; [1] 32\n</code></pre> <pre><code>tmp$drop_nulls()$height\n</code></pre> <pre><code>#&gt; [1] 28\n</code></pre> <pre><code>tmp$drop_nulls(\"mpg\")$height\n</code></pre> <pre><code>#&gt; [1] 29\n</code></pre> <pre><code>tmp$drop_nulls(c(\"mpg\", \"hp\"))$height\n</code></pre> <pre><code>#&gt; [1] 28\n</code></pre>"},{"location":"man/DataFrame_dtype_strings.html","title":"Data types information","text":"<p>Source code</p>"},{"location":"man/DataFrame_dtype_strings.html#description","title":"Description","text":"<p>Get the data type of all columns as strings. You can see all available types with <code>names(pl$dtypes)</code>. The data type of each column is also shown when printing the DataFrame.</p>"},{"location":"man/DataFrame_dtype_strings.html#usage","title":"Usage","text":"<pre><code>DataFrame_dtype_strings()\n</code></pre>"},{"location":"man/DataFrame_dtype_strings.html#value","title":"Value","text":"<p>A character vector with the data type of each column</p>"},{"location":"man/DataFrame_dtype_strings.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$dtype_strings()\n</code></pre> <pre><code>#&gt; [1] \"f64\" \"f64\" \"f64\" \"f64\" \"cat\"\n</code></pre>"},{"location":"man/DataFrame_equals.html","title":"Compare two DataFrames","text":"<p>Source code</p>"},{"location":"man/DataFrame_equals.html#description","title":"Description","text":"<p>Check if two DataFrames are equal.</p>"},{"location":"man/DataFrame_equals.html#usage","title":"Usage","text":"<pre><code>DataFrame_equals(other)\n</code></pre>"},{"location":"man/DataFrame_equals.html#arguments","title":"Arguments","text":"<code>other</code>  DataFrame to compare with."},{"location":"man/DataFrame_equals.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/DataFrame_equals.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat1 = pl$DataFrame(iris)\ndat2 = pl$DataFrame(iris)\ndat3 = pl$DataFrame(mtcars)\ndat1$equals(dat2)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>dat1$equals(dat3)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/DataFrame_estimated_size.html","title":"Estimated size","text":"<p>Source code</p>"},{"location":"man/DataFrame_estimated_size.html#description","title":"Description","text":"<p>Return an estimation of the total (heap) allocated size of the DataFrame.</p>"},{"location":"man/DataFrame_estimated_size.html#usage","title":"Usage","text":"<pre><code>DataFrame_estimated_size()\n</code></pre>"},{"location":"man/DataFrame_estimated_size.html#format","title":"Format","text":"<p>function</p>"},{"location":"man/DataFrame_estimated_size.html#value","title":"Value","text":"<p>Estimated size in bytes</p>"},{"location":"man/DataFrame_estimated_size.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$estimated_size()\n</code></pre> <pre><code>#&gt; [1] 2816\n</code></pre>"},{"location":"man/DataFrame_explode.html","title":"Explode columns containing a list of values","text":"<p>Source code</p>"},{"location":"man/DataFrame_explode.html#description","title":"Description","text":"<p>Explode columns containing a list of values</p>"},{"location":"man/DataFrame_explode.html#usage","title":"Usage","text":"<pre><code>DataFrame_explode(...)\n</code></pre>"},{"location":"man/DataFrame_explode.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Column(s) to be exploded as individual <code>Into\\ or list/vector of <code>Into\\. In a handful of places in rust-polars, only the plain variant <code>Expr::Column</code> is accepted. This is currenly one of such places. Therefore <code>pl$col(\u201cname\u201d)</code> and <code>pl$all()</code> is allowed, not <code>pl$col(\u201cname\u201d)$alias(\u201cnewname\u201d)</code>. <code>\u201cname\u201d</code> is implicitly converted to <code>pl$col(\u201cname\u201d)</code>."},{"location":"man/DataFrame_explode.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_explode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  letters = letters[1:4],\n  numbers = list(1, c(2, 3), c(4, 5), c(6, 7, 8)),\n  numbers_2 = list(0, c(1, 2), c(3, 4), c(5, 6, 7)) # same structure as numbers\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers         \u2506 numbers_2       \u2502\n#&gt; \u2502 ---     \u2506 ---             \u2506 ---             \u2502\n#&gt; \u2502 str     \u2506 list[f64]       \u2506 list[f64]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a       \u2506 [1.0]           \u2506 [0.0]           \u2502\n#&gt; \u2502 b       \u2506 [2.0, 3.0]      \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 c       \u2506 [4.0, 5.0]      \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 d       \u2506 [6.0, 7.0, 8.0] \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># explode a single column, append others\ndf$explode(\"numbers\")\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2       \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---             \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 list[f64]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a       \u2506 1.0     \u2506 [0.0]           \u2502\n#&gt; \u2502 b       \u2506 2.0     \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 b       \u2506 3.0     \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 c       \u2506 4.0     \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 c       \u2506 5.0     \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 d       \u2506 6.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2502 d       \u2506 7.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2502 d       \u2506 8.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># explode two columns of same nesting structure, by names or the common dtype\n# \"List(Float64)\"\ndf$explode(\"numbers\", \"numbers_2\")\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2 \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---       \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a       \u2506 1.0     \u2506 0.0       \u2502\n#&gt; \u2502 b       \u2506 2.0     \u2506 1.0       \u2502\n#&gt; \u2502 b       \u2506 3.0     \u2506 2.0       \u2502\n#&gt; \u2502 c       \u2506 4.0     \u2506 3.0       \u2502\n#&gt; \u2502 c       \u2506 5.0     \u2506 4.0       \u2502\n#&gt; \u2502 d       \u2506 6.0     \u2506 5.0       \u2502\n#&gt; \u2502 d       \u2506 7.0     \u2506 6.0       \u2502\n#&gt; \u2502 d       \u2506 8.0     \u2506 7.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$explode(pl$col(pl$List(pl$Float64)))\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2 \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---       \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a       \u2506 1.0     \u2506 0.0       \u2502\n#&gt; \u2502 b       \u2506 2.0     \u2506 1.0       \u2502\n#&gt; \u2502 b       \u2506 3.0     \u2506 2.0       \u2502\n#&gt; \u2502 c       \u2506 4.0     \u2506 3.0       \u2502\n#&gt; \u2502 c       \u2506 5.0     \u2506 4.0       \u2502\n#&gt; \u2502 d       \u2506 6.0     \u2506 5.0       \u2502\n#&gt; \u2502 d       \u2506 7.0     \u2506 6.0       \u2502\n#&gt; \u2502 d       \u2506 8.0     \u2506 7.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_fill_nan.html","title":"Fill <code>NaN</code>","text":"<p>Source code</p>"},{"location":"man/DataFrame_fill_nan.html#description","title":"Description","text":"<p>Fill <code>NaN</code> values by an Expression evaluation.</p>"},{"location":"man/DataFrame_fill_nan.html#usage","title":"Usage","text":"<pre><code>DataFrame_fill_nan(fill_value)\n</code></pre>"},{"location":"man/DataFrame_fill_nan.html#arguments","title":"Arguments","text":"<code>fill_value</code>  Value to fill <code>NaN</code> with."},{"location":"man/DataFrame_fill_nan.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_fill_nan.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1.5, 2, NaN, 4),\n  b = c(1.5, NaN, NaN, 4)\n)\ndf$fill_nan(99)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_fill_null.html","title":"Fill nulls","text":"<p>Source code</p>"},{"location":"man/DataFrame_fill_null.html#description","title":"Description","text":"<p>Fill null values (which correspond to <code>NA</code> in R) using the specified value or strategy.</p>"},{"location":"man/DataFrame_fill_null.html#usage","title":"Usage","text":"<pre><code>DataFrame_fill_null(fill_value)\n</code></pre>"},{"location":"man/DataFrame_fill_null.html#arguments","title":"Arguments","text":"<code>fill_value</code>  Value to fill nulls with."},{"location":"man/DataFrame_fill_null.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_fill_null.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1.5, 2, NA, 4),\n  b = c(1.5, NA, NA, 4)\n)\n\ndf$fill_null(99)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$fill_null(pl$col(\"a\")$mean())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5 \u2506 1.5 \u2502\n#&gt; \u2502 2.0 \u2506 2.5 \u2502\n#&gt; \u2502 2.5 \u2506 2.5 \u2502\n#&gt; \u2502 4.0 \u2506 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_filter.html","title":"Filter rows of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_filter.html#description","title":"Description","text":"<p>Filter rows with an Expression defining a boolean column. Multiple expressions are combined with <code>&amp;</code> (AND). This is equivalent to <code>dplyr::filter()</code>.</p>"},{"location":"man/DataFrame_filter.html#usage","title":"Usage","text":"<pre><code>DataFrame_filter(...)\n</code></pre>"},{"location":"man/DataFrame_filter.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Polars expressions which will evaluate to a boolean."},{"location":"man/DataFrame_filter.html#details","title":"Details","text":"<p>Rows where the condition returns <code>NA</code> are dropped.</p>"},{"location":"man/DataFrame_filter.html#value","title":"Value","text":"<p>A DataFrame with only the rows where the conditions are <code>TRUE</code>.</p>"},{"location":"man/DataFrame_filter.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris)\n\ndf$filter(pl$col(\"Sepal.Length\") &gt; 5)\n</code></pre> <pre><code>#&gt; shape: (118, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5.4          \u2506 3.9         \u2506 1.7          \u2506 0.4         \u2506 setosa    \u2502\n#&gt; \u2502 5.4          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5.8          \u2506 4.0         \u2506 1.2          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5.7          \u2506 4.4         \u2506 1.5          \u2506 0.4         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># This is equivalent to\n# df$filter(pl$col(\"Sepal.Length\") &gt; 5 &amp; pl$col(\"Petal.Width\") &lt; 1)\ndf$filter(pl$col(\"Sepal.Length\") &gt; 5, pl$col(\"Petal.Width\") &lt; 1)\n</code></pre> <pre><code>#&gt; shape: (22, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.4          \u2506 3.9         \u2506 1.7          \u2506 0.4         \u2506 setosa  \u2502\n#&gt; \u2502 5.4          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.8          \u2506 4.0         \u2506 1.2          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.7          \u2506 4.4         \u2506 1.5          \u2506 0.4         \u2506 setosa  \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026       \u2502\n#&gt; \u2502 5.5          \u2506 3.5         \u2506 1.3          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.1          \u2506 3.4         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.9          \u2506 0.4         \u2506 setosa  \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.6          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.3          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># rows where condition is NA are dropped\niris2 = iris\niris2[c(1, 3, 5), \"Species\"] = NA\ndf = pl$DataFrame(iris2)\n\ndf$filter(pl$col(\"Species\") == \"setosa\")\n</code></pre> <pre><code>#&gt; shape: (47, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.4          \u2506 3.9         \u2506 1.7          \u2506 0.4         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.4         \u2506 1.4          \u2506 0.3         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.4         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026       \u2502\n#&gt; \u2502 4.8          \u2506 3.0         \u2506 1.4          \u2506 0.3         \u2506 setosa  \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.6          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.2         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.3          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.3         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_first.html","title":"Get the first row of the DataFrame.","text":"<p>Source code</p>"},{"location":"man/DataFrame_first.html#description","title":"Description","text":"<p>Get the first row of the DataFrame.</p>"},{"location":"man/DataFrame_first.html#usage","title":"Usage","text":"<pre><code>DataFrame_first()\n</code></pre>"},{"location":"man/DataFrame_first.html#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_first.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$first()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_get_column.html","title":"Get column (as one Series)","text":"<p>Source code</p>"},{"location":"man/DataFrame_get_column.html#description","title":"Description","text":"<p>Extract a DataFrame column as a Polars series.</p>"},{"location":"man/DataFrame_get_column.html#usage","title":"Usage","text":"<pre><code>DataFrame_get_column(name)\n</code></pre>"},{"location":"man/DataFrame_get_column.html#arguments","title":"Arguments","text":"<code>name</code>  Name of the column to extract."},{"location":"man/DataFrame_get_column.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/DataFrame_get_column.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris[1:2, ])\ndf$get_column(\"Species\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: 'Species' [cat]\n#&gt; [\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt; ]\n</code></pre>"},{"location":"man/DataFrame_get_columns.html","title":"Get the DataFrame as a List of Series","text":"<p>Source code</p>"},{"location":"man/DataFrame_get_columns.html#description","title":"Description","text":"<p>Get the DataFrame as a List of Series</p>"},{"location":"man/DataFrame_get_columns.html#usage","title":"Usage","text":"<pre><code>DataFrame_get_columns()\n</code></pre>"},{"location":"man/DataFrame_get_columns.html#value","title":"Value","text":"<p>A list of Series</p>"},{"location":"man/DataFrame_get_columns.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$to_list(): Similar to this method but returns a list of vectors instead of Series."},{"location":"man/DataFrame_get_columns.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = 1L:3L, bar = 4L:6L)\ndf$get_columns()\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; polars Series: shape: (3,)\n#&gt; Series: 'foo' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n#&gt; \n#&gt; [[2]]\n#&gt; polars Series: shape: (3,)\n#&gt; Series: 'bar' [i32]\n#&gt; [\n#&gt;  4\n#&gt;  5\n#&gt;  6\n#&gt; ]\n</code></pre> <pre><code>df = pl$DataFrame(\n  a = 1:4,\n  b = c(0.5, 4, 10, 13),\n  c = c(TRUE, TRUE, FALSE, TRUE)\n)\ndf$get_columns()\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; polars Series: shape: (4,)\n#&gt; Series: 'a' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n#&gt; \n#&gt; [[2]]\n#&gt; polars Series: shape: (4,)\n#&gt; Series: 'b' [f64]\n#&gt; [\n#&gt;  0.5\n#&gt;  4.0\n#&gt;  10.0\n#&gt;  13.0\n#&gt; ]\n#&gt; \n#&gt; [[3]]\n#&gt; polars Series: shape: (4,)\n#&gt; Series: 'c' [bool]\n#&gt; [\n#&gt;  true\n#&gt;  true\n#&gt;  false\n#&gt;  true\n#&gt; ]\n</code></pre>"},{"location":"man/DataFrame_glimpse.html","title":"Glimpse values in a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_glimpse.html#description","title":"Description","text":"<p>Glimpse values in a DataFrame</p>"},{"location":"man/DataFrame_glimpse.html#usage","title":"Usage","text":"<pre><code>DataFrame_glimpse(..., return_as_string = FALSE)\n</code></pre>"},{"location":"man/DataFrame_glimpse.html#arguments","title":"Arguments","text":"<code>\u2026</code>  not used  <code>return_as_string</code>  Logical (default <code>FALSE</code>). If <code>TRUE</code>, return the output as a string."},{"location":"man/DataFrame_glimpse.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_glimpse.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$glimpse()\n</code></pre> <pre><code>#&gt; &amp; Sepal.Length &lt;f64&gt; 5.1, 4.9, 4.7, 4.6, 5, 5.4, 4.6, 5, 4.4, 4.9\n#&gt; &amp; Sepal.Width  &lt;f64&gt; 3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1\n#&gt; &amp; Petal.Length &lt;f64&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5\n#&gt; &amp; Petal.Width  &lt;f64&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1\n#&gt; &amp; Species      &lt;cat&gt; setosa, setosa, setosa, setosa, setosa, setosa, setosa, setosa, setosa, setosa\n</code></pre>"},{"location":"man/DataFrame_group_by.html","title":"Group a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_group_by.html#description","title":"Description","text":"<p>This doesn\u2019t modify the data but only stores information about the group structure. This structure can then be used by several functions (<code>$agg()</code>, <code>$filter()</code>, etc.).</p>"},{"location":"man/DataFrame_group_by.html#usage","title":"Usage","text":"<pre><code>DataFrame_group_by(..., maintain_order = polars_options()\\$maintain_order)\n</code></pre>"},{"location":"man/DataFrame_group_by.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Column(s) to group by. Accepts expression input. Characters are parsed as column names.  <code>maintain_order</code>  Ensure that the order of the groups is consistent with the input data. This is slower than a default group by. Setting this to <code>TRUE</code> blocks the possibility to run on the streaming engine. The default value can be changed with <code>options(polars.maintain_order = TRUE)</code>."},{"location":"man/DataFrame_group_by.html#details","title":"Details","text":"<p>Within each group, the order of the rows is always preserved, regardless of the <code>maintain_order</code> argument.</p>"},{"location":"man/DataFrame_group_by.html#value","title":"Value","text":"<p>GroupBy (a DataFrame with special groupby methods like <code>$agg()</code>)</p>"},{"location":"man/DataFrame_group_by.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$partition_by()"},{"location":"man/DataFrame_group_by.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(\"a\", \"b\", \"a\", \"b\", \"c\"),\n  b = c(1, 2, 1, 3, 3),\n  c = c(5, 4, 3, 2, 1)\n)\n\ndf$group_by(\"a\")$agg(pl$col(\"b\")$sum())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 c   \u2506 3.0 \u2502\n#&gt; \u2502 b   \u2506 5.0 \u2502\n#&gt; \u2502 a   \u2506 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Set `maintain_order = TRUE` to ensure the order of the groups is consistent with the input.\ndf$group_by(\"a\", maintain_order = TRUE)$agg(pl$col(\"c\"))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 c          \u2502\n#&gt; \u2502 --- \u2506 ---        \u2502\n#&gt; \u2502 str \u2506 list[f64]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 [5.0, 3.0] \u2502\n#&gt; \u2502 b   \u2506 [4.0, 2.0] \u2502\n#&gt; \u2502 c   \u2506 [1.0]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Group by multiple columns by passing a list of column names.\ndf$group_by(c(\"a\", \"b\"))$agg(pl$max(\"c\"))\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 b   \u2506 2.0 \u2506 4.0 \u2502\n#&gt; \u2502 c   \u2506 3.0 \u2506 1.0 \u2502\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Or pass some arguments to group by multiple columns in the same way.\n# Expressions are also accepted.\ndf$group_by(\"a\", pl$col(\"b\") %/% 2)$agg(\n  pl$col(\"c\")$mean()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 0.0 \u2506 4.0 \u2502\n#&gt; \u2502 b   \u2506 1.0 \u2506 3.0 \u2502\n#&gt; \u2502 c   \u2506 1.0 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># The columns will be renamed to the argument names.\ndf$group_by(d = \"a\", e = pl$col(\"b\") %/% 2)$agg(\n  pl$col(\"c\")$mean()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d   \u2506 e   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 0.0 \u2506 4.0 \u2502\n#&gt; \u2502 c   \u2506 1.0 \u2506 1.0 \u2502\n#&gt; \u2502 b   \u2506 1.0 \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_group_by_dynamic.html","title":"Group based on a date/time or integer column","text":"<p>Source code</p>"},{"location":"man/DataFrame_group_by_dynamic.html#description","title":"Description","text":"<p>If you have a time series <code>\\&lt;t_0, t_1, \u2026, t_n&gt;</code>, then by default the windows created will be:</p> <ul> <li>  (t_0 - period, t_0\\]  </li> <li>  (t_1 - period, t_1\\]  </li> <li>  \u2026  </li> <li>  (t_n - period, t_n\\]  </li> </ul> <p>whereas if you pass a non-default offset, then the windows will be:</p> <ul> <li>  (t_0 + offset, t_0 + offset + period\\]  </li> <li>  (t_1 + offset, t_1 + offset + period\\]  </li> <li>  \u2026  </li> <li>  (t_n + offset, t_n + offset + period\\]  </li> </ul>"},{"location":"man/DataFrame_group_by_dynamic.html#usage","title":"Usage","text":"<pre><code>DataFrame_group_by_dynamic(\n  index_column,\n  ...,\n  every,\n  period = NULL,\n  offset = NULL,\n  include_boundaries = FALSE,\n  closed = \"left\",\n  label = \"left\",\n  group_by = NULL,\n  start_by = \"window\",\n  check_sorted = TRUE\n)\n</code></pre>"},{"location":"man/DataFrame_group_by_dynamic.html#arguments","title":"Arguments","text":"<code>index_column</code>  Column used to group based on the time window. Often of type Date/Datetime. This column must be sorted in ascending order (or, if <code>by</code> is specified, then it must be sorted in ascending order within each group). In case of a rolling group by on indices, dtype needs to be either Int32 or Int64. Note that Int32 gets temporarily cast to Int64, so if performance matters use an Int64 column.  <code>\u2026</code>  Ignored.  <code>every</code>  Interval of the window.  <code>period</code>  A character representing the length of the window, must be non-negative. See the <code>Polars duration string language</code> section for details.  <code>offset</code>  A character representing the offset of the window, or <code>NULL</code> (default). If <code>NULL</code>, <code>-period</code> is used. See the <code>Polars duration string language</code> section for details.  <code>include_boundaries</code>  Add two columns <code>\u201c\\_lower_boundary\u201d</code> and <code>\u201c\\_upper_boundary\u201d</code> columns that show the boundaries of the window. This will impact performance because it\u2019s harder to parallelize.  <code>closed</code>  Define which sides of the temporal interval are closed (inclusive). This can be either <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code> or <code>\u201cnone\u201d</code>.  <code>label</code>   Define which label to use for the window:  <ul> <li> <code>\u201cleft\u201d</code>: lower boundary of the window  </li> <li> <code>\u201cright\u201d</code>: upper boundary of the window  </li> <li> <code>\u201cdatapoint\u201d</code>: the first value of the index column in the given window. If you don\u2019t need the label to be at one of the boundaries, choose this option for maximum performance.  </li> </ul> <code>group_by</code>  Also group by this column/these columns.  <code>start_by</code>   The strategy to determine the start of the first window by:  <ul> <li> <code>\u201cwindow\u201d</code>: start by taking the earliest timestamp, truncating it with <code>every</code>, and then adding <code>offset</code>. Note that weekly windows start on Monday.  </li> <li> <code>\u201cdatapoint\u201d</code>: start from the first encountered data point.  </li> <li>  a day of the week (only takes effect if <code>every</code> contains <code>\u201cw\u201d</code>): <code>\u201cmonday\u201d</code> starts the window on the Monday before the first data point, etc.  </li> </ul> <code>check_sorted</code>  Check whether data is actually sorted. Checking it is expensive so if you are sure the data within the <code>index_column</code> is sorted, you can set this to <code>FALSE</code> but note that if the data actually is unsorted, it will lead to incorrect output."},{"location":"man/DataFrame_group_by_dynamic.html#details","title":"Details","text":"<p>In case of a rolling operation on an integer column, the windows are defined by:</p> <ul> <li>  \"1i\" \\# length 1  </li> <li>  \"10i\" \\# length 10  </li> </ul>"},{"location":"man/DataFrame_group_by_dynamic.html#value","title":"Value","text":"<p>A GroupBy object</p>"},{"location":"man/DataFrame_group_by_dynamic.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$rolling()"},{"location":"man/DataFrame_group_by_dynamic.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  time = pl$datetime_range(\n    start = strptime(\"2021-12-16 00:00:00\", format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"),\n    end = strptime(\"2021-12-16 03:00:00\", format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"),\n    interval = \"30m\"\n  ),\n  n = 0:6\n)\n\n# get the sum in the following hour relative to the \"time\" column\ndf$group_by_dynamic(\"time\", every = \"1h\")$agg(\n  vals = pl$col(\"n\"),\n  sum = pl$col(\"n\")$sum()\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 vals      \u2506 sum \u2502\n#&gt; \u2502 ---                     \u2506 ---       \u2506 --- \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 list[i32] \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 [0, 1]    \u2506 1   \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 [2, 3]    \u2506 5   \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 [4, 5]    \u2506 9   \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 [6]       \u2506 6   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># using \"include_boundaries = TRUE\" is helpful to see the period considered\ndf$group_by_dynamic(\"time\", every = \"1h\", include_boundaries = TRUE)$agg(\n  vals = pl$col(\"n\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 _lower_boundary         \u2506 _upper_boundary         \u2506 time                    \u2506 vals      \u2502\n#&gt; \u2502 ---                     \u2506 ---                     \u2506 ---                     \u2506 ---       \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 00:00:00 UTC \u2506 [0, 1]    \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 [2, 3]    \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 [4, 5]    \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 2021-12-16 04:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 [6]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># in the example above, the values didn't include the one *exactly* 1h after\n# the start because \"closed = 'left'\" by default.\n# Changing it to \"right\" includes values that are exactly 1h after. Note that\n# the value at 00:00:00 now becomes included in the interval [23:00:00 - 00:00:00],\n# even if this interval wasn't there originally\ndf$group_by_dynamic(\"time\", every = \"1h\", closed = \"right\")$agg(\n  vals = pl$col(\"n\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 vals      \u2502\n#&gt; \u2502 ---                     \u2506 ---       \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-15 23:00:00 UTC \u2506 [0]       \u2502\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 [1, 2]    \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 [3, 4]    \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 [5, 6]    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># To keep both boundaries, we use \"closed = 'both'\". Some values now belong to\n# several groups:\ndf$group_by_dynamic(\"time\", every = \"1h\", closed = \"both\")$agg(\n  vals = pl$col(\"n\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 vals      \u2502\n#&gt; \u2502 ---                     \u2506 ---       \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-15 23:00:00 UTC \u2506 [0]       \u2502\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 [0, 1, 2] \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 [2, 3, 4] \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 [4, 5, 6] \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 [6]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Dynamic group bys can also be combined with grouping on normal keys\ndf = df$with_columns(\n  groups = as_polars_series(c(\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"a\"))\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 n   \u2506 groups \u2502\n#&gt; \u2502 ---                     \u2506 --- \u2506 ---    \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 i32 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 0   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 00:30:00 UTC \u2506 1   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 2   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 01:30:00 UTC \u2506 3   \u2506 b      \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 4   \u2506 b      \u2502\n#&gt; \u2502 2021-12-16 02:30:00 UTC \u2506 5   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 6   \u2506 a      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$group_by_dynamic(\n  \"time\",\n  every = \"1h\",\n  closed = \"both\",\n  group_by = \"groups\",\n  include_boundaries = TRUE\n)$agg(pl$col(\"n\"))\n</code></pre> <pre><code>#&gt; shape: (7, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 groups \u2506 _lower_boundary         \u2506 _upper_boundary         \u2506 time                    \u2506 n         \u2502\n#&gt; \u2502 ---    \u2506 ---                     \u2506 ---                     \u2506 ---                     \u2506 ---       \u2502\n#&gt; \u2502 str    \u2506 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a      \u2506 2021-12-15 23:00:00 UTC \u2506 2021-12-16 00:00:00 UTC \u2506 2021-12-15 23:00:00 UTC \u2506 [0]       \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 00:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 00:00:00 UTC \u2506 [0, 1, 2] \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 [2]       \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 [5, 6]    \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 04:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 [6]       \u2502\n#&gt; \u2502 b      \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 [3, 4]    \u2502\n#&gt; \u2502 b      \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 [4]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># We can also create a dynamic group by based on an index column\ndf = pl$LazyFrame(\n  idx = 0:5,\n  A = c(\"A\", \"A\", \"B\", \"B\", \"B\", \"C\")\n)$with_columns(pl$col(\"idx\")$set_sorted())\ndf\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt;  WITH_COLUMNS:\n#&gt;  [col(\"idx\").map()]\n#&gt;   DF [\"idx\", \"A\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>df$group_by_dynamic(\n  \"idx\",\n  every = \"2i\",\n  period = \"3i\",\n  include_boundaries = TRUE,\n  closed = \"right\"\n)$agg(A_agg_list = pl$col(\"A\"))\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; AGGREGATE\n#&gt;  [col(\"A\").alias(\"A_agg_list\")] BY [] FROM\n#&gt;    WITH_COLUMNS:\n#&gt;    [col(\"idx\").map()]\n#&gt;     DF [\"idx\", \"A\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/DataFrame_head.html","title":"Get the first <code>n</code> rows.","text":"<p>Source code</p>"},{"location":"man/DataFrame_head.html#description","title":"Description","text":"<p>Get the first <code>n</code> rows.</p>"},{"location":"man/DataFrame_head.html#usage","title":"Usage","text":"<pre><code>DataFrame_head(n = 5L)\n\nDataFrame_limit(n = 5L)\n</code></pre>"},{"location":"man/DataFrame_head.html#arguments","title":"Arguments","text":"<code>n</code>  Number of rows to return. If a negative value is passed, return all rows except the last <code>abs(n)</code>."},{"location":"man/DataFrame_head.html#details","title":"Details","text":"<p><code>$limit()</code> is an alias for <code>$head()</code>.</p>"},{"location":"man/DataFrame_head.html#value","title":"Value","text":"<p>A DataFrame</p>"},{"location":"man/DataFrame_head.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = 1:5, bar = 6:10, ham = letters[1:5])\n\ndf$head(3)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 ham \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 6   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 7   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 8   \u2506 c   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Pass a negative value to get all rows except the last `abs(n)`.\ndf$head(-3)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 ham \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 6   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 7   \u2506 b   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_item.html","title":"Return the element at the given row/column.","text":"<p>Source code</p>"},{"location":"man/DataFrame_item.html#description","title":"Description","text":"<p>If row and column location are not specified, the DataFrame must have dimensions (1, 1).</p>"},{"location":"man/DataFrame_item.html#usage","title":"Usage","text":"<pre><code>DataFrame_item(row = NULL, column = NULL)\n</code></pre>"},{"location":"man/DataFrame_item.html#arguments","title":"Arguments","text":"<code>row</code>  Optional row index (0-indexed).  <code>column</code>  Optional column index (0-indexed) or name."},{"location":"man/DataFrame_item.html#value","title":"Value","text":"<p>A value of length 1</p>"},{"location":"man/DataFrame_item.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(1, 2, 3), b = c(4, 5, 6))\n\ndf$select((pl$col(\"a\") * pl$col(\"b\"))$sum())$item()\n</code></pre> <pre><code>#&gt; [1] 32\n</code></pre> <pre><code>df$item(1, 1)\n</code></pre> <pre><code>#&gt; [1] 5\n</code></pre> <pre><code>df$item(2, \"b\")\n</code></pre> <pre><code>#&gt; [1] 6\n</code></pre>"},{"location":"man/DataFrame_join.html","title":"Join DataFrames","text":"<p>Source code</p>"},{"location":"man/DataFrame_join.html#description","title":"Description","text":"<p>This function can do both mutating joins (adding columns based on matching observations, for example with <code>how = \u201cleft\u201d</code>) and filtering joins (keeping observations based on matching observations, for example with <code>how = \u201cinner\u201d</code>).</p>"},{"location":"man/DataFrame_join.html#usage","title":"Usage","text":"<pre><code>DataFrame_join(\n  other,\n  on = NULL,\n  how = c(\"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\", \"outer_coalesce\"),\n  ...,\n  left_on = NULL,\n  right_on = NULL,\n  suffix = \"_right\",\n  validate = \"m:m\",\n  join_nulls = FALSE,\n  allow_parallel = TRUE,\n  force_parallel = FALSE\n)\n</code></pre>"},{"location":"man/DataFrame_join.html#arguments","title":"Arguments","text":"<code>other</code>  DataFrame to join with.  <code>on</code>  Either a vector of column names or a list of expressions and/or strings. Use <code>left_on</code> and <code>right_on</code> if the column names to match on are different between the two DataFrames.  <code>how</code>  One of the following methods: \"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\", \"outer_coalesce\".  <code>\u2026</code>  Ignored.  <code>left_on</code>, <code>right_on</code>  Same as <code>on</code> but only for the left or the right DataFrame. They must have the same length.  <code>suffix</code>  Suffix to add to duplicated column names.  <code>validate</code>   Checks if join is of specified type:  <ul> <li> <code>\u201cm:m\u201d</code> (default): many-to-many, doesn\u2019t perform any checks;  </li> <li> <code>\u201c1:1\u201d</code>: one-to-one, check if join keys are unique in both left and right datasets;  </li> <li> <code>\u201c1:m\u201d</code>: one-to-many, check if join keys are unique in left dataset  </li> <li> <code>\u201cm:1\u201d</code>: many-to-one, check if join keys are unique in right dataset  </li> </ul> Note that this is currently not supported by the streaming engine, and is only supported when joining by single columns.  <code>join_nulls</code>  Join on null values. By default null values will never produce matches.  <code>allow_parallel</code>  Allow the physical plan to optionally evaluate the computation of both DataFrames up to the join in parallel.  <code>force_parallel</code>  Force the physical plan to evaluate the computation of both DataFrames up to the join in parallel."},{"location":"man/DataFrame_join.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_join.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# inner join by default\ndf1 = pl$DataFrame(list(key = 1:3, payload = c(\"f\", \"i\", NA)))\ndf2 = pl$DataFrame(list(key = c(3L, 4L, 5L, NA_integer_)))\ndf1$join(other = df2, on = \"key\")\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 key \u2506 payload \u2502\n#&gt; \u2502 --- \u2506 ---     \u2502\n#&gt; \u2502 i32 \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># cross join\ndf1 = pl$DataFrame(x = letters[1:3])\ndf2 = pl$DataFrame(y = 1:4)\ndf1$join(other = df2, how = \"cross\")\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1   \u2502\n#&gt; \u2502 a   \u2506 2   \u2502\n#&gt; \u2502 a   \u2506 3   \u2502\n#&gt; \u2502 a   \u2506 4   \u2502\n#&gt; \u2502 b   \u2506 1   \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026   \u2502\n#&gt; \u2502 b   \u2506 4   \u2502\n#&gt; \u2502 c   \u2506 1   \u2502\n#&gt; \u2502 c   \u2506 2   \u2502\n#&gt; \u2502 c   \u2506 3   \u2502\n#&gt; \u2502 c   \u2506 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_join_asof.html","title":"Perform joins on nearest keys","text":"<p>Source code</p>"},{"location":"man/DataFrame_join_asof.html#description","title":"Description","text":"<p>This is similar to a left-join except that we match on nearest key rather than equal keys.</p>"},{"location":"man/DataFrame_join_asof.html#usage","title":"Usage","text":"<pre><code>DataFrame_join_asof(\n  other,\n  ...,\n  left_on = NULL,\n  right_on = NULL,\n  on = NULL,\n  by_left = NULL,\n  by_right = NULL,\n  by = NULL,\n  strategy = c(\"backward\", \"forward\", \"nearest\"),\n  suffix = \"_right\",\n  tolerance = NULL,\n  allow_parallel = TRUE,\n  force_parallel = FALSE\n)\n</code></pre>"},{"location":"man/DataFrame_join_asof.html#arguments","title":"Arguments","text":"<code>other</code>  DataFrame or LazyFrame  <code>\u2026</code>  Not used, blocks use of further positional arguments  <code>left_on</code>, <code>right_on</code>  Same as <code>on</code> but only for the left or the right DataFrame. They must have the same length.  <code>on</code>  Either a vector of column names or a list of expressions and/or strings. Use <code>left_on</code> and <code>right_on</code> if the column names to match on are different between the two DataFrames.  <code>by_left</code>, <code>by_right</code>  Same as <code>by</code> but only for the left or the right table. They must have the same length.  <code>by</code>  Join on these columns before performing asof join. Either a vector of column names or a list of expressions and/or strings. Use <code>left_by</code> and <code>right_by</code> if the column names to match on are different between the two tables.  <code>strategy</code>   Strategy for where to find match:  <ul> <li>  \"backward\" (default): search for the last row in the right table whose <code>on</code> key is less than or equal to the left key.  </li> <li>  \"forward\": search for the first row in the right table whose <code>on</code> key is greater than or equal to the left key.  </li> <li>  \"nearest\": search for the last row in the right table whose value is nearest to the left key. String keys are not currently supported for a nearest search.  </li> </ul> <code>suffix</code>  Suffix to add to duplicated column names.  <code>tolerance</code>   Numeric tolerance. By setting this the join will only be done if the near keys are within this distance. If an asof join is done on columns of dtype \"Date\", \"Datetime\", \"Duration\" or \"Time\", use the Polars duration string language. About the language, see the <code>Polars duration string language</code> section for details.  There may be a circumstance where R types are not sufficient to express a numeric tolerance. In that case, you can use the expression syntax like <code>tolerance = pl$lit(42)$cast(pl$Uint64)</code> <code>allow_parallel</code>  Allow the physical plan to optionally evaluate the computation of both DataFrames up to the join in parallel.  <code>force_parallel</code>  Force the physical plan to evaluate the computation of both DataFrames up to the join in parallel."},{"location":"man/DataFrame_join_asof.html#details","title":"Details","text":"<p>Both tables (DataFrames or LazyFrames) must be sorted by the asof_join key.</p>"},{"location":"man/DataFrame_join_asof.html#value","title":"Value","text":"<p>New joined DataFrame</p>"},{"location":"man/DataFrame_join_asof.html#polars-duration-string-language","title":"Polars duration string language","text":"<p>Polars duration string language is a simple representation of durations. It is used in many Polars functions that accept durations.</p> <p>It has the following format:</p> <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 calendar day)  </li> <li>  1w (1 calendar week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1q (1 calendar quarter)  </li> <li>  1y (1 calendar year)  </li> </ul> <p>Or combine them: <code>\u201c3d12h4m25s\u201d</code> # 3 days, 12 hours, 4 minutes, and 25 seconds</p> <p>By \"calendar day\", we mean the corresponding time on the next day (which may not be 24 hours, due to daylight savings). Similarly for \"calendar week\", \"calendar month\", \"calendar quarter\", and \"calendar year\".</p>"},{"location":"man/DataFrame_join_asof.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create two DataFrames to join asof\ngdp = pl$DataFrame(\n  date = as.Date(c(\"2015-1-1\", \"2016-1-1\", \"2017-5-1\", \"2018-1-1\", \"2019-1-1\")),\n  gdp = c(4321, 4164, 4411, 4566, 4696),\n  group = c(\"b\", \"a\", \"a\", \"b\", \"b\")\n)\n\npop = pl$DataFrame(\n  date = as.Date(c(\"2016-5-12\", \"2017-5-12\", \"2018-5-12\", \"2019-5-12\")),\n  population = c(82.19, 82.66, 83.12, 83.52),\n  group = c(\"b\", \"b\", \"a\", \"a\")\n)\n\n# optional make sure tables are already sorted with \"on\" join-key\ngdp = gdp$sort(\"date\")\npop = pop$sort(\"date\")\n\n# Left-join_asof DataFrame pop with gdp on \"date\"\n# Look backward in gdp to find closest matching date\npop$join_asof(gdp, on = \"date\", strategy = \"backward\")\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4164.0 \u2506 a           \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4566.0 \u2506 b           \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 4696.0 \u2506 b           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># .... and forward\npop$join_asof(gdp, on = \"date\", strategy = \"forward\")\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4566.0 \u2506 b           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4696.0 \u2506 b           \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># join by a group: \"only look within within group\"\npop$join_asof(gdp, on = \"date\", by = \"group\", strategy = \"backward\")\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4321.0 \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4321.0 \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4411.0 \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 4411.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># only look 2 weeks and 2 days back\npop$join_asof(gdp, on = \"date\", strategy = \"backward\", tolerance = \"2w2d\")\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># only look 11 days back (numeric tolerance depends on polars type, &lt;date&gt; is in days)\npop$join_asof(gdp, on = \"date\", strategy = \"backward\", tolerance = 11)\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_last.html","title":"Get the last row of the DataFrame.","text":"<p>Source code</p>"},{"location":"man/DataFrame_last.html#description","title":"Description","text":"<p>Get the last row of the DataFrame.</p>"},{"location":"man/DataFrame_last.html#usage","title":"Usage","text":"<pre><code>DataFrame_last()\n</code></pre>"},{"location":"man/DataFrame_last.html#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_last.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$last()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_lazy.html","title":"Convert an existing DataFrame to a LazyFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_lazy.html#description","title":"Description","text":"<p>Start a new lazy query from a DataFrame.</p>"},{"location":"man/DataFrame_lazy.html#usage","title":"Usage","text":"<pre><code>DataFrame_lazy()\n</code></pre>"},{"location":"man/DataFrame_lazy.html#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/DataFrame_lazy.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$lazy()\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/DataFrame_max.html","title":"Max","text":"<p>Source code</p>"},{"location":"man/DataFrame_max.html#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to their maximum value.</p>"},{"location":"man/DataFrame_max.html#usage","title":"Usage","text":"<pre><code>DataFrame_max()\n</code></pre>"},{"location":"man/DataFrame_max.html#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$max()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 33.9 \u2506 8.0 \u2506 472.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_mean.html","title":"Mean","text":"<p>Source code</p>"},{"location":"man/DataFrame_mean.html#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to their mean value.</p>"},{"location":"man/DataFrame_mean.html#usage","title":"Usage","text":"<pre><code>DataFrame_mean()\n</code></pre>"},{"location":"man/DataFrame_mean.html#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_mean.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$mean()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl    \u2506 disp       \u2506 hp       \u2506 \u2026 \u2506 vs     \u2506 am      \u2506 gear   \u2506 carb   \u2502\n#&gt; \u2502 ---       \u2506 ---    \u2506 ---        \u2506 ---      \u2506   \u2506 ---    \u2506 ---     \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 f64       \u2506 f64    \u2506 f64        \u2506 f64      \u2506   \u2506 f64    \u2506 f64     \u2506 f64    \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 20.090625 \u2506 6.1875 \u2506 230.721875 \u2506 146.6875 \u2506 \u2026 \u2506 0.4375 \u2506 0.40625 \u2506 3.6875 \u2506 2.8125 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_median.html","title":"Median","text":"<p>Source code</p>"},{"location":"man/DataFrame_median.html#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to their median value.</p>"},{"location":"man/DataFrame_median.html#usage","title":"Usage","text":"<pre><code>DataFrame_median()\n</code></pre>"},{"location":"man/DataFrame_median.html#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_median.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$median()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 6.0 \u2506 196.3 \u2506 123.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_melt.html","title":"Unpivot a Frame from wide to long format","text":"<p>Source code</p>"},{"location":"man/DataFrame_melt.html#description","title":"Description","text":"<p>Unpivot a Frame from wide to long format</p>"},{"location":"man/DataFrame_melt.html#usage","title":"Usage","text":"<pre><code>DataFrame_melt(\n  id_vars = NULL,\n  value_vars = NULL,\n  variable_name = NULL,\n  value_name = NULL\n)\n</code></pre>"},{"location":"man/DataFrame_melt.html#arguments","title":"Arguments","text":"<code>id_vars</code>  Columns to use as identifier variables.  <code>value_vars</code>  Values to use as identifier variables. If <code>value_vars</code> is empty all columns that are not in <code>id_vars</code> will be used.  <code>variable_name</code>  Name to give to the new column containing the names of the melted columns. Defaults to \"variable\".  <code>value_name</code>  Name to give to the new column containing the values of the melted columns. Defaults to \"value\""},{"location":"man/DataFrame_melt.html#details","title":"Details","text":"<p>Optionally leaves identifiers set.</p> <p>This function is useful to massage a Frame into a format where one or more columns are identifier variables (id_vars), while all other columns, considered measured variables (value_vars), are \"unpivoted\" to the row axis, leaving just two non-identifier columns, \u2018variable\u2019 and \u2018value\u2019.</p>"},{"location":"man/DataFrame_melt.html#value","title":"Value","text":"<p>A new <code>DataFrame</code></p>"},{"location":"man/DataFrame_melt.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(\"x\", \"y\", \"z\"),\n  b = c(1, 3, 5),\n  c = c(2, 4, 6),\n  d = c(7, 8, 9)\n)\ndf$melt(id_vars = \"a\", value_vars = c(\"b\", \"c\", \"d\"))\n</code></pre> <pre><code>#&gt; shape: (9, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 variable \u2506 value \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 str      \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 x   \u2506 b        \u2506 1.0   \u2502\n#&gt; \u2502 y   \u2506 b        \u2506 3.0   \u2502\n#&gt; \u2502 z   \u2506 b        \u2506 5.0   \u2502\n#&gt; \u2502 x   \u2506 c        \u2506 2.0   \u2502\n#&gt; \u2502 y   \u2506 c        \u2506 4.0   \u2502\n#&gt; \u2502 z   \u2506 c        \u2506 6.0   \u2502\n#&gt; \u2502 x   \u2506 d        \u2506 7.0   \u2502\n#&gt; \u2502 y   \u2506 d        \u2506 8.0   \u2502\n#&gt; \u2502 z   \u2506 d        \u2506 9.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_min.html","title":"Min","text":"<p>Source code</p>"},{"location":"man/DataFrame_min.html#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to their minimum value.</p>"},{"location":"man/DataFrame_min.html#usage","title":"Usage","text":"<pre><code>DataFrame_min()\n</code></pre>"},{"location":"man/DataFrame_min.html#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$min()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp \u2506 hp   \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---  \u2506 ---  \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64  \u2506 f64  \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 4.0 \u2506 71.1 \u2506 52.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_n_chunks.html","title":"Number of chunks of the Series in a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_n_chunks.html#description","title":"Description","text":"<p>Number of chunks (memory allocations) for all or first Series in a DataFrame.</p>"},{"location":"man/DataFrame_n_chunks.html#usage","title":"Usage","text":"<pre><code>DataFrame_n_chunks(strategy = \"all\")\n</code></pre>"},{"location":"man/DataFrame_n_chunks.html#arguments","title":"Arguments","text":"<code>strategy</code>  Either <code>\u201call\u201d</code> or <code>\u201cfirst\u201d</code>. <code>\u201cfirst\u201d</code> only returns chunks for the first Series."},{"location":"man/DataFrame_n_chunks.html#details","title":"Details","text":"<p>A DataFrame is a vector of Series. Each Series in rust-polars is a wrapper around a ChunkedArray, which is like a virtual contiguous vector physically backed by an ordered set of chunks. Each chunk of values has a contiguous memory layout and is an arrow array. Arrow arrays are a fast, thread-safe and cross-platform memory layout.</p> <p>In R, combining with <code>c()</code> or <code>rbind()</code> requires immediate vector re-allocation to place vector values in contiguous memory. This is slow and memory consuming, and it is why repeatedly appending to a vector in R is discouraged.</p> <p>In polars, when we concatenate or append to Series or DataFrame, the re-allocation can be avoided or delayed by simply appending chunks to each individual Series. However, if chunks become many and small or are misaligned across Series, this can hurt the performance of subsequent operations.</p> <p>Most places in the polars api where chunking could occur, the user have to typically actively opt-out by setting an argument <code>rechunk = FALSE</code>.</p>"},{"location":"man/DataFrame_n_chunks.html#value","title":"Value","text":"<p>A real vector of chunk counts per Series.</p>"},{"location":"man/DataFrame_n_chunks.html#see-also","title":"See Also","text":"<p><code>\\&lt;DataFrame&gt;$rechunk()</code></p>"},{"location":"man/DataFrame_n_chunks.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create DataFrame with misaligned chunks\ndf = pl$concat(\n  1:10, # single chunk\n  pl$concat(1:5, 1:5, rechunk = FALSE, how = \"vertical\")$rename(\"b\"), # two chunks\n  how = \"horizontal\"\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (10, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1   \u2502\n#&gt; \u2502 2   \u2506 2   \u2502\n#&gt; \u2502 3   \u2506 3   \u2502\n#&gt; \u2502 4   \u2506 4   \u2502\n#&gt; \u2502 5   \u2506 5   \u2502\n#&gt; \u2502 6   \u2506 1   \u2502\n#&gt; \u2502 7   \u2506 2   \u2502\n#&gt; \u2502 8   \u2506 3   \u2502\n#&gt; \u2502 9   \u2506 4   \u2502\n#&gt; \u2502 10  \u2506 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 2\n</code></pre> <pre><code># rechunk a chunked DataFrame\ndf$rechunk()$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 1\n</code></pre> <pre><code># rechunk is not an in-place operation\ndf$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 2\n</code></pre> <pre><code># The following toy example emulates the Series \"chunkyness\" in R. Here it a\n# S3-classed list with same type of vectors and where have all relevant S3\n# generics implemented to make behave as if it was a regular vector.\n\"+.chunked_vector\" = \\(x, y) structure(list(unlist(x) + unlist(y)), class = \"chunked_vector\")\nprint.chunked_vector = \\(x, ...) print(unlist(x), ...)\nc.chunked_vector = \\(...) {\n  structure(do.call(c, lapply(list(...), unclass)), class = \"chunked_vector\")\n}\nrechunk = \\(x) structure(unlist(x), class = \"chunked_vector\")\nx = structure(list(1:4, 5L), class = \"chunked_vector\")\nx\n</code></pre> <pre><code>#&gt; [1] 1 2 3 4 5\n</code></pre> <pre><code>x + 5:1\n</code></pre> <pre><code>#&gt; [1] 6 6 6 6 6\n</code></pre> <pre><code>lapply(x, tracemem) # trace chunks to verify no re-allocation\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] \"&lt;0x55faadf6f6a8&gt;\"\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"&lt;0x55faaae683c0&gt;\"\n</code></pre> <pre><code>z = c(x, x)\nz # looks like a plain vector\n</code></pre> <pre><code>#&gt;  [1] 1 2 3 4 5 1 2 3 4 5\n</code></pre> <pre><code>lapply(z, tracemem) # mem allocation  in z are the same from x\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] \"&lt;0x55faadf6f6a8&gt;\"\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"&lt;0x55faaae683c0&gt;\"\n#&gt; \n#&gt; [[3]]\n#&gt; [1] \"&lt;0x55faadf6f6a8&gt;\"\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"&lt;0x55faaae683c0&gt;\"\n</code></pre> <pre><code>str(z)\n</code></pre> <pre><code>#&gt; List of 4\n#&gt;  $ : int [1:4] 1 2 3 4\n#&gt;  $ : int 5\n#&gt;  $ : int [1:4] 1 2 3 4\n#&gt;  $ : int 5\n#&gt;  - attr(*, \"class\")= chr \"chunked_vector\"\n</code></pre> <pre><code>z = rechunk(z)\nstr(z)\n</code></pre> <pre><code>#&gt;  'chunked_vector' int [1:10] 1 2 3 4 5 1 2 3 4 5\n</code></pre>"},{"location":"man/DataFrame_null_count.html","title":"Count null values","text":"<p>Source code</p>"},{"location":"man/DataFrame_null_count.html#description","title":"Description","text":"<p>Create a new DataFrame that shows the null (which correspond to <code>NA</code> in R) counts per column.</p>"},{"location":"man/DataFrame_null_count.html#usage","title":"Usage","text":"<pre><code>DataFrame_null_count()\n</code></pre>"},{"location":"man/DataFrame_null_count.html#format","title":"Format","text":"<p>function</p>"},{"location":"man/DataFrame_null_count.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_null_count.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nx = mtcars\nx[1, 2:3] = NA\npl$DataFrame(x)$null_count()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg \u2506 cyl \u2506 disp \u2506 hp  \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2506 --- \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 u32 \u2506 u32 \u2506 u32  \u2506 u32 \u2506   \u2506 u32 \u2506 u32 \u2506 u32  \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 1   \u2506 1    \u2506 0   \u2506 \u2026 \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_partition_by.html","title":"Split a DataFrame into multiple DataFrames","text":"<p>Source code</p>"},{"location":"man/DataFrame_partition_by.html#description","title":"Description","text":"<p>Similar to <code>$group_by()</code>. Group by the given columns and return the groups as separate DataFrames. It is useful to use this in combination with functions like <code>lapply()</code> or <code>purrr::map()</code>.</p>"},{"location":"man/DataFrame_partition_by.html#usage","title":"Usage","text":"<pre><code>DataFrame_partition_by(\n  ...,\n  maintain_order = TRUE,\n  include_key = TRUE,\n  as_nested_list = FALSE\n)\n</code></pre>"},{"location":"man/DataFrame_partition_by.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters of column names to group by. Passed to <code>pl$col()</code>.  <code>maintain_order</code>  If <code>TRUE</code>, ensure that the order of the groups is consistent with the input data. This is slower than a default partition by operation.  <code>include_key</code>  If <code>TRUE</code>, include the columns used to partition the DataFrame in the output.  <code>as_nested_list</code>  This affects the format of the output. If <code>FALSE</code> (default), the output is a flat list of DataFrames. IF <code>TRUE</code> and one of the <code>maintain_order</code> or <code>include_key</code> argument is <code>TRUE</code>, then each element of the output has two children: <code>key</code> and <code>data</code>. See the examples for more details."},{"location":"man/DataFrame_partition_by.html#value","title":"Value","text":"<p>A list of DataFrames. See the examples for details.</p>"},{"location":"man/DataFrame_partition_by.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$group_by()"},{"location":"man/DataFrame_partition_by.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(\"a\", \"b\", \"a\", \"b\", \"c\"),\n  b = c(1, 2, 1, 3, 3),\n  c = c(5, 4, 3, 2, 1)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2502\n#&gt; \u2502 b   \u2506 2.0 \u2506 4.0 \u2502\n#&gt; \u2502 a   \u2506 1.0 \u2506 3.0 \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2502\n#&gt; \u2502 c   \u2506 3.0 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Pass a single column name to partition by that column.\ndf$partition_by(\"a\")\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2502\n#&gt; \u2502 a   \u2506 1.0 \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; [[2]]\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 b   \u2506 2.0 \u2506 4.0 \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; [[3]]\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 c   \u2506 3.0 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Partition by multiple columns.\ndf$partition_by(\"a\", \"b\")\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2502\n#&gt; \u2502 a   \u2506 1.0 \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; [[2]]\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 b   \u2506 2.0 \u2506 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; [[3]]\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; [[4]]\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 c   \u2506 3.0 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Partition by column data type\ndf$partition_by(pl$String)\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2502\n#&gt; \u2502 a   \u2506 1.0 \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; [[2]]\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 b   \u2506 2.0 \u2506 4.0 \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; [[3]]\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 c   \u2506 3.0 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># If `as_nested_list = TRUE`, the output is a list whose elements have a `key` and a `data` field.\n# The `key` is a named list of the key values, and the `data` is the DataFrame.\ndf$partition_by(\"a\", \"b\", as_nested_list = TRUE)\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [[1]]$key\n#&gt; [[1]]$key$a\n#&gt; [1] \"a\"\n#&gt; \n#&gt; [[1]]$key$b\n#&gt; [1] 1\n#&gt; \n#&gt; \n#&gt; [[1]]$data\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2502\n#&gt; \u2502 a   \u2506 1.0 \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; \n#&gt; [[2]]\n#&gt; [[2]]$key\n#&gt; [[2]]$key$a\n#&gt; [1] \"b\"\n#&gt; \n#&gt; [[2]]$key$b\n#&gt; [1] 2\n#&gt; \n#&gt; \n#&gt; [[2]]$data\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 b   \u2506 2.0 \u2506 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; \n#&gt; [[3]]\n#&gt; [[3]]$key\n#&gt; [[3]]$key$a\n#&gt; [1] \"b\"\n#&gt; \n#&gt; [[3]]$key$b\n#&gt; [1] 3\n#&gt; \n#&gt; \n#&gt; [[3]]$data\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; \n#&gt; [[4]]\n#&gt; [[4]]$key\n#&gt; [[4]]$key$a\n#&gt; [1] \"c\"\n#&gt; \n#&gt; [[4]]$key$b\n#&gt; [1] 3\n#&gt; \n#&gt; \n#&gt; [[4]]$data\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 c   \u2506 3.0 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># `as_nested_list = TRUE` should be used with `maintain_order = TRUE` or `include_key = TRUE`.\ntryCatch(\n  df$partition_by(\"a\", \"b\", maintain_order = FALSE, include_key = FALSE, as_nested_list = TRUE),\n  warning = function(w) w\n)\n</code></pre> <pre><code>#&gt; &lt;simpleWarning in df$partition_by(\"a\", \"b\", maintain_order = FALSE, include_key = FALSE,     as_nested_list = TRUE): cannot use `$partition_by` with `maintain_order = FALSE, include_key = FALSE, as_nested_list = TRUE`. Fall back to a flat list.&gt;\n</code></pre> <pre><code># Example of using with lapply(), and printing the key and the data summary\ndf$partition_by(\"a\", \"b\", maintain_order = FALSE, as_nested_list = TRUE) |&gt;\n  lapply(\\(x) {\n    sprintf(\"\\nThe key value of `a` is %s and the key value of `b` is %s\\n\", x$key$a, x$key$b) |&gt;\n      cat()\n    x$data$drop(names(x$key))$describe() |&gt;\n      print()\n    invisible(NULL)\n  }) |&gt;\n  invisible()\n</code></pre> <pre><code>#&gt; \n#&gt; The key value of `a` is c and the key value of `b` is 3\n#&gt; shape: (9, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 statistic  \u2506 c    \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2502\n#&gt; \u2502 str        \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 count      \u2506 1.0  \u2502\n#&gt; \u2502 null_count \u2506 0.0  \u2502\n#&gt; \u2502 mean       \u2506 1.0  \u2502\n#&gt; \u2502 std        \u2506 null \u2502\n#&gt; \u2502 min        \u2506 1.0  \u2502\n#&gt; \u2502 25%        \u2506 1.0  \u2502\n#&gt; \u2502 50%        \u2506 1.0  \u2502\n#&gt; \u2502 75%        \u2506 1.0  \u2502\n#&gt; \u2502 max        \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; The key value of `a` is b and the key value of `b` is 2\n#&gt; shape: (9, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 statistic  \u2506 c    \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2502\n#&gt; \u2502 str        \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 count      \u2506 1.0  \u2502\n#&gt; \u2502 null_count \u2506 0.0  \u2502\n#&gt; \u2502 mean       \u2506 4.0  \u2502\n#&gt; \u2502 std        \u2506 null \u2502\n#&gt; \u2502 min        \u2506 4.0  \u2502\n#&gt; \u2502 25%        \u2506 4.0  \u2502\n#&gt; \u2502 50%        \u2506 4.0  \u2502\n#&gt; \u2502 75%        \u2506 4.0  \u2502\n#&gt; \u2502 max        \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; The key value of `a` is b and the key value of `b` is 3\n#&gt; shape: (9, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 statistic  \u2506 c    \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2502\n#&gt; \u2502 str        \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 count      \u2506 1.0  \u2502\n#&gt; \u2502 null_count \u2506 0.0  \u2502\n#&gt; \u2502 mean       \u2506 2.0  \u2502\n#&gt; \u2502 std        \u2506 null \u2502\n#&gt; \u2502 min        \u2506 2.0  \u2502\n#&gt; \u2502 25%        \u2506 2.0  \u2502\n#&gt; \u2502 50%        \u2506 2.0  \u2502\n#&gt; \u2502 75%        \u2506 2.0  \u2502\n#&gt; \u2502 max        \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; The key value of `a` is a and the key value of `b` is 1\n#&gt; shape: (9, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 statistic  \u2506 c        \u2502\n#&gt; \u2502 ---        \u2506 ---      \u2502\n#&gt; \u2502 str        \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 count      \u2506 2.0      \u2502\n#&gt; \u2502 null_count \u2506 0.0      \u2502\n#&gt; \u2502 mean       \u2506 4.0      \u2502\n#&gt; \u2502 std        \u2506 1.414214 \u2502\n#&gt; \u2502 min        \u2506 3.0      \u2502\n#&gt; \u2502 25%        \u2506 3.0      \u2502\n#&gt; \u2502 50%        \u2506 5.0      \u2502\n#&gt; \u2502 75%        \u2506 5.0      \u2502\n#&gt; \u2502 max        \u2506 5.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_pivot.html","title":"Pivot data from long to wide","text":"<p>Source code</p>"},{"location":"man/DataFrame_pivot.html#description","title":"Description","text":"<p>Pivot data from long to wide</p>"},{"location":"man/DataFrame_pivot.html#usage","title":"Usage","text":"<pre><code>DataFrame_pivot(\n  values,\n  index,\n  columns,\n  ...,\n  aggregate_function = NULL,\n  maintain_order = TRUE,\n  sort_columns = FALSE,\n  separator = \"_\"\n)\n</code></pre>"},{"location":"man/DataFrame_pivot.html#arguments","title":"Arguments","text":"<code>values</code>  Column values to aggregate. Can be multiple columns if the <code>columns</code> arguments contains multiple columns as well.  <code>index</code>  One or multiple keys to group by.  <code>columns</code>  Name of the column(s) whose values will be used as the header of the output DataFrame.  <code>\u2026</code>  Not used.  <code>aggregate_function</code>   One of:  <ul> <li>  string indicating the expressions to aggregate with, such as \u2018first\u2019, \u2018sum\u2019, \u2018max\u2019, \u2018min\u2019, \u2018mean\u2019, \u2018median\u2019, \u2018last\u2019, \u2018count\u2019),  </li> <li>  an Expr e.g.\u00a0<code>pl$element()$sum()</code> </li> </ul> <code>maintain_order</code>  Sort the grouped keys so that the output order is predictable.  <code>sort_columns</code>  Sort the transposed columns by name. Default is by order of discovery.  <code>separator</code>  Used as separator/delimiter in generated column names."},{"location":"man/DataFrame_pivot.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_pivot.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  foo = c(\"one\", \"one\", \"one\", \"two\", \"two\", \"two\"),\n  bar = c(\"A\", \"B\", \"C\", \"A\", \"B\", \"C\"),\n  baz = c(1, 2, 3, 4, 5, 6)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 baz \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 str \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one \u2506 A   \u2506 1.0 \u2502\n#&gt; \u2502 one \u2506 B   \u2506 2.0 \u2502\n#&gt; \u2502 one \u2506 C   \u2506 3.0 \u2502\n#&gt; \u2502 two \u2506 A   \u2506 4.0 \u2502\n#&gt; \u2502 two \u2506 B   \u2506 5.0 \u2502\n#&gt; \u2502 two \u2506 C   \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$pivot(\n  values = \"baz\", index = \"foo\", columns = \"bar\"\n)\n</code></pre> <pre><code>#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 A   \u2506 B   \u2506 C   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one \u2506 1.0 \u2506 2.0 \u2506 3.0 \u2502\n#&gt; \u2502 two \u2506 4.0 \u2506 5.0 \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Run an expression as aggregation function\ndf = pl$DataFrame(\n  col1 = c(\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"),\n  col2 = c(\"x\", \"x\", \"x\", \"x\", \"y\", \"y\"),\n  col3 = c(6, 7, 3, 2, 5, 7)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col1 \u2506 col2 \u2506 col3 \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 str  \u2506 str  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a    \u2506 x    \u2506 6.0  \u2502\n#&gt; \u2502 a    \u2506 x    \u2506 7.0  \u2502\n#&gt; \u2502 a    \u2506 x    \u2506 3.0  \u2502\n#&gt; \u2502 b    \u2506 x    \u2506 2.0  \u2502\n#&gt; \u2502 b    \u2506 y    \u2506 5.0  \u2502\n#&gt; \u2502 b    \u2506 y    \u2506 7.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$pivot(\n  index = \"col1\",\n  columns = \"col2\",\n  values = \"col3\",\n  aggregate_function = pl$element()$tanh()$mean()\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col1 \u2506 x        \u2506 y        \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 str  \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a    \u2506 0.998347 \u2506 null     \u2502\n#&gt; \u2502 b    \u2506 0.964028 \u2506 0.999954 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_quantile.html","title":"Quantile","text":"<p>Source code</p>"},{"location":"man/DataFrame_quantile.html#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to a unique quantile value. Use <code>$describe()</code> to specify several quantiles.</p>"},{"location":"man/DataFrame_quantile.html#usage","title":"Usage","text":"<pre><code>DataFrame_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"man/DataFrame_quantile.html#arguments","title":"Arguments","text":"<code>quantile</code>  Numeric of length 1 between 0 and 1.  <code>interpolation</code>  One of <code>\u201cnearest\u201d</code>, <code>\u201chigher\u201d</code>, <code>\u201clower\u201d</code>, <code>\u201cmidpoint\u201d</code>, or <code>\u201clinear\u201d</code>."},{"location":"man/DataFrame_quantile.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_quantile.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$quantile(.4)\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_rechunk.html","title":"Rechunk a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_rechunk.html#description","title":"Description","text":"<p>Rechunking re-allocates any \"chunked\" memory allocations to speed-up e.g.\u00a0vectorized operations.</p>"},{"location":"man/DataFrame_rechunk.html#usage","title":"Usage","text":"<pre><code>DataFrame_rechunk()\n</code></pre>"},{"location":"man/DataFrame_rechunk.html#details","title":"Details","text":"<p>A DataFrame is a vector of Series. Each Series in rust-polars is a wrapper around a ChunkedArray, which is like a virtual contiguous vector physically backed by an ordered set of chunks. Each chunk of values has a contiguous memory layout and is an arrow array. Arrow arrays are a fast, thread-safe and cross-platform memory layout.</p> <p>In R, combining with <code>c()</code> or <code>rbind()</code> requires immediate vector re-allocation to place vector values in contiguous memory. This is slow and memory consuming, and it is why repeatedly appending to a vector in R is discouraged.</p> <p>In polars, when we concatenate or append to Series or DataFrame, the re-allocation can be avoided or delayed by simply appending chunks to each individual Series. However, if chunks become many and small or are misaligned across Series, this can hurt the performance of subsequent operations.</p> <p>Most places in the polars api where chunking could occur, the user have to typically actively opt-out by setting an argument <code>rechunk = FALSE</code>.</p>"},{"location":"man/DataFrame_rechunk.html#value","title":"Value","text":"<p>A DataFrame</p>"},{"location":"man/DataFrame_rechunk.html#see-also","title":"See Also","text":"<p><code>\\&lt;DataFrame&gt;$n_chunks()</code></p>"},{"location":"man/DataFrame_rechunk.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create DataFrame with misaligned chunks\ndf = pl$concat(\n  1:10, # single chunk\n  pl$concat(1:5, 1:5, rechunk = FALSE, how = \"vertical\")$rename(\"b\"), # two chunks\n  how = \"horizontal\"\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (10, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1   \u2502\n#&gt; \u2502 2   \u2506 2   \u2502\n#&gt; \u2502 3   \u2506 3   \u2502\n#&gt; \u2502 4   \u2506 4   \u2502\n#&gt; \u2502 5   \u2506 5   \u2502\n#&gt; \u2502 6   \u2506 1   \u2502\n#&gt; \u2502 7   \u2506 2   \u2502\n#&gt; \u2502 8   \u2506 3   \u2502\n#&gt; \u2502 9   \u2506 4   \u2502\n#&gt; \u2502 10  \u2506 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 2\n</code></pre> <pre><code># rechunk a chunked DataFrame\ndf$rechunk()$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 1\n</code></pre> <pre><code># rechunk is not an in-place operation\ndf$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 2\n</code></pre> <pre><code># The following toy example emulates the Series \"chunkyness\" in R. Here it a\n# S3-classed list with same type of vectors and where have all relevant S3\n# generics implemented to make behave as if it was a regular vector.\n\"+.chunked_vector\" = \\(x, y) structure(list(unlist(x) + unlist(y)), class = \"chunked_vector\")\nprint.chunked_vector = \\(x, ...) print(unlist(x), ...)\nc.chunked_vector = \\(...) {\n  structure(do.call(c, lapply(list(...), unclass)), class = \"chunked_vector\")\n}\nrechunk = \\(x) structure(unlist(x), class = \"chunked_vector\")\nx = structure(list(1:4, 5L), class = \"chunked_vector\")\nx\n</code></pre> <pre><code>#&gt; [1] 1 2 3 4 5\n</code></pre> <pre><code>x + 5:1\n</code></pre> <pre><code>#&gt; [1] 6 6 6 6 6\n</code></pre> <pre><code>lapply(x, tracemem) # trace chunks to verify no re-allocation\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] \"&lt;0x55bbfed8ba78&gt;\"\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"&lt;0x55bbfbc86038&gt;\"\n</code></pre> <pre><code>z = c(x, x)\nz # looks like a plain vector\n</code></pre> <pre><code>#&gt;  [1] 1 2 3 4 5 1 2 3 4 5\n</code></pre> <pre><code>lapply(z, tracemem) # mem allocation  in z are the same from x\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] \"&lt;0x55bbfed8ba78&gt;\"\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"&lt;0x55bbfbc86038&gt;\"\n#&gt; \n#&gt; [[3]]\n#&gt; [1] \"&lt;0x55bbfed8ba78&gt;\"\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"&lt;0x55bbfbc86038&gt;\"\n</code></pre> <pre><code>str(z)\n</code></pre> <pre><code>#&gt; List of 4\n#&gt;  $ : int [1:4] 1 2 3 4\n#&gt;  $ : int 5\n#&gt;  $ : int [1:4] 1 2 3 4\n#&gt;  $ : int 5\n#&gt;  - attr(*, \"class\")= chr \"chunked_vector\"\n</code></pre> <pre><code>z = rechunk(z)\nstr(z)\n</code></pre> <pre><code>#&gt;  'chunked_vector' int [1:10] 1 2 3 4 5 1 2 3 4 5\n</code></pre>"},{"location":"man/DataFrame_rename.html","title":"Rename columns of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_rename.html#description","title":"Description","text":"<p>Rename columns of a DataFrame</p>"},{"location":"man/DataFrame_rename.html#usage","title":"Usage","text":"<pre><code>DataFrame_rename(...)\n</code></pre>"},{"location":"man/DataFrame_rename.html#arguments","title":"Arguments","text":"<code>\u2026</code>   One of the following:  <ul> <li>  params like <code>new_name = \u201cold_name\u201d</code> to rename selected variables.  </li> <li>  as above but with params wrapped in a list  </li> </ul>"},{"location":"man/DataFrame_rename.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_rename.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(mtcars)\n\ndf$rename(miles_per_gallon = \"mpg\", horsepower = \"hp\")\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 miles_per_gallon \u2506 cyl \u2506 disp  \u2506 horsepower \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---              \u2506 --- \u2506 ---   \u2506 ---        \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64              \u2506 f64 \u2506 f64   \u2506 f64        \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8             \u2506 4.0 \u2506 108.0 \u2506 93.0       \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4             \u2506 6.0 \u2506 258.0 \u2506 110.0      \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7             \u2506 8.0 \u2506 360.0 \u2506 175.0      \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026                \u2506 \u2026   \u2506 \u2026     \u2506 \u2026          \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4             \u2506 4.0 \u2506 95.1  \u2506 113.0      \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8             \u2506 8.0 \u2506 351.0 \u2506 264.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7             \u2506 6.0 \u2506 145.0 \u2506 175.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0             \u2506 8.0 \u2506 301.0 \u2506 335.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4             \u2506 4.0 \u2506 121.0 \u2506 109.0      \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>replacements = list(miles_per_gallon = \"mpg\", horsepower = \"hp\")\ndf$rename(replacements)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 miles_per_gallon \u2506 cyl \u2506 disp  \u2506 horsepower \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---              \u2506 --- \u2506 ---   \u2506 ---        \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64              \u2506 f64 \u2506 f64   \u2506 f64        \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8             \u2506 4.0 \u2506 108.0 \u2506 93.0       \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4             \u2506 6.0 \u2506 258.0 \u2506 110.0      \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7             \u2506 8.0 \u2506 360.0 \u2506 175.0      \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026                \u2506 \u2026   \u2506 \u2026     \u2506 \u2026          \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4             \u2506 4.0 \u2506 95.1  \u2506 113.0      \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8             \u2506 8.0 \u2506 351.0 \u2506 264.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7             \u2506 6.0 \u2506 145.0 \u2506 175.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0             \u2506 8.0 \u2506 301.0 \u2506 335.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4             \u2506 4.0 \u2506 121.0 \u2506 109.0      \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_reverse.html","title":"Reverse","text":"<p>Source code</p>"},{"location":"man/DataFrame_reverse.html#description","title":"Description","text":"<p>Reverse the DataFrame (the last row becomes the first one, etc.).</p>"},{"location":"man/DataFrame_reverse.html#usage","title":"Usage","text":"<pre><code>DataFrame_reverse()\n</code></pre>"},{"location":"man/DataFrame_reverse.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_reverse.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$reverse()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_rolling.html","title":"Create rolling groups based on a date/time or integer column","text":"<p>Source code</p>"},{"location":"man/DataFrame_rolling.html#description","title":"Description","text":"<p>If you have a time series <code>\\&lt;t_0, t_1, \u2026, t_n&gt;</code>, then by default the windows created will be:</p> <ul> <li>  (t_0 - period, t_0\\]  </li> <li>  (t_1 - period, t_1\\]  </li> <li>  \u2026  </li> <li>  (t_n - period, t_n\\]  </li> </ul> <p>whereas if you pass a non-default offset, then the windows will be:</p> <ul> <li>  (t_0 + offset, t_0 + offset + period\\]  </li> <li>  (t_1 + offset, t_1 + offset + period\\]  </li> <li>  \u2026  </li> <li>  (t_n + offset, t_n + offset + period\\]  </li> </ul>"},{"location":"man/DataFrame_rolling.html#usage","title":"Usage","text":"<pre><code>DataFrame_rolling(\n  index_column,\n  ...,\n  period,\n  offset = NULL,\n  closed = \"right\",\n  group_by = NULL,\n  check_sorted = TRUE\n)\n</code></pre>"},{"location":"man/DataFrame_rolling.html#arguments","title":"Arguments","text":"<code>index_column</code>  Column used to group based on the time window. Often of type Date/Datetime. This column must be sorted in ascending order (or, if <code>by</code> is specified, then it must be sorted in ascending order within each group). In case of a rolling group by on indices, dtype needs to be either Int32 or Int64. Note that Int32 gets temporarily cast to Int64, so if performance matters use an Int64 column.  <code>\u2026</code>  Ignored.  <code>period</code>  A character representing the length of the window, must be non-negative. See the <code>Polars duration string language</code> section for details.  <code>offset</code>  A character representing the offset of the window, or <code>NULL</code> (default). If <code>NULL</code>, <code>-period</code> is used. See the <code>Polars duration string language</code> section for details.  <code>closed</code>  Define which sides of the temporal interval are closed (inclusive). This can be either <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code> or <code>\u201cnone\u201d</code>.  <code>group_by</code>  Also group by this column/these columns.  <code>check_sorted</code>  Check whether data is actually sorted. Checking it is expensive so if you are sure the data within the <code>index_column</code> is sorted, you can set this to <code>FALSE</code> but note that if the data actually is unsorted, it will lead to incorrect output."},{"location":"man/DataFrame_rolling.html#details","title":"Details","text":"<p>In case of a rolling operation on an integer column, the windows are defined by:</p> <ul> <li>  \"1i\" \\# length 1  </li> <li>  \"10i\" \\# length 10  </li> </ul>"},{"location":"man/DataFrame_rolling.html#value","title":"Value","text":"<p>A RollingGroupBy object</p>"},{"location":"man/DataFrame_rolling.html#polars-duration-string-language","title":"Polars duration string language","text":"<p>Polars duration string language is a simple representation of durations. It is used in many Polars functions that accept durations.</p> <p>It has the following format:</p> <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 calendar day)  </li> <li>  1w (1 calendar week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1q (1 calendar quarter)  </li> <li>  1y (1 calendar year)  </li> </ul> <p>Or combine them: <code>\u201c3d12h4m25s\u201d</code> # 3 days, 12 hours, 4 minutes, and 25 seconds</p> <p>By \"calendar day\", we mean the corresponding time on the next day (which may not be 24 hours, due to daylight savings). Similarly for \"calendar week\", \"calendar month\", \"calendar quarter\", and \"calendar year\".</p>"},{"location":"man/DataFrame_rolling.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$group_by_dynamic()"},{"location":"man/DataFrame_rolling.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndate = c(\n  \"2020-01-01 13:45:48\",\n  \"2020-01-01 16:42:13\",\n  \"2020-01-01 16:45:09\",\n  \"2020-01-02 18:12:48\",\n  \"2020-01-03 19:45:32\",\n  \"2020-01-08 23:16:43\"\n)\ndf = pl$DataFrame(dt = date, a = c(3, 7, 5, 9, 2, 1))$with_columns(\n  pl$col(\"dt\")$str$strptime(pl$Datetime())$set_sorted()\n)\n\ndf$rolling(index_column = \"dt\", period = \"2d\")$agg(\n  sum_a = pl$sum(\"a\"),\n  min_a = pl$min(\"a\"),\n  max_a = pl$max(\"a\")\n)\n</code></pre> <pre><code>#&gt; shape: (6, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dt                  \u2506 sum_a \u2506 min_a \u2506 max_a \u2502\n#&gt; \u2502 ---                 \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 f64   \u2506 f64   \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 13:45:48 \u2506 3.0   \u2506 3.0   \u2506 3.0   \u2502\n#&gt; \u2502 2020-01-01 16:42:13 \u2506 10.0  \u2506 3.0   \u2506 7.0   \u2502\n#&gt; \u2502 2020-01-01 16:45:09 \u2506 15.0  \u2506 3.0   \u2506 7.0   \u2502\n#&gt; \u2502 2020-01-02 18:12:48 \u2506 24.0  \u2506 3.0   \u2506 9.0   \u2502\n#&gt; \u2502 2020-01-03 19:45:32 \u2506 11.0  \u2506 2.0   \u2506 9.0   \u2502\n#&gt; \u2502 2020-01-08 23:16:43 \u2506 1.0   \u2506 1.0   \u2506 1.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_sample.html","title":"Take a sample of rows from a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_sample.html#description","title":"Description","text":"<p>Take a sample of rows from a DataFrame</p>"},{"location":"man/DataFrame_sample.html#usage","title":"Usage","text":"<pre><code>DataFrame_sample(\n  n = NULL,\n  fraction = NULL,\n  with_replacement = FALSE,\n  shuffle = FALSE,\n  seed = NULL\n)\n</code></pre>"},{"location":"man/DataFrame_sample.html#arguments","title":"Arguments","text":"<code>n</code>  Number of rows to return. Cannot be used with <code>fraction</code>.  <code>fraction</code>  Fraction of rows to return (between 0 and 1). Cannot be used with <code>n</code>.  <code>with_replacement</code>  Allow values to be sampled more than once.  <code>shuffle</code>  If <code>TRUE</code>, the order of the sampled rows will be shuffled. If <code>FALSE</code> (default), the order of the returned rows will be neither stable nor fully random.  <code>seed</code>  Seed for the random number generator. If set to <code>NULL</code> (default), a random seed is generated for each sample operation."},{"location":"man/DataFrame_sample.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_sample.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris)\ndf$sample(n = 20)\n</code></pre> <pre><code>#&gt; shape: (20, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species    \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---        \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 7.3          \u2506 2.9         \u2506 6.3          \u2506 1.8         \u2506 virginica  \u2502\n#&gt; \u2502 5.5          \u2506 2.3         \u2506 4.0          \u2506 1.3         \u2506 versicolor \u2502\n#&gt; \u2502 5.7          \u2506 4.4         \u2506 1.5          \u2506 0.4         \u2506 setosa     \u2502\n#&gt; \u2502 6.4          \u2506 3.2         \u2506 4.5          \u2506 1.5         \u2506 versicolor \u2502\n#&gt; \u2502 5.6          \u2506 2.7         \u2506 4.2          \u2506 1.3         \u2506 versicolor \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026          \u2502\n#&gt; \u2502 7.2          \u2506 3.2         \u2506 6.0          \u2506 1.8         \u2506 virginica  \u2502\n#&gt; \u2502 6.7          \u2506 3.1         \u2506 4.4          \u2506 1.4         \u2506 versicolor \u2502\n#&gt; \u2502 7.6          \u2506 3.0         \u2506 6.6          \u2506 2.1         \u2506 virginica  \u2502\n#&gt; \u2502 5.4          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa     \u2502\n#&gt; \u2502 7.7          \u2506 3.8         \u2506 6.7          \u2506 2.2         \u2506 virginica  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sample(frac = 0.1)\n</code></pre> <pre><code>#&gt; shape: (15, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species    \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---        \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 7.2          \u2506 3.6         \u2506 6.1          \u2506 2.5         \u2506 virginica  \u2502\n#&gt; \u2502 6.1          \u2506 2.9         \u2506 4.7          \u2506 1.4         \u2506 versicolor \u2502\n#&gt; \u2502 5.1          \u2506 2.5         \u2506 3.0          \u2506 1.1         \u2506 versicolor \u2502\n#&gt; \u2502 6.2          \u2506 2.8         \u2506 4.8          \u2506 1.8         \u2506 virginica  \u2502\n#&gt; \u2502 4.9          \u2506 2.4         \u2506 3.3          \u2506 1.0         \u2506 versicolor \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026          \u2502\n#&gt; \u2502 5.0          \u2506 3.3         \u2506 1.4          \u2506 0.2         \u2506 setosa     \u2502\n#&gt; \u2502 6.5          \u2506 2.8         \u2506 4.6          \u2506 1.5         \u2506 versicolor \u2502\n#&gt; \u2502 5.1          \u2506 3.7         \u2506 1.5          \u2506 0.4         \u2506 setosa     \u2502\n#&gt; \u2502 5.6          \u2506 2.9         \u2506 3.6          \u2506 1.3         \u2506 versicolor \u2502\n#&gt; \u2502 6.7          \u2506 3.1         \u2506 5.6          \u2506 2.4         \u2506 virginica  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_select.html","title":"Select and modify columns of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_select.html#description","title":"Description","text":"<p>Similar to <code>dplyr::mutate()</code>. However, it discards unmentioned columns (like <code>.()</code> in <code>data.table</code>).</p>"},{"location":"man/DataFrame_select.html#usage","title":"Usage","text":"<pre><code>DataFrame_select(...)\n</code></pre>"},{"location":"man/DataFrame_select.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to keep. Those can be expressions (e.g <code>pl$col(\u201ca\u201d)</code>), column names (e.g <code>\u201ca\u201d</code>), or list containing expressions or column names (e.g <code>list(pl$col(\u201ca\u201d))</code>)."},{"location":"man/DataFrame_select.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_select.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$select(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\n</code></pre> <pre><code>#&gt; shape: (150, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 abs_SL \u2506 add_2_SL \u2502\n#&gt; \u2502 ---    \u2506 ---      \u2502\n#&gt; \u2502 f64    \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1    \u2506 7.1      \u2502\n#&gt; \u2502 4.9    \u2506 6.9      \u2502\n#&gt; \u2502 4.7    \u2506 6.7      \u2502\n#&gt; \u2502 4.6    \u2506 6.6      \u2502\n#&gt; \u2502 5.0    \u2506 7.0      \u2502\n#&gt; \u2502 \u2026      \u2506 \u2026        \u2502\n#&gt; \u2502 6.7    \u2506 8.7      \u2502\n#&gt; \u2502 6.3    \u2506 8.3      \u2502\n#&gt; \u2502 6.5    \u2506 8.5      \u2502\n#&gt; \u2502 6.2    \u2506 8.2      \u2502\n#&gt; \u2502 5.9    \u2506 7.9      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_shift.html","title":"Shift a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_shift.html#description","title":"Description","text":"<p>Shift the values by a given period. If the period (<code>n</code>) is positive, then <code>n</code> rows will be inserted at the top of the DataFrame and the last <code>n</code> rows will be discarded. Vice-versa if the period is negative. In the end, the total number of rows of the DataFrame doesn\u2019t change.</p>"},{"location":"man/DataFrame_shift.html#usage","title":"Usage","text":"<pre><code>DataFrame_shift(periods = 1)\n</code></pre>"},{"location":"man/DataFrame_shift.html#arguments","title":"Arguments","text":"<code>periods</code>  Number of periods to shift (can be negative)."},{"location":"man/DataFrame_shift.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_shift.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$shift(2)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl  \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs   \u2506 am   \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2506   \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64   \u2506 f64   \u2506   \u2506 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0  \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026    \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 27.3 \u2506 4.0  \u2506 79.0  \u2506 66.0  \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 26.0 \u2506 4.0  \u2506 120.3 \u2506 91.0  \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0  \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0  \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0  \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$DataFrame(mtcars)$shift(-2)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl  \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs   \u2506 am   \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2506   \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64   \u2506 f64   \u2506   \u2506 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0  \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0  \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0  \u2506 0.0  \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0  \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0  \u2506 0.0  \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.1 \u2506 6.0  \u2506 225.0 \u2506 105.0 \u2506 \u2026 \u2506 1.0  \u2506 0.0  \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0  \u2506 360.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0  \u2506 0.0  \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026    \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 19.7 \u2506 6.0  \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0  \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0  \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_shift_and_fill.html","title":"Shift and fill","text":"<p>Source code</p>"},{"location":"man/DataFrame_shift_and_fill.html#description","title":"Description","text":"<p>Shift the values by a given period and fill the resulting null values. See the docs of <code>$shift()</code> for more details on shifting.</p>"},{"location":"man/DataFrame_shift_and_fill.html#usage","title":"Usage","text":"<pre><code>DataFrame_shift_and_fill(fill_value, periods = 1)\n</code></pre>"},{"location":"man/DataFrame_shift_and_fill.html#arguments","title":"Arguments","text":"<code>fill_value</code>  Fill new <code>NULL</code> values with this value. Must of length 1. A logical value will be converted to numeric.  <code>periods</code>  Number of periods to shift (can be negative)."},{"location":"man/DataFrame_shift_and_fill.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_shift_and_fill.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(mtcars)\n\n# insert two rows filled with 0 at the top of the DataFrame\ndf$shift_and_fill(0, 2)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0  \u2506 0.0 \u2506 0.0   \u2506 0.0   \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 0.0  \u2506 0.0  \u2502\n#&gt; \u2502 0.0  \u2506 0.0 \u2506 0.0   \u2506 0.0   \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 0.0  \u2506 0.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 27.3 \u2506 4.0 \u2506 79.0  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 26.0 \u2506 4.0 \u2506 120.3 \u2506 91.0  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># automatic conversion of logical value to numeric\ndf$shift_and_fill(TRUE, 2)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 1.0 \u2506 1.0   \u2506 1.0   \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 1.0  \u2506 1.0  \u2502\n#&gt; \u2502 1.0  \u2506 1.0 \u2506 1.0   \u2506 1.0   \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 1.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 27.3 \u2506 4.0 \u2506 79.0  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 26.0 \u2506 4.0 \u2506 120.3 \u2506 91.0  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_slice.html","title":"Slice","text":"<p>Source code</p>"},{"location":"man/DataFrame_slice.html#description","title":"Description","text":"<p>Get a slice of the DataFrame.</p>"},{"location":"man/DataFrame_slice.html#usage","title":"Usage","text":"<pre><code>DataFrame_slice(offset, length = NULL)\n</code></pre>"},{"location":"man/DataFrame_slice.html#arguments","title":"Arguments","text":"<code>offset</code>  Start index, can be a negative value. This is 0-indexed, so <code>offset = 1</code> doesn\u2019t include the first row.  <code>length</code>  Length of the slice. If <code>NULL</code> (default), all rows starting at the offset will be selected."},{"location":"man/DataFrame_slice.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_slice.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# skip the first 2 rows and take the 4 following rows\npl$DataFrame(mtcars)$slice(2, 4)\n</code></pre> <pre><code>#&gt; shape: (4, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 225.0 \u2506 105.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># this is equivalent to:\nmtcars[3:6, ]\n</code></pre> <pre><code>#&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n</code></pre>"},{"location":"man/DataFrame_sort.html","title":"Sort a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_sort.html#description","title":"Description","text":"<p>Sort by one or more Expressions.</p>"},{"location":"man/DataFrame_sort.html#usage","title":"Usage","text":"<pre><code>DataFrame_sort(\n  by,\n  ...,\n  descending = FALSE,\n  nulls_last = FALSE,\n  maintain_order = FALSE\n)\n</code></pre>"},{"location":"man/DataFrame_sort.html#arguments","title":"Arguments","text":"<code>by</code>  Column(s) to sort by. Can be character vector of column names, a list of Expr(s) or a list with a mix of Expr(s) and column names.  <code>\u2026</code>  More columns to sort by as above but provided one Expr per argument.  <code>descending</code>  Logical. Sort in descending order (default is <code>FALSE</code>). This must be either of length 1 or a logical vector of the same length as the number of Expr(s) specified in <code>by</code> and <code>\u2026</code>.  <code>nulls_last</code>  Logical. Place <code>NULL</code>s at the end? Default is <code>FALSE</code>.  <code>maintain_order</code>  Whether the order should be maintained if elements are equal. If <code>TRUE</code>, streaming is not possible and performance might be worse since this requires a stable search."},{"location":"man/DataFrame_sort.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_sort.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = mtcars\ndf$mpg[1] = NA\ndf = pl$DataFrame(df)\ndf$sort(\"mpg\")\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 27.3 \u2506 4.0 \u2506 79.0  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(\"mpg\", nulls_last = TRUE)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.7 \u2506 8.0 \u2506 440.0 \u2506 230.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(\"cyl\", \"mpg\")\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 24.4 \u2506 4.0 \u2506 146.7 \u2506 62.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"))\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 24.4 \u2506 4.0 \u2506 146.7 \u2506 62.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"), descending = TRUE)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 24.4 \u2506 4.0 \u2506 146.7 \u2506 62.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"), descending = c(TRUE, FALSE))\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.7 \u2506 8.0 \u2506 440.0 \u2506 230.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 27.3 \u2506 4.0 \u2506 79.0  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(pl$col(\"cyl\"), pl$col(\"mpg\"))\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 24.4 \u2506 4.0 \u2506 146.7 \u2506 62.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_std.html","title":"Std","text":"<p>Source code</p>"},{"location":"man/DataFrame_std.html#description","title":"Description","text":"<p>Aggregate the columns of this DataFrame to their standard deviation values.</p>"},{"location":"man/DataFrame_std.html#usage","title":"Usage","text":"<pre><code>DataFrame_std(ddof = 1)\n</code></pre>"},{"location":"man/DataFrame_std.html#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/DataFrame_std.html#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_std.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$std()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg      \u2506 cyl      \u2506 disp       \u2506 hp        \u2506 \u2026 \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb   \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2506 ---        \u2506 ---       \u2506   \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---    \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2506 f64        \u2506 f64       \u2506   \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.026948 \u2506 1.785922 \u2506 123.938694 \u2506 68.562868 \u2506 \u2026 \u2506 0.504016 \u2506 0.498991 \u2506 0.737804 \u2506 1.6152 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_sum.html","title":"Sum","text":"<p>Source code</p>"},{"location":"man/DataFrame_sum.html#description","title":"Description","text":"<p>Aggregate the columns of this DataFrame to their sum values.</p>"},{"location":"man/DataFrame_sum.html#usage","title":"Usage","text":"<pre><code>DataFrame_sum()\n</code></pre>"},{"location":"man/DataFrame_sum.html#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_sum.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$sum()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg   \u2506 cyl   \u2506 disp   \u2506 hp     \u2506 \u2026 \u2506 vs   \u2506 am   \u2506 gear  \u2506 carb \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---    \u2506 ---    \u2506   \u2506 ---  \u2506 ---  \u2506 ---   \u2506 ---  \u2502\n#&gt; \u2502 f64   \u2506 f64   \u2506 f64    \u2506 f64    \u2506   \u2506 f64  \u2506 f64  \u2506 f64   \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 642.9 \u2506 198.0 \u2506 7383.1 \u2506 4694.0 \u2506 \u2026 \u2506 14.0 \u2506 13.0 \u2506 118.0 \u2506 90.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_tail.html","title":"Get the last <code>n</code> rows.","text":"<p>Source code</p>"},{"location":"man/DataFrame_tail.html#description","title":"Description","text":"<p>Get the last <code>n</code> rows.</p>"},{"location":"man/DataFrame_tail.html#usage","title":"Usage","text":"<pre><code>DataFrame_tail(n = 5L)\n</code></pre>"},{"location":"man/DataFrame_tail.html#arguments","title":"Arguments","text":"<code>n</code>  Number of rows to return. If a negative value is passed, return all rows except the first <code>abs(n)</code>."},{"location":"man/DataFrame_tail.html#value","title":"Value","text":"<p>A DataFrame</p>"},{"location":"man/DataFrame_tail.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = 1:5, bar = 6:10, ham = letters[1:5])\n\ndf$tail(3)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 ham \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 8   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 9   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 10  \u2506 e   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Pass a negative value to get all rows except the first `abs(n)`.\ndf$tail(-3)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 ham \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4   \u2506 9   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 10  \u2506 e   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_to_data_frame.html","title":"Return Polars DataFrame as R data.frame","text":"<p>Source code</p>"},{"location":"man/DataFrame_to_data_frame.html#description","title":"Description","text":"<p>Return Polars DataFrame as R data.frame</p>"},{"location":"man/DataFrame_to_data_frame.html#usage","title":"Usage","text":"<pre><code>DataFrame_to_data_frame(\n  ...,\n  int64_conversion = polars_options()\\$int64_conversion\n)\n</code></pre>"},{"location":"man/DataFrame_to_data_frame.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Any args pased to <code>as.data.frame()</code>.  <code>int64_conversion</code>   How should Int64 values be handled when converting a polars object to R?  <ul> <li> <code>\u201cdouble\u201d</code> (default) converts the integer values to double.  </li> <li> <code>\u201cbit64\u201d</code> uses <code>bit64::as.integer64()</code> to do the conversion (requires the package <code>bit64</code> to be attached).  </li> <li> <code>\u201cstring\u201d</code> converts Int64 values to character.  </li> </ul>"},{"location":"man/DataFrame_to_data_frame.html#value","title":"Value","text":"<p>An R data.frame</p>"},{"location":"man/DataFrame_to_data_frame.html#conversion-to-r-data-types-considerations","title":"Conversion to R data types considerations","text":"<p>When converting Polars objects, such as DataFrames to R objects, for example via the <code>as.data.frame()</code> generic function, each type in the Polars object is converted to an R type. In some cases, an error may occur because the conversion is not appropriate. In particular, there is a high possibility of an error when converting a Datetime type without a time zone. A Datetime type without a time zone in Polars is converted to the POSIXct type in R, which takes into account the time zone in which the R session is running (which can be checked with the <code>Sys.timezone()</code> function). In this case, if ambiguous times are included, a conversion error will occur. In such cases, change the session time zone using <code>Sys.setenv(TZ = \"UTC\")</code> and then perform the conversion, or use the <code>$dt$replace_time_zone()</code> method on the Datetime type column to explicitly specify the time zone before conversion.</p> <pre># Due to daylight savings, clocks were turned forward 1 hour on Sunday, March 8, 2020, 2:00:00 am\n# so this particular date-time doesn't exist\nnon_existent_time = as_polars_series(\"2020-03-08 02:00:00\")\\$str\\$strptime(pl\\$Datetime(), \"%F %T\")\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    tryCatch(\n      # This causes an error due to the time zone (the `TZ` env var is affected).\n      as.vector(non_existent_time),\n      error = function(e) e\n    )\n  }\n)\n#&gt; &lt;error: in to_r: ComputeError(ErrString(\"datetime '2020-03-08 02:00:00' is non-existent in time zone 'America/New_York'. You may be able to use `non_existent='null'` to return `null` in this case.\")) When calling: devtools::document()&gt;\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    # This is safe.\n    as.vector(non_existent_time\\$dt\\$replace_time_zone(\"UTC\"))\n  }\n)\n#&gt; [1] \"2020-03-08 02:00:00 UTC\"\n</pre>"},{"location":"man/DataFrame_to_data_frame.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris[1:3, ])\ndf$to_data_frame()\n</code></pre> <pre><code>#&gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#&gt; 1          5.1         3.5          1.4         0.2  setosa\n#&gt; 2          4.9         3.0          1.4         0.2  setosa\n#&gt; 3          4.7         3.2          1.3         0.2  setosa\n</code></pre>"},{"location":"man/DataFrame_to_list.html","title":"Return Polars DataFrame as a list of vectors","text":"<p>Source code</p>"},{"location":"man/DataFrame_to_list.html#description","title":"Description","text":"<p>Return Polars DataFrame as a list of vectors</p>"},{"location":"man/DataFrame_to_list.html#usage","title":"Usage","text":"<pre><code>DataFrame_to_list(\n  unnest_structs = TRUE,\n  ...,\n  int64_conversion = polars_options()\\$int64_conversion\n)\n</code></pre>"},{"location":"man/DataFrame_to_list.html#arguments","title":"Arguments","text":"<code>unnest_structs</code>  Logical. If <code>TRUE</code> (default), then <code>$unnest()</code> is applied on any struct column.  <code>\u2026</code>  Any args pased to <code>as.data.frame()</code>.  <code>int64_conversion</code>   How should Int64 values be handled when converting a polars object to R?  <ul> <li> <code>\u201cdouble\u201d</code> (default) converts the integer values to double.  </li> <li> <code>\u201cbit64\u201d</code> uses <code>bit64::as.integer64()</code> to do the conversion (requires the package <code>bit64</code> to be attached).  </li> <li> <code>\u201cstring\u201d</code> converts Int64 values to character.  </li> </ul>"},{"location":"man/DataFrame_to_list.html#details","title":"Details","text":"<p>For simplicity reasons, this implementation relies on unnesting all structs before exporting to R. If <code>unnest_structs = FALSE</code>, then <code>struct</code> columns will be returned as nested lists, where each row is a list of values. Such a structure is not very typical or efficient in R.</p>"},{"location":"man/DataFrame_to_list.html#value","title":"Value","text":"<p>R list of vectors</p>"},{"location":"man/DataFrame_to_list.html#conversion-to-r-data-types-considerations","title":"Conversion to R data types considerations","text":"<p>When converting Polars objects, such as DataFrames to R objects, for example via the <code>as.data.frame()</code> generic function, each type in the Polars object is converted to an R type. In some cases, an error may occur because the conversion is not appropriate. In particular, there is a high possibility of an error when converting a Datetime type without a time zone. A Datetime type without a time zone in Polars is converted to the POSIXct type in R, which takes into account the time zone in which the R session is running (which can be checked with the <code>Sys.timezone()</code> function). In this case, if ambiguous times are included, a conversion error will occur. In such cases, change the session time zone using <code>Sys.setenv(TZ = \"UTC\")</code> and then perform the conversion, or use the <code>$dt$replace_time_zone()</code> method on the Datetime type column to explicitly specify the time zone before conversion.</p> <pre># Due to daylight savings, clocks were turned forward 1 hour on Sunday, March 8, 2020, 2:00:00 am\n# so this particular date-time doesn't exist\nnon_existent_time = as_polars_series(\"2020-03-08 02:00:00\")\\$str\\$strptime(pl\\$Datetime(), \"%F %T\")\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    tryCatch(\n      # This causes an error due to the time zone (the `TZ` env var is affected).\n      as.vector(non_existent_time),\n      error = function(e) e\n    )\n  }\n)\n#&gt; &lt;error: in to_r: ComputeError(ErrString(\"datetime '2020-03-08 02:00:00' is non-existent in time zone 'America/New_York'. You may be able to use `non_existent='null'` to return `null` in this case.\")) When calling: devtools::document()&gt;\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    # This is safe.\n    as.vector(non_existent_time\\$dt\\$replace_time_zone(\"UTC\"))\n  }\n)\n#&gt; [1] \"2020-03-08 02:00:00 UTC\"\n</pre>"},{"location":"man/DataFrame_to_list.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$get_columns(): Similar to this method but returns a list of Series instead of vectors."},{"location":"man/DataFrame_to_list.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$to_list()\n</code></pre> <pre><code>#&gt; $Sepal.Length\n#&gt;   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n#&gt;  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n#&gt;  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n#&gt;  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n#&gt;  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n#&gt;  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n#&gt; [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n#&gt; [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n#&gt; [145] 6.7 6.7 6.3 6.5 6.2 5.9\n#&gt; \n#&gt; $Sepal.Width\n#&gt;   [1] 3.5 3.0 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 3.7 3.4 3.0 3.0 4.0 4.4 3.9 3.5\n#&gt;  [19] 3.8 3.8 3.4 3.7 3.6 3.3 3.4 3.0 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2\n#&gt;  [37] 3.5 3.6 3.0 3.4 3.5 2.3 3.2 3.5 3.8 3.0 3.8 3.2 3.7 3.3 3.2 3.2 3.1 2.3\n#&gt;  [55] 2.8 2.8 3.3 2.4 2.9 2.7 2.0 3.0 2.2 2.9 2.9 3.1 3.0 2.7 2.2 2.5 3.2 2.8\n#&gt;  [73] 2.5 2.8 2.9 3.0 2.8 3.0 2.9 2.6 2.4 2.4 2.7 2.7 3.0 3.4 3.1 2.3 3.0 2.5\n#&gt;  [91] 2.6 3.0 2.6 2.3 2.7 3.0 2.9 2.9 2.5 2.8 3.3 2.7 3.0 2.9 3.0 3.0 2.5 2.9\n#&gt; [109] 2.5 3.6 3.2 2.7 3.0 2.5 2.8 3.2 3.0 3.8 2.6 2.2 3.2 2.8 2.8 2.7 3.3 3.2\n#&gt; [127] 2.8 3.0 2.8 3.0 2.8 3.8 2.8 2.8 2.6 3.0 3.4 3.1 3.0 3.1 3.1 3.1 2.7 3.2\n#&gt; [145] 3.3 3.0 2.5 3.0 3.4 3.0\n#&gt; \n#&gt; $Petal.Length\n#&gt;   [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 1.5 1.6 1.4 1.1 1.2 1.5 1.3 1.4\n#&gt;  [19] 1.7 1.5 1.7 1.5 1.0 1.7 1.9 1.6 1.6 1.5 1.4 1.6 1.6 1.5 1.5 1.4 1.5 1.2\n#&gt;  [37] 1.3 1.4 1.3 1.5 1.3 1.3 1.3 1.6 1.9 1.4 1.6 1.4 1.5 1.4 4.7 4.5 4.9 4.0\n#&gt;  [55] 4.6 4.5 4.7 3.3 4.6 3.9 3.5 4.2 4.0 4.7 3.6 4.4 4.5 4.1 4.5 3.9 4.8 4.0\n#&gt;  [73] 4.9 4.7 4.3 4.4 4.8 5.0 4.5 3.5 3.8 3.7 3.9 5.1 4.5 4.5 4.7 4.4 4.1 4.0\n#&gt;  [91] 4.4 4.6 4.0 3.3 4.2 4.2 4.2 4.3 3.0 4.1 6.0 5.1 5.9 5.6 5.8 6.6 4.5 6.3\n#&gt; [109] 5.8 6.1 5.1 5.3 5.5 5.0 5.1 5.3 5.5 6.7 6.9 5.0 5.7 4.9 6.7 4.9 5.7 6.0\n#&gt; [127] 4.8 4.9 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 4.8 5.4 5.6 5.1 5.1 5.9\n#&gt; [145] 5.7 5.2 5.0 5.2 5.4 5.1\n#&gt; \n#&gt; $Petal.Width\n#&gt;   [1] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 0.2 0.2 0.1 0.1 0.2 0.4 0.4 0.3\n#&gt;  [19] 0.3 0.3 0.2 0.4 0.2 0.5 0.2 0.2 0.4 0.2 0.2 0.2 0.2 0.4 0.1 0.2 0.2 0.2\n#&gt;  [37] 0.2 0.1 0.2 0.2 0.3 0.3 0.2 0.6 0.4 0.3 0.2 0.2 0.2 0.2 1.4 1.5 1.5 1.3\n#&gt;  [55] 1.5 1.3 1.6 1.0 1.3 1.4 1.0 1.5 1.0 1.4 1.3 1.4 1.5 1.0 1.5 1.1 1.8 1.3\n#&gt;  [73] 1.5 1.2 1.3 1.4 1.4 1.7 1.5 1.0 1.1 1.0 1.2 1.6 1.5 1.6 1.5 1.3 1.3 1.3\n#&gt;  [91] 1.2 1.4 1.2 1.0 1.3 1.2 1.3 1.3 1.1 1.3 2.5 1.9 2.1 1.8 2.2 2.1 1.7 1.8\n#&gt; [109] 1.8 2.5 2.0 1.9 2.1 2.0 2.4 2.3 1.8 2.2 2.3 1.5 2.3 2.0 2.0 1.8 2.1 1.8\n#&gt; [127] 1.8 1.8 2.1 1.6 1.9 2.0 2.2 1.5 1.4 2.3 2.4 1.8 1.8 2.1 2.4 2.3 1.9 2.3\n#&gt; [145] 2.5 2.3 1.9 2.0 2.3 1.8\n#&gt; \n#&gt; $Species\n#&gt;   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n#&gt;  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [79] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [97] versicolor versicolor versicolor versicolor virginica  virginica \n#&gt; [103] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [109] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [115] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [121] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [127] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [133] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [139] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [145] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; Levels: setosa versicolor virginica\n</code></pre>"},{"location":"man/DataFrame_to_series.html","title":"Get column by index","text":"<p>Source code</p>"},{"location":"man/DataFrame_to_series.html#description","title":"Description","text":"<p>Extract a DataFrame column (by index) as a Polars series. Unlike <code>get_column()</code>, this method will not fail but will return a <code>NULL</code> if the index doesn\u2019t exist in the DataFrame. Keep in mind that Polars is 0-indexed so \"0\" is the first column.</p>"},{"location":"man/DataFrame_to_series.html#usage","title":"Usage","text":"<pre><code>DataFrame_to_series(idx = 0)\n</code></pre>"},{"location":"man/DataFrame_to_series.html#arguments","title":"Arguments","text":"<code>idx</code>  Index of the column to return as Series. Defaults to 0, which is the first column."},{"location":"man/DataFrame_to_series.html#value","title":"Value","text":"<p>Series or NULL</p>"},{"location":"man/DataFrame_to_series.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris[1:10, ])\n\n# default is to extract the first column\ndf$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (10,)\n#&gt; Series: 'Sepal.Length' [f64]\n#&gt; [\n#&gt;  5.1\n#&gt;  4.9\n#&gt;  4.7\n#&gt;  4.6\n#&gt;  5.0\n#&gt;  5.4\n#&gt;  4.6\n#&gt;  5.0\n#&gt;  4.4\n#&gt;  4.9\n#&gt; ]\n</code></pre> <pre><code># Polars is 0-indexed, so we use idx = 1 to extract the *2nd* column\ndf$to_series(idx = 1)\n</code></pre> <pre><code>#&gt; polars Series: shape: (10,)\n#&gt; Series: 'Sepal.Width' [f64]\n#&gt; [\n#&gt;  3.5\n#&gt;  3.0\n#&gt;  3.2\n#&gt;  3.1\n#&gt;  3.6\n#&gt;  3.9\n#&gt;  3.4\n#&gt;  3.4\n#&gt;  2.9\n#&gt;  3.1\n#&gt; ]\n</code></pre> <pre><code># doesn't error if the column isn't there\ndf$to_series(idx = 8)\n</code></pre> <pre><code>#&gt; NULL\n</code></pre>"},{"location":"man/DataFrame_to_struct.html","title":"Convert DataFrame to a Series of type \"struct\"","text":"<p>Source code</p>"},{"location":"man/DataFrame_to_struct.html#description","title":"Description","text":"<p>Convert DataFrame to a Series of type \"struct\"</p>"},{"location":"man/DataFrame_to_struct.html#usage","title":"Usage","text":"<pre><code>DataFrame_to_struct(name = \"\")\n</code></pre>"},{"location":"man/DataFrame_to_struct.html#arguments","title":"Arguments","text":"<code>name</code>  Name given to the new Series"},{"location":"man/DataFrame_to_struct.html#value","title":"Value","text":"<p>A Series of type \"struct\"</p>"},{"location":"man/DataFrame_to_struct.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# round-trip conversion from DataFrame with two columns\ndf = pl$DataFrame(a = 1:5, b = c(\"one\", \"two\", \"three\", \"four\", \"five\"))\ns = df$to_struct()\ns\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [struct[2]]\n#&gt; [\n#&gt;  {1,\"one\"}\n#&gt;  {2,\"two\"}\n#&gt;  {3,\"three\"}\n#&gt;  {4,\"four\"}\n#&gt;  {5,\"five\"}\n#&gt; ]\n</code></pre> <pre><code># convert to an R list\ns$to_r()\n</code></pre> <pre><code>#&gt; $a\n#&gt; [1] 1 2 3 4 5\n#&gt; \n#&gt; $b\n#&gt; [1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n#&gt; \n#&gt; attr(,\"is_struct\")\n#&gt; [1] TRUE\n</code></pre> <pre><code># Convert back to a DataFrame\ndf_s = s$to_frame()\ndf_s\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502             \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 struct[2]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,\"one\"}   \u2502\n#&gt; \u2502 {2,\"two\"}   \u2502\n#&gt; \u2502 {3,\"three\"} \u2502\n#&gt; \u2502 {4,\"four\"}  \u2502\n#&gt; \u2502 {5,\"five\"}  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_transpose.html","title":"Transpose a DataFrame over the diagonal.","text":"<p>Source code</p>"},{"location":"man/DataFrame_transpose.html#description","title":"Description","text":"<p>Transpose a DataFrame over the diagonal.</p>"},{"location":"man/DataFrame_transpose.html#usage","title":"Usage","text":"<pre><code>DataFrame_transpose(\n  include_header = FALSE,\n  header_name = \"column\",\n  column_names = NULL\n)\n</code></pre>"},{"location":"man/DataFrame_transpose.html#arguments","title":"Arguments","text":"<code>include_header</code>  If <code>TRUE</code>, the column names will be added as first column.  <code>header_name</code>  If <code>include_header</code> is <code>TRUE</code>, this determines the name of the column that will be inserted.  <code>column_names</code>  Character vector indicating the new column names. If <code>NULL</code> (default), the columns will be named as \"column_1\", \"column_2\", etc. The length of this vector must match the number of rows of the original input."},{"location":"man/DataFrame_transpose.html#details","title":"Details","text":"<p>This is a very expensive operation.</p> <p>Transpose may be the fastest option to perform non foldable (see <code>fold()</code> or <code>reduce()</code>) row operations like median.</p> <p>Polars transpose is currently eager only, likely because it is not trivial to deduce the schema.</p>"},{"location":"man/DataFrame_transpose.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_transpose.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# simple use-case\npl$DataFrame(mtcars)$transpose(include_header = TRUE, column_names = rownames(mtcars))\n</code></pre> <pre><code>#&gt; shape: (11, 33)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 column \u2506 Mazda RX4 \u2506 Mazda RX4   \u2506 Datsun \u2506 \u2026 \u2506 Ford        \u2506 Ferrari \u2506 Maserati    \u2506 Volvo 142E \u2502\n#&gt; \u2502 ---    \u2506 ---       \u2506 Wag         \u2506 710    \u2506   \u2506 Pantera L   \u2506 Dino    \u2506 Bora        \u2506 ---        \u2502\n#&gt; \u2502 str    \u2506 f64       \u2506 ---         \u2506 ---    \u2506   \u2506 ---         \u2506 ---     \u2506 ---         \u2506 f64        \u2502\n#&gt; \u2502        \u2506           \u2506 f64         \u2506 f64    \u2506   \u2506 f64         \u2506 f64     \u2506 f64         \u2506            \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 mpg    \u2506 21.0      \u2506 21.0        \u2506 22.8   \u2506 \u2026 \u2506 15.8        \u2506 19.7    \u2506 15.0        \u2506 21.4       \u2502\n#&gt; \u2502 cyl    \u2506 6.0       \u2506 6.0         \u2506 4.0    \u2506 \u2026 \u2506 8.0         \u2506 6.0     \u2506 8.0         \u2506 4.0        \u2502\n#&gt; \u2502 disp   \u2506 160.0     \u2506 160.0       \u2506 108.0  \u2506 \u2026 \u2506 351.0       \u2506 145.0   \u2506 301.0       \u2506 121.0      \u2502\n#&gt; \u2502 hp     \u2506 110.0     \u2506 110.0       \u2506 93.0   \u2506 \u2026 \u2506 264.0       \u2506 175.0   \u2506 335.0       \u2506 109.0      \u2502\n#&gt; \u2502 drat   \u2506 3.9       \u2506 3.9         \u2506 3.85   \u2506 \u2026 \u2506 4.22        \u2506 3.62    \u2506 3.54        \u2506 4.11       \u2502\n#&gt; \u2502 \u2026      \u2506 \u2026         \u2506 \u2026           \u2506 \u2026      \u2506 \u2026 \u2506 \u2026           \u2506 \u2026       \u2506 \u2026           \u2506 \u2026          \u2502\n#&gt; \u2502 qsec   \u2506 16.46     \u2506 17.02       \u2506 18.61  \u2506 \u2026 \u2506 14.5        \u2506 15.5    \u2506 14.6        \u2506 18.6       \u2502\n#&gt; \u2502 vs     \u2506 0.0       \u2506 0.0         \u2506 1.0    \u2506 \u2026 \u2506 0.0         \u2506 0.0     \u2506 0.0         \u2506 1.0        \u2502\n#&gt; \u2502 am     \u2506 1.0       \u2506 1.0         \u2506 1.0    \u2506 \u2026 \u2506 1.0         \u2506 1.0     \u2506 1.0         \u2506 1.0        \u2502\n#&gt; \u2502 gear   \u2506 4.0       \u2506 4.0         \u2506 4.0    \u2506 \u2026 \u2506 5.0         \u2506 5.0     \u2506 5.0         \u2506 4.0        \u2502\n#&gt; \u2502 carb   \u2506 4.0       \u2506 4.0         \u2506 1.0    \u2506 \u2026 \u2506 4.0         \u2506 6.0     \u2506 8.0         \u2506 2.0        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># All rows must have one shared supertype, recast Categorical to String which is a supertype\n# of f64, and then dataset \"Iris\" can be transposed\npl$DataFrame(iris)$with_columns(pl$col(\"Species\")$cast(pl$String))$transpose()\n</code></pre> <pre><code>#&gt; shape: (5, 150)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 column_0 \u2506 column_1 \u2506 column_2 \u2506 column_3 \u2506 \u2026 \u2506 column_146 \u2506 column_147 \u2506 column_148 \u2506 column_14 \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2506 ---      \u2506 ---      \u2506   \u2506 ---        \u2506 ---        \u2506 ---        \u2506 9         \u2502\n#&gt; \u2502 str      \u2506 str      \u2506 str      \u2506 str      \u2506   \u2506 str        \u2506 str        \u2506 str        \u2506 ---       \u2502\n#&gt; \u2502          \u2506          \u2506          \u2506          \u2506   \u2506            \u2506            \u2506            \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1      \u2506 4.9      \u2506 4.7      \u2506 4.6      \u2506 \u2026 \u2506 6.3        \u2506 6.5        \u2506 6.2        \u2506 5.9       \u2502\n#&gt; \u2502 3.5      \u2506 3.0      \u2506 3.2      \u2506 3.1      \u2506 \u2026 \u2506 2.5        \u2506 3.0        \u2506 3.4        \u2506 3.0       \u2502\n#&gt; \u2502 1.4      \u2506 1.4      \u2506 1.3      \u2506 1.5      \u2506 \u2026 \u2506 5.0        \u2506 5.2        \u2506 5.4        \u2506 5.1       \u2502\n#&gt; \u2502 0.2      \u2506 0.2      \u2506 0.2      \u2506 0.2      \u2506 \u2026 \u2506 1.9        \u2506 2.0        \u2506 2.3        \u2506 1.8       \u2502\n#&gt; \u2502 setosa   \u2506 setosa   \u2506 setosa   \u2506 setosa   \u2506 \u2026 \u2506 virginica  \u2506 virginica  \u2506 virginica  \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_unique.html","title":"Drop duplicated rows","text":"<p>Source code</p>"},{"location":"man/DataFrame_unique.html#description","title":"Description","text":"<p>Drop duplicated rows</p>"},{"location":"man/DataFrame_unique.html#usage","title":"Usage","text":"<pre><code>DataFrame_unique(subset = NULL, ..., keep = \"any\", maintain_order = FALSE)\n</code></pre>"},{"location":"man/DataFrame_unique.html#arguments","title":"Arguments","text":"<code>subset</code>  A character vector with the names of the column(s) to use to identify duplicates. If <code>NULL</code> (default), use all columns.  <code>\u2026</code>  Not used.  <code>keep</code>   Which of the duplicate rows to keep:  <ul> <li> <code>\u201cany\u201d</code> (default): Does not give any guarantee of which row is kept. This allows more optimizations.  </li> <li> <code>\u201cfirst\u201d</code>: Keep first unique row.  </li> <li> <code>\u201clast\u201d</code>: Keep last unique row.  </li> <li> <code>\u201cnone\u201d</code>: Don\u2019t keep duplicate rows.  </li> </ul> <code>maintain_order</code>  Keep the same order as the original data. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine."},{"location":"man/DataFrame_unique.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  x = c(1:3, 1:3, 3:1, 1L),\n  y = c(1:3, 1:3, 1:3, 1L)\n)\ndf$height\n</code></pre> <pre><code>#&gt; [1] 10\n</code></pre> <pre><code>df$unique()$height\n</code></pre> <pre><code>#&gt; [1] 5\n</code></pre> <pre><code># subset to define unique, keep only last or first\ndf$unique(subset = \"x\", keep = \"last\")\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1   \u2502\n#&gt; \u2502 3   \u2506 1   \u2502\n#&gt; \u2502 2   \u2506 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$unique(subset = \"x\", keep = \"first\")\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 3   \u2502\n#&gt; \u2502 1   \u2506 1   \u2502\n#&gt; \u2502 2   \u2506 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># only keep unique rows\ndf$unique(keep = \"none\")\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 1   \u2502\n#&gt; \u2502 1   \u2506 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_unnest.html","title":"Unnest the Struct columns of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_unnest.html#description","title":"Description","text":"<p>Unnest the Struct columns of a DataFrame</p>"},{"location":"man/DataFrame_unnest.html#usage","title":"Usage","text":"<pre><code>DataFrame_unnest(names = NULL)\n</code></pre>"},{"location":"man/DataFrame_unnest.html#arguments","title":"Arguments","text":"<code>names</code>  Names of the struct columns to unnest. If <code>NULL</code> (default), then all \"struct\" columns are unnested."},{"location":"man/DataFrame_unnest.html#value","title":"Value","text":"<p>A DataFrame where all \"struct\" columns are unnested. Non-struct columns are not modified.</p>"},{"location":"man/DataFrame_unnest.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = 1:5,\n  b = c(\"one\", \"two\", \"three\", \"four\", \"five\"),\n  c = 6:10\n)$\n  select(\n  pl$col(\"b\")$to_struct(),\n  pl$col(\"a\", \"c\")$to_struct()$alias(\"a_and_c\")\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b         \u2506 a_and_c   \u2502\n#&gt; \u2502 ---       \u2506 ---       \u2502\n#&gt; \u2502 struct[1] \u2506 struct[2] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"one\"}   \u2506 {1,6}     \u2502\n#&gt; \u2502 {\"two\"}   \u2506 {2,7}     \u2502\n#&gt; \u2502 {\"three\"} \u2506 {3,8}     \u2502\n#&gt; \u2502 {\"four\"}  \u2506 {4,9}     \u2502\n#&gt; \u2502 {\"five\"}  \u2506 {5,10}    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by default, all struct columns are unnested\ndf$unnest()\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b     \u2506 a   \u2506 c   \u2502\n#&gt; \u2502 ---   \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str   \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one   \u2506 1   \u2506 6   \u2502\n#&gt; \u2502 two   \u2506 2   \u2506 7   \u2502\n#&gt; \u2502 three \u2506 3   \u2506 8   \u2502\n#&gt; \u2502 four  \u2506 4   \u2506 9   \u2502\n#&gt; \u2502 five  \u2506 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># we can specify specific columns to unnest\ndf$unnest(\"a_and_c\")\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b         \u2506 a   \u2506 c   \u2502\n#&gt; \u2502 ---       \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 struct[1] \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"one\"}   \u2506 1   \u2506 6   \u2502\n#&gt; \u2502 {\"two\"}   \u2506 2   \u2506 7   \u2502\n#&gt; \u2502 {\"three\"} \u2506 3   \u2506 8   \u2502\n#&gt; \u2502 {\"four\"}  \u2506 4   \u2506 9   \u2502\n#&gt; \u2502 {\"five\"}  \u2506 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_var.html","title":"Var","text":"<p>Source code</p>"},{"location":"man/DataFrame_var.html#description","title":"Description","text":"<p>Aggregate the columns of this DataFrame to their variance values.</p>"},{"location":"man/DataFrame_var.html#usage","title":"Usage","text":"<pre><code>DataFrame_var(ddof = 1)\n</code></pre>"},{"location":"man/DataFrame_var.html#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/DataFrame_var.html#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_var.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$var()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl      \u2506 disp        \u2506 hp          \u2506 \u2026 \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb     \u2502\n#&gt; \u2502 ---       \u2506 ---      \u2506 ---         \u2506 ---         \u2506   \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64       \u2506 f64      \u2506 f64         \u2506 f64         \u2506   \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 36.324103 \u2506 3.189516 \u2506 15360.79982 \u2506 4700.866935 \u2506 \u2026 \u2506 0.254032 \u2506 0.248992 \u2506 0.544355 \u2506 2.608871 \u2502\n#&gt; \u2502           \u2506          \u2506 9           \u2506             \u2506   \u2506          \u2506          \u2506          \u2506          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_with_columns.html","title":"Modify/append column(s)","text":"<p>Source code</p>"},{"location":"man/DataFrame_with_columns.html#description","title":"Description","text":"<p>Add columns or modify existing ones with expressions. This is the equivalent of <code>dplyr::mutate()</code> as it keeps unmentioned columns (unlike <code>$select()</code>).</p>"},{"location":"man/DataFrame_with_columns.html#usage","title":"Usage","text":"<pre><code>DataFrame_with_columns(...)\n</code></pre>"},{"location":"man/DataFrame_with_columns.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Any expressions or string column name, or same wrapped in a list. If first and only element is a list, it is unwrapped as a list of args."},{"location":"man/DataFrame_with_columns.html#value","title":"Value","text":"<p>A DataFrame</p>"},{"location":"man/DataFrame_with_columns.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$with_columns(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\n</code></pre> <pre><code>#&gt; shape: (150, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2506 abs_SL \u2506 add_2_SL \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2506 ---    \u2506 ---      \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2506 f64    \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.1    \u2506 7.1      \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 4.9    \u2506 6.9      \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2506 4.7    \u2506 6.7      \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2506 4.6    \u2506 6.6      \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.0    \u2506 7.0      \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2506 \u2026      \u2506 \u2026        \u2502\n#&gt; \u2502 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2506 virginica \u2506 6.7    \u2506 8.7      \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2506 6.3    \u2506 8.3      \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2506 6.5    \u2506 8.5      \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2506 6.2    \u2506 8.2      \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2506 5.9    \u2506 7.9      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># same query\nl_expr = list(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\npl$DataFrame(iris)$with_columns(l_expr)\n</code></pre> <pre><code>#&gt; shape: (150, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2506 abs_SL \u2506 add_2_SL \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2506 ---    \u2506 ---      \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2506 f64    \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.1    \u2506 7.1      \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 4.9    \u2506 6.9      \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2506 4.7    \u2506 6.7      \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2506 4.6    \u2506 6.6      \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.0    \u2506 7.0      \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2506 \u2026      \u2506 \u2026        \u2502\n#&gt; \u2502 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2506 virginica \u2506 6.7    \u2506 8.7      \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2506 6.3    \u2506 8.3      \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2506 6.5    \u2506 8.5      \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2506 6.2    \u2506 8.2      \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2506 5.9    \u2506 7.9      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$DataFrame(iris)$with_columns(\n  pl$col(\"Sepal.Length\")$abs(), # not named expr will keep name \"Sepal.Length\"\n  SW_add_2 = (pl$col(\"Sepal.Width\") + 2)\n)\n</code></pre> <pre><code>#&gt; shape: (150, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2506 SW_add_2 \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2506 ---      \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.5      \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.0      \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2506 5.2      \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2506 5.1      \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.6      \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2506 \u2026        \u2502\n#&gt; \u2502 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2506 virginica \u2506 5.0      \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2506 4.5      \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2506 5.0      \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2506 5.4      \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2506 5.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_with_row_index.html","title":"Add a column for row indices","text":"<p>Source code</p>"},{"location":"man/DataFrame_with_row_index.html#description","title":"Description","text":"<p>Add a new column at index 0 that counts the rows</p>"},{"location":"man/DataFrame_with_row_index.html#usage","title":"Usage","text":"<pre><code>DataFrame_with_row_index(name, offset = NULL)\n</code></pre>"},{"location":"man/DataFrame_with_row_index.html#arguments","title":"Arguments","text":"<code>name</code>  string name of the created column  <code>offset</code>  positive integer offset for the start of the counter"},{"location":"man/DataFrame_with_row_index.html#value","title":"Value","text":"<p>A new <code>DataFrame</code> object with a counter column in front</p>"},{"location":"man/DataFrame_with_row_index.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(mtcars)\n\n# by default, the index starts at 0 (to mimic the behavior of Python Polars)\ndf$with_row_index(\"idx\")\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 idx \u2506 mpg  \u2506 cyl \u2506 disp  \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 ---  \u2506 --- \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 u32 \u2506 f64  \u2506 f64 \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 1   \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 2   \u2506 22.8 \u2506 4.0 \u2506 108.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 3   \u2506 21.4 \u2506 6.0 \u2506 258.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 4   \u2506 18.7 \u2506 8.0 \u2506 360.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 27  \u2506 30.4 \u2506 4.0 \u2506 95.1  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 28  \u2506 15.8 \u2506 8.0 \u2506 351.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 29  \u2506 19.7 \u2506 6.0 \u2506 145.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 30  \u2506 15.0 \u2506 8.0 \u2506 301.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 31  \u2506 21.4 \u2506 4.0 \u2506 121.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># but in R, we use a 1-index\ndf$with_row_index(\"idx\", offset = 1)\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 idx \u2506 mpg  \u2506 cyl \u2506 disp  \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 ---  \u2506 --- \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 u32 \u2506 f64  \u2506 f64 \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 2   \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 3   \u2506 22.8 \u2506 4.0 \u2506 108.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 4   \u2506 21.4 \u2506 6.0 \u2506 258.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 5   \u2506 18.7 \u2506 8.0 \u2506 360.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 28  \u2506 30.4 \u2506 4.0 \u2506 95.1  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 29  \u2506 15.8 \u2506 8.0 \u2506 351.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 30  \u2506 19.7 \u2506 6.0 \u2506 145.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 31  \u2506 15.0 \u2506 8.0 \u2506 301.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 32  \u2506 21.4 \u2506 4.0 \u2506 121.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataType_Array.html","title":"Create Array DataType","text":"<p>Source code</p>"},{"location":"man/DataType_Array.html#description","title":"Description","text":"<p>The Array and List datatypes are very similar. The only difference is that sub-arrays all have the same length while sublists can have different lengths. Array methods can be accessed via the <code>$arr</code> subnamespace.</p>"},{"location":"man/DataType_Array.html#usage","title":"Usage","text":"<pre><code>DataType_Array(datatype = \"unknown\", width)\n</code></pre>"},{"location":"man/DataType_Array.html#arguments","title":"Arguments","text":"<code>datatype</code>  An inner DataType. The default is <code>\u201cUnknown\u201d</code> and is only a placeholder for when inner DataType does not matter, e.g.\u00a0as used in example.  <code>width</code>  The length of the arrays."},{"location":"man/DataType_Array.html#value","title":"Value","text":"<p>An array DataType with an inner DataType</p>"},{"location":"man/DataType_Array.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# basic Array\npl$Array(pl$Int32, 4)\n</code></pre> <pre><code>#&gt; DataType: Array(\n#&gt;     Int32,\n#&gt;     4,\n#&gt; )\n</code></pre> <pre><code># some nested Array\npl$Array(pl$Array(pl$Boolean, 3), 2)\n</code></pre> <pre><code>#&gt; DataType: Array(\n#&gt;     Array(\n#&gt;         Boolean,\n#&gt;         3,\n#&gt;     ),\n#&gt;     2,\n#&gt; )\n</code></pre>"},{"location":"man/DataType_Categorical.html","title":"Create Categorical DataType","text":"<p>Source code</p>"},{"location":"man/DataType_Categorical.html#description","title":"Description","text":"<p>Create Categorical DataType</p>"},{"location":"man/DataType_Categorical.html#usage","title":"Usage","text":"<pre><code>DataType_Categorical(ordering = \"physical\")\n</code></pre>"},{"location":"man/DataType_Categorical.html#arguments","title":"Arguments","text":"<code>ordering</code>  Either <code>\u201cphysical\u201d</code> (default) or <code>\u201clexical\u201d</code>."},{"location":"man/DataType_Categorical.html#details","title":"Details","text":"<p>When a categorical variable is created, its string values (or \"lexical\" values) are stored and encoded as integers (\"physical\" values) by order of appearance. Therefore, sorting a categorical value can be done either on the lexical or on the physical values. See Examples.</p>"},{"location":"man/DataType_Categorical.html#value","title":"Value","text":"<p>A Categorical DataType</p>"},{"location":"man/DataType_Categorical.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# default is to order by physical values\ndf = pl$DataFrame(x = c(\"z\", \"z\", \"k\", \"a\", \"z\"), schema = list(x = pl$Categorical()))\ndf$sort(\"x\")\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 cat \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 z   \u2502\n#&gt; \u2502 z   \u2502\n#&gt; \u2502 z   \u2502\n#&gt; \u2502 k   \u2502\n#&gt; \u2502 a   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># when setting ordering = \"lexical\", sorting will be based on the strings\ndf_lex = pl$DataFrame(\n  x = c(\"z\", \"z\", \"k\", \"a\", \"z\"),\n  schema = list(x = pl$Categorical(\"lexical\"))\n)\ndf_lex$sort(\"x\")\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 cat \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 k   \u2502\n#&gt; \u2502 z   \u2502\n#&gt; \u2502 z   \u2502\n#&gt; \u2502 z   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataType_Datetime.html","title":"Data type representing a calendar date and time of day.","text":"<p>Source code</p>"},{"location":"man/DataType_Datetime.html#description","title":"Description","text":"<p>The underlying representation of this type is a 64-bit signed integer. The integer indicates the number of time units since the Unix epoch (1970-01-01 00:00:00). The number can be negative to indicate datetimes before the epoch.</p>"},{"location":"man/DataType_Datetime.html#usage","title":"Usage","text":"<pre><code>DataType_Datetime(time_unit = \"us\", time_zone = NULL)\n</code></pre>"},{"location":"man/DataType_Datetime.html#arguments","title":"Arguments","text":"<code>time_unit</code>  Unit of time. One of <code>\u201cms\u201d</code>, <code>\u201cus\u201d</code> (default) or <code>\u201cns\u201d</code>.  <code>time_zone</code>  Time zone string, as defined in <code>OlsonNames()</code>. Setting <code>timezone = \u201c\\*\u201c</code> will match any timezone, which can be useful to select all Datetime columns containing a timezone."},{"location":"man/DataType_Datetime.html#value","title":"Value","text":"<p>Datetime DataType</p>"},{"location":"man/DataType_Datetime.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Datetime(\"ns\", \"Pacific/Samoa\")\n</code></pre> <pre><code>#&gt; DataType: Datetime(\n#&gt;     Nanoseconds,\n#&gt;     Some(\n#&gt;         \"Pacific/Samoa\",\n#&gt;     ),\n#&gt; )\n</code></pre> <pre><code>df = pl$DataFrame(\n  naive_time = as.POSIXct(\"1900-01-01\"),\n  zoned_time = as.POSIXct(\"1900-01-01\", \"UTC\")\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 naive_time          \u2506 zoned_time              \u2502\n#&gt; \u2502 ---                 \u2506 ---                     \u2502\n#&gt; \u2502 datetime[ms]        \u2506 datetime[ms, UTC]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1900-01-01 00:00:00 \u2506 1900-01-01 00:00:00 UTC \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(pl$Datetime(\"us\", \"*\")))\n</code></pre> <pre><code>#&gt; shape: (0, 0)\n#&gt; \u250c\u2510\n#&gt; \u255e\u2561\n#&gt; \u2514\u2518\n</code></pre>"},{"location":"man/DataType_Duration.html","title":"Data type representing a time duration","text":"<p>Source code</p>"},{"location":"man/DataType_Duration.html#description","title":"Description","text":"<p>Data type representing a time duration</p>"},{"location":"man/DataType_Duration.html#usage","title":"Usage","text":"<pre><code>DataType_Duration(time_unit = \"us\")\n</code></pre>"},{"location":"man/DataType_Duration.html#arguments","title":"Arguments","text":"<code>time_unit</code>  Unit of time. One of <code>\u201cms\u201d</code>, <code>\u201cus\u201d</code> (default) or <code>\u201cns\u201d</code>."},{"location":"man/DataType_Duration.html#value","title":"Value","text":"<p>Duration DataType</p>"},{"location":"man/DataType_Duration.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ntest = pl$DataFrame(\n  a = 1:2,\n  b = c(\"a\", \"b\"),\n  c = pl$duration(weeks = c(1, 2), days = c(0, 2))\n)\n\n# select all columns of type \"duration\"\ntest$select(pl$col(pl$Duration()))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 c            \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 duration[\u03bcs] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 7d           \u2502\n#&gt; \u2502 16d          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataType_List.html","title":"Create List DataType","text":"<p>Source code</p>"},{"location":"man/DataType_List.html#description","title":"Description","text":"<p>Create List DataType</p>"},{"location":"man/DataType_List.html#usage","title":"Usage","text":"<pre><code>DataType_List(datatype = \"unknown\")\n</code></pre>"},{"location":"man/DataType_List.html#arguments","title":"Arguments","text":"<code>datatype</code>  an inner DataType, default is \"Unknown\" (placeholder for when inner DataType does not matter, e.g.\u00a0as used in example)"},{"location":"man/DataType_List.html#value","title":"Value","text":"<p>a list DataType with an inner DataType</p>"},{"location":"man/DataType_List.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# some nested List\npl$List(pl$List(pl$Boolean))\n</code></pre> <pre><code>#&gt; DataType: List(\n#&gt;     List(\n#&gt;         Boolean,\n#&gt;     ),\n#&gt; )\n</code></pre> <pre><code># check if some maybe_list is a List DataType\nmaybe_List = pl$List(pl$UInt64)\npl$same_outer_dt(maybe_List, pl$List())\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/DataType_Struct.html","title":"Create Struct DataType","text":"<p>Source code</p>"},{"location":"man/DataType_Struct.html#description","title":"Description","text":"<p>Struct DataType Constructor</p>"},{"location":"man/DataType_Struct.html#usage","title":"Usage","text":"<pre><code>DataType_Struct(...)\n</code></pre>"},{"location":"man/DataType_Struct.html#arguments","title":"Arguments","text":"<code>\u2026</code>  RPolarsDataType objects"},{"location":"man/DataType_Struct.html#value","title":"Value","text":"<p>a list DataType with an inner DataType</p>"},{"location":"man/DataType_Struct.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create a Struct-DataType\npl$Struct(pl$Boolean)\n</code></pre> <pre><code>#&gt; DataType: Struct(\n#&gt;     [\n#&gt;         Field {\n#&gt;             name: \"\",\n#&gt;             dtype: Boolean,\n#&gt;         },\n#&gt;     ],\n#&gt; )\n</code></pre> <pre><code>pl$Struct(foo = pl$Int32, bar = pl$Float64)\n</code></pre> <pre><code>#&gt; DataType: Struct(\n#&gt;     [\n#&gt;         Field {\n#&gt;             name: \"foo\",\n#&gt;             dtype: Int32,\n#&gt;         },\n#&gt;         Field {\n#&gt;             name: \"bar\",\n#&gt;             dtype: Float64,\n#&gt;         },\n#&gt;     ],\n#&gt; )\n</code></pre> <pre><code># Find any DataType via pl$dtypes\nprint(pl$dtypes)\n</code></pre> <pre><code>#&gt; $Boolean\n#&gt; DataType: Boolean\n#&gt; \n#&gt; $UInt8\n#&gt; DataType: UInt8\n#&gt; \n#&gt; $UInt16\n#&gt; DataType: UInt16\n#&gt; \n#&gt; $UInt32\n#&gt; DataType: UInt32\n#&gt; \n#&gt; $UInt64\n#&gt; DataType: UInt64\n#&gt; \n#&gt; $Int8\n#&gt; DataType: Int8\n#&gt; \n#&gt; $Int16\n#&gt; DataType: Int16\n#&gt; \n#&gt; $Int32\n#&gt; DataType: Int32\n#&gt; \n#&gt; $Int64\n#&gt; DataType: Int64\n#&gt; \n#&gt; $Float32\n#&gt; DataType: Float32\n#&gt; \n#&gt; $Float64\n#&gt; DataType: Float64\n#&gt; \n#&gt; $String\n#&gt; DataType: String\n#&gt; \n#&gt; $Binary\n#&gt; DataType: Binary\n#&gt; \n#&gt; $Date\n#&gt; DataType: Date\n#&gt; \n#&gt; $Time\n#&gt; DataType: Time\n#&gt; \n#&gt; $Null\n#&gt; DataType: Null\n#&gt; \n#&gt; $Unknown\n#&gt; DataType: Unknown\n#&gt; \n#&gt; $Utf8\n#&gt; DataType: String\n#&gt; \n#&gt; $Array\n#&gt; function(datatype = \"unknown\", width) {\n#&gt;   if (is.character(datatype) &amp;&amp; length(datatype) == 1) {\n#&gt;     datatype = .pr$DataType$new(datatype)\n#&gt;   }\n#&gt;   if (!inherits(datatype, \"RPolarsDataType\")) {\n#&gt;     stop(paste(\n#&gt;       \"input for generating a array DataType must be another DataType\",\n#&gt;       \"or an interpretable name thereof.\"\n#&gt;     ))\n#&gt;   }\n#&gt;   .pr$DataType$new_array(datatype, width) |&gt;\n#&gt;     unwrap(\"in pl$Array():\")\n#&gt; }\n#&gt; &lt;bytecode: 0x564a0e9e3b18&gt;\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; \n#&gt; $Categorical\n#&gt; function(ordering = \"physical\") {\n#&gt;   .pr$DataType$new_categorical(ordering) |&gt; unwrap()\n#&gt; }\n#&gt; &lt;bytecode: 0x564a0e9ea490&gt;\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; \n#&gt; $Datetime\n#&gt; function(time_unit = \"us\", time_zone = NULL) {\n#&gt;   if (!is.null(time_zone) &amp;&amp; !isTRUE(time_zone %in% c(base::OlsonNames(), \"*\"))) {\n#&gt;     sprintf(\n#&gt;       \"The time zone '%s' is not supported in polars. See `base::OlsonNames()` for supported time zones.\",\n#&gt;       time_zone\n#&gt;     ) |&gt;\n#&gt;       Err_plain() |&gt;\n#&gt;       unwrap(\"in $Datetime():\")\n#&gt;   }\n#&gt;   unwrap(.pr$DataType$new_datetime(time_unit, time_zone))\n#&gt; }\n#&gt; &lt;bytecode: 0x564a0e9f6660&gt;\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; \n#&gt; $Duration\n#&gt; function(time_unit = \"us\") {\n#&gt;   unwrap(.pr$DataType$new_duration(time_unit))\n#&gt; }\n#&gt; &lt;bytecode: 0x564a0e9fdeb8&gt;\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; \n#&gt; $List\n#&gt; function(datatype = \"unknown\") {\n#&gt;   if (is.character(datatype) &amp;&amp; length(datatype) == 1) {\n#&gt;     datatype = .pr$DataType$new(datatype)\n#&gt;   }\n#&gt;   if (!inherits(datatype, \"RPolarsDataType\")) {\n#&gt;     stop(paste(\n#&gt;       \"input for generating a list DataType must be another DataType\",\n#&gt;       \"or an interpretable name thereof.\"\n#&gt;     ))\n#&gt;   }\n#&gt;   .pr$DataType$new_list(datatype)\n#&gt; }\n#&gt; &lt;bytecode: 0x564a0ea00bb0&gt;\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; \n#&gt; $Struct\n#&gt; function(...) {\n#&gt;   result({\n#&gt;     largs = list2(...)\n#&gt;     if (length(largs) &gt;= 1 &amp;&amp; is.list(largs[[1]])) {\n#&gt;       largs = largs[[1]]\n#&gt;       element_name = \"list element\"\n#&gt;     } else {\n#&gt;       element_name = \"positional argument\"\n#&gt;     }\n#&gt;     mapply(\n#&gt;       names(largs) %||% character(length(largs)),\n#&gt;       largs,\n#&gt;       seq_along(largs),\n#&gt;       FUN = \\(name, arg, i) {\n#&gt;         if (inherits(arg, \"RPolarsDataType\")) {\n#&gt;           return(pl$Field(name, arg))\n#&gt;         }\n#&gt;         if (inherits(arg, \"RPolarsRField\")) {\n#&gt;           return(arg)\n#&gt;         }\n#&gt;         stop(sprintf(\n#&gt;           \"%s [%s] {name:'%s', value:%s} must either be a Field (pl$Field) or a named DataType\",\n#&gt;           element_name, i, name, arg\n#&gt;         ))\n#&gt;       }, SIMPLIFY = FALSE\n#&gt;     )\n#&gt;   }) |&gt;\n#&gt;     and_then(DataType$new_struct) |&gt;\n#&gt;     unwrap(\"in pl$Struct:\")\n#&gt; }\n#&gt; &lt;bytecode: 0x564a0ea1ca68&gt;\n#&gt; &lt;environment: namespace:polars&gt;\n</code></pre> <pre><code># check if an element is any kind of Struct()\ntest = pl$Struct(pl$UInt64)\npl$same_outer_dt(test, pl$Struct())\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># `test` is a type of Struct, but it doesn't mean it is equal to an empty Struct\ntest == pl$Struct()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/DynamicGroupBy_agg.html","title":"Aggregate over a DynamicGroupBy","text":"<p>Source code</p>"},{"location":"man/DynamicGroupBy_agg.html#description","title":"Description","text":"<p>Aggregate a DataFrame over a time or integer window created with <code>$group_by_dynamic()</code>.</p>"},{"location":"man/DynamicGroupBy_agg.html#usage","title":"Usage","text":"<pre><code>DynamicGroupBy_agg(...)\n</code></pre>"},{"location":"man/DynamicGroupBy_agg.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Exprs to aggregate over. Those can also be passed wrapped in a list, e.g <code>$agg(list(e1,e2,e3))</code>."},{"location":"man/DynamicGroupBy_agg.html#value","title":"Value","text":"<p>An aggregated DataFrame</p>"},{"location":"man/DynamicGroupBy_agg.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  time = pl$datetime_range(\n    start = strptime(\"2021-12-16 00:00:00\", format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"),\n    end = strptime(\"2021-12-16 03:00:00\", format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"),\n    interval = \"30m\"\n  ),\n  n = 0:6\n)\n\n# get the sum in the following hour relative to the \"time\" column\ndf$group_by_dynamic(\"time\", every = \"1h\")$agg(\n  vals = pl$col(\"n\"),\n  sum = pl$col(\"n\")$sum()\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 vals      \u2506 sum \u2502\n#&gt; \u2502 ---                     \u2506 ---       \u2506 --- \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 list[i32] \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 [0, 1]    \u2506 1   \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 [2, 3]    \u2506 5   \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 [4, 5]    \u2506 9   \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 [6]       \u2506 6   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># using \"include_boundaries = TRUE\" is helpful to see the period considered\ndf$group_by_dynamic(\"time\", every = \"1h\", include_boundaries = TRUE)$agg(\n  vals = pl$col(\"n\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 _lower_boundary         \u2506 _upper_boundary         \u2506 time                    \u2506 vals      \u2502\n#&gt; \u2502 ---                     \u2506 ---                     \u2506 ---                     \u2506 ---       \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 00:00:00 UTC \u2506 [0, 1]    \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 [2, 3]    \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 [4, 5]    \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 2021-12-16 04:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 [6]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># in the example above, the values didn't include the one *exactly* 1h after\n# the start because \"closed = 'left'\" by default.\n# Changing it to \"right\" includes values that are exactly 1h after. Note that\n# the value at 00:00:00 now becomes included in the interval [23:00:00 - 00:00:00],\n# even if this interval wasn't there originally\ndf$group_by_dynamic(\"time\", every = \"1h\", closed = \"right\")$agg(\n  vals = pl$col(\"n\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 vals      \u2502\n#&gt; \u2502 ---                     \u2506 ---       \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-15 23:00:00 UTC \u2506 [0]       \u2502\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 [1, 2]    \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 [3, 4]    \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 [5, 6]    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># To keep both boundaries, we use \"closed = 'both'\". Some values now belong to\n# several groups:\ndf$group_by_dynamic(\"time\", every = \"1h\", closed = \"both\")$agg(\n  vals = pl$col(\"n\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 vals      \u2502\n#&gt; \u2502 ---                     \u2506 ---       \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-15 23:00:00 UTC \u2506 [0]       \u2502\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 [0, 1, 2] \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 [2, 3, 4] \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 [4, 5, 6] \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 [6]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Dynamic group bys can also be combined with grouping on normal keys\ndf = df$with_columns(\n  groups = as_polars_series(c(\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"a\"))\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 n   \u2506 groups \u2502\n#&gt; \u2502 ---                     \u2506 --- \u2506 ---    \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 i32 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 0   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 00:30:00 UTC \u2506 1   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 2   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 01:30:00 UTC \u2506 3   \u2506 b      \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 4   \u2506 b      \u2502\n#&gt; \u2502 2021-12-16 02:30:00 UTC \u2506 5   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 6   \u2506 a      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$group_by_dynamic(\n  \"time\",\n  every = \"1h\",\n  closed = \"both\",\n  group_by = \"groups\",\n  include_boundaries = TRUE\n)$agg(pl$col(\"n\"))\n</code></pre> <pre><code>#&gt; shape: (7, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 groups \u2506 _lower_boundary         \u2506 _upper_boundary         \u2506 time                    \u2506 n         \u2502\n#&gt; \u2502 ---    \u2506 ---                     \u2506 ---                     \u2506 ---                     \u2506 ---       \u2502\n#&gt; \u2502 str    \u2506 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a      \u2506 2021-12-15 23:00:00 UTC \u2506 2021-12-16 00:00:00 UTC \u2506 2021-12-15 23:00:00 UTC \u2506 [0]       \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 00:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 00:00:00 UTC \u2506 [0, 1, 2] \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 [2]       \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 [5, 6]    \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 04:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 [6]       \u2502\n#&gt; \u2502 b      \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 [3, 4]    \u2502\n#&gt; \u2502 b      \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 [4]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># We can also create a dynamic group by based on an index column\ndf = pl$LazyFrame(\n  idx = 0:5,\n  A = c(\"A\", \"A\", \"B\", \"B\", \"B\", \"C\")\n)$with_columns(pl$col(\"idx\")$set_sorted())\ndf\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt;  WITH_COLUMNS:\n#&gt;  [col(\"idx\").map()]\n#&gt;   DF [\"idx\", \"A\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>df$group_by_dynamic(\n  \"idx\",\n  every = \"2i\",\n  period = \"3i\",\n  include_boundaries = TRUE,\n  closed = \"right\"\n)$agg(A_agg_list = pl$col(\"A\"))\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; AGGREGATE\n#&gt;  [col(\"A\").alias(\"A_agg_list\")] BY [] FROM\n#&gt;    WITH_COLUMNS:\n#&gt;    [col(\"idx\").map()]\n#&gt;     DF [\"idx\", \"A\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/DynamicGroupBy_class.html","title":"Operations on Polars DataFrame grouped on time or integer values","text":""},{"location":"man/DynamicGroupBy_class.html#description","title":"Description","text":"<p>This class comes from <code>\\&lt;DataFrame&gt;$group_by_dynamic()</code>.</p>"},{"location":"man/DynamicGroupBy_class.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  time = pl$date_range(\n    start = strptime(\"2021-12-16 00:00:00\", format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"),\n    end = strptime(\"2021-12-16 03:00:00\", format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"),\n    interval = \"30m\"\n  ),\n  n = 0:6\n)\n\n# get the sum in the following hour relative to the \"time\" column\ndf$group_by_dynamic(\"time\", every = \"1h\")\n</code></pre> <pre><code>#&gt; shape: (7, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 n   \u2502\n#&gt; \u2502 ---                     \u2506 --- \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 0   \u2502\n#&gt; \u2502 2021-12-16 00:30:00 UTC \u2506 1   \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 2   \u2502\n#&gt; \u2502 2021-12-16 01:30:00 UTC \u2506 3   \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 4   \u2502\n#&gt; \u2502 2021-12-16 02:30:00 UTC \u2506 5   \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 6   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DynamicGroupBy_ungroup.html","title":"Ungroup a DynamicGroupBy object","text":"<p>Source code</p>"},{"location":"man/DynamicGroupBy_ungroup.html#description","title":"Description","text":"<p>Revert the <code>$group_by_dynamic()</code> operation. Doing <code>\\&lt;DataFrame&gt;$group_by_dynamic(\u2026)$ungroup()</code> returns the original <code>DataFrame</code>.</p>"},{"location":"man/DynamicGroupBy_ungroup.html#usage","title":"Usage","text":"<pre><code>DynamicGroupBy_ungroup()\n</code></pre>"},{"location":"man/DynamicGroupBy_ungroup.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DynamicGroupBy_ungroup.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  time = pl$date_range(\n    start = strptime(\"2021-12-16 00:00:00\", format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"),\n    end = strptime(\"2021-12-16 03:00:00\", format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"),\n    interval = \"30m\"\n  ),\n  n = 0:6\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (7, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 n   \u2502\n#&gt; \u2502 ---                     \u2506 --- \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 0   \u2502\n#&gt; \u2502 2021-12-16 00:30:00 UTC \u2506 1   \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 2   \u2502\n#&gt; \u2502 2021-12-16 01:30:00 UTC \u2506 3   \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 4   \u2502\n#&gt; \u2502 2021-12-16 02:30:00 UTC \u2506 5   \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 6   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$group_by_dynamic(\"time\", every = \"1h\")$ungroup()\n</code></pre> <pre><code>#&gt; shape: (7, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 n   \u2502\n#&gt; \u2502 ---                     \u2506 --- \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 0   \u2502\n#&gt; \u2502 2021-12-16 00:30:00 UTC \u2506 1   \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 2   \u2502\n#&gt; \u2502 2021-12-16 01:30:00 UTC \u2506 3   \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 4   \u2502\n#&gt; \u2502 2021-12-16 02:30:00 UTC \u2506 5   \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 6   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_all.html","title":"Evaluate whether all boolean values in an array are true","text":"<p>Source code</p>"},{"location":"man/ExprArr_all.html#description","title":"Description","text":"<p>Evaluate whether all boolean values in an array are true</p>"},{"location":"man/ExprArr_all.html#usage","title":"Usage","text":"<pre><code>ExprArr_all()\n</code></pre>"},{"location":"man/ExprArr_all.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_all.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(TRUE, TRUE), c(FALSE, TRUE), c(FALSE, FALSE), c(NA, NA)),\n  schema = list(values = pl$Array(pl$Boolean, 2))\n)\ndf$with_columns(all = pl$col(\"values\")$arr$all())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values         \u2506 all   \u2502\n#&gt; \u2502 ---            \u2506 ---   \u2502\n#&gt; \u2502 array[bool, 2] \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [true, true]   \u2506 true  \u2502\n#&gt; \u2502 [false, true]  \u2506 false \u2502\n#&gt; \u2502 [false, false] \u2506 false \u2502\n#&gt; \u2502 [null, null]   \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_any.html","title":"Evaluate whether any boolean values in an array are true","text":"<p>Source code</p>"},{"location":"man/ExprArr_any.html#description","title":"Description","text":"<p>Evaluate whether any boolean values in an array are true</p>"},{"location":"man/ExprArr_any.html#usage","title":"Usage","text":"<pre><code>ExprArr_any()\n</code></pre>"},{"location":"man/ExprArr_any.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_any.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(TRUE, TRUE), c(FALSE, TRUE), c(FALSE, FALSE), c(NA, NA)),\n  schema = list(values = pl$Array(pl$Boolean, 2))\n)\ndf$with_columns(any = pl$col(\"values\")$arr$any())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values         \u2506 any   \u2502\n#&gt; \u2502 ---            \u2506 ---   \u2502\n#&gt; \u2502 array[bool, 2] \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [true, true]   \u2506 true  \u2502\n#&gt; \u2502 [false, true]  \u2506 true  \u2502\n#&gt; \u2502 [false, false] \u2506 false \u2502\n#&gt; \u2502 [null, null]   \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_arg_max.html","title":"Get the index of the maximal value in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_arg_max.html#description","title":"Description","text":"<p>Get the index of the maximal value in an array</p>"},{"location":"man/ExprArr_arg_max.html#usage","title":"Usage","text":"<pre><code>ExprArr_arg_max()\n</code></pre>"},{"location":"man/ExprArr_arg_max.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_arg_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(1:2, 2:1),\n  schema = list(values = pl$Array(pl$Int32, 2))\n)\ndf$with_columns(\n  arg_max = pl$col(\"values\")$arr$arg_max()\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values        \u2506 arg_max \u2502\n#&gt; \u2502 ---           \u2506 ---     \u2502\n#&gt; \u2502 array[i32, 2] \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2]        \u2506 1       \u2502\n#&gt; \u2502 [2, 1]        \u2506 0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_arg_min.html","title":"Get the index of the minimal value in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_arg_min.html#description","title":"Description","text":"<p>Get the index of the minimal value in an array</p>"},{"location":"man/ExprArr_arg_min.html#usage","title":"Usage","text":"<pre><code>ExprArr_arg_min()\n</code></pre>"},{"location":"man/ExprArr_arg_min.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_arg_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(1:2, 2:1),\n  schema = list(values = pl$Array(pl$Int32, 2))\n)\ndf$with_columns(\n  arg_min = pl$col(\"values\")$arr$arg_min()\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values        \u2506 arg_min \u2502\n#&gt; \u2502 ---           \u2506 ---     \u2502\n#&gt; \u2502 array[i32, 2] \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2]        \u2506 0       \u2502\n#&gt; \u2502 [2, 1]        \u2506 1       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_contains.html","title":"Check if array contains a given value","text":"<p>Source code</p>"},{"location":"man/ExprArr_contains.html#description","title":"Description","text":"<p>Check if array contains a given value</p>"},{"location":"man/ExprArr_contains.html#usage","title":"Usage","text":"<pre><code>ExprArr_contains(item)\n</code></pre>"},{"location":"man/ExprArr_contains.html#arguments","title":"Arguments","text":"<code>item</code>  Expr or something coercible to an Expr. Strings are not parsed as columns."},{"location":"man/ExprArr_contains.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_contains.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(0:2, 4:6, c(NA_integer_, NA_integer_, NA_integer_)),\n  item = c(0L, 4L, 2L),\n  schema = list(values = pl$Array(pl$Float64, 3))\n)\ndf$with_columns(\n  with_expr = pl$col(\"values\")$arr$contains(pl$col(\"item\")),\n  with_lit = pl$col(\"values\")$arr$contains(1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values             \u2506 item \u2506 with_expr \u2506 with_lit \u2502\n#&gt; \u2502 ---                \u2506 ---  \u2506 ---       \u2506 ---      \u2502\n#&gt; \u2502 array[f64, 3]      \u2506 i32  \u2506 bool      \u2506 bool     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [0.0, 1.0, 2.0]    \u2506 0    \u2506 true      \u2506 true     \u2502\n#&gt; \u2502 [4.0, 5.0, 6.0]    \u2506 4    \u2506 true      \u2506 false    \u2502\n#&gt; \u2502 [null, null, null] \u2506 2    \u2506 false     \u2506 false    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_get.html","title":"Get the value by index in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_get.html#description","title":"Description","text":"<p>This allows to extract one value per array only.</p>"},{"location":"man/ExprArr_get.html#usage","title":"Usage","text":"<pre><code>ExprArr_get(index)\n</code></pre>"},{"location":"man/ExprArr_get.html#arguments","title":"Arguments","text":"<code>index</code>  An Expr or something coercible to an Expr, that must return a single index. Values are 0-indexed (so index 0 would return the first item of every sub-array) and negative values start from the end (index <code>-1</code> returns the last item). If the index is out of bounds, it will return a <code>null</code>. Strings are parsed as column names."},{"location":"man/ExprArr_get.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_get.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(1, 2), c(3, 4), c(NA_real_, 6)),\n  idx = c(1, NA, 3),\n  schema = list(values = pl$Array(pl$Float64, 2))\n)\ndf$with_columns(\n  using_expr = pl$col(\"values\")$arr$get(\"idx\"),\n  val_0 = pl$col(\"values\")$arr$get(0),\n  val_minus_1 = pl$col(\"values\")$arr$get(-1),\n  val_oob = pl$col(\"values\")$arr$get(10)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values        \u2506 idx  \u2506 using_expr \u2506 val_0 \u2506 val_minus_1 \u2506 val_oob \u2502\n#&gt; \u2502 ---           \u2506 ---  \u2506 ---        \u2506 ---   \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 array[f64, 2] \u2506 f64  \u2506 f64        \u2506 f64   \u2506 f64         \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0]    \u2506 1.0  \u2506 2.0        \u2506 1.0   \u2506 2.0         \u2506 null    \u2502\n#&gt; \u2502 [3.0, 4.0]    \u2506 null \u2506 null       \u2506 3.0   \u2506 4.0         \u2506 null    \u2502\n#&gt; \u2502 [null, 6.0]   \u2506 3.0  \u2506 null       \u2506 null  \u2506 6.0         \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_join.html","title":"Join elements of an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_join.html#description","title":"Description","text":"<p>Join all string items in a sub-array and place a separator between them. This only works on columns of type <code>list[str]</code>.</p>"},{"location":"man/ExprArr_join.html#usage","title":"Usage","text":"<pre><code>ExprArr_join(separator, ignore_nulls = FALSE)\n</code></pre>"},{"location":"man/ExprArr_join.html#arguments","title":"Arguments","text":"<code>separator</code>  String to separate the items with. Can be an Expr. Strings are not parsed as columns.  <code>ignore_nulls</code>  If <code>FALSE</code> (default), null values are propagated: if the row contains any null values, the output is null."},{"location":"man/ExprArr_join.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_join.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(\"a\", \"b\", \"c\"), c(\"x\", \"y\", \"z\"), c(\"e\", NA, NA)),\n  separator = c(\"-\", \"+\", \"/\"),\n  schema = list(values = pl$Array(pl$String, 3))\n)\ndf$with_columns(\n  join_with_expr = pl$col(\"values\")$arr$join(pl$col(\"separator\")),\n  join_with_lit = pl$col(\"values\")$arr$join(\" \"),\n  join_ignore_null = pl$col(\"values\")$arr$join(\" \", ignore_nulls = TRUE)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values            \u2506 separator \u2506 join_with_expr \u2506 join_with_lit \u2506 join_ignore_null \u2502\n#&gt; \u2502 ---               \u2506 ---       \u2506 ---            \u2506 ---           \u2506 ---              \u2502\n#&gt; \u2502 array[str, 3]     \u2506 str       \u2506 str            \u2506 str           \u2506 str              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\", \"b\", \"c\"]   \u2506 -         \u2506 a-b-c          \u2506 a b c         \u2506 a b c            \u2502\n#&gt; \u2502 [\"x\", \"y\", \"z\"]   \u2506 +         \u2506 x+y+z          \u2506 x y z         \u2506 x y z            \u2502\n#&gt; \u2502 [\"e\", null, null] \u2506 /         \u2506 null           \u2506 null          \u2506 e                \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_max.html","title":"Find the maximum value in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_max.html#description","title":"Description","text":"<p>Find the maximum value in an array</p>"},{"location":"man/ExprArr_max.html#usage","title":"Usage","text":"<pre><code>ExprArr_max()\n</code></pre>"},{"location":"man/ExprArr_max.html#details","title":"Details","text":"<p>This method is only available with the \"nightly\" feature. See <code>polars_info()</code> for more details.</p>"},{"location":"man/ExprArr_max.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\ndf = pl$DataFrame(\n  values = list(c(1, 2), c(3, 4), c(5, 6)),\n  schema = list(values = pl$Array(pl$Float64, 2))\n)\ndf$with_columns(max = pl$col(\"values\")$arr$max())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values        \u2506 max \u2502\n#&gt; \u2502 ---           \u2506 --- \u2502\n#&gt; \u2502 array[f64, 2] \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0]    \u2506 2.0 \u2502\n#&gt; \u2502 [3.0, 4.0]    \u2506 4.0 \u2502\n#&gt; \u2502 [5.0, 6.0]    \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_median.html","title":"Find the median in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_median.html#description","title":"Description","text":"<p>Find the median in an array</p>"},{"location":"man/ExprArr_median.html#usage","title":"Usage","text":"<pre><code>ExprArr_median()\n</code></pre>"},{"location":"man/ExprArr_median.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_median.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(2, 1, 4), c(8.4, 3.2, 1)),\n  schema = list(values = pl$Array(pl$Float64, 3))\n)\ndf$with_columns(median = pl$col(\"values\")$arr$median())\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values          \u2506 median \u2502\n#&gt; \u2502 ---             \u2506 ---    \u2502\n#&gt; \u2502 array[f64, 3]   \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [2.0, 1.0, 4.0] \u2506 2.0    \u2502\n#&gt; \u2502 [8.4, 3.2, 1.0] \u2506 3.2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_min.html","title":"Find the minimum value in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_min.html#description","title":"Description","text":"<p>Find the minimum value in an array</p>"},{"location":"man/ExprArr_min.html#usage","title":"Usage","text":"<pre><code>ExprArr_min()\n</code></pre>"},{"location":"man/ExprArr_min.html#details","title":"Details","text":"<p>This method is only available with the \"nightly\" feature. See <code>polars_info()</code> for more details.</p>"},{"location":"man/ExprArr_min.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\ndf = pl$DataFrame(\n  values = list(c(1, 2), c(3, 4), c(5, 6)),\n  schema = list(values = pl$Array(pl$Float64, 2))\n)\ndf$with_columns(min = pl$col(\"values\")$arr$min())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values        \u2506 min \u2502\n#&gt; \u2502 ---           \u2506 --- \u2502\n#&gt; \u2502 array[f64, 2] \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0]    \u2506 1.0 \u2502\n#&gt; \u2502 [3.0, 4.0]    \u2506 3.0 \u2502\n#&gt; \u2502 [5.0, 6.0]    \u2506 5.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_reverse.html","title":"Reverse values in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_reverse.html#description","title":"Description","text":"<p>Reverse values in an array</p>"},{"location":"man/ExprArr_reverse.html#usage","title":"Usage","text":"<pre><code>ExprArr_reverse()\n</code></pre>"},{"location":"man/ExprArr_reverse.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_reverse.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(1, 2), c(3, 4), c(NA_real_, 6)),\n  schema = list(values = pl$Array(pl$Float64, 2))\n)\ndf$with_columns(reverse = pl$col(\"values\")$arr$reverse())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values        \u2506 reverse       \u2502\n#&gt; \u2502 ---           \u2506 ---           \u2502\n#&gt; \u2502 array[f64, 2] \u2506 array[f64, 2] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0]    \u2506 [2.0, 1.0]    \u2502\n#&gt; \u2502 [3.0, 4.0]    \u2506 [4.0, 3.0]    \u2502\n#&gt; \u2502 [null, 6.0]   \u2506 [6.0, null]   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_shift.html","title":"Shift array values by <code>n</code> indices","text":"<p>Source code</p>"},{"location":"man/ExprArr_shift.html#description","title":"Description","text":"<p>Shift array values by <code>n</code> indices</p>"},{"location":"man/ExprArr_shift.html#usage","title":"Usage","text":"<pre><code>ExprArr_shift(periods = 1)\n</code></pre>"},{"location":"man/ExprArr_shift.html#arguments","title":"Arguments","text":"<code>periods</code>  Number of places to shift (may be negative). Can be an Expr. Strings are not parsed as columns."},{"location":"man/ExprArr_shift.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_shift.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(1:3, c(2L, NA_integer_, 5L)),\n  idx = 1:2,\n  schema = list(values = pl$Array(pl$Int32, 3))\n)\ndf$with_columns(\n  shift_by_expr = pl$col(\"values\")$arr$shift(pl$col(\"idx\")),\n  shift_by_lit = pl$col(\"values\")$arr$shift(2)\n)\n</code></pre> <pre><code>#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values        \u2506 idx \u2506 shift_by_expr   \u2506 shift_by_lit    \u2502\n#&gt; \u2502 ---           \u2506 --- \u2506 ---             \u2506 ---             \u2502\n#&gt; \u2502 array[i32, 3] \u2506 i32 \u2506 array[i32, 3]   \u2506 array[i32, 3]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, 3]     \u2506 1   \u2506 [null, 1, 2]    \u2506 [null, null, 1] \u2502\n#&gt; \u2502 [2, null, 5]  \u2506 2   \u2506 [null, null, 2] \u2506 [null, null, 2] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_sort.html","title":"Sort values in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_sort.html#description","title":"Description","text":"<p>Sort values in an array</p>"},{"location":"man/ExprArr_sort.html#usage","title":"Usage","text":"<pre><code>ExprArr_sort(descending = FALSE, nulls_last = FALSE)\n</code></pre>"},{"location":"man/ExprArr_sort.html#arguments","title":"Arguments","text":"<code>descending</code>  Sort in descending order. When sorting by multiple columns, can be specified per column by passing a vector of booleans.  <code>nulls_last</code>  If <code>TRUE</code>, place nulls values last."},{"location":"man/ExprArr_sort.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(2, 1), c(3, 4), c(NA_real_, 6)),\n  schema = list(values = pl$Array(pl$Float64, 2))\n)\ndf$with_columns(sort = pl$col(\"values\")$arr$sort(nulls_last = TRUE))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values        \u2506 sort          \u2502\n#&gt; \u2502 ---           \u2506 ---           \u2502\n#&gt; \u2502 array[f64, 2] \u2506 array[f64, 2] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [2.0, 1.0]    \u2506 [1.0, 2.0]    \u2502\n#&gt; \u2502 [3.0, 4.0]    \u2506 [3.0, 4.0]    \u2502\n#&gt; \u2502 [null, 6.0]   \u2506 [6.0, null]   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_std.html","title":"Find the standard deviation in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_std.html#description","title":"Description","text":"<p>Find the standard deviation in an array</p>"},{"location":"man/ExprArr_std.html#usage","title":"Usage","text":"<pre><code>ExprArr_std(ddof = 1)\n</code></pre>"},{"location":"man/ExprArr_std.html#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/ExprArr_std.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_std.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(2, 1, 4), c(8.4, 3.2, 1)),\n  schema = list(values = pl$Array(pl$Float64, 3))\n)\ndf$with_columns(std = pl$col(\"values\")$arr$std())\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values          \u2506 std      \u2502\n#&gt; \u2502 ---             \u2506 ---      \u2502\n#&gt; \u2502 array[f64, 3]   \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [2.0, 1.0, 4.0] \u2506 1.527525 \u2502\n#&gt; \u2502 [8.4, 3.2, 1.0] \u2506 3.8      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_sum.html","title":"Sum all elements in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_sum.html#description","title":"Description","text":"<p>Sum all elements in an array</p>"},{"location":"man/ExprArr_sum.html#usage","title":"Usage","text":"<pre><code>ExprArr_sum()\n</code></pre>"},{"location":"man/ExprArr_sum.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_sum.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(1, 2), c(3, 4), c(NA_real_, 6)),\n  schema = list(values = pl$Array(pl$Float64, 2))\n)\ndf$with_columns(sum = pl$col(\"values\")$arr$sum())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values        \u2506 sum \u2502\n#&gt; \u2502 ---           \u2506 --- \u2502\n#&gt; \u2502 array[f64, 2] \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0]    \u2506 3.0 \u2502\n#&gt; \u2502 [3.0, 4.0]    \u2506 7.0 \u2502\n#&gt; \u2502 [null, 6.0]   \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_to_struct.html","title":"Convert array to struct","text":"<p>Source code</p>"},{"location":"man/ExprArr_to_struct.html#description","title":"Description","text":"<p>Convert array to struct</p>"},{"location":"man/ExprArr_to_struct.html#usage","title":"Usage","text":"<pre><code>ExprArr_to_struct(fields = NULL)\n</code></pre>"},{"location":"man/ExprArr_to_struct.html#arguments","title":"Arguments","text":"<code>fields</code>  If the name and number of the desired fields is known in advance, a list of field names can be given, which will be assigned by index. Otherwise, to dynamically assign field names, a custom R function that takes an R double and outputs a string value can be used. If <code>NULL</code> (default), fields will be <code>field_0</code>, <code>field_1</code> \u2026 <code>field_n</code>."},{"location":"man/ExprArr_to_struct.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_to_struct.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(1:3, c(2L, NA_integer_, 5L)),\n  schema = list(values = pl$Array(pl$Int32, 3))\n)\ndf$with_columns(\n  struct = pl$col(\"values\")$arr$to_struct()\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values        \u2506 struct     \u2502\n#&gt; \u2502 ---           \u2506 ---        \u2502\n#&gt; \u2502 array[i32, 3] \u2506 struct[3]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, 3]     \u2506 {1,2,3}    \u2502\n#&gt; \u2502 [2, null, 5]  \u2506 {2,null,5} \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># pass a custom function that will name all fields by adding a prefix\ndf2 = df$with_columns(\n  pl$col(\"values\")$arr$to_struct(\n    fields = \\(idx) paste0(\"col_\", idx)\n  )\n)\ndf2\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values     \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 struct[3]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,2,3}    \u2502\n#&gt; \u2502 {2,null,5} \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df2$unnest()\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col_0 \u2506 col_1 \u2506 col_2 \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 i32   \u2506 i32   \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1     \u2506 2     \u2506 3     \u2502\n#&gt; \u2502 2     \u2506 null  \u2506 5     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_unique.html","title":"Get unique values in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_unique.html#description","title":"Description","text":"<p>Get unique values in an array</p>"},{"location":"man/ExprArr_unique.html#usage","title":"Usage","text":"<pre><code>ExprArr_unique(maintain_order = FALSE)\n</code></pre>"},{"location":"man/ExprArr_unique.html#arguments","title":"Arguments","text":"<code>maintain_order</code>  If <code>TRUE</code>, the unique values are returned in order of appearance."},{"location":"man/ExprArr_unique.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(1, 1, 2), c(4, 4, 4), c(NA_real_, 6, 7)),\n  schema = list(values = pl$Array(pl$Float64, 3))\n)\ndf$with_columns(unique = pl$col(\"values\")$arr$unique())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values           \u2506 unique           \u2502\n#&gt; \u2502 ---              \u2506 ---              \u2502\n#&gt; \u2502 array[f64, 3]    \u2506 list[f64]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 1.0, 2.0]  \u2506 [1.0, 2.0]       \u2502\n#&gt; \u2502 [4.0, 4.0, 4.0]  \u2506 [4.0]            \u2502\n#&gt; \u2502 [null, 6.0, 7.0] \u2506 [null, 6.0, 7.0] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprArr_var.html","title":"Find the variance in an array","text":"<p>Source code</p>"},{"location":"man/ExprArr_var.html#description","title":"Description","text":"<p>Find the variance in an array</p>"},{"location":"man/ExprArr_var.html#usage","title":"Usage","text":"<pre><code>ExprArr_var(ddof = 1)\n</code></pre>"},{"location":"man/ExprArr_var.html#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/ExprArr_var.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprArr_var.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(2, 1, 4), c(8.4, 3.2, 1)),\n  schema = list(values = pl$Array(pl$Float64, 3))\n)\ndf$with_columns(var = pl$col(\"values\")$arr$var())\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values          \u2506 var      \u2502\n#&gt; \u2502 ---             \u2506 ---      \u2502\n#&gt; \u2502 array[f64, 3]   \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [2.0, 1.0, 4.0] \u2506 2.333333 \u2502\n#&gt; \u2502 [8.4, 3.2, 1.0] \u2506 14.44    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprBin_contains.html","title":"contains","text":"<p>Source code</p>"},{"location":"man/ExprBin_contains.html#description","title":"Description","text":"<p>R Check if binaries in Series contain a binary substring.</p>"},{"location":"man/ExprBin_contains.html#usage","title":"Usage","text":"<pre><code>ExprBin_contains(lit)\n</code></pre>"},{"location":"man/ExprBin_contains.html#arguments","title":"Arguments","text":"<code>lit</code>  The binary substring to look for"},{"location":"man/ExprBin_contains.html#value","title":"Value","text":"<p>Expr returning a Boolean</p>"},{"location":"man/ExprBin_decode.html","title":"Decode values using the provided encoding","text":"<p>Source code</p>"},{"location":"man/ExprBin_decode.html#description","title":"Description","text":"<p>Decode values using the provided encoding</p>"},{"location":"man/ExprBin_decode.html#usage","title":"Usage","text":"<pre><code>ExprBin_decode(encoding, ..., strict = TRUE)\n</code></pre>"},{"location":"man/ExprBin_decode.html#arguments","title":"Arguments","text":"<code>encoding</code>  A character, <code>\u201chex\u201d</code> or <code>\u201cbase64\u201d</code>. The encoding to use.  <code>\u2026</code>  Ignored.  <code>strict</code>  Raise an error if the underlying value cannot be decoded, otherwise mask out with a <code>null</code> value."},{"location":"man/ExprBin_decode.html#value","title":"Value","text":"<p>Expr of data type String.</p>"},{"location":"man/ExprBin_decode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  name = c(\"black\", \"yellow\", \"blue\"),\n  code_hex = as_polars_series(c(\"000000\", \"ffff00\", \"0000ff\"))$cast(pl$Binary),\n  code_base64 = as_polars_series(c(\"AAAA\", \"//8A\", \"AAD/\"))$cast(pl$Binary)\n)\n\ndf$with_columns(\n  decoded_hex = pl$col(\"code_hex\")$bin$decode(\"hex\"),\n  decoded_base64 = pl$col(\"code_base64\")$bin$decode(\"base64\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 name   \u2506 code_hex  \u2506 code_base64 \u2506 decoded_hex     \u2506 decoded_base64  \u2502\n#&gt; \u2502 ---    \u2506 ---       \u2506 ---         \u2506 ---             \u2506 ---             \u2502\n#&gt; \u2502 str    \u2506 binary    \u2506 binary      \u2506 binary          \u2506 binary          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 black  \u2506 b\"000000\" \u2506 b\"AAAA\"     \u2506 b\"\\x00\\x00\\x00\" \u2506 b\"\\x00\\x00\\x00\" \u2502\n#&gt; \u2502 yellow \u2506 b\"ffff00\" \u2506 b\"//8A\"     \u2506 b\"\\xff\\xff\\x00\" \u2506 b\"\\xff\\xff\\x00\" \u2502\n#&gt; \u2502 blue   \u2506 b\"0000ff\" \u2506 b\"AAD/\"     \u2506 b\"\\x00\\x00\\xff\" \u2506 b\"\\x00\\x00\\xff\" \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Set `strict = FALSE` to set invalid values to `null` instead of raising an error.\ndf = pl$DataFrame(\n  colors = as_polars_series(c(\"000000\", \"ffff00\", \"invalid_value\"))$cast(pl$Binary)\n)\ndf$select(pl$col(\"colors\")$bin$decode(\"hex\", strict = FALSE))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 colors          \u2502\n#&gt; \u2502 ---             \u2502\n#&gt; \u2502 binary          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 b\"\\x00\\x00\\x00\" \u2502\n#&gt; \u2502 b\"\\xff\\xff\\x00\" \u2502\n#&gt; \u2502 null            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprBin_encode.html","title":"Encode a value using the provided encoding","text":"<p>Source code</p>"},{"location":"man/ExprBin_encode.html#description","title":"Description","text":"<p>Encode a value using the provided encoding</p>"},{"location":"man/ExprBin_encode.html#usage","title":"Usage","text":"<pre><code>ExprBin_encode(encoding)\n</code></pre>"},{"location":"man/ExprBin_encode.html#arguments","title":"Arguments","text":"<code>encoding</code>  A character, <code>\u201chex\u201d</code> or <code>\u201cbase64\u201d</code>. The encoding to use."},{"location":"man/ExprBin_encode.html#value","title":"Value","text":"<p>Expr of data type String.</p>"},{"location":"man/ExprBin_encode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  name = c(\"black\", \"yellow\", \"blue\"),\n  code = as_polars_series(\n    c(\"000000\", \"ffff00\", \"0000ff\")\n  )$cast(pl$Binary)$bin$decode(\"hex\")\n)\n\ndf$with_columns(encoded = pl$col(\"code\")$bin$encode(\"hex\"))\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 name   \u2506 code            \u2506 encoded \u2502\n#&gt; \u2502 ---    \u2506 ---             \u2506 ---     \u2502\n#&gt; \u2502 str    \u2506 binary          \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 black  \u2506 b\"\\x00\\x00\\x00\" \u2506 000000  \u2502\n#&gt; \u2502 yellow \u2506 b\"\\xff\\xff\\x00\" \u2506 ffff00  \u2502\n#&gt; \u2502 blue   \u2506 b\"\\x00\\x00\\xff\" \u2506 0000ff  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprBin_ends_with.html","title":"ends_with","text":"<p>Source code</p>"},{"location":"man/ExprBin_ends_with.html#description","title":"Description","text":"<p>Check if string values end with a binary substring.</p>"},{"location":"man/ExprBin_ends_with.html#usage","title":"Usage","text":"<pre><code>ExprBin_ends_with(suffix)\n</code></pre>"},{"location":"man/ExprBin_ends_with.html#arguments","title":"Arguments","text":"<code>suffix</code>  Suffix substring."},{"location":"man/ExprBin_ends_with.html#value","title":"Value","text":"<p>Expr returning a Boolean</p>"},{"location":"man/ExprBin_starts_with.html","title":"starts_with","text":"<p>Source code</p>"},{"location":"man/ExprBin_starts_with.html#description","title":"Description","text":"<p>Check if values starts with a binary substring.</p>"},{"location":"man/ExprBin_starts_with.html#usage","title":"Usage","text":"<pre><code>ExprBin_starts_with(sub)\n</code></pre>"},{"location":"man/ExprBin_starts_with.html#arguments","title":"Arguments","text":"<code>sub</code>  Prefix substring."},{"location":"man/ExprBin_starts_with.html#value","title":"Value","text":"<p>Expr returing a Boolean</p>"},{"location":"man/ExprCat_get_categories.html","title":"Get the categories stored in this data type","text":"<p>Source code</p>"},{"location":"man/ExprCat_get_categories.html#description","title":"Description","text":"<p>Get the categories stored in this data type</p>"},{"location":"man/ExprCat_get_categories.html#usage","title":"Usage","text":"<pre><code>ExprCat_get_categories()\n</code></pre>"},{"location":"man/ExprCat_get_categories.html#value","title":"Value","text":"<p>A polars DataFrame with the categories for each categorical Series.</p>"},{"location":"man/ExprCat_get_categories.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  cats = factor(c(\"z\", \"z\", \"k\", \"a\", \"b\")),\n  vals = factor(c(3, 1, 2, 2, 3))\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cats \u2506 vals \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 cat  \u2506 cat  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 z    \u2506 3    \u2502\n#&gt; \u2502 z    \u2506 1    \u2502\n#&gt; \u2502 k    \u2506 2    \u2502\n#&gt; \u2502 a    \u2506 2    \u2502\n#&gt; \u2502 b    \u2506 3    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(\n  pl$col(\"cats\")$cat$get_categories()\n)\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cats \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 z    \u2502\n#&gt; \u2502 k    \u2502\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 b    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(\n  pl$col(\"vals\")$cat$get_categories()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 vals \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprCat_set_ordering.html","title":"Set Ordering","text":"<p>Source code</p>"},{"location":"man/ExprCat_set_ordering.html#description","title":"Description","text":"<p>Determine how this categorical series should be sorted.</p>"},{"location":"man/ExprCat_set_ordering.html#usage","title":"Usage","text":"<pre><code>ExprCat_set_ordering(ordering)\n</code></pre>"},{"location":"man/ExprCat_set_ordering.html#arguments","title":"Arguments","text":"<code>ordering</code>   string either \u2018physical\u2019 or \u2018lexical\u2019  <ul> <li>  \u2018physical\u2019 -\\&gt; Use the physical representation of the categories to determine the order (default).  </li> <li>  \u2018lexical\u2019 -\\&gt; Use the string values to determine the ordering.  </li> </ul>"},{"location":"man/ExprCat_set_ordering.html#value","title":"Value","text":"<p>bool: TRUE if equal</p>"},{"location":"man/ExprCat_set_ordering.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  cats = factor(c(\"z\", \"z\", \"k\", \"a\", \"b\")),\n  vals = c(3, 1, 2, 2, 3)\n)\n\n# sort by the string value of categories\ndf$with_columns(\n  pl$col(\"cats\")$cat$set_ordering(\"lexical\")\n)$sort(\"cats\", \"vals\")\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cats \u2506 vals \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 cat  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a    \u2506 2.0  \u2502\n#&gt; \u2502 b    \u2506 3.0  \u2502\n#&gt; \u2502 k    \u2506 2.0  \u2502\n#&gt; \u2502 z    \u2506 1.0  \u2502\n#&gt; \u2502 z    \u2506 3.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># sort by the underlying value of categories\ndf$with_columns(\n  pl$col(\"cats\")$cat$set_ordering(\"physical\")\n)$sort(\"cats\", \"vals\")\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cats \u2506 vals \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 cat  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 z    \u2506 1.0  \u2502\n#&gt; \u2502 z    \u2506 3.0  \u2502\n#&gt; \u2502 k    \u2506 2.0  \u2502\n#&gt; \u2502 a    \u2506 2.0  \u2502\n#&gt; \u2502 b    \u2506 3.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_cast_time_unit.html","title":"cast_time_unit","text":"<p>Source code</p>"},{"location":"man/ExprDT_cast_time_unit.html#description","title":"Description","text":"<p>Cast the underlying data to another time unit. This may lose precision. The corresponding global timepoint will stay unchanged +/- precision.</p>"},{"location":"man/ExprDT_cast_time_unit.html#usage","title":"Usage","text":"<pre><code>ExprDT_cast_time_unit(tu = c(\"ns\", \"us\", \"ms\"))\n</code></pre>"},{"location":"man/ExprDT_cast_time_unit.html#arguments","title":"Arguments","text":"<code>tu</code>  string option either \u2018ns\u2019, \u2018us\u2019, or \u2018ms\u2019"},{"location":"man/ExprDT_cast_time_unit.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_cast_time_unit.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2001-1-1\"),\n    end = as.Date(\"2001-1-3\"),\n    interval = \"1d1s\"\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  pl$col(\"date\")$dt$cast_time_unit()$alias(\"cast_time_unit_ns\"),\n  pl$col(\"date\")$dt$cast_time_unit(tu = \"ms\")$alias(\"cast_time_unit_ms\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 cast_time_unit_ns   \u2506 cast_time_unit_ms   \u2502\n#&gt; \u2502 ---                 \u2506 ---                 \u2506 ---                 \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 datetime[ns]        \u2506 datetime[ms]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01 00:00:00 \u2506 2001-01-01 00:00:00 \u2506 2001-01-01 00:00:00 \u2502\n#&gt; \u2502 2001-01-02 00:00:01 \u2506 2001-01-02 00:00:01 \u2506 2001-01-02 00:00:01 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_combine.html","title":"Combine Data and Time","text":"<p>Source code</p>"},{"location":"man/ExprDT_combine.html#description","title":"Description","text":"<p>Create a naive Datetime from an existing Date/Datetime expression and a Time. Each date/datetime in the first half of the interval is mapped to the start of its bucket. Each date/datetime in the second half of the interval is mapped to the end of its bucket.</p>"},{"location":"man/ExprDT_combine.html#usage","title":"Usage","text":"<pre><code>ExprDT_combine(tm, tu = \"us\")\n</code></pre>"},{"location":"man/ExprDT_combine.html#arguments","title":"Arguments","text":"<code>tm</code>  Expr or numeric or PTime, the number of epoch since or before(if negative) the Date or tm is an Expr e.g.\u00a0a column of DataType \u2018Time\u2019 or something into an Expr.  <code>tu</code>  time unit of epochs, default is \"us\", if tm is a PTime, then tz passed via PTime."},{"location":"man/ExprDT_combine.html#details","title":"Details","text":"<p>The <code>tu</code> allows the following time time units the following string language:</p> <ul> <li>  1ns \\# 1 nanosecond  </li> <li>  1us \\# 1 microsecond  </li> <li>  1ms \\# 1 millisecond  </li> </ul>"},{"location":"man/ExprDT_combine.html#value","title":"Value","text":"<p>Date/Datetime expr</p>"},{"location":"man/ExprDT_combine.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Using pl$PTime\npl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(\"02:34:12\"))$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ns]]\n#&gt; [\n#&gt;  2021-01-01 02:34:12\n#&gt; ]\n</code></pre> <pre><code>pl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(3600 * 1.5, tu = \"s\"))$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ns]]\n#&gt; [\n#&gt;  2021-01-01 01:30:00\n#&gt; ]\n</code></pre> <pre><code>pl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(3600 * 1.5E6 + 123, tu = \"us\"))$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ns]]\n#&gt; [\n#&gt;  2021-01-01 01:30:00.000123\n#&gt; ]\n</code></pre> <pre><code># pass double and set tu manually\npl$lit(as.Date(\"2021-01-01\"))$dt$combine(3600 * 1.5E6 + 123, tu = \"us\")$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[\u03bcs]]\n#&gt; [\n#&gt;  2021-01-01 01:30:00.000123\n#&gt; ]\n</code></pre> <pre><code># if needed to convert back to R it is more intuitive to set a specific time zone\nexpr = pl$lit(as.Date(\"2021-01-01\"))$dt$combine(3600 * 1.5E6 + 123, tu = \"us\")\nexpr$cast(pl$Datetime(\"us\", \"GMT\"))$to_r()\n</code></pre> <pre><code>#&gt; [1] \"2021-01-01 01:30:00 GMT\"\n</code></pre>"},{"location":"man/ExprDT_convert_time_zone.html","title":"Convert to given time zone for an expression of type Datetime.","text":"<p>Source code</p>"},{"location":"man/ExprDT_convert_time_zone.html#description","title":"Description","text":"<p>If converting from a time-zone-naive datetime, then conversion will happen as if converting from UTC, regardless of your system\u2019s time zone.</p>"},{"location":"man/ExprDT_convert_time_zone.html#usage","title":"Usage","text":"<pre><code>ExprDT_convert_time_zone(time_zone)\n</code></pre>"},{"location":"man/ExprDT_convert_time_zone.html#arguments","title":"Arguments","text":"<code>time_zone</code>  String time zone from <code>base::OlsonNames()</code>"},{"location":"man/ExprDT_convert_time_zone.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_convert_time_zone.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.POSIXct(\"2020-03-01\", tz = \"UTC\"),\n    as.POSIXct(\"2020-05-01\", tz = \"UTC\"),\n    \"1mo\"\n  )\n)\n\ndf$select(\n  \"date\",\n  London = pl$col(\"date\")$dt$convert_time_zone(\"Europe/London\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 London                      \u2502\n#&gt; \u2502 ---                     \u2506 ---                         \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 datetime[ms, Europe/London] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-03-01 00:00:00 UTC \u2506 2020-03-01 00:00:00 GMT     \u2502\n#&gt; \u2502 2020-04-01 00:00:00 UTC \u2506 2020-04-01 01:00:00 BST     \u2502\n#&gt; \u2502 2020-05-01 00:00:00 UTC \u2506 2020-05-01 01:00:00 BST     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_day.html","title":"Day","text":"<p>Source code</p>"},{"location":"man/ExprDT_day.html#description","title":"Description","text":"<p>Extract day from underlying Date representation. Applies to Date and Datetime columns. Returns the day of month starting from 1. The return value ranges from 1 to 31. (The last day of month differs by months.)</p>"},{"location":"man/ExprDT_day.html#usage","title":"Usage","text":"<pre><code>ExprDT_day()\n</code></pre>"},{"location":"man/ExprDT_day.html#value","title":"Value","text":"<p>Expr of day as UInt32</p>"},{"location":"man/ExprDT_day.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$day()$alias(\"day\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 day \u2502\n#&gt; \u2502 ---        \u2506 --- \u2502\n#&gt; \u2502 date       \u2506 i8  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 25  \u2502\n#&gt; \u2502 2020-12-26 \u2506 26  \u2502\n#&gt; \u2502 2020-12-27 \u2506 27  \u2502\n#&gt; \u2502 2020-12-28 \u2506 28  \u2502\n#&gt; \u2502 2020-12-29 \u2506 29  \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026   \u2502\n#&gt; \u2502 2021-01-01 \u2506 1   \u2502\n#&gt; \u2502 2021-01-02 \u2506 2   \u2502\n#&gt; \u2502 2021-01-03 \u2506 3   \u2502\n#&gt; \u2502 2021-01-04 \u2506 4   \u2502\n#&gt; \u2502 2021-01-05 \u2506 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_epoch.html","title":"Epoch","text":"<p>Source code</p>"},{"location":"man/ExprDT_epoch.html#description","title":"Description","text":"<p>Get the time passed since the Unix EPOCH in the give time unit.</p>"},{"location":"man/ExprDT_epoch.html#usage","title":"Usage","text":"<pre><code>ExprDT_epoch(tu = c(\"us\", \"ns\", \"ms\", \"s\", \"d\"))\n</code></pre>"},{"location":"man/ExprDT_epoch.html#arguments","title":"Arguments","text":"<code>tu</code>  string option either \u2018ns\u2019, \u2018us\u2019, \u2018ms\u2019, \u2018s\u2019 or \u2018d\u2019"},{"location":"man/ExprDT_epoch.html#details","title":"Details","text":"<p>ns and perhaps us will exceed integerish limit if returning to R as flaot64/double.</p>"},{"location":"man/ExprDT_epoch.html#value","title":"Value","text":"<p>Expr of epoch as UInt32</p>"},{"location":"man/ExprDT_epoch.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(as.Date(\"2022-1-1\"))$dt$epoch(\"ns\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i64]\n#&gt; [\n#&gt;  1640995200000000000\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(as.Date(\"2022-1-1\"))$dt$epoch(\"ms\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i64]\n#&gt; [\n#&gt;  1640995200000\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(as.Date(\"2022-1-1\"))$dt$epoch(\"s\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i64]\n#&gt; [\n#&gt;  1640995200\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(as.Date(\"2022-1-1\"))$dt$epoch(\"d\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  18993\n#&gt; ]\n</code></pre>"},{"location":"man/ExprDT_hour.html","title":"Hour","text":"<p>Source code</p>"},{"location":"man/ExprDT_hour.html#description","title":"Description","text":"<p>Extract hour from underlying Datetime representation. Applies to Datetime columns. Returns the hour number from 0 to 23.</p>"},{"location":"man/ExprDT_hour.html#usage","title":"Usage","text":"<pre><code>ExprDT_hour()\n</code></pre>"},{"location":"man/ExprDT_hour.html#value","title":"Value","text":"<p>Expr of hour as UInt32</p>"},{"location":"man/ExprDT_hour.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d2h\",\n    time_zone = \"GMT\"\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$hour()$alias(\"hour\")\n)\n</code></pre> <pre><code>#&gt; shape: (11, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 hour \u2502\n#&gt; \u2502 ---                     \u2506 ---  \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 i8   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 0    \u2502\n#&gt; \u2502 2020-12-26 02:00:00 GMT \u2506 2    \u2502\n#&gt; \u2502 2020-12-27 04:00:00 GMT \u2506 4    \u2502\n#&gt; \u2502 2020-12-28 06:00:00 GMT \u2506 6    \u2502\n#&gt; \u2502 2020-12-29 08:00:00 GMT \u2506 8    \u2502\n#&gt; \u2502 \u2026                       \u2506 \u2026    \u2502\n#&gt; \u2502 2020-12-31 12:00:00 GMT \u2506 12   \u2502\n#&gt; \u2502 2021-01-01 14:00:00 GMT \u2506 14   \u2502\n#&gt; \u2502 2021-01-02 16:00:00 GMT \u2506 16   \u2502\n#&gt; \u2502 2021-01-03 18:00:00 GMT \u2506 18   \u2502\n#&gt; \u2502 2021-01-04 20:00:00 GMT \u2506 20   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_iso_year.html","title":"Iso-Year","text":"<p>Source code</p>"},{"location":"man/ExprDT_iso_year.html#description","title":"Description","text":"<p>Extract ISO year from underlying Date representation. Applies to Date and Datetime columns. Returns the year number in the ISO standard. This may not correspond with the calendar year.</p>"},{"location":"man/ExprDT_iso_year.html#usage","title":"Usage","text":"<pre><code>ExprDT_iso_year()\n</code></pre>"},{"location":"man/ExprDT_iso_year.html#value","title":"Value","text":"<p>Expr of iso_year as Int32</p>"},{"location":"man/ExprDT_iso_year.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$year()$alias(\"year\"),\n  pl$col(\"date\")$dt$iso_year()$alias(\"iso_year\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 year \u2506 iso_year \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2506 ---      \u2502\n#&gt; \u2502 date       \u2506 i32  \u2506 i32      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-26 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-27 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-28 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-29 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026    \u2506 \u2026        \u2502\n#&gt; \u2502 2021-01-01 \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-02 \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-03 \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-04 \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2502 2021-01-05 \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_microsecond.html","title":"Extract microseconds from underlying Datetime representation.","text":"<p>Source code</p>"},{"location":"man/ExprDT_microsecond.html#description","title":"Description","text":"<p>Applies to Datetime columns.</p>"},{"location":"man/ExprDT_microsecond.html#usage","title":"Usage","text":"<pre><code>ExprDT_microsecond()\n</code></pre>"},{"location":"man/ExprDT_microsecond.html#value","title":"Value","text":"<p>Expr of data type Int32</p>"},{"location":"man/ExprDT_microsecond.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  datetime = as.POSIXct(\n    c(\n      \"1978-01-01 01:01:01\",\n      \"2024-10-13 05:30:14.500\",\n      \"2065-01-01 10:20:30.06\"\n    ),\n    \"UTC\"\n  )\n)\n\ndf$with_columns(\n  microsecond = pl$col(\"datetime\")$dt$microsecond()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 datetime                    \u2506 microsecond \u2502\n#&gt; \u2502 ---                         \u2506 ---         \u2502\n#&gt; \u2502 datetime[ms, UTC]           \u2506 i32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1978-01-01 01:01:01 UTC     \u2506 0           \u2502\n#&gt; \u2502 2024-10-13 05:30:14.500 UTC \u2506 500000      \u2502\n#&gt; \u2502 2065-01-01 10:20:30.060 UTC \u2506 60000       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_millisecond.html","title":"Extract milliseconds from underlying Datetime representation","text":"<p>Source code</p>"},{"location":"man/ExprDT_millisecond.html#description","title":"Description","text":"<p>Applies to Datetime columns.</p>"},{"location":"man/ExprDT_millisecond.html#usage","title":"Usage","text":"<pre><code>ExprDT_millisecond()\n</code></pre>"},{"location":"man/ExprDT_millisecond.html#value","title":"Value","text":"<p>Expr of data type Int32</p>"},{"location":"man/ExprDT_millisecond.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  datetime = as.POSIXct(\n    c(\n      \"1978-01-01 01:01:01\",\n      \"2024-10-13 05:30:14.500\",\n      \"2065-01-01 10:20:30.06\"\n    ),\n    \"UTC\"\n  )\n)\n\ndf$with_columns(\n  millisecond = pl$col(\"datetime\")$dt$millisecond()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 datetime                    \u2506 millisecond \u2502\n#&gt; \u2502 ---                         \u2506 ---         \u2502\n#&gt; \u2502 datetime[ms, UTC]           \u2506 i32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1978-01-01 01:01:01 UTC     \u2506 0           \u2502\n#&gt; \u2502 2024-10-13 05:30:14.500 UTC \u2506 500         \u2502\n#&gt; \u2502 2065-01-01 10:20:30.060 UTC \u2506 60          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_minute.html","title":"Minute","text":"<p>Source code</p>"},{"location":"man/ExprDT_minute.html#description","title":"Description","text":"<p>Extract minutes from underlying Datetime representation. Applies to Datetime columns. Returns the minute number from 0 to 59.</p>"},{"location":"man/ExprDT_minute.html#usage","title":"Usage","text":"<pre><code>ExprDT_minute()\n</code></pre>"},{"location":"man/ExprDT_minute.html#value","title":"Value","text":"<p>Expr of minute as UInt32</p>"},{"location":"man/ExprDT_minute.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d5s\",\n    time_zone = \"GMT\"\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$minute()$alias(\"minute\")\n)\n</code></pre> <pre><code>#&gt; shape: (11, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 minute \u2502\n#&gt; \u2502 ---                     \u2506 ---    \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 i8     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 0      \u2502\n#&gt; \u2502 2020-12-26 00:00:05 GMT \u2506 0      \u2502\n#&gt; \u2502 2020-12-27 00:00:10 GMT \u2506 0      \u2502\n#&gt; \u2502 2020-12-28 00:00:15 GMT \u2506 0      \u2502\n#&gt; \u2502 2020-12-29 00:00:20 GMT \u2506 0      \u2502\n#&gt; \u2502 \u2026                       \u2506 \u2026      \u2502\n#&gt; \u2502 2020-12-31 00:00:30 GMT \u2506 0      \u2502\n#&gt; \u2502 2021-01-01 00:00:35 GMT \u2506 0      \u2502\n#&gt; \u2502 2021-01-02 00:00:40 GMT \u2506 0      \u2502\n#&gt; \u2502 2021-01-03 00:00:45 GMT \u2506 0      \u2502\n#&gt; \u2502 2021-01-04 00:00:50 GMT \u2506 0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_month.html","title":"Month","text":"<p>Source code</p>"},{"location":"man/ExprDT_month.html#description","title":"Description","text":"<p>Extract month from underlying Date representation. Applies to Date and Datetime columns. Returns the month number starting from 1. The return value ranges from 1 to 12.</p>"},{"location":"man/ExprDT_month.html#usage","title":"Usage","text":"<pre><code>ExprDT_month()\n</code></pre>"},{"location":"man/ExprDT_month.html#value","title":"Value","text":"<p>Expr of month as UInt32</p>"},{"location":"man/ExprDT_month.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$month()$alias(\"month\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 month \u2502\n#&gt; \u2502 ---        \u2506 ---   \u2502\n#&gt; \u2502 date       \u2506 i8    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 12    \u2502\n#&gt; \u2502 2020-12-26 \u2506 12    \u2502\n#&gt; \u2502 2020-12-27 \u2506 12    \u2502\n#&gt; \u2502 2020-12-28 \u2506 12    \u2502\n#&gt; \u2502 2020-12-29 \u2506 12    \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026     \u2502\n#&gt; \u2502 2021-01-01 \u2506 1     \u2502\n#&gt; \u2502 2021-01-02 \u2506 1     \u2502\n#&gt; \u2502 2021-01-03 \u2506 1     \u2502\n#&gt; \u2502 2021-01-04 \u2506 1     \u2502\n#&gt; \u2502 2021-01-05 \u2506 1     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_nanosecond.html","title":"Extract nanoseconds from underlying Datetime representation","text":"<p>Source code</p>"},{"location":"man/ExprDT_nanosecond.html#description","title":"Description","text":"<p>Applies to Datetime columns.</p>"},{"location":"man/ExprDT_nanosecond.html#usage","title":"Usage","text":"<pre><code>ExprDT_nanosecond()\n</code></pre>"},{"location":"man/ExprDT_nanosecond.html#value","title":"Value","text":"<p>Expr of data type Int32</p>"},{"location":"man/ExprDT_nanosecond.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  datetime = as.POSIXct(\n    c(\n      \"1978-01-01 01:01:01\",\n      \"2024-10-13 05:30:14.500\",\n      \"2065-01-01 10:20:30.06\"\n    ),\n    \"UTC\"\n  )\n)\n\ndf$with_columns(\n  nanosecond = pl$col(\"datetime\")$dt$nanosecond()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 datetime                    \u2506 nanosecond \u2502\n#&gt; \u2502 ---                         \u2506 ---        \u2502\n#&gt; \u2502 datetime[ms, UTC]           \u2506 i32        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1978-01-01 01:01:01 UTC     \u2506 0          \u2502\n#&gt; \u2502 2024-10-13 05:30:14.500 UTC \u2506 500000000  \u2502\n#&gt; \u2502 2065-01-01 10:20:30.060 UTC \u2506 60000000   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_offset_by.html","title":"Offset By","text":"<p>Source code</p>"},{"location":"man/ExprDT_offset_by.html#description","title":"Description","text":"<p>Offset this date by a relative time offset. This differs from <code>pl$col(\u201cfoo_datetime_tu\u201d) + value_tu</code> in that it can take months and leap years into account. Note that only a single minus sign is allowed in the <code>by</code> string, as the first character.</p>"},{"location":"man/ExprDT_offset_by.html#usage","title":"Usage","text":"<pre><code>ExprDT_offset_by(by)\n</code></pre>"},{"location":"man/ExprDT_offset_by.html#arguments","title":"Arguments","text":"<code>by</code>  optional string encoding duration see details."},{"location":"man/ExprDT_offset_by.html#details","title":"Details","text":"<p>The <code>by</code> are created with the the following string language:</p> <ul> <li>  1ns \\# 1 nanosecond  </li> <li>  1us \\# 1 microsecond  </li> <li>  1ms \\# 1 millisecond  </li> <li>  1s \\# 1 second  </li> <li>  1m \\# 1 minute  </li> <li>  1h \\# 1 hour  </li> <li>  1d \\# 1 day  </li> <li>  1w \\# 1 calendar week  </li> <li>  1mo \\# 1 calendar month  </li> <li>  1y \\# 1 calendar year  </li> <li>  1i \\# 1 index count  </li> </ul> <p>These strings can be combined:</p> <ul> <li>  3d12h4m25s \\# 3 days, 12 hours, 4 minutes, and 25 seconds  </li> </ul>"},{"location":"man/ExprDT_offset_by.html#value","title":"Value","text":"<p>Date/Datetime expr</p>"},{"location":"man/ExprDT_offset_by.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  dates = pl$date_range(\n    as.Date(\"2000-1-1\"),\n    as.Date(\"2005-1-1\"),\n    \"1y\"\n  )\n)\ndf$select(\n  pl$col(\"dates\")$dt$offset_by(\"1y\")$alias(\"date_plus_1y\"),\n  pl$col(\"dates\")$dt$offset_by(\"-1y2mo\")$alias(\"date_min\")\n)\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date_plus_1y \u2506 date_min   \u2502\n#&gt; \u2502 ---          \u2506 ---        \u2502\n#&gt; \u2502 date         \u2506 date       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01   \u2506 1998-11-01 \u2502\n#&gt; \u2502 2002-01-01   \u2506 1999-11-01 \u2502\n#&gt; \u2502 2003-01-01   \u2506 2000-11-01 \u2502\n#&gt; \u2502 2004-01-01   \u2506 2001-11-01 \u2502\n#&gt; \u2502 2005-01-01   \u2506 2002-11-01 \u2502\n#&gt; \u2502 2006-01-01   \u2506 2003-11-01 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># the \"by\" argument also accepts expressions\ndf = pl$DataFrame(\n  dates = pl$date_range(\n    as.POSIXct(\"2022-01-01\", tz = \"GMT\"),\n    as.POSIXct(\"2022-01-02\", tz = \"GMT\"),\n    interval = \"6h\", time_unit = \"ms\", time_zone = \"GMT\"\n  )$to_r(),\n  offset = c(\"1d\", \"-2d\", \"1mo\", NA, \"1y\")\n)\n\ndf\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dates                   \u2506 offset \u2502\n#&gt; \u2502 ---                     \u2506 ---    \u2502\n#&gt; \u2502 datetime[ms, GMT]       \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2022-01-01 00:00:00 GMT \u2506 1d     \u2502\n#&gt; \u2502 2022-01-01 06:00:00 GMT \u2506 -2d    \u2502\n#&gt; \u2502 2022-01-01 12:00:00 GMT \u2506 1mo    \u2502\n#&gt; \u2502 2022-01-01 18:00:00 GMT \u2506 null   \u2502\n#&gt; \u2502 2022-01-02 00:00:00 GMT \u2506 1y     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(new_dates = pl$col(\"dates\")$dt$offset_by(pl$col(\"offset\")))\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dates                   \u2506 offset \u2506 new_dates               \u2502\n#&gt; \u2502 ---                     \u2506 ---    \u2506 ---                     \u2502\n#&gt; \u2502 datetime[ms, GMT]       \u2506 str    \u2506 datetime[ms, GMT]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2022-01-01 00:00:00 GMT \u2506 1d     \u2506 2022-01-02 00:00:00 GMT \u2502\n#&gt; \u2502 2022-01-01 06:00:00 GMT \u2506 -2d    \u2506 2021-12-30 06:00:00 GMT \u2502\n#&gt; \u2502 2022-01-01 12:00:00 GMT \u2506 1mo    \u2506 2022-02-01 12:00:00 GMT \u2502\n#&gt; \u2502 2022-01-01 18:00:00 GMT \u2506 null   \u2506 null                    \u2502\n#&gt; \u2502 2022-01-02 00:00:00 GMT \u2506 1y     \u2506 2023-01-02 00:00:00 GMT \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_ordinal_day.html","title":"Ordinal Day","text":"<p>Source code</p>"},{"location":"man/ExprDT_ordinal_day.html#description","title":"Description","text":"<p>Extract ordinal day from underlying Date representation. Applies to Date and Datetime columns. Returns the day of year starting from 1. The return value ranges from 1 to 366. (The last day of year differs by years.)</p>"},{"location":"man/ExprDT_ordinal_day.html#usage","title":"Usage","text":"<pre><code>ExprDT_ordinal_day()\n</code></pre>"},{"location":"man/ExprDT_ordinal_day.html#value","title":"Value","text":"<p>Expr of ordinal_day as UInt32</p>"},{"location":"man/ExprDT_ordinal_day.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$ordinal_day()$alias(\"ordinal_day\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 ordinal_day \u2502\n#&gt; \u2502 ---        \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 i16         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 360         \u2502\n#&gt; \u2502 2020-12-26 \u2506 361         \u2502\n#&gt; \u2502 2020-12-27 \u2506 362         \u2502\n#&gt; \u2502 2020-12-28 \u2506 363         \u2502\n#&gt; \u2502 2020-12-29 \u2506 364         \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026           \u2502\n#&gt; \u2502 2021-01-01 \u2506 1           \u2502\n#&gt; \u2502 2021-01-02 \u2506 2           \u2502\n#&gt; \u2502 2021-01-03 \u2506 3           \u2502\n#&gt; \u2502 2021-01-04 \u2506 4           \u2502\n#&gt; \u2502 2021-01-05 \u2506 5           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_quarter.html","title":"Quarter","text":"<p>Source code</p>"},{"location":"man/ExprDT_quarter.html#description","title":"Description","text":"<p>Extract quarter from underlying Date representation. Applies to Date and Datetime columns. Returns the quarter ranging from 1 to 4.</p>"},{"location":"man/ExprDT_quarter.html#usage","title":"Usage","text":"<pre><code>ExprDT_quarter()\n</code></pre>"},{"location":"man/ExprDT_quarter.html#value","title":"Value","text":"<p>Expr of quarter as UInt32</p>"},{"location":"man/ExprDT_quarter.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$quarter()$alias(\"quarter\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 quarter \u2502\n#&gt; \u2502 ---        \u2506 ---     \u2502\n#&gt; \u2502 date       \u2506 i8      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 4       \u2502\n#&gt; \u2502 2020-12-26 \u2506 4       \u2502\n#&gt; \u2502 2020-12-27 \u2506 4       \u2502\n#&gt; \u2502 2020-12-28 \u2506 4       \u2502\n#&gt; \u2502 2020-12-29 \u2506 4       \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026       \u2502\n#&gt; \u2502 2021-01-01 \u2506 1       \u2502\n#&gt; \u2502 2021-01-02 \u2506 1       \u2502\n#&gt; \u2502 2021-01-03 \u2506 1       \u2502\n#&gt; \u2502 2021-01-04 \u2506 1       \u2502\n#&gt; \u2502 2021-01-05 \u2506 1       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_replace_time_zone.html","title":"Replace time zone","text":"<p>Source code</p>"},{"location":"man/ExprDT_replace_time_zone.html#description","title":"Description","text":"<p>Cast time zone for a Series of type Datetime. This is different from <code>$convert_time_zone()</code> as it will also modify the underlying timestamp. Use to correct a wrong time zone annotation. This will change the corresponding global timepoint.</p>"},{"location":"man/ExprDT_replace_time_zone.html#usage","title":"Usage","text":"<pre><code>ExprDT_replace_time_zone(\n  time_zone,\n  ...,\n  ambiguous = \"raise\",\n  non_existent = \"raise\"\n)\n</code></pre>"},{"location":"man/ExprDT_replace_time_zone.html#arguments","title":"Arguments","text":"<code>time_zone</code> <code>NULL</code> or string time zone from <code>base::OlsonNames()</code> <code>\u2026</code>  Ignored.  <code>ambiguous</code>   Determine how to deal with ambiguous datetimes:  <ul> <li> <code>\u201craise\u201d</code> (default): throw an error  </li> <li> <code>\u201cearliest\u201d</code>: use the earliest datetime  </li> <li> <code>\u201clatest\u201d</code>: use the latest datetime  </li> <li> <code>\u201cnull\u201d</code>: return a null value  </li> </ul> <code>non_existent</code>   Determine how to deal with non-existent datetimes:  <ul> <li> <code>\u201craise\u201d</code> (default): throw an error  </li> <li> <code>\u201cnull\u201d</code>: return a null value  </li> </ul>"},{"location":"man/ExprDT_replace_time_zone.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_replace_time_zone.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf1 = pl$DataFrame(\n  london_timezone = pl$date_range(\n    as.POSIXct(\"2020-03-01\", tz = \"UTC\"),\n    as.POSIXct(\"2020-07-01\", tz = \"UTC\"),\n    \"1mo\"\n  )$dt$convert_time_zone(\"Europe/London\")\n)\n\ndf1$select(\n  \"london_timezone\",\n  London_to_Amsterdam = pl$col(\"london_timezone\")$dt$replace_time_zone(\"Europe/Amsterdam\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 london_timezone             \u2506 London_to_Amsterdam            \u2502\n#&gt; \u2502 ---                         \u2506 ---                            \u2502\n#&gt; \u2502 datetime[ms, Europe/London] \u2506 datetime[ms, Europe/Amsterdam] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-03-01 00:00:00 GMT     \u2506 2020-03-01 00:00:00 CET        \u2502\n#&gt; \u2502 2020-04-01 01:00:00 BST     \u2506 2020-04-01 01:00:00 CEST       \u2502\n#&gt; \u2502 2020-05-01 01:00:00 BST     \u2506 2020-05-01 01:00:00 CEST       \u2502\n#&gt; \u2502 2020-06-01 01:00:00 BST     \u2506 2020-06-01 01:00:00 CEST       \u2502\n#&gt; \u2502 2020-07-01 01:00:00 BST     \u2506 2020-07-01 01:00:00 CEST       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># You can use `ambiguous` to deal with ambiguous datetimes:\ndates = c(\n  \"2018-10-28 01:30\",\n  \"2018-10-28 02:00\",\n  \"2018-10-28 02:30\",\n  \"2018-10-28 02:00\"\n)\ndf2 = pl$DataFrame(\n  ts = as_polars_series(dates)$str$strptime(pl$Datetime(\"us\")),\n  ambiguous = c(\"earliest\", \"earliest\", \"latest\", \"latest\")\n)\n\ndf2$with_columns(\n  ts_localized = pl$col(\"ts\")$dt$replace_time_zone(\n    \"Europe/Brussels\",\n    ambiguous = pl$col(\"ambiguous\")\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 ts                  \u2506 ambiguous \u2506 ts_localized                  \u2502\n#&gt; \u2502 ---                 \u2506 ---       \u2506 ---                           \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 str       \u2506 datetime[\u03bcs, Europe/Brussels] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2018-10-28 01:30:00 \u2506 earliest  \u2506 2018-10-28 01:30:00 CEST      \u2502\n#&gt; \u2502 2018-10-28 02:00:00 \u2506 earliest  \u2506 2018-10-28 02:00:00 CEST      \u2502\n#&gt; \u2502 2018-10-28 02:30:00 \u2506 latest    \u2506 2018-10-28 02:30:00 CET       \u2502\n#&gt; \u2502 2018-10-28 02:00:00 \u2506 latest    \u2506 2018-10-28 02:00:00 CET       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_round.html","title":"Round datetime","text":"<p>Source code</p>"},{"location":"man/ExprDT_round.html#description","title":"Description","text":"<p>Divide the date/datetime range into buckets. Each date/datetime in the first half of the interval is mapped to the start of its bucket. Each date/datetime in the second half of the interval is mapped to the end of its bucket.</p>"},{"location":"man/ExprDT_round.html#usage","title":"Usage","text":"<pre><code>ExprDT_round(every, offset = NULL)\n</code></pre>"},{"location":"man/ExprDT_round.html#arguments","title":"Arguments","text":"<code>every</code>  string encoding duration see details.  <code>offset</code>  optional string encoding duration see details."},{"location":"man/ExprDT_round.html#details","title":"Details","text":"<p>The <code>every</code> and <code>offset</code> argument are created with the the following string language:</p> <ul> <li>  1ns \\# 1 nanosecond  </li> <li>  1us \\# 1 microsecond  </li> <li>  1ms \\# 1 millisecond  </li> <li>  1s \\# 1 second  </li> <li>  1m \\# 1 minute  </li> <li>  1h \\# 1 hour  </li> <li>  1d \\# 1 day  </li> <li>  1w \\# 1 calendar week  </li> <li>  1mo \\# 1 calendar month  </li> <li>  1y \\# 1 calendar year These strings can be combined:  <ul> <li>  3d12h4m25s \\# 3 days, 12 hours, 4 minutes, and 25 seconds  </li> </ul> </li> </ul> <p>This functionality is currently experimental and may change without it being considered a breaking change.</p>"},{"location":"man/ExprDT_round.html#value","title":"Value","text":"<p>Date/Datetime expr</p>"},{"location":"man/ExprDT_round.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nt1 = as.POSIXct(\"3040-01-01\", tz = \"GMT\")\nt2 = t1 + as.difftime(25, units = \"secs\")\ns = pl$date_range(t1, t2, interval = \"2s\", time_unit = \"ms\")\n\n# use a dt namespace function\ndf = pl$DataFrame(datetime = s)$with_columns(\n  pl$col(\"datetime\")$dt$truncate(\"4s\")$alias(\"truncated_4s\"),\n  pl$col(\"datetime\")$dt$truncate(\"4s\", offset(\"3s\"))$alias(\"truncated_4s_offset_2s\")\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (13, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 datetime                \u2506 truncated_4s            \u2506 truncated_4s_offset_2s  \u2502\n#&gt; \u2502 ---                     \u2506 ---                     \u2506 ---                     \u2502\n#&gt; \u2502 datetime[ms, GMT]       \u2506 datetime[ms, GMT]       \u2506 datetime[ms, GMT]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:03 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:02 GMT \u2506 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:03 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:07 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:06 GMT \u2506 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:07 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:08 GMT \u2506 3040-01-01 00:00:08 GMT \u2506 3040-01-01 00:00:11 GMT \u2502\n#&gt; \u2502 \u2026                       \u2506 \u2026                       \u2506 \u2026                       \u2502\n#&gt; \u2502 3040-01-01 00:00:16 GMT \u2506 3040-01-01 00:00:16 GMT \u2506 3040-01-01 00:00:19 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:18 GMT \u2506 3040-01-01 00:00:16 GMT \u2506 3040-01-01 00:00:19 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:23 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:22 GMT \u2506 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:23 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:24 GMT \u2506 3040-01-01 00:00:24 GMT \u2506 3040-01-01 00:00:27 GMT \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_second.html","title":"Extract seconds from underlying Datetime representation","text":"<p>Source code</p>"},{"location":"man/ExprDT_second.html#description","title":"Description","text":"<p>Applies to Datetime columns. Returns the integer second number from 0 to 59, or a floating point number from 0 \\&lt; 60 if <code>fractional=TRUE</code> that includes any milli/micro/nanosecond component.</p>"},{"location":"man/ExprDT_second.html#usage","title":"Usage","text":"<pre><code>ExprDT_second(fractional = FALSE)\n</code></pre>"},{"location":"man/ExprDT_second.html#arguments","title":"Arguments","text":"<code>fractional</code>  A logical. Whether to include the fractional component of the second."},{"location":"man/ExprDT_second.html#value","title":"Value","text":"<p>Expr of data type Int8 or Float64</p>"},{"location":"man/ExprDT_second.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  datetime = as.POSIXct(\n    c(\n      \"1978-01-01 01:01:01\",\n      \"2024-10-13 05:30:14.500\",\n      \"2065-01-01 10:20:30.06\"\n    ),\n    \"UTC\"\n  )\n)\n\ndf$with_columns(\n  second = pl$col(\"datetime\")$dt$second(),\n  second_fractional = pl$col(\"datetime\")$dt$second(fractional = TRUE)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 datetime                    \u2506 second \u2506 second_fractional \u2502\n#&gt; \u2502 ---                         \u2506 ---    \u2506 ---               \u2502\n#&gt; \u2502 datetime[ms, UTC]           \u2506 i8     \u2506 f64               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1978-01-01 01:01:01 UTC     \u2506 1      \u2506 1.0               \u2502\n#&gt; \u2502 2024-10-13 05:30:14.500 UTC \u2506 14     \u2506 14.5              \u2502\n#&gt; \u2502 2065-01-01 10:20:30.060 UTC \u2506 30     \u2506 30.06             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_strftime.html","title":"strftime","text":"<p>Source code</p>"},{"location":"man/ExprDT_strftime.html#description","title":"Description","text":"<p>Format Date/Datetime with a formatting rule. See <code>chrono strftime/strptime \\&lt;https://docs.rs/chrono/latest/chrono/format/strftime/index.html&gt;</code>_.</p>"},{"location":"man/ExprDT_strftime.html#usage","title":"Usage","text":"<pre><code>ExprDT_strftime(format)\n</code></pre>"},{"location":"man/ExprDT_strftime.html#arguments","title":"Arguments","text":"<code>format</code>  string format very much like in R passed to chrono"},{"location":"man/ExprDT_strftime.html#value","title":"Value","text":"<p>Date/Datetime expr</p>"},{"location":"man/ExprDT_strftime.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(as.POSIXct(\"2021-01-02 12:13:14\", tz = \"GMT\"))$dt$strftime(\"this is the year: %Y\")$to_r()\n</code></pre> <pre><code>#&gt; [1] \"this is the year: 2021\"\n</code></pre>"},{"location":"man/ExprDT_time.html","title":"Extract time from a Datetime Series","text":"<p>Source code</p>"},{"location":"man/ExprDT_time.html#description","title":"Description","text":"<p>This only works on Datetime Series, it will error on Date Series.</p>"},{"location":"man/ExprDT_time.html#usage","title":"Usage","text":"<pre><code>ExprDT_time()\n</code></pre>"},{"location":"man/ExprDT_time.html#value","title":"Value","text":"<p>A Time Expr</p>"},{"location":"man/ExprDT_time.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(dates = pl$date_range(\n  as.Date(\"2000-1-1\"),\n  as.Date(\"2000-1-2\"),\n  \"1h\"\n))\n\ndf$with_columns(times = pl$col(\"dates\")$dt$time())\n</code></pre> <pre><code>#&gt; shape: (25, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dates               \u2506 times    \u2502\n#&gt; \u2502 ---                 \u2506 ---      \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 time     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2000-01-01 00:00:00 \u2506 00:00:00 \u2502\n#&gt; \u2502 2000-01-01 01:00:00 \u2506 01:00:00 \u2502\n#&gt; \u2502 2000-01-01 02:00:00 \u2506 02:00:00 \u2502\n#&gt; \u2502 2000-01-01 03:00:00 \u2506 03:00:00 \u2502\n#&gt; \u2502 2000-01-01 04:00:00 \u2506 04:00:00 \u2502\n#&gt; \u2502 \u2026                   \u2506 \u2026        \u2502\n#&gt; \u2502 2000-01-01 20:00:00 \u2506 20:00:00 \u2502\n#&gt; \u2502 2000-01-01 21:00:00 \u2506 21:00:00 \u2502\n#&gt; \u2502 2000-01-01 22:00:00 \u2506 22:00:00 \u2502\n#&gt; \u2502 2000-01-01 23:00:00 \u2506 23:00:00 \u2502\n#&gt; \u2502 2000-01-02 00:00:00 \u2506 00:00:00 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_timestamp.html","title":"timestamp","text":"<p>Source code</p>"},{"location":"man/ExprDT_timestamp.html#description","title":"Description","text":"<p>Return a timestamp in the given time unit.</p>"},{"location":"man/ExprDT_timestamp.html#usage","title":"Usage","text":"<pre><code>ExprDT_timestamp(tu = c(\"ns\", \"us\", \"ms\"))\n</code></pre>"},{"location":"man/ExprDT_timestamp.html#arguments","title":"Arguments","text":"<code>tu</code>  string option either \u2018ns\u2019, \u2018us\u2019, or \u2018ms\u2019"},{"location":"man/ExprDT_timestamp.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_timestamp.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2001-1-1\"),\n    end = as.Date(\"2001-1-3\"),\n    interval = \"1d1s\"\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  pl$col(\"date\")$dt$timestamp()$alias(\"timestamp_ns\"),\n  pl$col(\"date\")$dt$timestamp(tu = \"ms\")$alias(\"timestamp_ms\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 timestamp_ns       \u2506 timestamp_ms \u2502\n#&gt; \u2502 ---                 \u2506 ---                \u2506 ---          \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 i64                \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01 00:00:00 \u2506 978307200000000000 \u2506 978307200000 \u2502\n#&gt; \u2502 2001-01-02 00:00:01 \u2506 978393601000000000 \u2506 978393601000 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_days.html","title":"Days","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_days.html#description","title":"Description","text":"<p>Extract the days from a Duration type.</p>"},{"location":"man/ExprDT_total_days.html#usage","title":"Usage","text":"<pre><code>ExprDT_total_days()\n</code></pre>"},{"location":"man/ExprDT_total_days.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_days.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2020-3-1\"),\n    end = as.Date(\"2020-5-1\"),\n    interval = \"1mo\"\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  diff_days = pl$col(\"date\")$diff()$dt$total_days()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 diff_days \u2502\n#&gt; \u2502 ---        \u2506 ---       \u2502\n#&gt; \u2502 date       \u2506 i64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-03-01 \u2506 null      \u2502\n#&gt; \u2502 2020-04-01 \u2506 31        \u2502\n#&gt; \u2502 2020-05-01 \u2506 30        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_hours.html","title":"Hours","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_hours.html#description","title":"Description","text":"<p>Extract the hours from a Duration type.</p>"},{"location":"man/ExprDT_total_hours.html#usage","title":"Usage","text":"<pre><code>ExprDT_total_hours()\n</code></pre>"},{"location":"man/ExprDT_total_hours.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_hours.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2020-1-1\"),\n    end = as.Date(\"2020-1-4\"),\n    interval = \"1d\"\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  diff_hours = pl$col(\"date\")$diff()$dt$total_hours()\n)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 diff_hours \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2502\n#&gt; \u2502 date       \u2506 i64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 \u2506 null       \u2502\n#&gt; \u2502 2020-01-02 \u2506 24         \u2502\n#&gt; \u2502 2020-01-03 \u2506 24         \u2502\n#&gt; \u2502 2020-01-04 \u2506 24         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_microseconds.html","title":"microseconds","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_microseconds.html#description","title":"Description","text":"<p>Extract the microseconds from a Duration type.</p>"},{"location":"man/ExprDT_total_microseconds.html#usage","title":"Usage","text":"<pre><code>ExprDT_total_microseconds()\n</code></pre>"},{"location":"man/ExprDT_total_microseconds.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_microseconds.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(date = pl$date_range(\n  start = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n  end = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"),\n  interval = \"1ms\"\n))\ndf$select(\n  pl$col(\"date\"),\n  diff_microsec = pl$col(\"date\")$diff()$dt$total_microseconds()\n)\n</code></pre> <pre><code>#&gt; shape: (1_001, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                        \u2506 diff_microsec \u2502\n#&gt; \u2502 ---                         \u2506 ---           \u2502\n#&gt; \u2502 datetime[ms, GMT]           \u2506 i64           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00 GMT     \u2506 null          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.001 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.002 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.003 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.004 GMT \u2506 1000          \u2502\n#&gt; \u2502 \u2026                           \u2506 \u2026             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.996 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.997 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.998 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.999 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:01 GMT     \u2506 1000          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_milliseconds.html","title":"milliseconds","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_milliseconds.html#description","title":"Description","text":"<p>Extract the milliseconds from a Duration type.</p>"},{"location":"man/ExprDT_total_milliseconds.html#usage","title":"Usage","text":"<pre><code>ExprDT_total_milliseconds()\n</code></pre>"},{"location":"man/ExprDT_total_milliseconds.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_milliseconds.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(date = pl$date_range(\n  start = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n  end = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"),\n  interval = \"1ms\"\n))\ndf$select(\n  pl$col(\"date\"),\n  diff_millisec = pl$col(\"date\")$diff()$dt$total_milliseconds()\n)\n</code></pre> <pre><code>#&gt; shape: (1_001, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                        \u2506 diff_millisec \u2502\n#&gt; \u2502 ---                         \u2506 ---           \u2502\n#&gt; \u2502 datetime[ms, GMT]           \u2506 i64           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00 GMT     \u2506 null          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.001 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.002 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.003 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.004 GMT \u2506 1             \u2502\n#&gt; \u2502 \u2026                           \u2506 \u2026             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.996 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.997 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.998 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.999 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:01 GMT     \u2506 1             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_minutes.html","title":"Minutes","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_minutes.html#description","title":"Description","text":"<p>Extract the minutes from a Duration type.</p>"},{"location":"man/ExprDT_total_minutes.html#usage","title":"Usage","text":"<pre><code>ExprDT_total_minutes()\n</code></pre>"},{"location":"man/ExprDT_total_minutes.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_minutes.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2020-1-1\"),\n    end = as.Date(\"2020-1-4\"),\n    interval = \"1d\"\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  diff_minutes = pl$col(\"date\")$diff()$dt$total_minutes()\n)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 diff_minutes \u2502\n#&gt; \u2502 ---        \u2506 ---          \u2502\n#&gt; \u2502 date       \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 \u2506 null         \u2502\n#&gt; \u2502 2020-01-02 \u2506 1440         \u2502\n#&gt; \u2502 2020-01-03 \u2506 1440         \u2502\n#&gt; \u2502 2020-01-04 \u2506 1440         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_nanoseconds.html","title":"nanoseconds","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_nanoseconds.html#description","title":"Description","text":"<p>Extract the nanoseconds from a Duration type.</p>"},{"location":"man/ExprDT_total_nanoseconds.html#usage","title":"Usage","text":"<pre><code>ExprDT_total_nanoseconds()\n</code></pre>"},{"location":"man/ExprDT_total_nanoseconds.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_nanoseconds.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(date = pl$date_range(\n  start = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n  end = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"),\n  interval = \"1ms\"\n))\ndf$select(\n  pl$col(\"date\"),\n  diff_nanosec = pl$col(\"date\")$diff()$dt$total_nanoseconds()\n)\n</code></pre> <pre><code>#&gt; shape: (1_001, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                        \u2506 diff_nanosec \u2502\n#&gt; \u2502 ---                         \u2506 ---          \u2502\n#&gt; \u2502 datetime[ms, GMT]           \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00 GMT     \u2506 null         \u2502\n#&gt; \u2502 2020-01-01 00:00:00.001 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.002 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.003 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.004 GMT \u2506 1000000      \u2502\n#&gt; \u2502 \u2026                           \u2506 \u2026            \u2502\n#&gt; \u2502 2020-01-01 00:00:00.996 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.997 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.998 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.999 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:01 GMT     \u2506 1000000      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_seconds.html","title":"Seconds","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_seconds.html#description","title":"Description","text":"<p>Extract the seconds from a Duration type.</p>"},{"location":"man/ExprDT_total_seconds.html#usage","title":"Usage","text":"<pre><code>ExprDT_total_seconds()\n</code></pre>"},{"location":"man/ExprDT_total_seconds.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_seconds.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(date = pl$date_range(\n  start = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n  end = as.POSIXct(\"2020-1-1 00:04:00\", tz = \"GMT\"),\n  interval = \"1m\"\n))\ndf$select(\n  pl$col(\"date\"),\n  diff_sec = pl$col(\"date\")$diff()$dt$total_seconds()\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 diff_sec \u2502\n#&gt; \u2502 ---                     \u2506 ---      \u2502\n#&gt; \u2502 datetime[ms, GMT]       \u2506 i64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00 GMT \u2506 null     \u2502\n#&gt; \u2502 2020-01-01 00:01:00 GMT \u2506 60       \u2502\n#&gt; \u2502 2020-01-01 00:02:00 GMT \u2506 60       \u2502\n#&gt; \u2502 2020-01-01 00:03:00 GMT \u2506 60       \u2502\n#&gt; \u2502 2020-01-01 00:04:00 GMT \u2506 60       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_truncate.html","title":"Truncate datetime","text":"<p>Source code</p>"},{"location":"man/ExprDT_truncate.html#description","title":"Description","text":"<p>Divide the date/datetime range into buckets. Each date/datetime is mapped to the start of its bucket.</p>"},{"location":"man/ExprDT_truncate.html#usage","title":"Usage","text":"<pre><code>ExprDT_truncate(every, offset = NULL)\n</code></pre>"},{"location":"man/ExprDT_truncate.html#arguments","title":"Arguments","text":"<code>every</code>  string encoding duration see details.  <code>offset</code>  optional string encoding duration see details."},{"location":"man/ExprDT_truncate.html#details","title":"Details","text":"<p>The <code>every</code> and <code>offset</code> argument are created with the the following string language:</p> <ul> <li>  1ns \\# 1 nanosecond  </li> <li>  1us \\# 1 microsecond  </li> <li>  1ms \\# 1 millisecond  </li> <li>  1s \\# 1 second  </li> <li>  1m \\# 1 minute  </li> <li>  1h \\# 1 hour  </li> <li>  1d \\# 1 day  </li> <li>  1w \\# 1 calendar week  </li> <li>  1mo \\# 1 calendar month  </li> <li>  1y \\# 1 calendar year These strings can be combined:  <ul> <li>  3d12h4m25s \\# 3 days, 12 hours, 4 minutes, and 25 seconds  </li> </ul> </li> </ul>"},{"location":"man/ExprDT_truncate.html#value","title":"Value","text":"<p>Date/Datetime expr</p>"},{"location":"man/ExprDT_truncate.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nt1 = as.POSIXct(\"3040-01-01\", tz = \"GMT\")\nt2 = t1 + as.difftime(25, units = \"secs\")\ns = pl$date_range(t1, t2, interval = \"2s\", time_unit = \"ms\")\n\n# use a dt namespace function\ndf = pl$DataFrame(datetime = s)$with_columns(\n  pl$col(\"datetime\")$dt$truncate(\"4s\")$alias(\"truncated_4s\"),\n  pl$col(\"datetime\")$dt$truncate(\"4s\", offset(\"3s\"))$alias(\"truncated_4s_offset_2s\")\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (13, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 datetime                \u2506 truncated_4s            \u2506 truncated_4s_offset_2s  \u2502\n#&gt; \u2502 ---                     \u2506 ---                     \u2506 ---                     \u2502\n#&gt; \u2502 datetime[ms, GMT]       \u2506 datetime[ms, GMT]       \u2506 datetime[ms, GMT]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:03 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:02 GMT \u2506 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:03 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:07 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:06 GMT \u2506 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:07 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:08 GMT \u2506 3040-01-01 00:00:08 GMT \u2506 3040-01-01 00:00:11 GMT \u2502\n#&gt; \u2502 \u2026                       \u2506 \u2026                       \u2506 \u2026                       \u2502\n#&gt; \u2502 3040-01-01 00:00:16 GMT \u2506 3040-01-01 00:00:16 GMT \u2506 3040-01-01 00:00:19 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:18 GMT \u2506 3040-01-01 00:00:16 GMT \u2506 3040-01-01 00:00:19 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:23 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:22 GMT \u2506 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:23 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:24 GMT \u2506 3040-01-01 00:00:24 GMT \u2506 3040-01-01 00:00:27 GMT \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_week.html","title":"Week","text":"<p>Source code</p>"},{"location":"man/ExprDT_week.html#description","title":"Description","text":"<p>Extract the week from the underlying Date representation. Applies to Date and Datetime columns. Returns the ISO week number starting from 1. The return value ranges from 1 to 53. (The last week of year differs by years.)</p>"},{"location":"man/ExprDT_week.html#usage","title":"Usage","text":"<pre><code>ExprDT_week()\n</code></pre>"},{"location":"man/ExprDT_week.html#value","title":"Value","text":"<p>Expr of week as UInt32</p>"},{"location":"man/ExprDT_week.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$week()$alias(\"week\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 week \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2502\n#&gt; \u2502 date       \u2506 i8   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 52   \u2502\n#&gt; \u2502 2020-12-26 \u2506 52   \u2502\n#&gt; \u2502 2020-12-27 \u2506 52   \u2502\n#&gt; \u2502 2020-12-28 \u2506 53   \u2502\n#&gt; \u2502 2020-12-29 \u2506 53   \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026    \u2502\n#&gt; \u2502 2021-01-01 \u2506 53   \u2502\n#&gt; \u2502 2021-01-02 \u2506 53   \u2502\n#&gt; \u2502 2021-01-03 \u2506 53   \u2502\n#&gt; \u2502 2021-01-04 \u2506 1    \u2502\n#&gt; \u2502 2021-01-05 \u2506 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_weekday.html","title":"Weekday","text":"<p>Source code</p>"},{"location":"man/ExprDT_weekday.html#description","title":"Description","text":"<p>Extract the week day from the underlying Date representation. Applies to Date and Datetime columns. Returns the ISO weekday number where monday = 1 and sunday = 7</p>"},{"location":"man/ExprDT_weekday.html#usage","title":"Usage","text":"<pre><code>ExprDT_weekday()\n</code></pre>"},{"location":"man/ExprDT_weekday.html#value","title":"Value","text":"<p>Expr of weekday as UInt32</p>"},{"location":"man/ExprDT_weekday.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$weekday()$alias(\"weekday\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 weekday \u2502\n#&gt; \u2502 ---        \u2506 ---     \u2502\n#&gt; \u2502 date       \u2506 i8      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 5       \u2502\n#&gt; \u2502 2020-12-26 \u2506 6       \u2502\n#&gt; \u2502 2020-12-27 \u2506 7       \u2502\n#&gt; \u2502 2020-12-28 \u2506 1       \u2502\n#&gt; \u2502 2020-12-29 \u2506 2       \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026       \u2502\n#&gt; \u2502 2021-01-01 \u2506 5       \u2502\n#&gt; \u2502 2021-01-02 \u2506 6       \u2502\n#&gt; \u2502 2021-01-03 \u2506 7       \u2502\n#&gt; \u2502 2021-01-04 \u2506 1       \u2502\n#&gt; \u2502 2021-01-05 \u2506 2       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_with_time_unit.html","title":"with_time_unit","text":"<p>Source code</p>"},{"location":"man/ExprDT_with_time_unit.html#description","title":"Description","text":"<p>Set time unit of a Series of dtype Datetime or Duration. This does not modify underlying data, and should be used to fix an incorrect time unit. The corresponding global timepoint will change.</p>"},{"location":"man/ExprDT_with_time_unit.html#usage","title":"Usage","text":"<pre><code>ExprDT_with_time_unit(tu = c(\"ns\", \"us\", \"ms\"))\n</code></pre>"},{"location":"man/ExprDT_with_time_unit.html#arguments","title":"Arguments","text":"<code>tu</code>  string option either \u2018ns\u2019, \u2018us\u2019, or \u2018ms\u2019"},{"location":"man/ExprDT_with_time_unit.html#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_with_time_unit.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2001-1-1\"),\n    end = as.Date(\"2001-1-3\"),\n    interval = \"1d1s\"\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  pl$col(\"date\")$dt$with_time_unit()$alias(\"with_time_unit_ns\"),\n  pl$col(\"date\")$dt$with_time_unit(tu = \"ms\")$alias(\"with_time_unit_ms\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 with_time_unit_ns       \u2506 with_time_unit_ms     \u2502\n#&gt; \u2502 ---                 \u2506 ---                     \u2506 ---                   \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 datetime[ns]            \u2506 datetime[ms]          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01 00:00:00 \u2506 1970-01-12 07:45:07.200 \u2506 +32971-04-28 00:00:00 \u2502\n#&gt; \u2502 2001-01-02 00:00:01 \u2506 1970-01-12 07:46:33.601 \u2506 +32974-01-22 00:16:40 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_year.html","title":"Year","text":"<p>Source code</p>"},{"location":"man/ExprDT_year.html#description","title":"Description","text":"<p>Extract year from underlying Date representation. Applies to Date and Datetime columns. Returns the year number in the calendar date.</p>"},{"location":"man/ExprDT_year.html#usage","title":"Usage","text":"<pre><code>ExprDT_year()\n</code></pre>"},{"location":"man/ExprDT_year.html#value","title":"Value","text":"<p>Expr of Year as Int32</p>"},{"location":"man/ExprDT_year.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$year()$alias(\"year\"),\n  pl$col(\"date\")$dt$iso_year()$alias(\"iso_year\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 year \u2506 iso_year \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2506 ---      \u2502\n#&gt; \u2502 date       \u2506 i32  \u2506 i32      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-26 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-27 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-28 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-29 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026    \u2506 \u2026        \u2502\n#&gt; \u2502 2021-01-01 \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-02 \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-03 \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-04 \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2502 2021-01-05 \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_all.html","title":"Evaluate whether all boolean values in a list are true","text":"<p>Source code</p>"},{"location":"man/ExprList_all.html#description","title":"Description","text":"<p>Evaluate whether all boolean values in a list are true</p>"},{"location":"man/ExprList_all.html#usage","title":"Usage","text":"<pre><code>ExprList_all()\n</code></pre>"},{"location":"man/ExprList_all.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_all.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  list(a = list(c(TRUE, TRUE), c(FALSE, TRUE), c(FALSE, FALSE), NA, c()))\n)\ndf$with_columns(all = pl$col(\"a\")$list$all())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a              \u2506 all   \u2502\n#&gt; \u2502 ---            \u2506 ---   \u2502\n#&gt; \u2502 list[bool]     \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [true, true]   \u2506 true  \u2502\n#&gt; \u2502 [false, true]  \u2506 false \u2502\n#&gt; \u2502 [false, false] \u2506 false \u2502\n#&gt; \u2502 [null]         \u2506 true  \u2502\n#&gt; \u2502 []             \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_any.html","title":"Evaluate whether any boolean values in a list are true","text":"<p>Source code</p>"},{"location":"man/ExprList_any.html#description","title":"Description","text":"<p>Evaluate whether any boolean values in a list are true</p>"},{"location":"man/ExprList_any.html#usage","title":"Usage","text":"<pre><code>ExprList_any()\n</code></pre>"},{"location":"man/ExprList_any.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_any.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  list(a = list(c(TRUE, TRUE), c(FALSE, TRUE), c(FALSE, FALSE), NA, c()))\n)\ndf$with_columns(any = pl$col(\"a\")$list$any())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a              \u2506 any   \u2502\n#&gt; \u2502 ---            \u2506 ---   \u2502\n#&gt; \u2502 list[bool]     \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [true, true]   \u2506 true  \u2502\n#&gt; \u2502 [false, true]  \u2506 true  \u2502\n#&gt; \u2502 [false, false] \u2506 false \u2502\n#&gt; \u2502 [null]         \u2506 false \u2502\n#&gt; \u2502 []             \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_arg_max.html","title":"Get the index of the maximal value in list","text":"<p>Source code</p>"},{"location":"man/ExprList_arg_max.html#description","title":"Description","text":"<p>Get the index of the maximal value in list</p>"},{"location":"man/ExprList_arg_max.html#usage","title":"Usage","text":"<pre><code>ExprList_arg_max()\n</code></pre>"},{"location":"man/ExprList_arg_max.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_arg_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(s = list(1:2, 2:1)))\ndf$with_columns(\n  arg_max = pl$col(\"s\")$list$arg_max()\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s         \u2506 arg_max \u2502\n#&gt; \u2502 ---       \u2506 ---     \u2502\n#&gt; \u2502 list[i32] \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2]    \u2506 1       \u2502\n#&gt; \u2502 [2, 1]    \u2506 0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_arg_min.html","title":"Get the index of the minimal value in list","text":"<p>Source code</p>"},{"location":"man/ExprList_arg_min.html#description","title":"Description","text":"<p>Get the index of the minimal value in list</p>"},{"location":"man/ExprList_arg_min.html#usage","title":"Usage","text":"<pre><code>ExprList_arg_min()\n</code></pre>"},{"location":"man/ExprList_arg_min.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_arg_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(s = list(1:2, 2:1)))\ndf$with_columns(\n  arg_min = pl$col(\"s\")$list$arg_min()\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s         \u2506 arg_min \u2502\n#&gt; \u2502 ---       \u2506 ---     \u2502\n#&gt; \u2502 list[i32] \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2]    \u2506 0       \u2502\n#&gt; \u2502 [2, 1]    \u2506 1       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_concat.html","title":"Concat two list variables","text":"<p>Source code</p>"},{"location":"man/ExprList_concat.html#description","title":"Description","text":"<p>Concat two list variables</p>"},{"location":"man/ExprList_concat.html#usage","title":"Usage","text":"<pre><code>ExprList_concat(other)\n</code></pre>"},{"location":"man/ExprList_concat.html#arguments","title":"Arguments","text":"<code>other</code>  Values to concat with. Can be an Expr or something coercible to an Expr."},{"location":"man/ExprList_concat.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_concat.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = list(\"a\", \"x\"),\n  b = list(c(\"b\", \"c\"), c(\"y\", \"z\"))\n)\ndf$with_columns(\n  conc_to_b = pl$col(\"a\")$list$concat(pl$col(\"b\")),\n  conc_to_lit_str = pl$col(\"a\")$list$concat(pl$lit(\"some string\")),\n  conc_to_lit_list = pl$col(\"a\")$list$concat(pl$lit(list(\"hello\", c(\"hello\", \"world\"))))\n)\n</code></pre> <pre><code>#&gt; shape: (2, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 b          \u2506 conc_to_b       \u2506 conc_to_lit_str      \u2506 conc_to_lit_list        \u2502\n#&gt; \u2502 ---       \u2506 ---        \u2506 ---             \u2506 ---                  \u2506 ---                     \u2502\n#&gt; \u2502 list[str] \u2506 list[str]  \u2506 list[str]       \u2506 list[str]            \u2506 list[str]               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\"]     \u2506 [\"b\", \"c\"] \u2506 [\"a\", \"b\", \"c\"] \u2506 [\"a\", \"some string\"] \u2506 [\"a\", \"hello\"]          \u2502\n#&gt; \u2502 [\"x\"]     \u2506 [\"y\", \"z\"] \u2506 [\"x\", \"y\", \"z\"] \u2506 [\"x\", \"some string\"] \u2506 [\"x\", \"hello\", \"world\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_contains.html","title":"Check if list contains a given value","text":"<p>Source code</p>"},{"location":"man/ExprList_contains.html#description","title":"Description","text":"<p>Check if list contains a given value</p>"},{"location":"man/ExprList_contains.html#usage","title":"Usage","text":"<pre><code>ExprList_contains(item)\n</code></pre>"},{"location":"man/ExprList_contains.html#arguments","title":"Arguments","text":"<code>item</code>  Expr or something coercible to an Expr. Strings are not parsed as columns."},{"location":"man/ExprList_contains.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_contains.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = list(3:1, NULL, 1:2),\n  item = 0:2\n)\ndf$with_columns(\n  with_expr = pl$col(\"a\")$list$contains(pl$col(\"item\")),\n  with_lit = pl$col(\"a\")$list$contains(1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 item \u2506 with_expr \u2506 with_lit \u2502\n#&gt; \u2502 ---       \u2506 ---  \u2506 ---       \u2506 ---      \u2502\n#&gt; \u2502 list[i32] \u2506 i32  \u2506 bool      \u2506 bool     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3, 2, 1] \u2506 0    \u2506 false     \u2506 true     \u2502\n#&gt; \u2502 []        \u2506 1    \u2506 false     \u2506 false    \u2502\n#&gt; \u2502 [1, 2]    \u2506 2    \u2506 true      \u2506 true     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_diff.html","title":"Compute difference between list values","text":"<p>Source code</p>"},{"location":"man/ExprList_diff.html#description","title":"Description","text":"<p>This computes the first discrete difference between shifted items of every list. The parameter <code>n</code> gives the interval between items to subtract, e.g <code>n = 2</code> the output will be the difference between the 1st and the 3rd value, the 2nd and 4th value, etc.</p>"},{"location":"man/ExprList_diff.html#usage","title":"Usage","text":"<pre><code>ExprList_diff(n = 1, null_behavior = c(\"ignore\", \"drop\"))\n</code></pre>"},{"location":"man/ExprList_diff.html#arguments","title":"Arguments","text":"<code>n</code>  Number of slots to shift. If negative, then it starts from the end.  <code>null_behavior</code>  How to handle <code>null</code> values. Either <code>\u201cignore\u201d</code> (default) or <code>\u201cdrop\u201d</code>."},{"location":"man/ExprList_diff.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_diff.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(s = list(1:4, c(10L, 2L, 1L))))\ndf$with_columns(diff = pl$col(\"s\")$list$diff(2))\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2506 diff              \u2502\n#&gt; \u2502 ---         \u2506 ---               \u2502\n#&gt; \u2502 list[i32]   \u2506 list[i32]         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, \u2026 4] \u2506 [null, null, \u2026 2] \u2502\n#&gt; \u2502 [10, 2, 1]  \u2506 [null, null, -9]  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># negative value starts shifting from the end\ndf$with_columns(diff = pl$col(\"s\")$list$diff(-2))\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2506 diff             \u2502\n#&gt; \u2502 ---         \u2506 ---              \u2502\n#&gt; \u2502 list[i32]   \u2506 list[i32]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, \u2026 4] \u2506 [-2, -2, \u2026 null] \u2502\n#&gt; \u2502 [10, 2, 1]  \u2506 [9, null, null]  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_eval.html","title":"Run any polars expression on the list values","text":"<p>Source code</p>"},{"location":"man/ExprList_eval.html#description","title":"Description","text":"<p>Run any polars expression on the list values</p>"},{"location":"man/ExprList_eval.html#usage","title":"Usage","text":"<pre><code>ExprList_eval(expr, parallel = FALSE)\n</code></pre>"},{"location":"man/ExprList_eval.html#arguments","title":"Arguments","text":"<code>expr</code>  Expression to run. Note that you can select an element with <code>pl$element()</code>, <code>pl$first()</code>, and more. See Examples.  <code>parallel</code>  Run all expression parallel. Don\u2019t activate this blindly. Parallelism is worth it if there is enough work to do per thread. This likely should not be used in the <code>$group_by()</code> context, because we already do parallel execution per group."},{"location":"man/ExprList_eval.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_eval.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = list(c(1, 8, 3), c(3, 2), c(NA, NA, 1)),\n  b = list(c(\"R\", \"is\", \"amazing\"), c(\"foo\", \"bar\"), \"text\")\n)\n\ndf\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a                 \u2506 b                      \u2502\n#&gt; \u2502 ---               \u2506 ---                    \u2502\n#&gt; \u2502 list[f64]         \u2506 list[str]              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 8.0, 3.0]   \u2506 [\"R\", \"is\", \"amazing\"] \u2502\n#&gt; \u2502 [3.0, 2.0]        \u2506 [\"foo\", \"bar\"]         \u2502\n#&gt; \u2502 [null, null, 1.0] \u2506 [\"text\"]               \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># standardize each value inside a list, using only the values in this list\ndf$select(\n  a_stand = pl$col(\"a\")$list$eval(\n    (pl$element() - pl$element()$mean()) / pl$element()$std()\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a_stand                      \u2502\n#&gt; \u2502 ---                          \u2502\n#&gt; \u2502 list[f64]                    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [-0.83205, 1.1094, -0.27735] \u2502\n#&gt; \u2502 [0.707107, -0.707107]        \u2502\n#&gt; \u2502 [null, null, null]           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># count characters for each element in list. Since column \"b\" is list[str],\n# we can apply all `$str` functions on elements in the list:\ndf$select(\n  b_len_chars = pl$col(\"b\")$list$eval(\n    pl$element()$str$len_chars()\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b_len_chars \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 list[u32]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, 7]   \u2502\n#&gt; \u2502 [3, 3]      \u2502\n#&gt; \u2502 [4]         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># concat strings in each list\ndf$select(\n  pl$col(\"b\")$list$eval(pl$element()$str$concat(\" \"))$list$first()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b            \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 str          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 R is amazing \u2502\n#&gt; \u2502 foo bar      \u2502\n#&gt; \u2502 text         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_first.html","title":"Get the first value in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_first.html#description","title":"Description","text":"<p>Get the first value in a list</p>"},{"location":"man/ExprList_first.html#usage","title":"Usage","text":"<pre><code>ExprList_first()\n</code></pre>"},{"location":"man/ExprList_first.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_first.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(3:1, NULL, 1:2)))\ndf$with_columns(\n  first = pl$col(\"a\")$list$first()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 first \u2502\n#&gt; \u2502 ---       \u2506 ---   \u2502\n#&gt; \u2502 list[i32] \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3, 2, 1] \u2506 3     \u2502\n#&gt; \u2502 []        \u2506 null  \u2502\n#&gt; \u2502 [1, 2]    \u2506 1     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_gather.html","title":"Get several values by index in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_gather.html#description","title":"Description","text":"<p>This allows to extract several values per list. To extract a single value by index, use <code>$list$get()</code>.</p>"},{"location":"man/ExprList_gather.html#usage","title":"Usage","text":"<pre><code>ExprList_gather(index, null_on_oob = FALSE)\n</code></pre>"},{"location":"man/ExprList_gather.html#arguments","title":"Arguments","text":"<code>index</code>  An Expr or something coercible to an Expr, that can return several single indices. Values are 0-indexed (so index 0 would return the first item of every sublist) and negative values start from the end (index <code>-1</code> returns the last item). If the index is out of bounds, it will return a <code>null</code>. Strings are parsed as column names.  <code>null_on_oob</code>  Return a <code>null</code> value if index is out of bounds."},{"location":"man/ExprList_gather.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_gather.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = list(c(3, 2, 1), 1, c(1, 2)),\n  idx = list(0:1, integer(), c(1L, 999L))\n)\ndf$with_columns(\n  gathered = pl$col(\"a\")$list$gather(\"idx\", null_on_oob = TRUE)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a               \u2506 idx       \u2506 gathered    \u2502\n#&gt; \u2502 ---             \u2506 ---       \u2506 ---         \u2502\n#&gt; \u2502 list[f64]       \u2506 list[i32] \u2506 list[f64]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3.0, 2.0, 1.0] \u2506 [0, 1]    \u2506 [3.0, 2.0]  \u2502\n#&gt; \u2502 [1.0]           \u2506 []        \u2506 []          \u2502\n#&gt; \u2502 [1.0, 2.0]      \u2506 [1, 999]  \u2506 [2.0, null] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(\n  gathered = pl$col(\"a\")$list$gather(2, null_on_oob = TRUE)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a               \u2506 idx       \u2506 gathered  \u2502\n#&gt; \u2502 ---             \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 list[f64]       \u2506 list[i32] \u2506 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3.0, 2.0, 1.0] \u2506 [0, 1]    \u2506 [1.0]     \u2502\n#&gt; \u2502 [1.0]           \u2506 []        \u2506 [null]    \u2502\n#&gt; \u2502 [1.0, 2.0]      \u2506 [1, 999]  \u2506 [null]    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by some column name, must cast to an Int/Uint type to work\ndf$with_columns(\n  gathered = pl$col(\"a\")$list$gather(pl$col(\"a\")$cast(pl$List(pl$UInt64)), null_on_oob = TRUE)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a               \u2506 idx       \u2506 gathered         \u2502\n#&gt; \u2502 ---             \u2506 ---       \u2506 ---              \u2502\n#&gt; \u2502 list[f64]       \u2506 list[i32] \u2506 list[f64]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3.0, 2.0, 1.0] \u2506 [0, 1]    \u2506 [null, 1.0, 2.0] \u2502\n#&gt; \u2502 [1.0]           \u2506 []        \u2506 [null]           \u2502\n#&gt; \u2502 [1.0, 2.0]      \u2506 [1, 999]  \u2506 [2.0, null]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_gather_every.html","title":"Gather every nth element in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_gather_every.html#description","title":"Description","text":"<p>Gather every nth element in a list</p>"},{"location":"man/ExprList_gather_every.html#usage","title":"Usage","text":"<pre><code>ExprList_gather_every(n, offset = 0)\n</code></pre>"},{"location":"man/ExprList_gather_every.html#arguments","title":"Arguments","text":"<code>n</code>  Positive integer.  <code>offset</code>  Starting index."},{"location":"man/ExprList_gather_every.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_gather_every.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = list(1:5, 6:8, 9:12),\n  n = c(2, 1, 3),\n  offset = c(0, 1, 0)\n)\n\ndf$with_columns(\n  gather_every = pl$col(\"a\")$list$gather_every(pl$col(\"n\"), offset = pl$col(\"offset\"))\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a             \u2506 n   \u2506 offset \u2506 gather_every \u2502\n#&gt; \u2502 ---           \u2506 --- \u2506 ---    \u2506 ---          \u2502\n#&gt; \u2502 list[i32]     \u2506 f64 \u2506 f64    \u2506 list[i32]    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, \u2026 5]   \u2506 2.0 \u2506 0.0    \u2506 [1, 3, 5]    \u2502\n#&gt; \u2502 [6, 7, 8]     \u2506 1.0 \u2506 1.0    \u2506 [7, 8]       \u2502\n#&gt; \u2502 [9, 10, \u2026 12] \u2506 3.0 \u2506 0.0    \u2506 [9, 12]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_get.html","title":"Get the value by index in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_get.html#description","title":"Description","text":"<p>This allows to extract one value per list only. To extract several values by index, use <code>$list$gather()</code>.</p>"},{"location":"man/ExprList_get.html#usage","title":"Usage","text":"<pre><code>ExprList_get(index)\n</code></pre>"},{"location":"man/ExprList_get.html#arguments","title":"Arguments","text":"<code>index</code>  An Expr or something coercible to an Expr, that must return a single index. Values are 0-indexed (so index 0 would return the first item of every sublist) and negative values start from the end (index <code>-1</code> returns the last item). If the index is out of bounds, it will return a <code>null</code>. Strings are parsed as column names."},{"location":"man/ExprList_get.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_get.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  values = list(c(2, 2, NA), c(1, 2, 3), NA_real_, NULL),\n  idx = c(1, 2, NA, 3)\n)\ndf$with_columns(\n  using_expr = pl$col(\"values\")$list$get(\"idx\"),\n  val_0 = pl$col(\"values\")$list$get(0),\n  val_minus_1 = pl$col(\"values\")$list$get(-1),\n  val_oob = pl$col(\"values\")$list$get(10)\n)\n</code></pre> <pre><code>#&gt; shape: (4, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values           \u2506 idx  \u2506 using_expr \u2506 val_0 \u2506 val_minus_1 \u2506 val_oob \u2502\n#&gt; \u2502 ---              \u2506 ---  \u2506 ---        \u2506 ---   \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 list[f64]        \u2506 f64  \u2506 f64        \u2506 f64   \u2506 f64         \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [2.0, 2.0, null] \u2506 1.0  \u2506 2.0        \u2506 2.0   \u2506 null        \u2506 null    \u2502\n#&gt; \u2502 [1.0, 2.0, 3.0]  \u2506 2.0  \u2506 3.0        \u2506 1.0   \u2506 3.0         \u2506 null    \u2502\n#&gt; \u2502 [null]           \u2506 null \u2506 null       \u2506 null  \u2506 null        \u2506 null    \u2502\n#&gt; \u2502 []               \u2506 3.0  \u2506 null       \u2506 null  \u2506 null        \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_head.html","title":"Get the first <code>n</code> values of a list","text":"<p>Source code</p>"},{"location":"man/ExprList_head.html#description","title":"Description","text":"<p>Get the first <code>n</code> values of a list</p>"},{"location":"man/ExprList_head.html#usage","title":"Usage","text":"<pre><code>ExprList_head(n = 5L)\n</code></pre>"},{"location":"man/ExprList_head.html#arguments","title":"Arguments","text":"<code>n</code>  Number of values to return for each sublist. Can be an Expr. Strings are parsed as column names."},{"location":"man/ExprList_head.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_head.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  s = list(1:4, c(10L, 2L, 1L)),\n  n = 1:2\n)\ndf$with_columns(\n  head_by_expr = pl$col(\"s\")$list$head(\"n\"),\n  head_by_lit = pl$col(\"s\")$list$head(2)\n)\n</code></pre> <pre><code>#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2506 n   \u2506 head_by_expr \u2506 head_by_lit \u2502\n#&gt; \u2502 ---         \u2506 --- \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 list[i32]   \u2506 i32 \u2506 list[i32]    \u2506 list[i32]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, \u2026 4] \u2506 1   \u2506 [1]          \u2506 [1, 2]      \u2502\n#&gt; \u2502 [10, 2, 1]  \u2506 2   \u2506 [10, 2]      \u2506 [10, 2]     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_join.html","title":"Join elements of a list","text":"<p>Source code</p>"},{"location":"man/ExprList_join.html#description","title":"Description","text":"<p>Join all string items in a sublist and place a separator between them. This only works on columns of type <code>list[str]</code>.</p>"},{"location":"man/ExprList_join.html#usage","title":"Usage","text":"<pre><code>ExprList_join(separator, ignore_nulls = FALSE)\n</code></pre>"},{"location":"man/ExprList_join.html#arguments","title":"Arguments","text":"<code>separator</code>  String to separate the items with. Can be an Expr. Strings are not parsed as columns.  <code>ignore_nulls</code>  If <code>FALSE</code> (default), null values are propagated: if the row contains any null values, the output is null."},{"location":"man/ExprList_join.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_join.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  s = list(c(\"a\", \"b\", \"c\"), c(\"x\", \"y\"), c(\"e\", NA)),\n  separator = c(\"-\", \"+\", \"/\")\n)\ndf$with_columns(\n  join_with_expr = pl$col(\"s\")$list$join(pl$col(\"separator\")),\n  join_with_lit = pl$col(\"s\")$list$join(\" \"),\n  join_ignore_null = pl$col(\"s\")$list$join(\" \", ignore_nulls = TRUE)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s               \u2506 separator \u2506 join_with_expr \u2506 join_with_lit \u2506 join_ignore_null \u2502\n#&gt; \u2502 ---             \u2506 ---       \u2506 ---            \u2506 ---           \u2506 ---              \u2502\n#&gt; \u2502 list[str]       \u2506 str       \u2506 str            \u2506 str           \u2506 str              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\", \"b\", \"c\"] \u2506 -         \u2506 a-b-c          \u2506 a b c         \u2506 a b c            \u2502\n#&gt; \u2502 [\"x\", \"y\"]      \u2506 +         \u2506 x+y            \u2506 x y           \u2506 x y              \u2502\n#&gt; \u2502 [\"e\", null]     \u2506 /         \u2506 null           \u2506 null          \u2506 e                \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_last.html","title":"Get the last value in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_last.html#description","title":"Description","text":"<p>Get the last value in a list</p>"},{"location":"man/ExprList_last.html#usage","title":"Usage","text":"<pre><code>ExprList_last()\n</code></pre>"},{"location":"man/ExprList_last.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_last.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(3:1, NULL, 1:2)))\ndf$with_columns(\n  last = pl$col(\"a\")$list$last()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 last \u2502\n#&gt; \u2502 ---       \u2506 ---  \u2502\n#&gt; \u2502 list[i32] \u2506 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3, 2, 1] \u2506 1    \u2502\n#&gt; \u2502 []        \u2506 null \u2502\n#&gt; \u2502 [1, 2]    \u2506 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_len.html","title":"Get the length of each list","text":"<p>Source code</p>"},{"location":"man/ExprList_len.html#description","title":"Description","text":"<p>Return the number of elements in each list. Null values are counted in the total.</p>"},{"location":"man/ExprList_len.html#usage","title":"Usage","text":"<pre><code>ExprList_len()\n</code></pre>"},{"location":"man/ExprList_len.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_len.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(list_of_strs = list(c(\"a\", \"b\", NA), \"c\")))\ndf$with_columns(len_list = pl$col(\"list_of_strs\")$list$len())\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 list_of_strs     \u2506 len_list \u2502\n#&gt; \u2502 ---              \u2506 ---      \u2502\n#&gt; \u2502 list[str]        \u2506 u32      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\", \"b\", null] \u2506 3        \u2502\n#&gt; \u2502 [\"c\"]            \u2506 1        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_max.html","title":"Find the maximum value in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_max.html#description","title":"Description","text":"<p>Find the maximum value in a list</p>"},{"location":"man/ExprList_max.html#usage","title":"Usage","text":"<pre><code>ExprList_max()\n</code></pre>"},{"location":"man/ExprList_max.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = list(c(1, 2, 3, NA), c(2, 3), NA_real_))\ndf$with_columns(max = pl$col(\"values\")$list$max())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values             \u2506 max  \u2502\n#&gt; \u2502 ---                \u2506 ---  \u2502\n#&gt; \u2502 list[f64]          \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0, \u2026 null] \u2506 3.0  \u2502\n#&gt; \u2502 [2.0, 3.0]         \u2506 3.0  \u2502\n#&gt; \u2502 [null]             \u2506 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_mean.html","title":"Compute the mean value of a list","text":"<p>Source code</p>"},{"location":"man/ExprList_mean.html#description","title":"Description","text":"<p>Compute the mean value of a list</p>"},{"location":"man/ExprList_mean.html#usage","title":"Usage","text":"<pre><code>ExprList_mean()\n</code></pre>"},{"location":"man/ExprList_mean.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_mean.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = list(c(1, 2, 3, NA), c(2, 3), NA_real_))\ndf$with_columns(mean = pl$col(\"values\")$list$mean())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values             \u2506 mean \u2502\n#&gt; \u2502 ---                \u2506 ---  \u2502\n#&gt; \u2502 list[f64]          \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0, \u2026 null] \u2506 2.0  \u2502\n#&gt; \u2502 [2.0, 3.0]         \u2506 2.5  \u2502\n#&gt; \u2502 [null]             \u2506 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_min.html","title":"Find the minimum value in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_min.html#description","title":"Description","text":"<p>Find the minimum value in a list</p>"},{"location":"man/ExprList_min.html#usage","title":"Usage","text":"<pre><code>ExprList_min()\n</code></pre>"},{"location":"man/ExprList_min.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = list(c(1, 2, 3, NA), c(2, 3), NA_real_))\ndf$with_columns(min = pl$col(\"values\")$list$min())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values             \u2506 min  \u2502\n#&gt; \u2502 ---                \u2506 ---  \u2502\n#&gt; \u2502 list[f64]          \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0, \u2026 null] \u2506 1.0  \u2502\n#&gt; \u2502 [2.0, 3.0]         \u2506 2.0  \u2502\n#&gt; \u2502 [null]             \u2506 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_n_unique.html","title":"Get the number of unique values in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_n_unique.html#description","title":"Description","text":"<p>Get the number of unique values in a list</p>"},{"location":"man/ExprList_n_unique.html#usage","title":"Usage","text":"<pre><code>ExprList_n_unique()\n</code></pre>"},{"location":"man/ExprList_n_unique.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_n_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = list(c(2, 2, NA), c(1, 2, 3), NA_real_))\ndf$with_columns(unique = pl$col(\"values\")$list$n_unique())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values           \u2506 unique \u2502\n#&gt; \u2502 ---              \u2506 ---    \u2502\n#&gt; \u2502 list[f64]        \u2506 u32    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [2.0, 2.0, null] \u2506 2      \u2502\n#&gt; \u2502 [1.0, 2.0, 3.0]  \u2506 3      \u2502\n#&gt; \u2502 [null]           \u2506 1      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_reverse.html","title":"Reverse values in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_reverse.html#description","title":"Description","text":"<p>Reverse values in a list</p>"},{"location":"man/ExprList_reverse.html#usage","title":"Usage","text":"<pre><code>ExprList_reverse()\n</code></pre>"},{"location":"man/ExprList_reverse.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_reverse.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = list(c(1, 2, 3, NA), c(2, 3), NA_real_))\ndf$with_columns(reverse = pl$col(\"values\")$list$reverse())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values             \u2506 reverse            \u2502\n#&gt; \u2502 ---                \u2506 ---                \u2502\n#&gt; \u2502 list[f64]          \u2506 list[f64]          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0, \u2026 null] \u2506 [null, 3.0, \u2026 1.0] \u2502\n#&gt; \u2502 [2.0, 3.0]         \u2506 [3.0, 2.0]         \u2502\n#&gt; \u2502 [null]             \u2506 [null]             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_set_difference.html","title":"Get the difference of two list variables","text":"<p>Source code</p>"},{"location":"man/ExprList_set_difference.html#description","title":"Description","text":"<p>This returns the \"asymmetric difference\", meaning only the elements of the first list that are not in the second list. To get all elements that are in only one of the two lists, use <code>$set_symmetric_difference()</code>.</p>"},{"location":"man/ExprList_set_difference.html#usage","title":"Usage","text":"<pre><code>ExprList_set_difference(other)\n</code></pre>"},{"location":"man/ExprList_set_difference.html#arguments","title":"Arguments","text":"<code>other</code>  Other list variable. Can be an Expr or something coercible to an Expr."},{"location":"man/ExprList_set_difference.html#details","title":"Details","text":"<p>Note that the datatypes inside the list must have a common supertype. For example, the first column can be <code>list[i32]</code> and the second one can be <code>list[i8]</code> because it can be cast to <code>list[i32]</code>. However, the second column cannot be e.g <code>list[f32]</code>.</p>"},{"location":"man/ExprList_set_difference.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_set_difference.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = list(1:3, NA_integer_, c(NA_integer_, 3L), 5:7),\n  b = list(2:4, 3L, c(3L, 4L, NA_integer_), c(6L, 8L))\n)\n\ndf$with_columns(difference = pl$col(\"a\")$list$set_difference(\"b\"))\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 b            \u2506 difference \u2502\n#&gt; \u2502 ---       \u2506 ---          \u2506 ---        \u2502\n#&gt; \u2502 list[i32] \u2506 list[i32]    \u2506 list[i32]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, 3] \u2506 [2, 3, 4]    \u2506 [1]        \u2502\n#&gt; \u2502 [null]    \u2506 [3]          \u2506 [null]     \u2502\n#&gt; \u2502 [null, 3] \u2506 [3, 4, null] \u2506 []         \u2502\n#&gt; \u2502 [5, 6, 7] \u2506 [6, 8]       \u2506 [5, 7]     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_set_intersection.html","title":"Get the intersection of two list variables","text":"<p>Source code</p>"},{"location":"man/ExprList_set_intersection.html#description","title":"Description","text":"<p>Get the intersection of two list variables</p>"},{"location":"man/ExprList_set_intersection.html#usage","title":"Usage","text":"<pre><code>ExprList_set_intersection(other)\n</code></pre>"},{"location":"man/ExprList_set_intersection.html#arguments","title":"Arguments","text":"<code>other</code>  Other list variable. Can be an Expr or something coercible to an Expr."},{"location":"man/ExprList_set_intersection.html#details","title":"Details","text":"<p>Note that the datatypes inside the list must have a common supertype. For example, the first column can be <code>list[i32]</code> and the second one can be <code>list[i8]</code> because it can be cast to <code>list[i32]</code>. However, the second column cannot be e.g <code>list[f32]</code>.</p>"},{"location":"man/ExprList_set_intersection.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_set_intersection.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = list(1:3, NA_integer_, c(NA_integer_, 3L), 5:7),\n  b = list(2:4, 3L, c(3L, 4L, NA_integer_), c(6L, 8L))\n)\n\ndf$with_columns(intersection = pl$col(\"a\")$list$set_intersection(\"b\"))\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 b            \u2506 intersection \u2502\n#&gt; \u2502 ---       \u2506 ---          \u2506 ---          \u2502\n#&gt; \u2502 list[i32] \u2506 list[i32]    \u2506 list[i32]    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, 3] \u2506 [2, 3, 4]    \u2506 [2, 3]       \u2502\n#&gt; \u2502 [null]    \u2506 [3]          \u2506 []           \u2502\n#&gt; \u2502 [null, 3] \u2506 [3, 4, null] \u2506 [null, 3]    \u2502\n#&gt; \u2502 [5, 6, 7] \u2506 [6, 8]       \u2506 [6]          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_set_symmetric_difference.html","title":"Get the symmetric difference of two list variables","text":"<p>Source code</p>"},{"location":"man/ExprList_set_symmetric_difference.html#description","title":"Description","text":"<p>This returns all elements that are in only one of the two lists. To get only elements that are in the first list but not in the second one, use <code>$set_difference()</code>.</p>"},{"location":"man/ExprList_set_symmetric_difference.html#usage","title":"Usage","text":"<pre><code>ExprList_set_symmetric_difference(other)\n</code></pre>"},{"location":"man/ExprList_set_symmetric_difference.html#arguments","title":"Arguments","text":"<code>other</code>  Other list variable. Can be an Expr or something coercible to an Expr."},{"location":"man/ExprList_set_symmetric_difference.html#details","title":"Details","text":"<p>Note that the datatypes inside the list must have a common supertype. For example, the first column can be <code>list[i32]</code> and the second one can be <code>list[i8]</code> because it can be cast to <code>list[i32]</code>. However, the second column cannot be e.g <code>list[f32]</code>.</p>"},{"location":"man/ExprList_set_symmetric_difference.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_set_symmetric_difference.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = list(1:3, NA_integer_, c(NA_integer_, 3L), 5:7),\n  b = list(2:4, 3L, c(3L, 4L, NA_integer_), c(6L, 8L))\n)\n\ndf$with_columns(\n  symmetric_difference = pl$col(\"a\")$list$set_symmetric_difference(\"b\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 b            \u2506 symmetric_difference \u2502\n#&gt; \u2502 ---       \u2506 ---          \u2506 ---                  \u2502\n#&gt; \u2502 list[i32] \u2506 list[i32]    \u2506 list[i32]            \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, 3] \u2506 [2, 3, 4]    \u2506 [1, 4]               \u2502\n#&gt; \u2502 [null]    \u2506 [3]          \u2506 [null, 3]            \u2502\n#&gt; \u2502 [null, 3] \u2506 [3, 4, null] \u2506 [4]                  \u2502\n#&gt; \u2502 [5, 6, 7] \u2506 [6, 8]       \u2506 [5, 7, 8]            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_set_union.html","title":"Get the union of two list variables","text":"<p>Source code</p>"},{"location":"man/ExprList_set_union.html#description","title":"Description","text":"<p>Get the union of two list variables</p>"},{"location":"man/ExprList_set_union.html#usage","title":"Usage","text":"<pre><code>ExprList_set_union(other)\n</code></pre>"},{"location":"man/ExprList_set_union.html#arguments","title":"Arguments","text":"<code>other</code>  Other list variable. Can be an Expr or something coercible to an Expr."},{"location":"man/ExprList_set_union.html#details","title":"Details","text":"<p>Note that the datatypes inside the list must have a common supertype. For example, the first column can be <code>list[i32]</code> and the second one can be <code>list[i8]</code> because it can be cast to <code>list[i32]</code>. However, the second column cannot be e.g <code>list[f32]</code>.</p>"},{"location":"man/ExprList_set_union.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_set_union.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = list(1:3, NA_integer_, c(NA_integer_, 3L), 5:7),\n  b = list(2:4, 3L, c(3L, 4L, NA_integer_), c(6L, 8L))\n)\n\ndf$with_columns(union = pl$col(\"a\")$list$set_union(\"b\"))\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 b            \u2506 union        \u2502\n#&gt; \u2502 ---       \u2506 ---          \u2506 ---          \u2502\n#&gt; \u2502 list[i32] \u2506 list[i32]    \u2506 list[i32]    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, 3] \u2506 [2, 3, 4]    \u2506 [1, 2, \u2026 4]  \u2502\n#&gt; \u2502 [null]    \u2506 [3]          \u2506 [null, 3]    \u2502\n#&gt; \u2502 [null, 3] \u2506 [3, 4, null] \u2506 [null, 3, 4] \u2502\n#&gt; \u2502 [5, 6, 7] \u2506 [6, 8]       \u2506 [5, 6, \u2026 8]  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_shift.html","title":"Shift list values by <code>n</code> indices","text":"<p>Source code</p>"},{"location":"man/ExprList_shift.html#description","title":"Description","text":"<p>Shift list values by <code>n</code> indices</p>"},{"location":"man/ExprList_shift.html#usage","title":"Usage","text":"<pre><code>ExprList_shift(periods = 1)\n</code></pre>"},{"location":"man/ExprList_shift.html#arguments","title":"Arguments","text":"<code>periods</code>  Number of places to shift (may be negative). Can be an Expr. Strings are not parsed as columns."},{"location":"man/ExprList_shift.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_shift.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  s = list(1:4, c(10L, 2L, 1L)),\n  idx = 1:2\n)\ndf$with_columns(\n  shift_by_expr = pl$col(\"s\")$list$shift(pl$col(\"idx\")),\n  shift_by_lit = pl$col(\"s\")$list$shift(2)\n)\n</code></pre> <pre><code>#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2506 idx \u2506 shift_by_expr    \u2506 shift_by_lit      \u2502\n#&gt; \u2502 ---         \u2506 --- \u2506 ---              \u2506 ---               \u2502\n#&gt; \u2502 list[i32]   \u2506 i32 \u2506 list[i32]        \u2506 list[i32]         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, \u2026 4] \u2506 1   \u2506 [null, 1, \u2026 3]   \u2506 [null, null, \u2026 2] \u2502\n#&gt; \u2502 [10, 2, 1]  \u2506 2   \u2506 [null, null, 10] \u2506 [null, null, 10]  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_slice.html","title":"Slice list","text":"<p>Source code</p>"},{"location":"man/ExprList_slice.html#description","title":"Description","text":"<p>This extracts <code>length</code> values at most, starting at index <code>offset</code>. This can return less than <code>length</code> values if <code>length</code> is larger than the number of values.</p>"},{"location":"man/ExprList_slice.html#usage","title":"Usage","text":"<pre><code>ExprList_slice(offset, length = NULL)\n</code></pre>"},{"location":"man/ExprList_slice.html#arguments","title":"Arguments","text":"<code>offset</code>  Start index. Negative indexing is supported. Can be an Expr. Strings are parsed as column names.  <code>length</code>  Length of the slice. If <code>NULL</code> (default), the slice is taken to the end of the list. Can be an Expr. Strings are parsed as column names."},{"location":"man/ExprList_slice.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_slice.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  s = list(1:4, c(10L, 2L, 1L)),\n  idx_off = 1:2,\n  len = c(4, 1)\n)\ndf$with_columns(\n  slice_by_expr = pl$col(\"s\")$list$slice(\"idx_off\", \"len\"),\n  slice_by_lit = pl$col(\"s\")$list$slice(2, 3)\n)\n</code></pre> <pre><code>#&gt; shape: (2, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2506 idx_off \u2506 len \u2506 slice_by_expr \u2506 slice_by_lit \u2502\n#&gt; \u2502 ---         \u2506 ---     \u2506 --- \u2506 ---           \u2506 ---          \u2502\n#&gt; \u2502 list[i32]   \u2506 i32     \u2506 f64 \u2506 list[i32]     \u2506 list[i32]    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, \u2026 4] \u2506 1       \u2506 4.0 \u2506 [2, 3, 4]     \u2506 [3, 4]       \u2502\n#&gt; \u2502 [10, 2, 1]  \u2506 2       \u2506 1.0 \u2506 [1]           \u2506 [1]          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_sort.html","title":"Sort values in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_sort.html#description","title":"Description","text":"<p>Sort values in a list</p>"},{"location":"man/ExprList_sort.html#usage","title":"Usage","text":"<pre><code>ExprList_sort(descending = FALSE)\n</code></pre>"},{"location":"man/ExprList_sort.html#arguments","title":"Arguments","text":"<code>descending</code>  Sort values in descending order"},{"location":"man/ExprList_sort.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_sort.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = list(c(NA, 2, 1, 3), c(Inf, 2, 3, NaN), NA_real_))\ndf$with_columns(sort = pl$col(\"values\")$list$sort())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values             \u2506 sort               \u2502\n#&gt; \u2502 ---                \u2506 ---                \u2502\n#&gt; \u2502 list[f64]          \u2506 list[f64]          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [null, 2.0, \u2026 3.0] \u2506 [null, 1.0, \u2026 3.0] \u2502\n#&gt; \u2502 [inf, 2.0, \u2026 NaN]  \u2506 [2.0, 3.0, \u2026 NaN]  \u2502\n#&gt; \u2502 [null]             \u2506 [null]             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_sum.html","title":"Sum all elements in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_sum.html#description","title":"Description","text":"<p>Sum all elements in a list</p>"},{"location":"man/ExprList_sum.html#usage","title":"Usage","text":"<pre><code>ExprList_sum()\n</code></pre>"},{"location":"man/ExprList_sum.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_sum.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = list(c(1, 2, 3, NA), c(2, 3), NA_real_))\ndf$with_columns(sum = pl$col(\"values\")$list$sum())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values             \u2506 sum \u2502\n#&gt; \u2502 ---                \u2506 --- \u2502\n#&gt; \u2502 list[f64]          \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0, \u2026 null] \u2506 6.0 \u2502\n#&gt; \u2502 [2.0, 3.0]         \u2506 5.0 \u2502\n#&gt; \u2502 [null]             \u2506 0.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_tail.html","title":"Get the last <code>n</code> values of a list","text":"<p>Source code</p>"},{"location":"man/ExprList_tail.html#description","title":"Description","text":"<p>Get the last <code>n</code> values of a list</p>"},{"location":"man/ExprList_tail.html#usage","title":"Usage","text":"<pre><code>ExprList_tail(n = 5L)\n</code></pre>"},{"location":"man/ExprList_tail.html#arguments","title":"Arguments","text":"<code>n</code>  Number of values to return for each sublist. Can be an Expr. Strings are parsed as column names."},{"location":"man/ExprList_tail.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_tail.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  s = list(1:4, c(10L, 2L, 1L)),\n  n = 1:2\n)\ndf$with_columns(\n  tail_by_expr = pl$col(\"s\")$list$tail(\"n\"),\n  tail_by_lit = pl$col(\"s\")$list$tail(2)\n)\n</code></pre> <pre><code>#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2506 n   \u2506 tail_by_expr \u2506 tail_by_lit \u2502\n#&gt; \u2502 ---         \u2506 --- \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 list[i32]   \u2506 i32 \u2506 list[i32]    \u2506 list[i32]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, \u2026 4] \u2506 1   \u2506 [4]          \u2506 [3, 4]      \u2502\n#&gt; \u2502 [10, 2, 1]  \u2506 2   \u2506 [2, 1]       \u2506 [2, 1]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_to_struct.html","title":"Convert a Series of type <code>List</code> to <code>Struct</code>","text":"<p>Source code</p>"},{"location":"man/ExprList_to_struct.html#description","title":"Description","text":"<p>Convert a Series of type <code>List</code> to <code>Struct</code></p>"},{"location":"man/ExprList_to_struct.html#usage","title":"Usage","text":"<pre><code>ExprList_to_struct(\n  n_field_strategy = c(\"first_non_null\", \"max_width\"),\n  fields = NULL,\n  upper_bound = 0\n)\n</code></pre>"},{"location":"man/ExprList_to_struct.html#arguments","title":"Arguments","text":"<code>n_field_strategy</code>  Strategy to determine the number of fields of the struct. If <code>\u201cfirst_non_null\u201d</code> (default), set number of fields equal to the length of the first non zero-length list. If <code>\u201cmax_width\u201d</code>, the number of fields is the maximum length of a list.  <code>fields</code>  If the name and number of the desired fields is known in advance, a list of field names can be given, which will be assigned by index. Otherwise, to dynamically assign field names, a custom R function that takes an R double and outputs a string value can be used. If <code>NULL</code> (default), fields will be <code>field_0</code>, <code>field_1</code> \u2026 <code>field_n</code>.  <code>upper_bound</code>  A <code>LazyFrame</code> needs to know the schema at all time. The caller therefore must provide an <code>upper_bound</code> of struct fields that will be set. If set incorrectly, downstream operation may fail. For instance an <code>all()$sum()</code> expression will look in the current schema to determine which columns to select. When operating on a <code>DataFrame</code>, the schema does not need to be tracked or pre-determined, as the result will be eagerly evaluated, so you can leave this parameter unset."},{"location":"man/ExprList_to_struct.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_to_struct.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(1:2, 1:3)))\n\n# this discards the third value of the second list as the struct length is\n# determined based on the length of the first non-empty list\ndf$with_columns(\n  struct = pl$col(\"a\")$list$to_struct()\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 struct    \u2502\n#&gt; \u2502 ---       \u2506 ---       \u2502\n#&gt; \u2502 list[i32] \u2506 struct[2] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2]    \u2506 {1,2}     \u2502\n#&gt; \u2502 [1, 2, 3] \u2506 {1,2}     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># we can use \"max_width\" to keep all values\ndf$with_columns(\n  struct = pl$col(\"a\")$list$to_struct(n_field_strategy = \"max_width\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 struct     \u2502\n#&gt; \u2502 ---       \u2506 ---        \u2502\n#&gt; \u2502 list[i32] \u2506 struct[3]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2]    \u2506 {1,2,null} \u2502\n#&gt; \u2502 [1, 2, 3] \u2506 {1,2,3}    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># pass a custom function that will name all fields by adding a prefix\ndf2 = df$with_columns(\n  pl$col(\"a\")$list$to_struct(\n    fields = \\(idx) paste0(\"col_\", idx)\n  )\n)\ndf2\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 struct[2] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,2}     \u2502\n#&gt; \u2502 {1,2}     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df2$unnest()\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col_0 \u2506 col_1 \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 i32   \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1     \u2506 2     \u2502\n#&gt; \u2502 1     \u2506 2     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df2$to_list()\n</code></pre> <pre><code>#&gt; $a\n#&gt; $a$col_0\n#&gt; [1] 1 1\n#&gt; \n#&gt; $a$col_1\n#&gt; [1] 2 2\n</code></pre>"},{"location":"man/ExprList_unique.html","title":"Get unique values in a list","text":"<p>Source code</p>"},{"location":"man/ExprList_unique.html#description","title":"Description","text":"<p>Get unique values in a list</p>"},{"location":"man/ExprList_unique.html#usage","title":"Usage","text":"<pre><code>ExprList_unique()\n</code></pre>"},{"location":"man/ExprList_unique.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = list(c(2, 2, NA), c(1, 2, 3), NA_real_))\ndf$with_columns(unique = pl$col(\"values\")$list$unique())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values           \u2506 unique          \u2502\n#&gt; \u2502 ---              \u2506 ---             \u2502\n#&gt; \u2502 list[f64]        \u2506 list[f64]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [2.0, 2.0, null] \u2506 [null, 2.0]     \u2502\n#&gt; \u2502 [1.0, 2.0, 3.0]  \u2506 [1.0, 2.0, 3.0] \u2502\n#&gt; \u2502 [null]           \u2506 [null]          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprMeta_eq.html","title":"Check if two expressions are equivalent","text":"<p>Source code</p>"},{"location":"man/ExprMeta_eq.html#description","title":"Description","text":"<p>Indicate if this expression is the same as another expression. See also the counterpart <code>$meta$neq()</code>.</p>"},{"location":"man/ExprMeta_eq.html#usage","title":"Usage","text":"<pre><code>ExprMeta_eq(other)\n</code></pre>"},{"location":"man/ExprMeta_eq.html#arguments","title":"Arguments","text":"<code>other</code>  Expr to compare with"},{"location":"man/ExprMeta_eq.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/ExprMeta_eq.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# three naive expression literals\ne1 = pl$lit(40) + 2\ne2 = pl$lit(42)\ne3 = pl$lit(40) + 2\n\n# e1 and e3 are identical expressions\ne1$meta$eq(e3)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># when evaluated, e1 and e2 are equal\ne1$eq(e2)$to_r()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># however, on the meta-level, e1 and e2 are NOT identical expressions\ne1$meta$eq(e2)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/ExprMeta_has_multiple_outputs.html","title":"Indicate if an expression has multiple outputs","text":"<p>Source code</p>"},{"location":"man/ExprMeta_has_multiple_outputs.html#description","title":"Description","text":"<p>Indicate if an expression has multiple outputs</p>"},{"location":"man/ExprMeta_has_multiple_outputs.html#usage","title":"Usage","text":"<pre><code>ExprMeta_has_multiple_outputs()\n</code></pre>"},{"location":"man/ExprMeta_has_multiple_outputs.html#value","title":"Value","text":"<p>Boolean</p>"},{"location":"man/ExprMeta_has_multiple_outputs.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ne = (pl$col(\"alice\") + pl$col(\"eve\"))$alias(\"bob\")\ne$meta$has_multiple_outputs()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code># pl$all() select multiple cols to modify them, so it has multiple outputs\npl$all()$meta$has_multiple_outputs()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/ExprMeta_is_regex_projection.html","title":"Indicate if an expression uses a regex projection","text":"<p>Source code</p>"},{"location":"man/ExprMeta_is_regex_projection.html#description","title":"Description","text":"<p>Indicate if an expression uses a regex projection</p>"},{"location":"man/ExprMeta_is_regex_projection.html#usage","title":"Usage","text":"<pre><code>ExprMeta_is_regex_projection()\n</code></pre>"},{"location":"man/ExprMeta_is_regex_projection.html#value","title":"Value","text":"<p>Boolean</p>"},{"location":"man/ExprMeta_is_regex_projection.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$col(\"^Sepal.*$\")$meta$is_regex_projection()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$col(\"Sepal.Length\")$meta$is_regex_projection()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/ExprMeta_neq.html","title":"Check if two expressions are different","text":"<p>Source code</p>"},{"location":"man/ExprMeta_neq.html#description","title":"Description","text":"<p>Indicate if this expression is different from another expression. See also the counterpart <code>$meta$eq()</code>.</p>"},{"location":"man/ExprMeta_neq.html#usage","title":"Usage","text":"<pre><code>ExprMeta_neq(other)\n</code></pre>"},{"location":"man/ExprMeta_neq.html#arguments","title":"Arguments","text":"<code>other</code>  Expr to compare with"},{"location":"man/ExprMeta_neq.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/ExprMeta_neq.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# three naive expression literals\ne1 = pl$lit(40) + 2\ne2 = pl$lit(42)\ne3 = pl$lit(40) + 2\n\n# e1 and e3 are identical expressions\ne1$meta$neq(e3)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code># when evaluated, e1 and e2 are equal\ne1$neq(e2)$to_r()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code># however, on the meta-level, e1 and e2 are different\ne1$meta$neq(e2)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/ExprMeta_output_name.html","title":"Get the column name that this expression would produce","text":"<p>Source code</p>"},{"location":"man/ExprMeta_output_name.html#description","title":"Description","text":"<p>It may not always be possible to determine the output name as that can depend on the schema of the context; in that case this will raise an error if <code>raise_if_undetermined</code> is <code>TRUE</code> (the default), or return <code>NA</code> otherwise.</p>"},{"location":"man/ExprMeta_output_name.html#usage","title":"Usage","text":"<pre><code>ExprMeta_output_name(..., raise_if_undetermined = TRUE)\n</code></pre>"},{"location":"man/ExprMeta_output_name.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Ignored.  <code>raise_if_undetermined</code>  If <code>TRUE</code> (default), raise an error if the output name cannot be determined. Otherwise, return <code>NA</code>."},{"location":"man/ExprMeta_output_name.html#value","title":"Value","text":"<p>A character vector</p>"},{"location":"man/ExprMeta_output_name.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ne = pl$col(\"foo\") * pl$col(\"bar\")\ne$meta$output_name()\n</code></pre> <pre><code>#&gt; [1] \"foo\"\n</code></pre> <pre><code>e_filter = pl$col(\"foo\")$filter(pl$col(\"bar\") == 13)\ne_filter$meta$output_name()\n</code></pre> <pre><code>#&gt; [1] \"foo\"\n</code></pre> <pre><code>e_sum_over = pl$sum(\"foo\")$over(\"groups\")\ne_sum_over$meta$output_name()\n</code></pre> <pre><code>#&gt; [1] \"foo\"\n</code></pre> <pre><code>e_sum_slice = pl$sum(\"foo\")$slice(pl$len() - 10, pl$col(\"bar\"))\ne_sum_slice$meta$output_name()\n</code></pre> <pre><code>#&gt; [1] \"foo\"\n</code></pre> <pre><code>pl$len()$meta$output_name()\n</code></pre> <pre><code>#&gt; [1] \"len\"\n</code></pre> <pre><code>pl$col(\"*\")$meta$output_name(raise_if_undetermined = FALSE)\n</code></pre> <pre><code>#&gt; [1] NA\n</code></pre>"},{"location":"man/ExprMeta_pop.html","title":"Pop","text":"<p>Source code</p>"},{"location":"man/ExprMeta_pop.html#description","title":"Description","text":"<p>Pop the latest expression and return the input(s) of the popped expression.</p>"},{"location":"man/ExprMeta_pop.html#usage","title":"Usage","text":"<pre><code>ExprMeta_pop()\n</code></pre>"},{"location":"man/ExprMeta_pop.html#value","title":"Value","text":"<p>A list of expressions which in most cases will have a unit length. This is not the case when an expression has multiple inputs, for instance in a <code>$fold()</code> expression.</p>"},{"location":"man/ExprMeta_pop.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ne1 = pl$lit(40) + 2\ne2 = pl$lit(42)$sum()\n\ne1\n</code></pre> <pre><code>#&gt; polars Expr: [(40.0) + (2.0)]\n</code></pre> <pre><code>e1$meta$pop()\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; polars Expr: 2.0\n#&gt; \n#&gt; [[2]]\n#&gt; polars Expr: 40.0\n</code></pre> <pre><code>e2\n</code></pre> <pre><code>#&gt; polars Expr: 42.0.sum()\n</code></pre> <pre><code>e2$meta$pop()\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; polars Expr: 42.0\n</code></pre>"},{"location":"man/ExprMeta_root_names.html","title":"Get the root column names","text":"<p>Source code</p>"},{"location":"man/ExprMeta_root_names.html#description","title":"Description","text":"<p>This returns the names of input columns. Use <code>$meta$output_name()</code> to get the name of output column.</p>"},{"location":"man/ExprMeta_root_names.html#usage","title":"Usage","text":"<pre><code>ExprMeta_root_names()\n</code></pre>"},{"location":"man/ExprMeta_root_names.html#value","title":"Value","text":"<p>A character vector</p>"},{"location":"man/ExprMeta_root_names.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ne = (pl$col(\"alice\") + pl$col(\"eve\"))$alias(\"bob\")\ne$meta$root_names()\n</code></pre> <pre><code>#&gt; [1] \"alice\" \"eve\"\n</code></pre>"},{"location":"man/ExprMeta_tree_format.html","title":"Format an expression as a tree","text":"<p>Source code</p>"},{"location":"man/ExprMeta_tree_format.html#description","title":"Description","text":"<p>Format an expression as a tree</p>"},{"location":"man/ExprMeta_tree_format.html#usage","title":"Usage","text":"<pre><code>ExprMeta_tree_format(return_as_string = FALSE)\n</code></pre>"},{"location":"man/ExprMeta_tree_format.html#arguments","title":"Arguments","text":"<code>return_as_string</code>  Return the tree as a character vector? If <code>FALSE</code> (default), the tree is printed in the console."},{"location":"man/ExprMeta_tree_format.html#value","title":"Value","text":"<p>If <code>return_as_string</code> is <code>TRUE</code>, a character vector describing the tree.</p> <p>If <code>return_as_string</code> is <code>FALSE</code>, prints the tree in the console but doesn\u2019t return any value.</p>"},{"location":"man/ExprMeta_tree_format.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nmy_expr = (pl$col(\"foo\") * pl$col(\"bar\"))$sum()$over(pl$col(\"ham\")) / 2\nmy_expr$meta$tree_format()\n</code></pre> <pre><code>#&gt;             0              1              2             3\n#&gt;    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n#&gt;    \u2502\n#&gt;    \u2502  \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n#&gt;  0 \u2502  \u2502 binary: // \u2502\n#&gt;    \u2502  \u2570\u2500\u2500\u2500\u2500\u2500\u252c\u252c\u2500\u2500\u2500\u2500\u2500\u256f\n#&gt;    \u2502        \u2502\u2502\n#&gt;    \u2502        \u2502\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n#&gt;    \u2502        \u2502              \u2502\n#&gt;    \u2502   \u256d\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u256e    \u256d\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u256e\n#&gt;  1 \u2502   \u2502 lit(2.0) \u2502    \u2502 window \u2502\n#&gt;    \u2502   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f    \u2570\u2500\u2500\u2500\u252c\u252c\u2500\u2500\u2500\u256f\n#&gt;    \u2502                       \u2502\u2502\n#&gt;    \u2502                       \u2502\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n#&gt;    \u2502                       \u2502              \u2502\n#&gt;    \u2502                  \u256d\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u256e     \u256d\u2500\u2500\u2534\u2500\u2500\u256e\n#&gt;  2 \u2502                  \u2502 col(ham) \u2502     \u2502 sum \u2502\n#&gt;    \u2502                  \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f     \u2570\u2500\u2500\u252c\u2500\u2500\u256f\n#&gt;    \u2502                                      \u2502\n#&gt;    \u2502                                      \u2502\n#&gt;    \u2502                                      \u2502\n#&gt;    \u2502                                \u256d\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u256e\n#&gt;  3 \u2502                                \u2502 binary: * \u2502\n#&gt;    \u2502                                \u2570\u2500\u2500\u2500\u2500\u2500\u252c\u252c\u2500\u2500\u2500\u2500\u256f\n#&gt;    \u2502                                      \u2502\u2502\n#&gt;    \u2502                                      \u2502\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n#&gt;    \u2502                                      \u2502             \u2502\n#&gt;    \u2502                                 \u256d\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u256e  \u256d\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u256e\n#&gt;  4 \u2502                                 \u2502 col(bar) \u2502  \u2502 col(foo) \u2502\n#&gt;    \u2502                                 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f  \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"man/ExprMeta_undo_aliases.html","title":"Undo any renaming operation","text":"<p>Source code</p>"},{"location":"man/ExprMeta_undo_aliases.html#description","title":"Description","text":"<p>This removes any renaming operation like <code>$alias()</code> or <code>$name$keep()</code>. Polars uses the \"leftmost rule\" to determine naming, meaning that the first element of the expression will be used to name the output.</p>"},{"location":"man/ExprMeta_undo_aliases.html#usage","title":"Usage","text":"<pre><code>ExprMeta_undo_aliases()\n</code></pre>"},{"location":"man/ExprMeta_undo_aliases.html#value","title":"Value","text":"<p>Expr with aliases undone</p>"},{"location":"man/ExprMeta_undo_aliases.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ne = (pl$col(\"alice\") + pl$col(\"eve\"))$alias(\"bob\")\ne$meta$output_name()\n</code></pre> <pre><code>#&gt; [1] \"bob\"\n</code></pre> <pre><code>e$meta$undo_aliases()$meta$output_name()\n</code></pre> <pre><code>#&gt; [1] \"alice\"\n</code></pre>"},{"location":"man/ExprName_keep.html","title":"Keep the original root name of the expression.","text":"<p>Source code</p>"},{"location":"man/ExprName_keep.html#description","title":"Description","text":"<p>Keep the original root name of the expression.</p>"},{"location":"man/ExprName_keep.html#usage","title":"Usage","text":"<pre><code>ExprName_keep()\n</code></pre>"},{"location":"man/ExprName_keep.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_keep.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = 1:3))$select(pl$col(\"alice\")$alias(\"bob\")$name$keep())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1     \u2502\n#&gt; \u2502 2     \u2502\n#&gt; \u2502 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_map.html","title":"Map alias of expression with an R function","text":"<p>Source code</p>"},{"location":"man/ExprName_map.html#description","title":"Description","text":"<p>Rename the output of an expression by mapping a function over the root name.</p>"},{"location":"man/ExprName_map.html#usage","title":"Usage","text":"<pre><code>ExprName_map(fun)\n</code></pre>"},{"location":"man/ExprName_map.html#arguments","title":"Arguments","text":"<code>fun</code>  an R function which takes a string as input and return a string"},{"location":"man/ExprName_map.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_map.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = 1:3))$select(\n  pl$col(\"alice\")$alias(\"joe_is_not_root\")$name$map(\\(x) paste0(x, \"_and_bob\"))\n)\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice_and_bob \u2502\n#&gt; \u2502 ---           \u2502\n#&gt; \u2502 i32           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1             \u2502\n#&gt; \u2502 2             \u2502\n#&gt; \u2502 3             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_prefix.html","title":"Add a prefix to a column name","text":"<p>Source code</p>"},{"location":"man/ExprName_prefix.html#description","title":"Description","text":"<p>Add a prefix to a column name</p>"},{"location":"man/ExprName_prefix.html#usage","title":"Usage","text":"<pre><code>ExprName_prefix(prefix)\n</code></pre>"},{"location":"man/ExprName_prefix.html#arguments","title":"Arguments","text":"<code>prefix</code>  Prefix to be added to column name(s)"},{"location":"man/ExprName_prefix.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_prefix.html#see-also","title":"See Also","text":"<p><code>$suffix()</code> to add a suffix</p>"},{"location":"man/ExprName_prefix.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat = pl$DataFrame(mtcars)\n\ndat$select(\n  pl$col(\"mpg\"),\n  pl$col(\"mpg\")$name$prefix(\"name_\"),\n  pl$col(\"cyl\", \"drat\")$name$prefix(\"bar_\")\n)\n</code></pre> <pre><code>#&gt; shape: (32, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 name_mpg \u2506 bar_cyl \u2506 bar_drat \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2506 ---     \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64      \u2506 f64     \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 21.0     \u2506 6.0     \u2506 3.9      \u2502\n#&gt; \u2502 21.0 \u2506 21.0     \u2506 6.0     \u2506 3.9      \u2502\n#&gt; \u2502 22.8 \u2506 22.8     \u2506 4.0     \u2506 3.85     \u2502\n#&gt; \u2502 21.4 \u2506 21.4     \u2506 6.0     \u2506 3.08     \u2502\n#&gt; \u2502 18.7 \u2506 18.7     \u2506 8.0     \u2506 3.15     \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026        \u2506 \u2026       \u2506 \u2026        \u2502\n#&gt; \u2502 30.4 \u2506 30.4     \u2506 4.0     \u2506 3.77     \u2502\n#&gt; \u2502 15.8 \u2506 15.8     \u2506 8.0     \u2506 4.22     \u2502\n#&gt; \u2502 19.7 \u2506 19.7     \u2506 6.0     \u2506 3.62     \u2502\n#&gt; \u2502 15.0 \u2506 15.0     \u2506 8.0     \u2506 3.54     \u2502\n#&gt; \u2502 21.4 \u2506 21.4     \u2506 4.0     \u2506 4.11     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_prefix_fields.html","title":"Add a prefix to all fields name of a struct","text":"<p>Source code</p>"},{"location":"man/ExprName_prefix_fields.html#description","title":"Description","text":"<p>Add a prefix to all fields name of a struct</p>"},{"location":"man/ExprName_prefix_fields.html#usage","title":"Usage","text":"<pre><code>ExprName_prefix_fields(prefix)\n</code></pre>"},{"location":"man/ExprName_prefix_fields.html#arguments","title":"Arguments","text":"<code>prefix</code>  Prefix to add to the field name."},{"location":"man/ExprName_prefix_fields.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_prefix_fields.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = 1, b = 2)$select(\n  pl$struct(pl$all())$alias(\"my_struct\")\n)\n\ndf$with_columns(pl$col(\"my_struct\")$name$prefix_fields(\"col_\"))$unnest()\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col_a \u2506 col_b \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 f64   \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0   \u2506 2.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_suffix.html","title":"Add a suffix to a column name","text":"<p>Source code</p>"},{"location":"man/ExprName_suffix.html#description","title":"Description","text":"<p>Add a suffix to a column name</p>"},{"location":"man/ExprName_suffix.html#usage","title":"Usage","text":"<pre><code>ExprName_suffix(suffix)\n</code></pre>"},{"location":"man/ExprName_suffix.html#arguments","title":"Arguments","text":"<code>suffix</code>  Suffix to be added to column name(s)"},{"location":"man/ExprName_suffix.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_suffix.html#see-also","title":"See Also","text":"<p><code>$prefix()</code> to add a prefix</p>"},{"location":"man/ExprName_suffix.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat = pl$DataFrame(mtcars)\n\ndat$select(\n  pl$col(\"mpg\"),\n  pl$col(\"mpg\")$name$suffix(\"_foo\"),\n  pl$col(\"cyl\", \"drat\")$name$suffix(\"_bar\")\n)\n</code></pre> <pre><code>#&gt; shape: (32, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 mpg_foo \u2506 cyl_bar \u2506 drat_bar \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---     \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64     \u2506 f64     \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 21.0    \u2506 6.0     \u2506 3.9      \u2502\n#&gt; \u2502 21.0 \u2506 21.0    \u2506 6.0     \u2506 3.9      \u2502\n#&gt; \u2502 22.8 \u2506 22.8    \u2506 4.0     \u2506 3.85     \u2502\n#&gt; \u2502 21.4 \u2506 21.4    \u2506 6.0     \u2506 3.08     \u2502\n#&gt; \u2502 18.7 \u2506 18.7    \u2506 8.0     \u2506 3.15     \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026       \u2506 \u2026       \u2506 \u2026        \u2502\n#&gt; \u2502 30.4 \u2506 30.4    \u2506 4.0     \u2506 3.77     \u2502\n#&gt; \u2502 15.8 \u2506 15.8    \u2506 8.0     \u2506 4.22     \u2502\n#&gt; \u2502 19.7 \u2506 19.7    \u2506 6.0     \u2506 3.62     \u2502\n#&gt; \u2502 15.0 \u2506 15.0    \u2506 8.0     \u2506 3.54     \u2502\n#&gt; \u2502 21.4 \u2506 21.4    \u2506 4.0     \u2506 4.11     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_suffix_fields.html","title":"Add a suffix to all fields name of a struct","text":"<p>Source code</p>"},{"location":"man/ExprName_suffix_fields.html#description","title":"Description","text":"<p>Add a suffix to all fields name of a struct</p>"},{"location":"man/ExprName_suffix_fields.html#usage","title":"Usage","text":"<pre><code>ExprName_suffix_fields(suffix)\n</code></pre>"},{"location":"man/ExprName_suffix_fields.html#arguments","title":"Arguments","text":"<code>suffix</code>  Suffix to add to the field name."},{"location":"man/ExprName_suffix_fields.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_suffix_fields.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = 1, b = 2)$select(\n  pl$struct(pl$all())$alias(\"my_struct\")\n)\n\ndf$with_columns(pl$col(\"my_struct\")$name$suffix_fields(\"_post\"))$unnest()\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a_post \u2506 b_post \u2502\n#&gt; \u2502 ---    \u2506 ---    \u2502\n#&gt; \u2502 f64    \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0    \u2506 2.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_to_lowercase.html","title":"Make the root column name lowercase","text":"<p>Source code</p>"},{"location":"man/ExprName_to_lowercase.html#description","title":"Description","text":"<p>Due to implementation constraints, this method can only be called as the last expression in a chain.</p>"},{"location":"man/ExprName_to_lowercase.html#usage","title":"Usage","text":"<pre><code>ExprName_to_lowercase()\n</code></pre>"},{"location":"man/ExprName_to_lowercase.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_to_lowercase.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(Alice = 1:3)$with_columns(pl$col(\"Alice\")$name$to_lowercase())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Alice \u2506 alice \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 i32   \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1     \u2506 1     \u2502\n#&gt; \u2502 2     \u2506 2     \u2502\n#&gt; \u2502 3     \u2506 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_to_uppercase.html","title":"Make the root column name uppercase","text":"<p>Source code</p>"},{"location":"man/ExprName_to_uppercase.html#description","title":"Description","text":"<p>Due to implementation constraints, this method can only be called as the last expression in a chain.</p>"},{"location":"man/ExprName_to_uppercase.html#usage","title":"Usage","text":"<pre><code>ExprName_to_uppercase()\n</code></pre>"},{"location":"man/ExprName_to_uppercase.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_to_uppercase.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(Alice = 1:3)$with_columns(pl$col(\"Alice\")$name$to_uppercase())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Alice \u2506 ALICE \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 i32   \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1     \u2506 1     \u2502\n#&gt; \u2502 2     \u2506 2     \u2502\n#&gt; \u2502 3     \u2506 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_concat.html","title":"Vertically concatenate the string values in the column to a single string value.","text":"<p>Source code</p>"},{"location":"man/ExprStr_concat.html#description","title":"Description","text":"<p>Vertically concatenate the string values in the column to a single string value.</p>"},{"location":"man/ExprStr_concat.html#usage","title":"Usage","text":"<pre><code>ExprStr_concat(delimiter = \"\", ..., ignore_nulls = TRUE)\n</code></pre>"},{"location":"man/ExprStr_concat.html#arguments","title":"Arguments","text":"<code>delimiter</code>  The delimiter to insert between consecutive string values.  <code>\u2026</code>  Ignored.  <code>ignore_nulls</code>  Ignore null values (default). If <code>FALSE</code>, null values will be propagated: if the column contains any null values, the output is null."},{"location":"man/ExprStr_concat.html#value","title":"Value","text":"<p>Expr of String concatenated</p>"},{"location":"man/ExprStr_concat.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# concatenate a Series of strings to a single string\ndf = pl$DataFrame(foo = c(1, NA, 2))\n\ndf$select(pl$col(\"foo\")$str$concat(\"-\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo     \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0-2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"foo\")$str$concat(\"-\", ignore_nulls = FALSE))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo  \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_contains.html","title":"Check if string contains a substring that matches a pattern","text":"<p>Source code</p>"},{"location":"man/ExprStr_contains.html#description","title":"Description","text":"<p>Check if string contains a substring that matches a pattern</p>"},{"location":"man/ExprStr_contains.html#usage","title":"Usage","text":"<pre><code>ExprStr_contains(pattern, ..., literal = FALSE, strict = TRUE)\n</code></pre>"},{"location":"man/ExprStr_contains.html#arguments","title":"Arguments","text":"<code>pattern</code>  A character or something can be coerced to a string Expr of a valid regex pattern, compatible with the regex crate.  <code>\u2026</code>  Ignored.  <code>literal</code>  Logical. If <code>TRUE</code> (default), treat <code>pattern</code> as a literal string, not as a regular expression.  <code>strict</code>  Logical. If <code>TRUE</code> (default), raise an error if the underlying pattern is not a valid regex, otherwise mask out with a null value."},{"location":"man/ExprStr_contains.html#details","title":"Details","text":"<p>To modify regular expression behaviour (such as case-sensitivity) with flags, use the inline <code>(?iLmsuxU)</code> syntax. See the regex crate\u2019s section on grouping and flags for additional information about the use of inline expression modifiers.</p>"},{"location":"man/ExprStr_contains.html#value","title":"Value","text":"<p>Expr of Boolean data type</p>"},{"location":"man/ExprStr_contains.html#see-also","title":"See Also","text":"<ul> <li> <code>$str$start_with()</code>: Check if string values start with a substring.  </li> <li> <code>$str$ends_with()</code>: Check if string values end with a substring.  </li> <li> <code>$str$find()</code>: Return the index position of the first substring matching a pattern.  </li> </ul>"},{"location":"man/ExprStr_contains.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# The inline `(?i)` syntax example\npl$DataFrame(s = c(\"AAA\", \"aAa\", \"aaa\"))$with_columns(\n  default_match = pl$col(\"s\")$str$contains(\"AA\"),\n  insensitive_match = pl$col(\"s\")$str$contains(\"(?i)AA\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s   \u2506 default_match \u2506 insensitive_match \u2502\n#&gt; \u2502 --- \u2506 ---           \u2506 ---               \u2502\n#&gt; \u2502 str \u2506 bool          \u2506 bool              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 AAA \u2506 true          \u2506 true              \u2502\n#&gt; \u2502 aAa \u2506 false         \u2506 true              \u2502\n#&gt; \u2502 aaa \u2506 false         \u2506 true              \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df = pl$DataFrame(txt = c(\"Crab\", \"cat and dog\", \"rab$bit\", NA))\ndf$with_columns(\n  regex = pl$col(\"txt\")$str$contains(\"cat|bit\"),\n  literal = pl$col(\"txt\")$str$contains(\"rab$\", literal = TRUE)\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 txt         \u2506 regex \u2506 literal \u2502\n#&gt; \u2502 ---         \u2506 ---   \u2506 ---     \u2502\n#&gt; \u2502 str         \u2506 bool  \u2506 bool    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Crab        \u2506 false \u2506 false   \u2502\n#&gt; \u2502 cat and dog \u2506 true  \u2506 false   \u2502\n#&gt; \u2502 rab$bit     \u2506 true  \u2506 true    \u2502\n#&gt; \u2502 null        \u2506 null  \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_contains_any.html","title":"Use the aho-corasick algorithm to find matches","text":"<p>Source code</p>"},{"location":"man/ExprStr_contains_any.html#description","title":"Description","text":"<p>This function determines if any of the patterns find a match.</p>"},{"location":"man/ExprStr_contains_any.html#usage","title":"Usage","text":"<pre><code>ExprStr_contains_any(patterns, ..., ascii_case_insensitive = FALSE)\n</code></pre>"},{"location":"man/ExprStr_contains_any.html#arguments","title":"Arguments","text":"<code>patterns</code>  Character vector or something can be coerced to strings Expr of a valid regex pattern, compatible with the regex crate.  <code>\u2026</code>  Ignored.  <code>ascii_case_insensitive</code>  Enable ASCII-aware case insensitive matching. When this option is enabled, searching will be performed without respect to case for ASCII letters (a-z and A-Z) only."},{"location":"man/ExprStr_contains_any.html#value","title":"Value","text":"<p>Expr of Boolean data type</p>"},{"location":"man/ExprStr_contains_any.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$str$contains()"},{"location":"man/ExprStr_contains_any.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  lyrics = c(\n    \"Everybody wants to rule the world\",\n    \"Tell me what you want, what you really really want\",\n    \"Can you feel the love tonight\"\n  )\n)\n\ndf$with_columns(\n  contains_any = pl$col(\"lyrics\")$str$contains_any(c(\"you\", \"me\"))\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 lyrics                            \u2506 contains_any \u2502\n#&gt; \u2502 ---                               \u2506 ---          \u2502\n#&gt; \u2502 str                               \u2506 bool         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Everybody wants to rule the worl\u2026 \u2506 false        \u2502\n#&gt; \u2502 Tell me what you want, what you \u2026 \u2506 true         \u2502\n#&gt; \u2502 Can you feel the love tonight     \u2506 true         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_count_matches.html","title":"Count all successive non-overlapping regex matches","text":"<p>Source code</p>"},{"location":"man/ExprStr_count_matches.html#description","title":"Description","text":"<p>Count all successive non-overlapping regex matches</p>"},{"location":"man/ExprStr_count_matches.html#usage","title":"Usage","text":"<pre><code>ExprStr_count_matches(pattern, ..., literal = FALSE)\n</code></pre>"},{"location":"man/ExprStr_count_matches.html#arguments","title":"Arguments","text":"<code>pattern</code>  A character or something can be coerced to a string Expr of a valid regex pattern, compatible with the regex crate.  <code>\u2026</code>  Ignored.  <code>literal</code>  Logical. If <code>TRUE</code> (default), treat <code>pattern</code> as a literal string, not as a regular expression."},{"location":"man/ExprStr_count_matches.html#value","title":"Value","text":"<p>Expr of data type <code>UInt32</code>. Returns <code>null</code> if the original value is <code>null</code>.</p>"},{"location":"man/ExprStr_count_matches.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(\"12 dbc 3xy\", \"cat\\\\w\", \"1zy3\\\\d\\\\d\", NA))\n\ndf$with_columns(\n  count_digits = pl$col(\"foo\")$str$count_matches(r\"(\\d)\"),\n  count_slash_d = pl$col(\"foo\")$str$count_matches(r\"(\\d)\", literal = TRUE)\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo        \u2506 count_digits \u2506 count_slash_d \u2502\n#&gt; \u2502 ---        \u2506 ---          \u2506 ---           \u2502\n#&gt; \u2502 str        \u2506 u32          \u2506 u32           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 12 dbc 3xy \u2506 3            \u2506 0             \u2502\n#&gt; \u2502 cat\\w      \u2506 0            \u2506 0             \u2502\n#&gt; \u2502 1zy3\\d\\d   \u2506 2            \u2506 2             \u2502\n#&gt; \u2502 null       \u2506 null         \u2506 null          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_decode.html","title":"Decode a value using the provided encoding","text":"<p>Source code</p>"},{"location":"man/ExprStr_decode.html#description","title":"Description","text":"<p>Decode a value using the provided encoding</p>"},{"location":"man/ExprStr_decode.html#usage","title":"Usage","text":"<pre><code>ExprStr_decode(encoding, ..., strict = TRUE)\n</code></pre>"},{"location":"man/ExprStr_decode.html#arguments","title":"Arguments","text":"<code>encoding</code>  Either \u2018hex\u2019 or \u2018base64\u2019.  <code>\u2026</code>  Not used currently.  <code>strict</code>  If <code>TRUE</code> (default), raise an error if the underlying value cannot be decoded. Otherwise, replace it with a null value."},{"location":"man/ExprStr_decode.html#value","title":"Value","text":"<p>String array with values decoded using provided encoding</p>"},{"location":"man/ExprStr_decode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(strings = c(\"foo\", \"bar\", NA))\ndf$select(pl$col(\"strings\")$str$encode(\"hex\"))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 666f6f  \u2502\n#&gt; \u2502 626172  \u2502\n#&gt; \u2502 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(\n  pl$col(\"strings\")$str$encode(\"base64\")$alias(\"base64\"), # notice DataType is not encoded\n  pl$col(\"strings\")$str$encode(\"hex\")$alias(\"hex\") # ... and must restored with cast\n)$with_columns(\n  pl$col(\"base64\")$str$decode(\"base64\")$alias(\"base64_decoded\")$cast(pl$String),\n  pl$col(\"hex\")$str$decode(\"hex\")$alias(\"hex_decoded\")$cast(pl$String)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2506 base64 \u2506 hex    \u2506 base64_decoded \u2506 hex_decoded \u2502\n#&gt; \u2502 ---     \u2506 ---    \u2506 ---    \u2506 ---            \u2506 ---         \u2502\n#&gt; \u2502 str     \u2506 str    \u2506 str    \u2506 str            \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo     \u2506 Zm9v   \u2506 666f6f \u2506 foo            \u2506 foo         \u2502\n#&gt; \u2502 bar     \u2506 YmFy   \u2506 626172 \u2506 bar            \u2506 bar         \u2502\n#&gt; \u2502 null    \u2506 null   \u2506 null   \u2506 null           \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_encode.html","title":"Encode a value using the provided encoding","text":"<p>Source code</p>"},{"location":"man/ExprStr_encode.html#description","title":"Description","text":"<p>Encode a value using the provided encoding</p>"},{"location":"man/ExprStr_encode.html#usage","title":"Usage","text":"<pre><code>ExprStr_encode(encoding)\n</code></pre>"},{"location":"man/ExprStr_encode.html#arguments","title":"Arguments","text":"<code>encoding</code>  Either \u2018hex\u2019 or \u2018base64\u2019."},{"location":"man/ExprStr_encode.html#value","title":"Value","text":"<p>String array with values encoded using provided encoding</p>"},{"location":"man/ExprStr_encode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(strings = c(\"foo\", \"bar\", NA))\ndf$select(pl$col(\"strings\")$str$encode(\"hex\"))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 666f6f  \u2502\n#&gt; \u2502 626172  \u2502\n#&gt; \u2502 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(\n  pl$col(\"strings\")$str$encode(\"base64\")$alias(\"base64\"), # notice DataType is not encoded\n  pl$col(\"strings\")$str$encode(\"hex\")$alias(\"hex\") # ... and must restored with cast\n)$with_columns(\n  pl$col(\"base64\")$str$decode(\"base64\")$alias(\"base64_decoded\")$cast(pl$String),\n  pl$col(\"hex\")$str$decode(\"hex\")$alias(\"hex_decoded\")$cast(pl$String)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2506 base64 \u2506 hex    \u2506 base64_decoded \u2506 hex_decoded \u2502\n#&gt; \u2502 ---     \u2506 ---    \u2506 ---    \u2506 ---            \u2506 ---         \u2502\n#&gt; \u2502 str     \u2506 str    \u2506 str    \u2506 str            \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo     \u2506 Zm9v   \u2506 666f6f \u2506 foo            \u2506 foo         \u2502\n#&gt; \u2502 bar     \u2506 YmFy   \u2506 626172 \u2506 bar            \u2506 bar         \u2502\n#&gt; \u2502 null    \u2506 null   \u2506 null   \u2506 null           \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_ends_with.html","title":"Check if string ends with a regex","text":"<p>Source code</p>"},{"location":"man/ExprStr_ends_with.html#description","title":"Description","text":"<p>Check if string values end with a substring.</p>"},{"location":"man/ExprStr_ends_with.html#usage","title":"Usage","text":"<pre><code>ExprStr_ends_with(sub)\n</code></pre>"},{"location":"man/ExprStr_ends_with.html#arguments","title":"Arguments","text":"<code>sub</code>  Suffix substring or Expr."},{"location":"man/ExprStr_ends_with.html#details","title":"Details","text":"<p>See also <code>$str$starts_with()</code> and <code>$str$contains()</code>.</p>"},{"location":"man/ExprStr_ends_with.html#value","title":"Value","text":"<p>Expr of Boolean data type</p>"},{"location":"man/ExprStr_ends_with.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(fruits = c(\"apple\", \"mango\", NA))\ndf$select(\n  pl$col(\"fruits\"),\n  pl$col(\"fruits\")$str$ends_with(\"go\")$alias(\"has_suffix\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 has_suffix \u2502\n#&gt; \u2502 ---    \u2506 ---        \u2502\n#&gt; \u2502 str    \u2506 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 false      \u2502\n#&gt; \u2502 mango  \u2506 true       \u2502\n#&gt; \u2502 null   \u2506 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_explode.html","title":"Returns a column with a separate row for every string character","text":"<p>Source code</p>"},{"location":"man/ExprStr_explode.html#description","title":"Description","text":"<p>Returns a column with a separate row for every string character</p>"},{"location":"man/ExprStr_explode.html#usage","title":"Usage","text":"<pre><code>ExprStr_explode()\n</code></pre>"},{"location":"man/ExprStr_explode.html#value","title":"Value","text":"<p>Expr: Series of dtype String.</p>"},{"location":"man/ExprStr_explode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(\"foo\", \"bar\"))\ndf$select(pl$col(\"a\")$str$explode())\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 f   \u2502\n#&gt; \u2502 o   \u2502\n#&gt; \u2502 o   \u2502\n#&gt; \u2502 b   \u2502\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 r   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_extract.html","title":"Extract the target capture group from provided patterns","text":"<p>Source code</p>"},{"location":"man/ExprStr_extract.html#description","title":"Description","text":"<p>Extract the target capture group from provided patterns</p>"},{"location":"man/ExprStr_extract.html#usage","title":"Usage","text":"<pre><code>ExprStr_extract(pattern, group_index)\n</code></pre>"},{"location":"man/ExprStr_extract.html#arguments","title":"Arguments","text":"<code>pattern</code>  A valid regex pattern. Can be an Expr or something coercible to an Expr. Strings are parsed as column names.  <code>group_index</code>  Index of the targeted capture group. Group 0 means the whole pattern, first group begin at index 1 (default)."},{"location":"man/ExprStr_extract.html#value","title":"Value","text":"<p>String array. Contains null if original value is null or regex capture nothing.</p>"},{"location":"man/ExprStr_extract.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(\n    \"http://vote.com/ballon_dor?candidate=messi&amp;ref=polars\",\n    \"http://vote.com/ballon_dor?candidat=jorginho&amp;ref=polars\",\n    \"http://vote.com/ballon_dor?candidate=ronaldo&amp;ref=polars\"\n  )\n)\ndf$with_columns(\n  extracted = pl$col(\"a\")$str$extract(pl$lit(r\"(candidate=(\\w+))\"), 1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a                                 \u2506 extracted \u2502\n#&gt; \u2502 ---                               \u2506 ---       \u2502\n#&gt; \u2502 str                               \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 http://vote.com/ballon_dor?candi\u2026 \u2506 messi     \u2502\n#&gt; \u2502 http://vote.com/ballon_dor?candi\u2026 \u2506 null      \u2502\n#&gt; \u2502 http://vote.com/ballon_dor?candi\u2026 \u2506 ronaldo   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_extract_all.html","title":"Extract all matches for the given regex pattern","text":"<p>Source code</p>"},{"location":"man/ExprStr_extract_all.html#description","title":"Description","text":"<p>Extracts all matches for the given regex pattern. Extracts each successive non-overlapping regex match in an individual string as an array.</p>"},{"location":"man/ExprStr_extract_all.html#usage","title":"Usage","text":"<pre><code>ExprStr_extract_all(pattern)\n</code></pre>"},{"location":"man/ExprStr_extract_all.html#arguments","title":"Arguments","text":"<code>pattern</code>  A valid regex pattern"},{"location":"man/ExprStr_extract_all.html#value","title":"Value","text":"<p><code>List[String]</code> array. Contain null if original value is null or regex capture nothing.</p>"},{"location":"man/ExprStr_extract_all.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(\"123 bla 45 asd\", \"xyz 678 910t\"))\ndf$select(\n  pl$col(\"foo\")$str$extract_all(r\"((\\d+))\")$alias(\"extracted_nrs\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 extracted_nrs  \u2502\n#&gt; \u2502 ---            \u2502\n#&gt; \u2502 list[str]      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"123\", \"45\"]  \u2502\n#&gt; \u2502 [\"678\", \"910\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_extract_groups.html","title":"Extract all capture groups for the given regex pattern","text":"<p>Source code</p>"},{"location":"man/ExprStr_extract_groups.html#description","title":"Description","text":"<p>Extract all capture groups for the given regex pattern</p>"},{"location":"man/ExprStr_extract_groups.html#usage","title":"Usage","text":"<pre><code>ExprStr_extract_groups(pattern)\n</code></pre>"},{"location":"man/ExprStr_extract_groups.html#arguments","title":"Arguments","text":"<code>pattern</code>  A character of a valid regular expression pattern containing at least one capture group, compatible with the regex crate."},{"location":"man/ExprStr_extract_groups.html#details","title":"Details","text":"<p>All group names are strings. If your pattern contains unnamed groups, their numerical position is converted to a string. See examples.</p>"},{"location":"man/ExprStr_extract_groups.html#value","title":"Value","text":"<p>Expr of data type Struct with fields of data type <code>String</code>.</p>"},{"location":"man/ExprStr_extract_groups.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  url = c(\n    \"http://vote.com/ballon_dor?candidate=messi&amp;ref=python\",\n    \"http://vote.com/ballon_dor?candidate=weghorst&amp;ref=polars\",\n    \"http://vote.com/ballon_dor?error=404&amp;ref=rust\"\n  )\n)\n\npattern = r\"(candidate=(?&lt;candidate&gt;\\w+)&amp;ref=(?&lt;ref&gt;\\w+))\"\n\ndf$with_columns(\n  captures = pl$col(\"url\")$str$extract_groups(pattern)\n)$unnest(\"captures\")\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 url                               \u2506 candidate \u2506 ref    \u2502\n#&gt; \u2502 ---                               \u2506 ---       \u2506 ---    \u2502\n#&gt; \u2502 str                               \u2506 str       \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 http://vote.com/ballon_dor?candi\u2026 \u2506 messi     \u2506 python \u2502\n#&gt; \u2502 http://vote.com/ballon_dor?candi\u2026 \u2506 weghorst  \u2506 polars \u2502\n#&gt; \u2502 http://vote.com/ballon_dor?error\u2026 \u2506 null      \u2506 null   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># If the groups are unnamed, their numerical position (as a string) is used:\n\npattern = r\"(candidate=(\\w+)&amp;ref=(\\w+))\"\n\ndf$with_columns(\n  captures = pl$col(\"url\")$str$extract_groups(pattern)\n)$unnest(\"captures\")\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 url                               \u2506 1        \u2506 2      \u2502\n#&gt; \u2502 ---                               \u2506 ---      \u2506 ---    \u2502\n#&gt; \u2502 str                               \u2506 str      \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 http://vote.com/ballon_dor?candi\u2026 \u2506 messi    \u2506 python \u2502\n#&gt; \u2502 http://vote.com/ballon_dor?candi\u2026 \u2506 weghorst \u2506 polars \u2502\n#&gt; \u2502 http://vote.com/ballon_dor?error\u2026 \u2506 null     \u2506 null   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_find.html","title":"Return the index position of the first substring matching a pattern","text":"<p>Source code</p>"},{"location":"man/ExprStr_find.html#description","title":"Description","text":"<p>Return the index position of the first substring matching a pattern</p>"},{"location":"man/ExprStr_find.html#usage","title":"Usage","text":"<pre><code>ExprStr_find(pattern, ..., literal = FALSE, strict = TRUE)\n</code></pre>"},{"location":"man/ExprStr_find.html#arguments","title":"Arguments","text":"<code>pattern</code>  A character or something can be coerced to a string Expr of a valid regex pattern, compatible with the regex crate.  <code>\u2026</code>  Ignored.  <code>literal</code>  Logical. If <code>TRUE</code> (default), treat <code>pattern</code> as a literal string, not as a regular expression.  <code>strict</code>  Logical. If <code>TRUE</code> (default), raise an error if the underlying pattern is not a valid regex, otherwise mask out with a null value."},{"location":"man/ExprStr_find.html#details","title":"Details","text":"<p>To modify regular expression behaviour (such as case-sensitivity) with flags, use the inline <code>(?iLmsuxU)</code> syntax. See the regex crate\u2019s section on grouping and flags for additional information about the use of inline expression modifiers.</p>"},{"location":"man/ExprStr_find.html#value","title":"Value","text":"<p>An Expr of data type UInt32</p>"},{"location":"man/ExprStr_find.html#see-also","title":"See Also","text":"<ul> <li> <code>$str$start_with()</code>: Check if string values start with a substring.  </li> <li> <code>$str$ends_with()</code>: Check if string values end with a substring.  </li> <li> <code>$str$contains()</code>: Check if string contains a substring that matches a pattern.  </li> </ul>"},{"location":"man/ExprStr_find.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(s = c(\"AAA\", \"aAa\", \"aaa\"))$with_columns(\n  default_match = pl$col(\"s\")$str$find(\"Aa\"),\n  insensitive_match = pl$col(\"s\")$str$find(\"(?i)Aa\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s   \u2506 default_match \u2506 insensitive_match \u2502\n#&gt; \u2502 --- \u2506 ---           \u2506 ---               \u2502\n#&gt; \u2502 str \u2506 u32           \u2506 u32               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 AAA \u2506 null          \u2506 0                 \u2502\n#&gt; \u2502 aAa \u2506 1             \u2506 0                 \u2502\n#&gt; \u2502 aaa \u2506 null          \u2506 0                 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_json_decode.html","title":"Parse string values as JSON.","text":"<p>Source code</p>"},{"location":"man/ExprStr_json_decode.html#description","title":"Description","text":"<p>Parse string values as JSON.</p>"},{"location":"man/ExprStr_json_decode.html#usage","title":"Usage","text":"<pre><code>ExprStr_json_decode(dtype, infer_schema_length = 100)\n</code></pre>"},{"location":"man/ExprStr_json_decode.html#arguments","title":"Arguments","text":"<code>dtype</code>  The dtype to cast the extracted value to. If <code>NULL</code>, the dtype will be inferred from the JSON value.  <code>infer_schema_length</code>  How many rows to parse to determine the schema. If <code>NULL</code>, all rows are used."},{"location":"man/ExprStr_json_decode.html#details","title":"Details","text":"<p>Throw errors if encounter invalid json strings.</p>"},{"location":"man/ExprStr_json_decode.html#value","title":"Value","text":"<p>Expr returning a struct</p>"},{"location":"man/ExprStr_json_decode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  json_val = c('{\"a\":1, \"b\": true}', NA, '{\"a\":2, \"b\": false}')\n)\ndtype = pl$Struct(pl$Field(\"a\", pl$Int64), pl$Field(\"b\", pl$Boolean))\ndf$select(pl$col(\"json_val\")$str$json_decode(dtype))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 json_val    \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 struct[2]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,true}    \u2502\n#&gt; \u2502 {null,null} \u2502\n#&gt; \u2502 {2,false}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_json_path_match.html","title":"Extract the first match of JSON string with the provided JSONPath expression","text":"<p>Source code</p>"},{"location":"man/ExprStr_json_path_match.html#description","title":"Description","text":"<p>Extract the first match of JSON string with the provided JSONPath expression</p>"},{"location":"man/ExprStr_json_path_match.html#usage","title":"Usage","text":"<pre><code>ExprStr_json_path_match(json_path)\n</code></pre>"},{"location":"man/ExprStr_json_path_match.html#arguments","title":"Arguments","text":"<code>json_path</code>  A valid JSON path query string."},{"location":"man/ExprStr_json_path_match.html#details","title":"Details","text":"<p>Throw errors if encounter invalid JSON strings. All return value will be cast to String regardless of the original value.</p> <p>Documentation on JSONPath standard can be found here: https://goessner.net/articles/JsonPath/.</p>"},{"location":"man/ExprStr_json_path_match.html#value","title":"Value","text":"<p>String array. Contain null if original value is null or the json_path return nothing.</p>"},{"location":"man/ExprStr_json_path_match.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  json_val = c('{\"a\":\"1\"}', NA, '{\"a\":2}', '{\"a\":2.1}', '{\"a\":true}')\n)\ndf$select(pl$col(\"json_val\")$str$json_path_match(\"$.a\"))\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 json_val \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1        \u2502\n#&gt; \u2502 null     \u2502\n#&gt; \u2502 2        \u2502\n#&gt; \u2502 2.1      \u2502\n#&gt; \u2502 true     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_len_bytes.html","title":"Get the number of bytes in strings","text":"<p>Source code</p>"},{"location":"man/ExprStr_len_bytes.html#description","title":"Description","text":"<p>Get length of the strings as UInt32 (as number of bytes). Use <code>$str$len_chars()</code> to get the number of characters.</p>"},{"location":"man/ExprStr_len_bytes.html#usage","title":"Usage","text":"<pre><code>ExprStr_len_bytes()\n</code></pre>"},{"location":"man/ExprStr_len_bytes.html#details","title":"Details","text":"<p>If you know that you are working with ASCII text, <code>lengths</code> will be equivalent, and faster (returns length in terms of the number of bytes).</p>"},{"location":"man/ExprStr_len_bytes.html#value","title":"Value","text":"<p>Expr of u32</p>"},{"location":"man/ExprStr_len_bytes.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  s = c(\"Caf\u00e9\", NA, \"345\", \"\u00e6\u00f8\u00e5\")\n)$select(\n  pl$col(\"s\"),\n  pl$col(\"s\")$str$len_bytes()$alias(\"lengths\"),\n  pl$col(\"s\")$str$len_chars()$alias(\"n_chars\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s    \u2506 lengths \u2506 n_chars \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 str  \u2506 u32     \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Caf\u00e9 \u2506 5       \u2506 4       \u2502\n#&gt; \u2502 null \u2506 null    \u2506 null    \u2502\n#&gt; \u2502 345  \u2506 3       \u2506 3       \u2502\n#&gt; \u2502 \u00e6\u00f8\u00e5  \u2506 6       \u2506 3       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_len_chars.html","title":"Get the number of characters in strings","text":"<p>Source code</p>"},{"location":"man/ExprStr_len_chars.html#description","title":"Description","text":"<p>Get length of the strings as UInt32 (as number of characters). Use <code>$str$len_bytes()</code> to get the number of bytes.</p>"},{"location":"man/ExprStr_len_chars.html#usage","title":"Usage","text":"<pre><code>ExprStr_len_chars()\n</code></pre>"},{"location":"man/ExprStr_len_chars.html#details","title":"Details","text":"<p>If you know that you are working with ASCII text, <code>lengths</code> will be equivalent, and faster (returns length in terms of the number of bytes).</p>"},{"location":"man/ExprStr_len_chars.html#value","title":"Value","text":"<p>Expr of u32</p>"},{"location":"man/ExprStr_len_chars.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  s = c(\"Caf\u00e9\", NA, \"345\", \"\u00e6\u00f8\u00e5\")\n)$select(\n  pl$col(\"s\"),\n  pl$col(\"s\")$str$len_bytes()$alias(\"lengths\"),\n  pl$col(\"s\")$str$len_chars()$alias(\"n_chars\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s    \u2506 lengths \u2506 n_chars \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 str  \u2506 u32     \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Caf\u00e9 \u2506 5       \u2506 4       \u2502\n#&gt; \u2502 null \u2506 null    \u2506 null    \u2502\n#&gt; \u2502 345  \u2506 3       \u2506 3       \u2502\n#&gt; \u2502 \u00e6\u00f8\u00e5  \u2506 6       \u2506 3       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_pad_end.html","title":"Left justify strings","text":"<p>Source code</p>"},{"location":"man/ExprStr_pad_end.html#description","title":"Description","text":"<p>Return the string left justified in a string of length <code>width</code>.</p>"},{"location":"man/ExprStr_pad_end.html#usage","title":"Usage","text":"<pre><code>ExprStr_pad_end(width, fillchar = \" \")\n</code></pre>"},{"location":"man/ExprStr_pad_end.html#arguments","title":"Arguments","text":"<code>width</code>  Justify left to this length.  <code>fillchar</code>  Fill with this ASCII character."},{"location":"man/ExprStr_pad_end.html#details","title":"Details","text":"<p>Padding is done using the specified <code>fillchar</code>. The original string is returned if <code>width</code> is less than or equal to <code>len(s)</code>.</p>"},{"location":"man/ExprStr_pad_end.html#value","title":"Value","text":"<p>Expr of String</p>"},{"location":"man/ExprStr_pad_end.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(\"cow\", \"monkey\", NA, \"hippopotamus\"))\ndf$select(pl$col(\"a\")$str$pad_end(8, \"*\"))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a            \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 str          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 cow*****     \u2502\n#&gt; \u2502 monkey**     \u2502\n#&gt; \u2502 null         \u2502\n#&gt; \u2502 hippopotamus \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_pad_start.html","title":"Right justify strings","text":"<p>Source code</p>"},{"location":"man/ExprStr_pad_start.html#description","title":"Description","text":"<p>Return the string right justified in a string of length <code>width</code>.</p>"},{"location":"man/ExprStr_pad_start.html#usage","title":"Usage","text":"<pre><code>ExprStr_pad_start(width, fillchar = \" \")\n</code></pre>"},{"location":"man/ExprStr_pad_start.html#arguments","title":"Arguments","text":"<code>width</code>  Justify right to this length.  <code>fillchar</code>  Fill with this ASCII character."},{"location":"man/ExprStr_pad_start.html#details","title":"Details","text":"<p>Padding is done using the specified <code>fillchar</code>. The original string is returned if <code>width</code> is less than or equal to <code>len(s)</code>.</p>"},{"location":"man/ExprStr_pad_start.html#value","title":"Value","text":"<p>Expr of String</p>"},{"location":"man/ExprStr_pad_start.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(\"cow\", \"monkey\", NA, \"hippopotamus\"))\ndf$select(pl$col(\"a\")$str$pad_start(8, \"*\"))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a            \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 str          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 *****cow     \u2502\n#&gt; \u2502 **monkey     \u2502\n#&gt; \u2502 null         \u2502\n#&gt; \u2502 hippopotamus \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_parse_int.html","title":"Parse integers with base radix from strings","text":"<p>Source code</p>"},{"location":"man/ExprStr_parse_int.html#description","title":"Description","text":"<p>Parse integers with base 2 by default.</p>"},{"location":"man/ExprStr_parse_int.html#usage","title":"Usage","text":"<pre><code>ExprStr_parse_int(radix = 2, strict = TRUE)\n</code></pre>"},{"location":"man/ExprStr_parse_int.html#arguments","title":"Arguments","text":"<code>radix</code>  Positive integer which is the base of the string we are parsing. Default is 2.  <code>strict</code>  If <code>TRUE</code> (default), integer overflow will raise an error. Otherwise, they will be converted to <code>null</code>."},{"location":"man/ExprStr_parse_int.html#value","title":"Value","text":"<p>Expr: Series of dtype i32.</p>"},{"location":"man/ExprStr_parse_int.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(bin = c(\"110\", \"101\", \"010\"))\ndf$select(pl$col(\"bin\")$str$parse_int())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bin \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"bin\")$str$parse_int(10))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bin \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 110 \u2502\n#&gt; \u2502 101 \u2502\n#&gt; \u2502 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Convert to null if the string is not a valid integer when `strict = FALSE`\ndf = pl$DataFrame(x = c(\"1\", \"2\", \"foo\"))\ndf$select(pl$col(\"x\")$str$parse_int(10, FALSE))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_replace.html","title":"Replace first matching regex/literal substring with a new string value","text":"<p>Source code</p>"},{"location":"man/ExprStr_replace.html#description","title":"Description","text":"<p>Replace first matching regex/literal substring with a new string value</p>"},{"location":"man/ExprStr_replace.html#usage","title":"Usage","text":"<pre><code>ExprStr_replace(pattern, value, ..., literal = FALSE, n = 1L)\n</code></pre>"},{"location":"man/ExprStr_replace.html#arguments","title":"Arguments","text":"<code>pattern</code>  A character or something can be coerced to a string Expr of a valid regex pattern, compatible with the regex crate.  <code>value</code>  A character or an Expr of string that will replace the matched substring.  <code>\u2026</code>  Ignored.  <code>literal</code>  Logical. If <code>TRUE</code> (default), treat <code>pattern</code> as a literal string, not as a regular expression.  <code>n</code>  A number of matches to replace. Note that regex replacement with <code>n \\&gt; 1</code> not yet supported, so raise an error if <code>n \\&gt; 1</code> and <code>pattern</code> includes regex pattern and <code>literal = FALSE</code>."},{"location":"man/ExprStr_replace.html#details","title":"Details","text":"<p>To modify regular expression behaviour (such as case-sensitivity) with flags, use the inline <code>(?iLmsuxU)</code> syntax. See the regex crate\u2019s section on grouping and flags for additional information about the use of inline expression modifiers.</p>"},{"location":"man/ExprStr_replace.html#value","title":"Value","text":"<p>Expr of String type</p>"},{"location":"man/ExprStr_replace.html#capture-groups","title":"Capture groups","text":"<p>The dollar sign (<code>$</code>) is a special character related to capture groups. To refer to a literal dollar sign, use <code>$$</code> instead or set <code>literal</code> to <code>TRUE</code>.</p>"},{"location":"man/ExprStr_replace.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$str$replace_all()"},{"location":"man/ExprStr_replace.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(id = 1L:2L, text = c(\"123abc\", \"abc456\"))\ndf$with_columns(pl$col(\"text\")$str$replace(r\"(abc\\b)\", \"ABC\"))\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 id  \u2506 text   \u2502\n#&gt; \u2502 --- \u2506 ---    \u2502\n#&gt; \u2502 i32 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 123ABC \u2502\n#&gt; \u2502 2   \u2506 abc456 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Capture groups are supported.\n# Use `${1}` in the value string to refer to the first capture group in the pattern,\n# `${2}` to refer to the second capture group, and so on.\n# You can also use named capture groups.\ndf = pl$DataFrame(word = c(\"hat\", \"hut\"))\ndf$with_columns(\n  positional = pl$col(\"word\")$str$replace(\"h(.)t\", \"b${1}d\"),\n  named = pl$col(\"word\")$str$replace(\"h(?&lt;vowel&gt;.)t\", \"b${vowel}d\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 word \u2506 positional \u2506 named \u2502\n#&gt; \u2502 ---  \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 str  \u2506 str        \u2506 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 hat  \u2506 bad        \u2506 bad   \u2502\n#&gt; \u2502 hut  \u2506 bud        \u2506 bud   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Apply case-insensitive string replacement using the `(?i)` flag.\ndf = pl$DataFrame(\n  city = \"Philadelphia\",\n  season = c(\"Spring\", \"Summer\", \"Autumn\", \"Winter\"),\n  weather = c(\"Rainy\", \"Sunny\", \"Cloudy\", \"Snowy\")\n)\ndf$with_columns(\n  pl$col(\"weather\")$str$replace(\"(?i)foggy|rainy|cloudy|snowy\", \"Sunny\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 city         \u2506 season \u2506 weather \u2502\n#&gt; \u2502 ---          \u2506 ---    \u2506 ---     \u2502\n#&gt; \u2502 str          \u2506 str    \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Philadelphia \u2506 Spring \u2506 Sunny   \u2502\n#&gt; \u2502 Philadelphia \u2506 Summer \u2506 Sunny   \u2502\n#&gt; \u2502 Philadelphia \u2506 Autumn \u2506 Sunny   \u2502\n#&gt; \u2502 Philadelphia \u2506 Winter \u2506 Sunny   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_replace_all.html","title":"Replace all matching regex/literal substrings with a new string value","text":"<p>Source code</p>"},{"location":"man/ExprStr_replace_all.html#description","title":"Description","text":"<p>Replace all matching regex/literal substrings with a new string value</p>"},{"location":"man/ExprStr_replace_all.html#usage","title":"Usage","text":"<pre><code>ExprStr_replace_all(pattern, value, ..., literal = FALSE)\n</code></pre>"},{"location":"man/ExprStr_replace_all.html#arguments","title":"Arguments","text":"<code>pattern</code>  A character or something can be coerced to a string Expr of a valid regex pattern, compatible with the regex crate.  <code>value</code>  A character or an Expr of string that will replace the matched substring.  <code>\u2026</code>  Ignored.  <code>literal</code>  Logical. If <code>TRUE</code> (default), treat <code>pattern</code> as a literal string, not as a regular expression."},{"location":"man/ExprStr_replace_all.html#details","title":"Details","text":"<p>To modify regular expression behaviour (such as case-sensitivity) with flags, use the inline <code>(?iLmsuxU)</code> syntax. See the regex crate\u2019s section on grouping and flags for additional information about the use of inline expression modifiers.</p>"},{"location":"man/ExprStr_replace_all.html#value","title":"Value","text":"<p>Expr of String type</p>"},{"location":"man/ExprStr_replace_all.html#capture-groups","title":"Capture groups","text":"<p>The dollar sign (<code>$</code>) is a special character related to capture groups. To refer to a literal dollar sign, use <code>$$</code> instead or set <code>literal</code> to <code>TRUE</code>.</p>"},{"location":"man/ExprStr_replace_all.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$str$replace()"},{"location":"man/ExprStr_replace_all.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(id = 1L:2L, text = c(\"abcabc\", \"123a123\"))\ndf$with_columns(pl$col(\"text\")$str$replace_all(\"a\", \"-\"))\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 id  \u2506 text    \u2502\n#&gt; \u2502 --- \u2506 ---     \u2502\n#&gt; \u2502 i32 \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 -bc-bc  \u2502\n#&gt; \u2502 2   \u2506 123-123 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Capture groups are supported.\n# Use `${1}` in the value string to refer to the first capture group in the pattern,\n# `${2}` to refer to the second capture group, and so on.\n# You can also use named capture groups.\ndf = pl$DataFrame(word = c(\"hat\", \"hut\"))\ndf$with_columns(\n  positional = pl$col(\"word\")$str$replace_all(\"h(.)t\", \"b${1}d\"),\n  named = pl$col(\"word\")$str$replace_all(\"h(?&lt;vowel&gt;.)t\", \"b${vowel}d\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 word \u2506 positional \u2506 named \u2502\n#&gt; \u2502 ---  \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 str  \u2506 str        \u2506 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 hat  \u2506 bad        \u2506 bad   \u2502\n#&gt; \u2502 hut  \u2506 bud        \u2506 bud   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Apply case-insensitive string replacement using the `(?i)` flag.\ndf = pl$DataFrame(\n  city = \"Philadelphia\",\n  season = c(\"Spring\", \"Summer\", \"Autumn\", \"Winter\"),\n  weather = c(\"Rainy\", \"Sunny\", \"Cloudy\", \"Snowy\")\n)\ndf$with_columns(\n  pl$col(\"weather\")$str$replace_all(\n    \"(?i)foggy|rainy|cloudy|snowy\", \"Sunny\"\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 city         \u2506 season \u2506 weather \u2502\n#&gt; \u2502 ---          \u2506 ---    \u2506 ---     \u2502\n#&gt; \u2502 str          \u2506 str    \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Philadelphia \u2506 Spring \u2506 Sunny   \u2502\n#&gt; \u2502 Philadelphia \u2506 Summer \u2506 Sunny   \u2502\n#&gt; \u2502 Philadelphia \u2506 Autumn \u2506 Sunny   \u2502\n#&gt; \u2502 Philadelphia \u2506 Winter \u2506 Sunny   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_replace_many.html","title":"Use the aho-corasick algorithm to replace many matches","text":"<p>Source code</p>"},{"location":"man/ExprStr_replace_many.html#description","title":"Description","text":"<p>This function replaces several matches at once.</p>"},{"location":"man/ExprStr_replace_many.html#usage","title":"Usage","text":"<pre><code>ExprStr_replace_many(patterns, replace_with, ascii_case_insensitive = FALSE)\n</code></pre>"},{"location":"man/ExprStr_replace_many.html#arguments","title":"Arguments","text":"<code>patterns</code>  String patterns to search. Can be an Expr.  <code>replace_with</code>  A vector of strings used as replacements. If this is of length 1, then it is applied to all matches. Otherwise, it must be of same length as the <code>patterns</code> argument.  <code>ascii_case_insensitive</code>  Enable ASCII-aware case insensitive matching. When this option is enabled, searching will be performed without respect to case for ASCII letters (a-z and A-Z) only."},{"location":"man/ExprStr_replace_many.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprStr_replace_many.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  lyrics = c(\n    \"Everybody wants to rule the world\",\n    \"Tell me what you want, what you really really want\",\n    \"Can you feel the love tonight\"\n  )\n)\n\n# a replacement of length 1 is applied to all matches\ndf$with_columns(\n  remove_pronouns = pl$col(\"lyrics\")$str$replace_many(c(\"you\", \"me\"), \"\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 lyrics                            \u2506 remove_pronouns                   \u2502\n#&gt; \u2502 ---                               \u2506 ---                               \u2502\n#&gt; \u2502 str                               \u2506 str                               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Everybody wants to rule the worl\u2026 \u2506 Everybody wants to rule the worl\u2026 \u2502\n#&gt; \u2502 Tell me what you want, what you \u2026 \u2506 Tell  what  want, what  really r\u2026 \u2502\n#&gt; \u2502 Can you feel the love tonight     \u2506 Can  feel the love tonight        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># if there are more than one replacement, the patterns and replacements are\n# matched\ndf$with_columns(\n  fake_pronouns = pl$col(\"lyrics\")$str$replace_many(c(\"you\", \"me\"), c(\"foo\", \"bar\"))\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 lyrics                            \u2506 fake_pronouns                     \u2502\n#&gt; \u2502 ---                               \u2506 ---                               \u2502\n#&gt; \u2502 str                               \u2506 str                               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Everybody wants to rule the worl\u2026 \u2506 Everybody wants to rule the worl\u2026 \u2502\n#&gt; \u2502 Tell me what you want, what you \u2026 \u2506 Tell bar what foo want, what foo\u2026 \u2502\n#&gt; \u2502 Can you feel the love tonight     \u2506 Can foo feel the love tonight     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_reverse.html","title":"Returns string values in reversed order","text":"<p>Source code</p>"},{"location":"man/ExprStr_reverse.html#description","title":"Description","text":"<p>Returns string values in reversed order</p>"},{"location":"man/ExprStr_reverse.html#usage","title":"Usage","text":"<pre><code>ExprStr_reverse()\n</code></pre>"},{"location":"man/ExprStr_reverse.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprStr_reverse.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(text = c(\"foo\", \"bar\", NA))\ndf$with_columns(reversed = pl$col(\"text\")$str$reverse())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 text \u2506 reversed \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2502\n#&gt; \u2502 str  \u2506 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo  \u2506 oof      \u2502\n#&gt; \u2502 bar  \u2506 rab      \u2502\n#&gt; \u2502 null \u2506 null     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_slice.html","title":"Create subslices of the string values of a String Series","text":"<p>Source code</p>"},{"location":"man/ExprStr_slice.html#description","title":"Description","text":"<p>Create subslices of the string values of a String Series</p>"},{"location":"man/ExprStr_slice.html#usage","title":"Usage","text":"<pre><code>ExprStr_slice(offset, length = NULL)\n</code></pre>"},{"location":"man/ExprStr_slice.html#arguments","title":"Arguments","text":"<code>offset</code>  Start index. Negative indexing is supported.  <code>length</code>  Length of the slice. If <code>NULL</code> (default), the slice is taken to the end of the string."},{"location":"man/ExprStr_slice.html#value","title":"Value","text":"<p>Expr: Series of dtype String.</p>"},{"location":"man/ExprStr_slice.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(s = c(\"pear\", NA, \"papaya\", \"dragonfruit\"))\ndf$with_columns(\n  pl$col(\"s\")$str$slice(-3)$alias(\"s_sliced\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2506 s_sliced \u2502\n#&gt; \u2502 ---         \u2506 ---      \u2502\n#&gt; \u2502 str         \u2506 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 pear        \u2506 ear      \u2502\n#&gt; \u2502 null        \u2506 null     \u2502\n#&gt; \u2502 papaya      \u2506 aya      \u2502\n#&gt; \u2502 dragonfruit \u2506 uit      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_split.html","title":"Split the string by a substring","text":"<p>Source code</p>"},{"location":"man/ExprStr_split.html#description","title":"Description","text":"<p>Split the string by a substring</p>"},{"location":"man/ExprStr_split.html#usage","title":"Usage","text":"<pre><code>ExprStr_split(by, inclusive = FALSE)\n</code></pre>"},{"location":"man/ExprStr_split.html#arguments","title":"Arguments","text":"<code>by</code>  Substring to split by. Can be an Expr.  <code>inclusive</code>  If <code>TRUE</code>, include the split character/string in the results."},{"location":"man/ExprStr_split.html#value","title":"Value","text":"<p>List of String type</p>"},{"location":"man/ExprStr_split.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(s = c(\"foo bar\", \"foo-bar\", \"foo bar baz\"))\ndf$select(pl$col(\"s\")$str$split(by = \" \"))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s                     \u2502\n#&gt; \u2502 ---                   \u2502\n#&gt; \u2502 list[str]             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"foo\", \"bar\"]        \u2502\n#&gt; \u2502 [\"foo-bar\"]           \u2502\n#&gt; \u2502 [\"foo\", \"bar\", \"baz\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df = pl$DataFrame(\n  s = c(\"foo^bar\", \"foo_bar\", \"foo*bar*baz\"),\n  by = c(\"_\", \"_\", \"*\")\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2506 by  \u2502\n#&gt; \u2502 ---         \u2506 --- \u2502\n#&gt; \u2502 str         \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo^bar     \u2506 _   \u2502\n#&gt; \u2502 foo_bar     \u2506 _   \u2502\n#&gt; \u2502 foo*bar*baz \u2506 *   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"s\")$str$split(by = pl$col(\"by\"))$alias(\"split\"))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 split                 \u2502\n#&gt; \u2502 ---                   \u2502\n#&gt; \u2502 list[str]             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"foo^bar\"]           \u2502\n#&gt; \u2502 [\"foo\", \"bar\"]        \u2502\n#&gt; \u2502 [\"foo\", \"bar\", \"baz\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_split_exact.html","title":"Split the string by a substring using <code>n</code> splits","text":"<p>Source code</p>"},{"location":"man/ExprStr_split_exact.html#description","title":"Description","text":"<p>This results in a struct of <code>n+1</code> fields. If it cannot make <code>n</code> splits, the remaining field elements will be null.</p>"},{"location":"man/ExprStr_split_exact.html#usage","title":"Usage","text":"<pre><code>ExprStr_split_exact(by, n, inclusive = FALSE)\n</code></pre>"},{"location":"man/ExprStr_split_exact.html#arguments","title":"Arguments","text":"<code>by</code>  Substring to split by.  <code>n</code>  Number of splits to make.  <code>inclusive</code>  If <code>TRUE</code>, include the split character/string in the results."},{"location":"man/ExprStr_split_exact.html#value","title":"Value","text":"<p>Struct where each of n+1 fields is of String type</p>"},{"location":"man/ExprStr_split_exact.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(s = c(\"a_1\", NA, \"c\", \"d_4\"))\ndf$with_columns(\n  split = pl$col(\"s\")$str$split_exact(by = \"_\", 1),\n  split_inclusive = pl$col(\"s\")$str$split_exact(by = \"_\", 1, inclusive = TRUE)\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s    \u2506 split       \u2506 split_inclusive \u2502\n#&gt; \u2502 ---  \u2506 ---         \u2506 ---             \u2502\n#&gt; \u2502 str  \u2506 struct[2]   \u2506 struct[2]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a_1  \u2506 {\"a\",\"1\"}   \u2506 {\"a_\",\"1\"}      \u2502\n#&gt; \u2502 null \u2506 {null,null} \u2506 {null,null}     \u2502\n#&gt; \u2502 c    \u2506 {\"c\",null}  \u2506 {\"c\",null}      \u2502\n#&gt; \u2502 d_4  \u2506 {\"d\",\"4\"}   \u2506 {\"d_\",\"4\"}      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_splitn.html","title":"Split the string by a substring, restricted to returning at most <code>n</code> items","text":"<p>Source code</p>"},{"location":"man/ExprStr_splitn.html#description","title":"Description","text":"<p>If the number of possible splits is less than <code>n-1</code>, the remaining field elements will be null. If the number of possible splits is <code>n-1</code> or greater, the last (nth) substring will contain the remainder of the string.</p>"},{"location":"man/ExprStr_splitn.html#usage","title":"Usage","text":"<pre><code>ExprStr_splitn(by, n)\n</code></pre>"},{"location":"man/ExprStr_splitn.html#arguments","title":"Arguments","text":"<code>by</code>  Substring to split by.  <code>n</code>  Number of splits to make."},{"location":"man/ExprStr_splitn.html#value","title":"Value","text":"<p>Struct where each of <code>n</code> fields is of String type</p>"},{"location":"man/ExprStr_splitn.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(s = c(\"a_1\", NA, \"c\", \"d_4_e\"))\ndf$with_columns(\n  s1 = pl$col(\"s\")$str$splitn(by = \"_\", 1),\n  s2 = pl$col(\"s\")$str$splitn(by = \"_\", 2),\n  s3 = pl$col(\"s\")$str$splitn(by = \"_\", 3)\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s     \u2506 s1        \u2506 s2          \u2506 s3               \u2502\n#&gt; \u2502 ---   \u2506 ---       \u2506 ---         \u2506 ---              \u2502\n#&gt; \u2502 str   \u2506 struct[1] \u2506 struct[2]   \u2506 struct[3]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a_1   \u2506 {\"a_1\"}   \u2506 {\"a\",\"1\"}   \u2506 {\"a\",\"1\",null}   \u2502\n#&gt; \u2502 null  \u2506 {null}    \u2506 {null,null} \u2506 {null,null,null} \u2502\n#&gt; \u2502 c     \u2506 {\"c\"}     \u2506 {\"c\",null}  \u2506 {\"c\",null,null}  \u2502\n#&gt; \u2502 d_4_e \u2506 {\"d_4_e\"} \u2506 {\"d\",\"4_e\"} \u2506 {\"d\",\"4\",\"e\"}    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_starts_with.html","title":"Check if string starts with a regex","text":"<p>Source code</p>"},{"location":"man/ExprStr_starts_with.html#description","title":"Description","text":"<p>Check if string values starts with a substring.</p>"},{"location":"man/ExprStr_starts_with.html#usage","title":"Usage","text":"<pre><code>ExprStr_starts_with(sub)\n</code></pre>"},{"location":"man/ExprStr_starts_with.html#arguments","title":"Arguments","text":"<code>sub</code>  Prefix substring or Expr."},{"location":"man/ExprStr_starts_with.html#details","title":"Details","text":"<p>See also <code>$str$contains()</code> and <code>$str$ends_with()</code>.</p>"},{"location":"man/ExprStr_starts_with.html#value","title":"Value","text":"<p>Expr of Boolean data type</p>"},{"location":"man/ExprStr_starts_with.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(fruits = c(\"apple\", \"mango\", NA))\ndf$select(\n  pl$col(\"fruits\"),\n  pl$col(\"fruits\")$str$starts_with(\"app\")$alias(\"has_suffix\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 has_suffix \u2502\n#&gt; \u2502 ---    \u2506 ---        \u2502\n#&gt; \u2502 str    \u2506 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 true       \u2502\n#&gt; \u2502 mango  \u2506 false      \u2502\n#&gt; \u2502 null   \u2506 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_strip_chars.html","title":"Strip leading and trailing characters","text":"<p>Source code</p>"},{"location":"man/ExprStr_strip_chars.html#description","title":"Description","text":"<p>Remove leading and trailing characters.</p>"},{"location":"man/ExprStr_strip_chars.html#usage","title":"Usage","text":"<pre><code>ExprStr_strip_chars(matches = NULL)\n</code></pre>"},{"location":"man/ExprStr_strip_chars.html#arguments","title":"Arguments","text":"<code>matches</code>  The set of characters to be removed. All combinations of this set of characters will be stripped. If <code>NULL</code> (default), all whitespace is removed instead. This can be an Expr."},{"location":"man/ExprStr_strip_chars.html#details","title":"Details","text":"<p>This function will not strip any chars beyond the first char not matched. <code>strip_chars()</code> removes characters at the beginning and the end of the string. Use <code>strip_chars_start()</code> and <code>strip_chars_end()</code> to remove characters only from left and right respectively.</p>"},{"location":"man/ExprStr_strip_chars.html#value","title":"Value","text":"<p>Expr of String lowercase chars</p>"},{"location":"man/ExprStr_strip_chars.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(\" hello\", \"\\tworld\"))\ndf$select(pl$col(\"foo\")$str$strip_chars())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo   \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 hello \u2502\n#&gt; \u2502 world \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"foo\")$str$strip_chars(\" hel rld\"))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 o   \u2502\n#&gt; \u2502    wo  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_strip_chars_end.html","title":"Strip trailing characters","text":"<p>Source code</p>"},{"location":"man/ExprStr_strip_chars_end.html#description","title":"Description","text":"<p>Remove trailing characters.</p>"},{"location":"man/ExprStr_strip_chars_end.html#usage","title":"Usage","text":"<pre><code>ExprStr_strip_chars_end(matches = NULL)\n</code></pre>"},{"location":"man/ExprStr_strip_chars_end.html#arguments","title":"Arguments","text":"<code>matches</code>  The set of characters to be removed. All combinations of this set of characters will be stripped. If <code>NULL</code> (default), all whitespace is removed instead. This can be an Expr."},{"location":"man/ExprStr_strip_chars_end.html#details","title":"Details","text":"<p>This function will not strip any chars beyond the first char not matched. <code>strip_chars_end()</code> removes characters at the end of the string only. Use <code>strip_chars()</code> and <code>strip_chars_start()</code> to remove characters from the left and right or only from the left respectively.</p>"},{"location":"man/ExprStr_strip_chars_end.html#value","title":"Value","text":"<p>Expr of String lowercase chars</p>"},{"location":"man/ExprStr_strip_chars_end.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(\" hello\", \"\\tworld\"))\ndf$select(pl$col(\"foo\")$str$strip_chars_end(\" hel\\trld\"))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo    \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502  hello \u2502\n#&gt; \u2502    wo     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"foo\")$str$strip_chars_end(\"rldhel\\t \"))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo    \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502  hello \u2502\n#&gt; \u2502    wo     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_strip_chars_start.html","title":"Strip leading characters","text":"<p>Source code</p>"},{"location":"man/ExprStr_strip_chars_start.html#description","title":"Description","text":"<p>Remove leading characters.</p>"},{"location":"man/ExprStr_strip_chars_start.html#usage","title":"Usage","text":"<pre><code>ExprStr_strip_chars_start(matches = NULL)\n</code></pre>"},{"location":"man/ExprStr_strip_chars_start.html#arguments","title":"Arguments","text":"<code>matches</code>  The set of characters to be removed. All combinations of this set of characters will be stripped. If <code>NULL</code> (default), all whitespace is removed instead. This can be an Expr."},{"location":"man/ExprStr_strip_chars_start.html#details","title":"Details","text":"<p>This function will not strip any chars beyond the first char not matched. <code>strip_chars_start()</code> removes characters at the beginning of the string only. Use <code>strip_chars()</code> and <code>strip_chars_end()</code> to remove characters from the left and right or only from the right respectively.</p>"},{"location":"man/ExprStr_strip_chars_start.html#value","title":"Value","text":"<p>Expr of String lowercase chars</p>"},{"location":"man/ExprStr_strip_chars_start.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(\" hello\", \"\\tworld\"))\ndf$select(pl$col(\"foo\")$str$strip_chars_start(\" hel rld\"))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo   \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 o     \u2502\n#&gt; \u2502    world \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_strptime.html","title":"Convert a String column into a Date/Datetime/Time column.","text":"<p>Source code</p>"},{"location":"man/ExprStr_strptime.html#description","title":"Description","text":"<p>Similar to the <code>strptime()</code> function.</p>"},{"location":"man/ExprStr_strptime.html#usage","title":"Usage","text":"<pre><code>ExprStr_strptime(\n  dtype,\n  format = NULL,\n  ...,\n  strict = TRUE,\n  exact = TRUE,\n  cache = TRUE,\n  ambiguous = \"raise\"\n)\n</code></pre>"},{"location":"man/ExprStr_strptime.html#arguments","title":"Arguments","text":"<code>dtype</code>  The data type to convert into. Can be either <code>pl$Date</code>, <code>pl$Datetime()</code>, or <code>pl$Time</code>.  <code>format</code>  Format to use for conversion. Refer to the chrono crate documentation for the full specification. Example: <code>\u201c%Y-%m-%d %H:%M:%S\u201d</code>. If <code>NULL</code> (default), the format is inferred from the data. Notice that time zone <code>%Z</code> is not supported and will just ignore timezones. Numeric time zones like <code>%z</code> or <code>%:z</code> are supported.  <code>\u2026</code>  Not used.  <code>strict</code>  If <code>TRUE</code> (default), raise an error if a single string cannot be parsed. If <code>FALSE</code>, produce a polars <code>null</code>.  <code>exact</code>  If <code>TRUE</code> (default), require an exact format match. If <code>FALSE</code>, allow the format to match anywhere in the target string. Conversion to the Time type is always exact. Note that using <code>exact = FALSE</code> introduces a performance penalty - cleaning your data beforehand will almost certainly be more performant.  <code>cache</code>  Use a cache of unique, converted dates to apply the datetime conversion.  <code>ambiguous</code>   Determine how to deal with ambiguous datetimes:  <ul> <li> <code>\u201craise\u201d</code> (default): throw an error  </li> <li> <code>\u201cearliest\u201d</code>: use the earliest datetime  </li> <li> <code>\u201clatest\u201d</code>: use the latest datetime  </li> <li> <code>\u201cnull\u201d</code>: return a null value  </li> </ul>"},{"location":"man/ExprStr_strptime.html#details","title":"Details","text":"<p>When parsing a Datetime the column precision will be inferred from the format string, if given, e.g.: <code>\u201c%F %T%.3f\u201d</code> =&gt; <code>pl$Datetime(\"ms\")</code>. If no fractional second component is found then the default is <code>\u201cus\u201d</code> (microsecond).</p>"},{"location":"man/ExprStr_strptime.html#value","title":"Value","text":"<p>Expr of Date, Datetime or Time type</p>"},{"location":"man/ExprStr_strptime.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$str$to_date() <li> <code>\\$str$to_datetime() <li> <code>\\$str$to_time()"},{"location":"man/ExprStr_strptime.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Dealing with a consistent format\ns = as_polars_series(c(\"2020-01-01 01:00Z\", \"2020-01-01 02:00Z\"))\n\ns$str$strptime(pl$Datetime(), \"%Y-%m-%d %H:%M%#z\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [datetime[\u03bcs, UTC]]\n#&gt; [\n#&gt;  2020-01-01 01:00:00 UTC\n#&gt;  2020-01-01 02:00:00 UTC\n#&gt; ]\n</code></pre> <pre><code># Auto infer format\ns$str$strptime(pl$Datetime())\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [datetime[\u03bcs, UTC]]\n#&gt; [\n#&gt;  2020-01-01 01:00:00 UTC\n#&gt;  2020-01-01 02:00:00 UTC\n#&gt; ]\n</code></pre> <pre><code># Datetime with timezone is interpreted as UTC timezone\nas_polars_series(\"2020-01-01T01:00:00+09:00\")$str$strptime(pl$Datetime())\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[\u03bcs, UTC]]\n#&gt; [\n#&gt;  2019-12-31 16:00:00 UTC\n#&gt; ]\n</code></pre> <pre><code># Dealing with different formats.\ns = as_polars_series(\n  c(\n    \"2021-04-22\",\n    \"2022-01-04 00:00:00\",\n    \"01/31/22\",\n    \"Sun Jul  8 00:34:60 2001\"\n  ),\n  \"date\"\n)\n\ns$to_frame()$select(\n  pl$coalesce(\n    pl$col(\"date\")$str$strptime(pl$Date, \"%F\", strict = FALSE),\n    pl$col(\"date\")$str$strptime(pl$Date, \"%F %T\", strict = FALSE),\n    pl$col(\"date\")$str$strptime(pl$Date, \"%D\", strict = FALSE),\n    pl$col(\"date\")$str$strptime(pl$Date, \"%c\", strict = FALSE)\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 date       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-04-22 \u2502\n#&gt; \u2502 2022-01-04 \u2502\n#&gt; \u2502 2022-01-31 \u2502\n#&gt; \u2502 2001-07-08 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Ignore invalid time\ns = as_polars_series(\n  c(\n    \"2023-01-01 11:22:33 -0100\",\n    \"2023-01-01 11:22:33 +0300\",\n    \"invalid time\"\n  )\n)\n\ns$str$strptime(\n  pl$Datetime(\"ns\"),\n  format = \"%Y-%m-%d %H:%M:%S %z\",\n  strict = FALSE\n)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [datetime[ns, UTC]]\n#&gt; [\n#&gt;  2023-01-01 12:22:33 UTC\n#&gt;  2023-01-01 08:22:33 UTC\n#&gt;  null\n#&gt; ]\n</code></pre>"},{"location":"man/ExprStr_to_date.html","title":"Convert a String column into a Date column","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_date.html#description","title":"Description","text":"<p>Convert a String column into a Date column</p>"},{"location":"man/ExprStr_to_date.html#usage","title":"Usage","text":"<pre><code>ExprStr_to_date(format = NULL, ..., strict = TRUE, exact = TRUE, cache = TRUE)\n</code></pre>"},{"location":"man/ExprStr_to_date.html#arguments","title":"Arguments","text":"<code>format</code>  Format to use for conversion. Refer to the chrono crate documentation for the full specification. Example: <code>\u201c%Y-%m-%d %H:%M:%S\u201d</code>. If <code>NULL</code> (default), the format is inferred from the data. Notice that time zone <code>%Z</code> is not supported and will just ignore timezones. Numeric time zones like <code>%z</code> or <code>%:z</code> are supported.  <code>\u2026</code>  Not used.  <code>strict</code>  If <code>TRUE</code> (default), raise an error if a single string cannot be parsed. If <code>FALSE</code>, produce a polars <code>null</code>.  <code>exact</code>  If <code>TRUE</code> (default), require an exact format match. If <code>FALSE</code>, allow the format to match anywhere in the target string. Conversion to the Time type is always exact. Note that using <code>exact = FALSE</code> introduces a performance penalty - cleaning your data beforehand will almost certainly be more performant.  <code>cache</code>  Use a cache of unique, converted dates to apply the datetime conversion."},{"location":"man/ExprStr_to_date.html#format","title":"Format","text":"<p>Format to use for conversion. Refer to the chrono crate documentation for the full specification. Example: <code>\u201c%Y-%m-%d\u201d</code>. If <code>NULL</code> (default), the format is inferred from the data.</p>"},{"location":"man/ExprStr_to_date.html#value","title":"Value","text":"<p>Expr of Date type</p>"},{"location":"man/ExprStr_to_date.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$str$strptime()"},{"location":"man/ExprStr_to_date.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = as_polars_series(c(\"2020/01/01\", \"2020/02/01\", \"2020/03/01\"))\n\ns$str$to_date()\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [date]\n#&gt; [\n#&gt;  2020-01-01\n#&gt;  2020-02-01\n#&gt;  2020-03-01\n#&gt; ]\n</code></pre> <pre><code># by default, this errors if some values cannot be converted\ns = as_polars_series(c(\"2020/01/01\", \"2020 02 01\", \"2020-03-01\"))\ntry(s$str$to_date())\n</code></pre> <pre><code>#&gt; Error : Execution halted with the following contexts\n#&gt;    0: In R: in $select()\n#&gt;    0: During function call [.main()]\n#&gt;    1: Encountered the following error in Rust-Polars:\n#&gt;          conversion from `str` to `date` failed in column '' for 1 out of 3 values: [\"2020 02 01\"]\n#&gt; \n#&gt;       You might want to try:\n#&gt;       - setting `strict=False` to set values that cannot be converted to `null`\n#&gt;       - using `str.strptime`, `str.to_date`, or `str.to_datetime` and providing a format string\n</code></pre> <pre><code>s$str$to_date(strict = FALSE)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [date]\n#&gt; [\n#&gt;  2020-01-01\n#&gt;  null\n#&gt;  2020-03-01\n#&gt; ]\n</code></pre>"},{"location":"man/ExprStr_to_datetime.html","title":"Convert a String column into a Datetime column","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_datetime.html#description","title":"Description","text":"<p>Convert a String column into a Datetime column</p>"},{"location":"man/ExprStr_to_datetime.html#usage","title":"Usage","text":"<pre><code>ExprStr_to_datetime(\n  format = NULL,\n  ...,\n  time_unit = NULL,\n  time_zone = NULL,\n  strict = TRUE,\n  exact = TRUE,\n  cache = TRUE,\n  ambiguous = \"raise\"\n)\n</code></pre>"},{"location":"man/ExprStr_to_datetime.html#arguments","title":"Arguments","text":"<code>format</code>  Format to use for conversion. Refer to the chrono crate documentation for the full specification. Example: <code>\u201c%Y-%m-%d %H:%M:%S\u201d</code>. If <code>NULL</code> (default), the format is inferred from the data. Notice that time zone <code>%Z</code> is not supported and will just ignore timezones. Numeric time zones like <code>%z</code> or <code>%:z</code> are supported.  <code>\u2026</code>  Not used.  <code>time_unit</code>  Unit of time for the resulting Datetime column. If <code>NULL</code> (default), the time unit is inferred from the format string if given, e.g.: <code>\u201c%F %T%.3f\u201d</code> =\\&gt; <code>pl$Datetime(\"ms\")</code>. If no fractional second component is found, the default is <code>\u201cus\u201d</code> (microsecond).  <code>time_zone</code>  for the resulting Datetime column.  <code>strict</code>  If <code>TRUE</code> (default), raise an error if a single string cannot be parsed. If <code>FALSE</code>, produce a polars <code>null</code>.  <code>exact</code>  If <code>TRUE</code> (default), require an exact format match. If <code>FALSE</code>, allow the format to match anywhere in the target string. Note that using <code>exact = FALSE</code> introduces a performance penalty - cleaning your data beforehand will almost certainly be more performant.  <code>cache</code>  Use a cache of unique, converted dates to apply the datetime conversion.  <code>ambiguous</code>   Determine how to deal with ambiguous datetimes:  <ul> <li> <code>\u201craise\u201d</code> (default): throw an error  </li> <li> <code>\u201cearliest\u201d</code>: use the earliest datetime  </li> <li> <code>\u201clatest\u201d</code>: use the latest datetime  </li> <li> <code>\u201cnull\u201d</code>: return a null value  </li> </ul>"},{"location":"man/ExprStr_to_datetime.html#value","title":"Value","text":"<p>Expr of Datetime type</p>"},{"location":"man/ExprStr_to_datetime.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$str$strptime()"},{"location":"man/ExprStr_to_datetime.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = as_polars_series(c(\"2020-01-01 01:00Z\", \"2020-01-01 02:00Z\"))\n\ns$str$to_datetime(\"%Y-%m-%d %H:%M%#z\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [datetime[\u03bcs, UTC]]\n#&gt; [\n#&gt;  2020-01-01 01:00:00 UTC\n#&gt;  2020-01-01 02:00:00 UTC\n#&gt; ]\n</code></pre> <pre><code>s$str$to_datetime(time_unit = \"ms\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [datetime[ms, UTC]]\n#&gt; [\n#&gt;  2020-01-01 01:00:00 UTC\n#&gt;  2020-01-01 02:00:00 UTC\n#&gt; ]\n</code></pre>"},{"location":"man/ExprStr_to_lowercase.html","title":"Convert a string to lowercase","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_lowercase.html#description","title":"Description","text":"<p>Transform to lowercase variant.</p>"},{"location":"man/ExprStr_to_lowercase.html#usage","title":"Usage","text":"<pre><code>ExprStr_to_lowercase()\n</code></pre>"},{"location":"man/ExprStr_to_lowercase.html#value","title":"Value","text":"<p>Expr of String lowercase chars</p>"},{"location":"man/ExprStr_to_lowercase.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(c(\"A\", \"b\", \"c\", \"1\", NA))$str$to_lowercase()$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [str]\n#&gt; [\n#&gt;  \"a\"\n#&gt;  \"b\"\n#&gt;  \"c\"\n#&gt;  \"1\"\n#&gt;  null\n#&gt; ]\n</code></pre>"},{"location":"man/ExprStr_to_time.html","title":"Convert a String column into a Time column","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_time.html#description","title":"Description","text":"<p>Convert a String column into a Time column</p>"},{"location":"man/ExprStr_to_time.html#usage","title":"Usage","text":"<pre><code>ExprStr_to_time(format = NULL, ..., strict = TRUE, cache = TRUE)\n</code></pre>"},{"location":"man/ExprStr_to_time.html#arguments","title":"Arguments","text":"<code>format</code>  Format to use for conversion. Refer to the chrono crate documentation for the full specification. Example: <code>\u201c%Y-%m-%d %H:%M:%S\u201d</code>. If <code>NULL</code> (default), the format is inferred from the data. Notice that time zone <code>%Z</code> is not supported and will just ignore timezones. Numeric time zones like <code>%z</code> or <code>%:z</code> are supported.  <code>\u2026</code>  Not used.  <code>strict</code>  If <code>TRUE</code> (default), raise an error if a single string cannot be parsed. If <code>FALSE</code>, produce a polars <code>null</code>.  <code>cache</code>  Use a cache of unique, converted dates to apply the datetime conversion."},{"location":"man/ExprStr_to_time.html#format","title":"Format","text":"<p>Format to use for conversion. Refer to the chrono crate documentation for the full specification. Example: <code>\u201c%H:%M:%S\u201d</code>. If <code>NULL</code> (default), the format is inferred from the data.</p>"},{"location":"man/ExprStr_to_time.html#value","title":"Value","text":"<p>Expr of Time type</p>"},{"location":"man/ExprStr_to_time.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$str$strptime()"},{"location":"man/ExprStr_to_time.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = as_polars_series(c(\"01:00\", \"02:00\", \"03:00\"))\n\ns$str$to_time(\"%H:%M\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [time]\n#&gt; [\n#&gt;  01:00:00\n#&gt;  02:00:00\n#&gt;  03:00:00\n#&gt; ]\n</code></pre>"},{"location":"man/ExprStr_to_titlecase.html","title":"Convert a string to titlecase","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_titlecase.html#description","title":"Description","text":"<p>Transform to titlecase variant.</p>"},{"location":"man/ExprStr_to_titlecase.html#usage","title":"Usage","text":"<pre><code>ExprStr_to_titlecase()\n</code></pre>"},{"location":"man/ExprStr_to_titlecase.html#details","title":"Details","text":"<p>This method is only available with the \"nightly\" feature. See <code>polars_info()</code> for more details.</p>"},{"location":"man/ExprStr_to_titlecase.html#value","title":"Value","text":"<p>Expr of String titlecase chars</p>"},{"location":"man/ExprStr_to_titlecase.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\npl$lit(c(\"hello there\", \"HI, THERE\", NA))$str$to_titlecase()$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [str]\n#&gt; [\n#&gt;  \"Hello There\"\n#&gt;  \"Hi, There\"\n#&gt;  null\n#&gt; ]\n</code></pre>"},{"location":"man/ExprStr_to_uppercase.html","title":"Convert a string to uppercase","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_uppercase.html#description","title":"Description","text":"<p>Transform to uppercase variant.</p>"},{"location":"man/ExprStr_to_uppercase.html#usage","title":"Usage","text":"<pre><code>ExprStr_to_uppercase()\n</code></pre>"},{"location":"man/ExprStr_to_uppercase.html#value","title":"Value","text":"<p>Expr of String uppercase chars</p>"},{"location":"man/ExprStr_to_uppercase.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(c(\"A\", \"b\", \"c\", \"1\", NA))$str$to_uppercase()$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [str]\n#&gt; [\n#&gt;  \"A\"\n#&gt;  \"B\"\n#&gt;  \"C\"\n#&gt;  \"1\"\n#&gt;  null\n#&gt; ]\n</code></pre>"},{"location":"man/ExprStr_zfill.html","title":"Fills the string with zeroes.","text":"<p>Source code</p>"},{"location":"man/ExprStr_zfill.html#description","title":"Description","text":"<p>Add zeroes to a string until it reaches <code>n</code> characters. If the number of characters is already greater than <code>n</code>, the string is not modified.</p>"},{"location":"man/ExprStr_zfill.html#usage","title":"Usage","text":"<pre><code>ExprStr_zfill(alignment)\n</code></pre>"},{"location":"man/ExprStr_zfill.html#arguments","title":"Arguments","text":"<code>alignment</code>  Fill the value up to this length. This can be an Expr or something coercible to an Expr. Strings are parsed as column names."},{"location":"man/ExprStr_zfill.html#details","title":"Details","text":"<p>Return a copy of the string left filled with ASCII \u20180\u2019 digits to make a string of length width.</p> <p>A leading sign prefix (\u2018+\u2019/\u2018-\u2019) is handled by inserting the padding after the sign character rather than before. The original string is returned if width is less than or equal to <code>len(s)</code>.</p>"},{"location":"man/ExprStr_zfill.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprStr_zfill.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nsome_floats_expr = pl$lit(c(0, 10, -5, 5))\n\n# cast to String and ljust alignment = 5, and view as R char vector\nsome_floats_expr$cast(pl$String)$str$zfill(5)$to_r()\n</code></pre> <pre><code>#&gt; [1] \"000.0\" \"010.0\" \"-05.0\" \"005.0\"\n</code></pre> <pre><code># cast to int and the to utf8 and then ljust alignment = 5, and view as R\n# char vector\nsome_floats_expr$cast(pl$Int64)$cast(pl$String)$str$zfill(5)$to_r()\n</code></pre> <pre><code>#&gt; [1] \"00000\" \"00010\" \"-0005\" \"00005\"\n</code></pre>"},{"location":"man/ExprStruct_field.html","title":"field","text":"<p>Source code</p>"},{"location":"man/ExprStruct_field.html#description","title":"Description","text":"<p>Retrieve a <code>Struct</code> field as a new Series. By default base 2.</p>"},{"location":"man/ExprStruct_field.html#usage","title":"Usage","text":"<pre><code>ExprStruct_field(name)\n</code></pre>"},{"location":"man/ExprStruct_field.html#arguments","title":"Arguments","text":"<code>name</code>  string, the Name of the struct field to retrieve."},{"location":"man/ExprStruct_field.html#value","title":"Value","text":"<p>Expr: Series of same and name selected field.</p>"},{"location":"man/ExprStruct_field.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  aaa = c(1, 2),\n  bbb = c(\"ab\", \"cd\"),\n  ccc = c(TRUE, NA),\n  ddd = list(c(1, 2), 3)\n)$select(\n  pl$struct(pl$all())$alias(\"struct_col\")\n)\n# struct field into a new Series\ndf$select(\n  pl$col(\"struct_col\")$struct$field(\"bbb\"),\n  pl$col(\"struct_col\")$struct$field(\"ddd\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bbb \u2506 ddd        \u2502\n#&gt; \u2502 --- \u2506 ---        \u2502\n#&gt; \u2502 str \u2506 list[f64]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 ab  \u2506 [1.0, 2.0] \u2502\n#&gt; \u2502 cd  \u2506 [3.0]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStruct_rename_fields.html","title":"rename fields","text":"<p>Source code</p>"},{"location":"man/ExprStruct_rename_fields.html#description","title":"Description","text":"<p>Rename the fields of the struct. By default base 2.</p>"},{"location":"man/ExprStruct_rename_fields.html#usage","title":"Usage","text":"<pre><code>ExprStruct_rename_fields(names)\n</code></pre>"},{"location":"man/ExprStruct_rename_fields.html#arguments","title":"Arguments","text":"<code>names</code>  char vec or list of strings given in the same order as the struct\u2019s fields. Providing fewer names will drop the latter fields. Providing too many names is ignored."},{"location":"man/ExprStruct_rename_fields.html#value","title":"Value","text":"<p>Expr: struct-series with new names for the fields</p>"},{"location":"man/ExprStruct_rename_fields.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  aaa = 1:2,\n  bbb = c(\"ab\", \"cd\"),\n  ccc = c(TRUE, NA),\n  ddd = list(1:2, 3L)\n)$select(\n  pl$struct(pl$all())$alias(\"struct_col\")\n)$select(\n  pl$col(\"struct_col\")$struct$rename_fields(c(\"www\", \"xxx\", \"yyy\", \"zzz\"))\n)\ndf$unnest()\n</code></pre> <pre><code>#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 www \u2506 xxx \u2506 yyy  \u2506 zzz       \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2506 ---       \u2502\n#&gt; \u2502 i32 \u2506 str \u2506 bool \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 ab  \u2506 true \u2506 [1, 2]    \u2502\n#&gt; \u2502 2   \u2506 cd  \u2506 null \u2506 [3]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_abs.html","title":"Compute the absolute values","text":"<p>Source code</p>"},{"location":"man/Expr_abs.html#description","title":"Description","text":"<p>Compute the absolute values</p>"},{"location":"man/Expr_abs.html#usage","title":"Usage","text":"<pre><code>Expr_abs()\n</code></pre>"},{"location":"man/Expr_abs.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_abs.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = -1:1)$\n  with_columns(abs = pl$col(\"a\")$abs())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 abs \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1  \u2506 1   \u2502\n#&gt; \u2502 0   \u2506 0   \u2502\n#&gt; \u2502 1   \u2506 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_add.html","title":"Add two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_add.html#description","title":"Description","text":"<p>Method equivalent of addition operator <code>expr + other</code>.</p>"},{"location":"man/Expr_add.html#usage","title":"Usage","text":"<pre><code>Expr_add(other)\n</code></pre>"},{"location":"man/Expr_add.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_add.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_add.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> </ul>"},{"location":"man/Expr_add.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = 1:5)\n\ndf$with_columns(\n  `x+int` = pl$col(\"x\")$add(2L),\n  `x+expr` = pl$col(\"x\")$add(pl$col(\"x\")$cum_prod())\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 x+int \u2506 x+expr \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---    \u2502\n#&gt; \u2502 i32 \u2506 i32   \u2506 i64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 3     \u2506 2      \u2502\n#&gt; \u2502 2   \u2506 4     \u2506 4      \u2502\n#&gt; \u2502 3   \u2506 5     \u2506 9      \u2502\n#&gt; \u2502 4   \u2506 6     \u2506 28     \u2502\n#&gt; \u2502 5   \u2506 7     \u2506 125    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df = pl$DataFrame(\n  x = c(\"a\", \"d\", \"g\"),\n  y = c(\"b\", \"e\", \"h\"),\n  z = c(\"c\", \"f\", \"i\")\n)\n\ndf$with_columns(\n  pl$col(\"x\")$add(pl$col(\"y\"))$add(pl$col(\"z\"))$alias(\"xyz\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2506 z   \u2506 xyz \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 str \u2506 str \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 abc \u2502\n#&gt; \u2502 d   \u2506 e   \u2506 f   \u2506 def \u2502\n#&gt; \u2502 g   \u2506 h   \u2506 i   \u2506 ghi \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_agg_groups.html","title":"Aggregate groups","text":"<p>Source code</p>"},{"location":"man/Expr_agg_groups.html#description","title":"Description","text":"<p>Get the group indexes of the group by operation. Should be used in aggregation context only.</p>"},{"location":"man/Expr_agg_groups.html#usage","title":"Usage","text":"<pre><code>Expr_agg_groups()\n</code></pre>"},{"location":"man/Expr_agg_groups.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_agg_groups.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(\n  group = c(\"one\", \"one\", \"one\", \"two\", \"two\", \"two\"),\n  value = c(94, 95, 96, 97, 97, 99)\n))\ndf$group_by(\"group\", maintain_order = TRUE)$agg(pl$col(\"value\")$agg_groups())\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2506 value     \u2502\n#&gt; \u2502 ---   \u2506 ---       \u2502\n#&gt; \u2502 str   \u2506 list[u32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one   \u2506 [0, 1, 2] \u2502\n#&gt; \u2502 two   \u2506 [3, 4, 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_alias.html","title":"Rename Expr output","text":"<p>Source code</p>"},{"location":"man/Expr_alias.html#description","title":"Description","text":"<p>Rename the output of an expression.</p>"},{"location":"man/Expr_alias.html#usage","title":"Usage","text":"<pre><code>Expr_alias(name)\n</code></pre>"},{"location":"man/Expr_alias.html#arguments","title":"Arguments","text":"<code>name</code>  New name of output"},{"location":"man/Expr_alias.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_alias.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$col(\"bob\")$alias(\"alice\")\n</code></pre> <pre><code>#&gt; polars Expr: col(\"bob\").alias(\"alice\")\n</code></pre>"},{"location":"man/Expr_all.html","title":"Apply logical AND on a column","text":"<p>Source code</p>"},{"location":"man/Expr_all.html#description","title":"Description","text":"<p>Check if all values in a Boolean column are <code>TRUE</code>. This method is an expression - not to be confused with <code>pl$all()</code> which is a function to select all columns.</p>"},{"location":"man/Expr_all.html#usage","title":"Usage","text":"<pre><code>Expr_all(drop_nulls = TRUE)\n</code></pre>"},{"location":"man/Expr_all.html#arguments","title":"Arguments","text":"<code>drop_nulls</code>  Logical. Default TRUE, as name says."},{"location":"man/Expr_all.html#value","title":"Value","text":"<p>Boolean literal</p>"},{"location":"man/Expr_all.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  all = c(TRUE, TRUE),\n  any = c(TRUE, FALSE),\n  none = c(FALSE, FALSE)\n)$select(\n  # the first $all() selects all columns, the second one applies the AND\n  # logical on the values\n  pl$all()$all()\n)\n</code></pre> <pre><code>#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all  \u2506 any   \u2506 none  \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2506 false \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_and.html","title":"Apply logical AND on two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_and.html#description","title":"Description","text":"<p>Combine two boolean expressions with AND.</p>"},{"location":"man/Expr_and.html#usage","title":"Usage","text":"<pre><code>Expr_and(other)\n</code></pre>"},{"location":"man/Expr_and.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_and.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_and.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(TRUE) &amp; TRUE\n</code></pre> <pre><code>#&gt; polars Expr: [(true) &amp; (true)]\n</code></pre> <pre><code>pl$lit(TRUE)$and(pl$lit(TRUE))\n</code></pre> <pre><code>#&gt; polars Expr: [(true) &amp; (true)]\n</code></pre>"},{"location":"man/Expr_any.html","title":"Apply logical OR on a column","text":"<p>Source code</p>"},{"location":"man/Expr_any.html#description","title":"Description","text":"<p>Check if any boolean value in a Boolean column is <code>TRUE</code>.</p>"},{"location":"man/Expr_any.html#usage","title":"Usage","text":"<pre><code>Expr_any(drop_nulls = TRUE)\n</code></pre>"},{"location":"man/Expr_any.html#arguments","title":"Arguments","text":"<code>drop_nulls</code>  Logical. Default TRUE, as name says."},{"location":"man/Expr_any.html#value","title":"Value","text":"<p>Boolean literal</p>"},{"location":"man/Expr_any.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  all = c(TRUE, TRUE),\n  any = c(TRUE, FALSE),\n  none = c(FALSE, FALSE)\n)$select(\n  pl$all()$any()\n)\n</code></pre> <pre><code>#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all  \u2506 any  \u2506 none  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 bool \u2506 bool \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2506 true \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_append.html","title":"Append expressions","text":"<p>Source code</p>"},{"location":"man/Expr_append.html#description","title":"Description","text":"<p>This is done by adding the chunks of <code>other</code> to this <code>output</code>.</p>"},{"location":"man/Expr_append.html#usage","title":"Usage","text":"<pre><code>Expr_append(other, upcast = TRUE)\n</code></pre>"},{"location":"man/Expr_append.html#arguments","title":"Arguments","text":"<code>other</code>  Expr or something coercible to an Expr.  <code>upcast</code>  Cast both Expr to a common supertype if they have one."},{"location":"man/Expr_append.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_append.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# append bottom to to row\ndf = pl$DataFrame(list(a = 1:3, b = c(NA_real_, 4, 5)))\ndf$select(pl$all()$head(1)$append(pl$all()$tail(1)))\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b    \u2502\n#&gt; \u2502 --- \u2506 ---  \u2502\n#&gt; \u2502 i32 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 null \u2502\n#&gt; \u2502 3   \u2506 5.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># implicit upcast, when default = TRUE\npl$DataFrame(list())$select(pl$lit(42)$append(42L))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 42.0    \u2502\n#&gt; \u2502 42.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$DataFrame(list())$select(pl$lit(42)$append(FALSE))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 42.0    \u2502\n#&gt; \u2502 0.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$DataFrame(list())$select(pl$lit(\"Bob\")$append(FALSE))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Bob     \u2502\n#&gt; \u2502 false   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_approx_n_unique.html","title":"Approx count unique values","text":"<p>Source code</p>"},{"location":"man/Expr_approx_n_unique.html#description","title":"Description","text":"<p>This is done using the HyperLogLog++ algorithm for cardinality estimation.</p>"},{"location":"man/Expr_approx_n_unique.html#usage","title":"Usage","text":"<pre><code>Expr_approx_n_unique()\n</code></pre>"},{"location":"man/Expr_approx_n_unique.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_approx_n_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris[, 4:5])$\n  with_columns(count = pl$col(\"Species\")$approx_n_unique())\n</code></pre> <pre><code>#&gt; shape: (150, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Width \u2506 Species   \u2506 count \u2502\n#&gt; \u2502 ---         \u2506 ---       \u2506 ---   \u2502\n#&gt; \u2502 f64         \u2506 cat       \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 \u2026           \u2506 \u2026         \u2506 \u2026     \u2502\n#&gt; \u2502 2.3         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 1.9         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 2.0         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 2.3         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 1.8         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arccos.html","title":"Compute inverse cosine","text":"<p>Source code</p>"},{"location":"man/Expr_arccos.html#description","title":"Description","text":"<p>Compute inverse cosine</p>"},{"location":"man/Expr_arccos.html#usage","title":"Usage","text":"<pre><code>Expr_arccos()\n</code></pre>"},{"location":"man/Expr_arccos.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arccos.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, cos(0.5), 0, 1, NA_real_))$\n  with_columns(arccos = pl$col(\"a\")$arccos())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arccos   \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 3.141593 \u2502\n#&gt; \u2502 0.877583 \u2506 0.5      \u2502\n#&gt; \u2502 0.0      \u2506 1.570796 \u2502\n#&gt; \u2502 1.0      \u2506 0.0      \u2502\n#&gt; \u2502 null     \u2506 null     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arccosh.html","title":"Compute inverse hyperbolic cosine","text":"<p>Source code</p>"},{"location":"man/Expr_arccosh.html#description","title":"Description","text":"<p>Compute inverse hyperbolic cosine</p>"},{"location":"man/Expr_arccosh.html#usage","title":"Usage","text":"<pre><code>Expr_arccosh()\n</code></pre>"},{"location":"man/Expr_arccosh.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arccosh.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, cosh(0.5), 0, 1, NA_real_))$\n  with_columns(arccosh = pl$col(\"a\")$arccosh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arccosh \u2502\n#&gt; \u2502 ---      \u2506 ---     \u2502\n#&gt; \u2502 f64      \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 NaN     \u2502\n#&gt; \u2502 1.127626 \u2506 0.5     \u2502\n#&gt; \u2502 0.0      \u2506 NaN     \u2502\n#&gt; \u2502 1.0      \u2506 0.0     \u2502\n#&gt; \u2502 null     \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arcsin.html","title":"Compute inverse sine","text":"<p>Source code</p>"},{"location":"man/Expr_arcsin.html#description","title":"Description","text":"<p>Compute inverse sine</p>"},{"location":"man/Expr_arcsin.html#usage","title":"Usage","text":"<pre><code>Expr_arcsin()\n</code></pre>"},{"location":"man/Expr_arcsin.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arcsin.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, sin(0.5), 0, 1, NA_real_))$\n  with_columns(arcsin = pl$col(\"a\")$arcsin())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arcsin    \u2502\n#&gt; \u2502 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -1.570796 \u2502\n#&gt; \u2502 0.479426 \u2506 0.5       \u2502\n#&gt; \u2502 0.0      \u2506 0.0       \u2502\n#&gt; \u2502 1.0      \u2506 1.570796  \u2502\n#&gt; \u2502 null     \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arcsinh.html","title":"Compute inverse hyperbolic sine","text":"<p>Source code</p>"},{"location":"man/Expr_arcsinh.html#description","title":"Description","text":"<p>Compute inverse hyperbolic sine</p>"},{"location":"man/Expr_arcsinh.html#usage","title":"Usage","text":"<pre><code>Expr_arcsinh()\n</code></pre>"},{"location":"man/Expr_arcsinh.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arcsinh.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, sinh(0.5), 0, 1, NA_real_))$\n  with_columns(arcsinh = pl$col(\"a\")$arcsinh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arcsinh   \u2502\n#&gt; \u2502 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -0.881374 \u2502\n#&gt; \u2502 0.521095 \u2506 0.5       \u2502\n#&gt; \u2502 0.0      \u2506 0.0       \u2502\n#&gt; \u2502 1.0      \u2506 0.881374  \u2502\n#&gt; \u2502 null     \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arctan.html","title":"Compute inverse tangent","text":"<p>Source code</p>"},{"location":"man/Expr_arctan.html#description","title":"Description","text":"<p>Compute inverse tangent</p>"},{"location":"man/Expr_arctan.html#usage","title":"Usage","text":"<pre><code>Expr_arctan()\n</code></pre>"},{"location":"man/Expr_arctan.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arctan.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, tan(0.5), 0, 1, NA_real_))$\n  with_columns(arctan = pl$col(\"a\")$arctan())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arctan    \u2502\n#&gt; \u2502 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -0.785398 \u2502\n#&gt; \u2502 0.546302 \u2506 0.5       \u2502\n#&gt; \u2502 0.0      \u2506 0.0       \u2502\n#&gt; \u2502 1.0      \u2506 0.785398  \u2502\n#&gt; \u2502 null     \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arctanh.html","title":"Compute inverse hyperbolic tangent","text":"<p>Source code</p>"},{"location":"man/Expr_arctanh.html#description","title":"Description","text":"<p>Compute inverse hyperbolic tangent</p>"},{"location":"man/Expr_arctanh.html#usage","title":"Usage","text":"<pre><code>Expr_arctanh()\n</code></pre>"},{"location":"man/Expr_arctanh.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arctanh.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, tanh(0.5), 0, 1, NA_real_))$\n  with_columns(arctanh = pl$col(\"a\")$arctanh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arctanh \u2502\n#&gt; \u2502 ---      \u2506 ---     \u2502\n#&gt; \u2502 f64      \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -inf    \u2502\n#&gt; \u2502 0.462117 \u2506 0.5     \u2502\n#&gt; \u2502 0.0      \u2506 0.0     \u2502\n#&gt; \u2502 1.0      \u2506 inf     \u2502\n#&gt; \u2502 null     \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arg_max.html","title":"Index of max value","text":"<p>Source code</p>"},{"location":"man/Expr_arg_max.html#description","title":"Description","text":"<p>Get the index of the maximal value.</p>"},{"location":"man/Expr_arg_max.html#usage","title":"Usage","text":"<pre><code>Expr_arg_max()\n</code></pre>"},{"location":"man/Expr_arg_max.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arg_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  a = c(6, 1, 0, NA, Inf, NaN)\n)$with_columns(arg_max = pl$col(\"a\")$arg_max())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 arg_max \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0  \u2506 4       \u2502\n#&gt; \u2502 1.0  \u2506 4       \u2502\n#&gt; \u2502 0.0  \u2506 4       \u2502\n#&gt; \u2502 null \u2506 4       \u2502\n#&gt; \u2502 inf  \u2506 4       \u2502\n#&gt; \u2502 NaN  \u2506 4       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arg_min.html","title":"Index of min value","text":"<p>Source code</p>"},{"location":"man/Expr_arg_min.html#description","title":"Description","text":"<p>Get the index of the minimal value.</p>"},{"location":"man/Expr_arg_min.html#usage","title":"Usage","text":"<pre><code>Expr_arg_min()\n</code></pre>"},{"location":"man/Expr_arg_min.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arg_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  a = c(6, 1, 0, NA, Inf, NaN)\n)$with_columns(arg_min = pl$col(\"a\")$arg_min())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 arg_min \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0  \u2506 2       \u2502\n#&gt; \u2502 1.0  \u2506 2       \u2502\n#&gt; \u2502 0.0  \u2506 2       \u2502\n#&gt; \u2502 null \u2506 2       \u2502\n#&gt; \u2502 inf  \u2506 2       \u2502\n#&gt; \u2502 NaN  \u2506 2       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arg_sort.html","title":"Index of a sort","text":"<p>Source code</p>"},{"location":"man/Expr_arg_sort.html#description","title":"Description","text":"<p>Get the index values that would sort this column.</p>"},{"location":"man/Expr_arg_sort.html#usage","title":"Usage","text":"<pre><code>Expr_arg_sort(descending = FALSE, nulls_last = FALSE)\n</code></pre>"},{"location":"man/Expr_arg_sort.html#arguments","title":"Arguments","text":"<code>descending</code>  Sort in descending order. When sorting by multiple columns, can be specified per column by passing a vector of booleans.  <code>nulls_last</code>  If <code>TRUE</code>, place nulls values last."},{"location":"man/Expr_arg_sort.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arg_sort.html#see-also","title":"See Also","text":"<p>pl$arg_sort_by() to find the row indices that would sort multiple columns.</p>"},{"location":"man/Expr_arg_sort.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  a = c(6, 1, 0, NA, Inf, NaN)\n)$with_columns(arg_sorted = pl$col(\"a\")$arg_sort())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 arg_sorted \u2502\n#&gt; \u2502 ---  \u2506 ---        \u2502\n#&gt; \u2502 f64  \u2506 u32        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0  \u2506 3          \u2502\n#&gt; \u2502 1.0  \u2506 2          \u2502\n#&gt; \u2502 0.0  \u2506 1          \u2502\n#&gt; \u2502 null \u2506 0          \u2502\n#&gt; \u2502 inf  \u2506 4          \u2502\n#&gt; \u2502 NaN  \u2506 5          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arg_unique.html","title":"Index of first unique values","text":"<p>Source code</p>"},{"location":"man/Expr_arg_unique.html#description","title":"Description","text":"<p>This finds the position of first occurrence of each unique value.</p>"},{"location":"man/Expr_arg_unique.html#usage","title":"Usage","text":"<pre><code>Expr_arg_unique()\n</code></pre>"},{"location":"man/Expr_arg_unique.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arg_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(c(1:2, 1:3))$arg_unique())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_backward_fill.html","title":"Fill null values backward","text":"<p>Source code</p>"},{"location":"man/Expr_backward_fill.html#description","title":"Description","text":"<p>Fill missing values with the next to be seen values. Syntactic sugar for <code>$fill_null(strategy = \u201cbackward\u201d)</code>.</p>"},{"location":"man/Expr_backward_fill.html#usage","title":"Usage","text":"<pre><code>Expr_backward_fill(limit = NULL)\n</code></pre>"},{"location":"man/Expr_backward_fill.html#arguments","title":"Arguments","text":"<code>limit</code>  Number of consecutive null values to fill when using the <code>\u201cforward\u201d</code> or <code>\u201cbackward\u201d</code> strategy."},{"location":"man/Expr_backward_fill.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_backward_fill.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(NA, 1, NA, 2, NA))$\n  with_columns(\n  backward = pl$col(\"a\")$backward_fill()\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 backward \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 1.0      \u2502\n#&gt; \u2502 1.0  \u2506 1.0      \u2502\n#&gt; \u2502 null \u2506 2.0      \u2502\n#&gt; \u2502 2.0  \u2506 2.0      \u2502\n#&gt; \u2502 null \u2506 null     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_bottom_k.html","title":"Bottom k values","text":"<p>Source code</p>"},{"location":"man/Expr_bottom_k.html#description","title":"Description","text":"<p>Return the <code>k</code> smallest elements. This has time complexity: <code> O(n + k \\log{}n - ) </code></p>"},{"location":"man/Expr_bottom_k.html#usage","title":"Usage","text":"<pre><code>Expr_bottom_k(k)\n</code></pre>"},{"location":"man/Expr_bottom_k.html#arguments","title":"Arguments","text":"<code>k</code>  Number of top values to get"},{"location":"man/Expr_bottom_k.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_bottom_k.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(6, 1, 0, NA, Inf, NaN))$select(pl$col(\"a\")$bottom_k(5))\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 0.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 6.0  \u2502\n#&gt; \u2502 inf  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cast.html","title":"Cast between DataType","text":"<p>Source code</p>"},{"location":"man/Expr_cast.html#description","title":"Description","text":"<p>Cast between DataType</p>"},{"location":"man/Expr_cast.html#usage","title":"Usage","text":"<pre><code>Expr_cast(dtype, strict = TRUE)\n</code></pre>"},{"location":"man/Expr_cast.html#arguments","title":"Arguments","text":"<code>dtype</code>  DataType to cast to.  <code>strict</code>  If <code>TRUE</code> (default), an error will be thrown if cast failed at resolve time."},{"location":"man/Expr_cast.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cast.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = 1:3, b = c(1, 2, 3))\ndf$with_columns(\n  pl$col(\"a\")$cast(pl$dtypes$Float64),\n  pl$col(\"b\")$cast(pl$dtypes$Int32)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1   \u2502\n#&gt; \u2502 2.0 \u2506 2   \u2502\n#&gt; \u2502 3.0 \u2506 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># strict FALSE, inserts null for any cast failure\npl$lit(c(100, 200, 300))$cast(pl$dtypes$UInt8, strict = FALSE)$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [u8]\n#&gt; [\n#&gt;  100\n#&gt;  200\n#&gt;  null\n#&gt; ]\n</code></pre> <pre><code># strict TRUE, raise any failure as an error when query is executed.\ntryCatch(\n  {\n    pl$lit(\"a\")$cast(pl$dtypes$Float64, strict = TRUE)$to_series()\n  },\n  error = function(e) e\n)\n</code></pre> <pre><code>#&gt; &lt;RPolarsErr_error: Execution halted with the following contexts\n#&gt;    0: In R: in $select()\n#&gt;    0: During function call [.main()]\n#&gt;    1: Encountered the following error in Rust-Polars:\n#&gt;          conversion from `str` to `f64` failed in column 'literal' for 1 out of 1 values: [\"a\"]\n#&gt; &gt;\n</code></pre>"},{"location":"man/Expr_ceil.html","title":"Ceiling","text":"<p>Source code</p>"},{"location":"man/Expr_ceil.html#description","title":"Description","text":"<p>Rounds up to the nearest integer value. Only works on floating point Series.</p>"},{"location":"man/Expr_ceil.html#usage","title":"Usage","text":"<pre><code>Expr_ceil()\n</code></pre>"},{"location":"man/Expr_ceil.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_ceil.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0.33, 0.5, 1.02, 1.5, NaN, NA, Inf, -Inf))$with_columns(\n  ceiling = pl$col(\"a\")$ceil()\n)\n</code></pre> <pre><code>#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 ceiling \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.33 \u2506 1.0     \u2502\n#&gt; \u2502 0.5  \u2506 1.0     \u2502\n#&gt; \u2502 1.02 \u2506 2.0     \u2502\n#&gt; \u2502 1.5  \u2506 2.0     \u2502\n#&gt; \u2502 NaN  \u2506 NaN     \u2502\n#&gt; \u2502 null \u2506 null    \u2502\n#&gt; \u2502 inf  \u2506 inf     \u2502\n#&gt; \u2502 -inf \u2506 -inf    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_class.html","title":"Polars Expressions","text":""},{"location":"man/Expr_class.html#description","title":"Description","text":"<p>Expressions are all the functions and methods that are applicable to a Polars DataFrame or LazyFrame object. Some methods are under the sub-namespaces.</p>"},{"location":"man/Expr_class.html#sub-namespaces","title":"Sub-namespaces","text":"arr  <p><code>$arr</code> stores all array related methods.</p>  bin  <p><code>$bin</code> stores all binary related methods.</p>  cat  <p><code>$cat</code> stores all categorical related methods.</p>  dt  <p><code>$dt</code> stores all temporal related methods.</p>  list  <p><code>$list</code> stores all list related methods.</p>  meta  <p><code>$meta</code> stores all methods for working with the meta data.</p>  name  <p><code>$name</code> stores all name related methods.</p>  str  <p><code>$str</code> stores all string related methods.</p>  struct  <p><code>$struct</code> stores all struct related methods.</p>"},{"location":"man/Expr_class.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = 1:2,\n  b = list(1:2, 3:4),\n  schema = list(a = pl$Int64, b = pl$Array(pl$Int64, 2))\n)\n\ndf$select(pl$col(\"a\")$first())\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"b\")$arr$sum())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 7   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_clip.html","title":"Clip elements","text":"<p>Source code</p>"},{"location":"man/Expr_clip.html#description","title":"Description","text":"<p>Clip (limit) the values in an array to a <code>min</code> and <code>max</code> boundary. This only works for numerical types.</p>"},{"location":"man/Expr_clip.html#usage","title":"Usage","text":"<pre><code>Expr_clip(min, max)\n</code></pre>"},{"location":"man/Expr_clip.html#arguments","title":"Arguments","text":"<code>min</code>  Minimum value, Expr returning a numeric.  <code>max</code>  Maximum value, Expr returning a numeric."},{"location":"man/Expr_clip.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_clip.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(foo = c(-50L, 5L, NA_integer_, 50L))$\n  with_columns(clipped = pl$col(\"foo\")$clip(1, 10))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo  \u2506 clipped \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 i32  \u2506 i32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -50  \u2506 1       \u2502\n#&gt; \u2502 5    \u2506 5       \u2502\n#&gt; \u2502 null \u2506 null    \u2502\n#&gt; \u2502 50   \u2506 10      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_clip_max.html","title":"Clip elements above maximum value","text":"<p>Source code</p>"},{"location":"man/Expr_clip_max.html#description","title":"Description","text":"<p>Replace all values above a maximum value by this maximum value.</p>"},{"location":"man/Expr_clip_max.html#usage","title":"Usage","text":"<pre><code>Expr_clip_max(max)\n</code></pre>"},{"location":"man/Expr_clip_max.html#arguments","title":"Arguments","text":"<code>max</code>  Maximum value, Expr returning a numeric."},{"location":"man/Expr_clip_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(foo = c(-50L, 5L, NA_integer_, 50L))$\n  with_columns(clipped = pl$col(\"foo\")$clip_max(10))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo  \u2506 clipped \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 i32  \u2506 i32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -50  \u2506 -50     \u2502\n#&gt; \u2502 5    \u2506 5       \u2502\n#&gt; \u2502 null \u2506 null    \u2502\n#&gt; \u2502 50   \u2506 10      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_clip_min.html","title":"Clip elements below minimum value","text":"<p>Source code</p>"},{"location":"man/Expr_clip_min.html#description","title":"Description","text":"<p>Replace all values below a minimum value by this minimum value.</p>"},{"location":"man/Expr_clip_min.html#usage","title":"Usage","text":"<pre><code>Expr_clip_min(min)\n</code></pre>"},{"location":"man/Expr_clip_min.html#arguments","title":"Arguments","text":"<code>min</code>  Minimum value, Expr returning a numeric."},{"location":"man/Expr_clip_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(foo = c(-50L, 5L, NA_integer_, 50L))$\n  with_columns(clipped = pl$col(\"foo\")$clip_min(1))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo  \u2506 clipped \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 i32  \u2506 i32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -50  \u2506 1       \u2502\n#&gt; \u2502 5    \u2506 5       \u2502\n#&gt; \u2502 null \u2506 null    \u2502\n#&gt; \u2502 50   \u2506 50      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cos.html","title":"Compute cosine","text":"<p>Source code</p>"},{"location":"man/Expr_cos.html#description","title":"Description","text":"<p>Compute cosine</p>"},{"location":"man/Expr_cos.html#usage","title":"Usage","text":"<pre><code>Expr_cos()\n</code></pre>"},{"location":"man/Expr_cos.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cos.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0, pi / 2, pi, NA_real_))$\n  with_columns(cosine = pl$col(\"a\")$cos())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 cosine     \u2502\n#&gt; \u2502 ---      \u2506 ---        \u2502\n#&gt; \u2502 f64      \u2506 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0      \u2506 1.0        \u2502\n#&gt; \u2502 1.570796 \u2506 6.1232e-17 \u2502\n#&gt; \u2502 3.141593 \u2506 -1.0       \u2502\n#&gt; \u2502 null     \u2506 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cosh.html","title":"Compute hyperbolic cosine","text":"<p>Source code</p>"},{"location":"man/Expr_cosh.html#description","title":"Description","text":"<p>Compute hyperbolic cosine</p>"},{"location":"man/Expr_cosh.html#usage","title":"Usage","text":"<pre><code>Expr_cosh()\n</code></pre>"},{"location":"man/Expr_cosh.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cosh.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, acosh(2), 0, 1, NA_real_))$\n  with_columns(cosh = pl$col(\"a\")$cosh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 cosh     \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 1.543081 \u2502\n#&gt; \u2502 1.316958 \u2506 2.0      \u2502\n#&gt; \u2502 0.0      \u2506 1.0      \u2502\n#&gt; \u2502 1.0      \u2506 1.543081 \u2502\n#&gt; \u2502 null     \u2506 null     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_count.html","title":"Count elements","text":"<p>Source code</p>"},{"location":"man/Expr_count.html#description","title":"Description","text":"<p>Count the number of elements in this expression. Note that <code>NULL</code> values are also counted. <code>$len()</code> is an alias.</p>"},{"location":"man/Expr_count.html#usage","title":"Usage","text":"<pre><code>Expr_count()\n\nExpr_len()\n</code></pre>"},{"location":"man/Expr_count.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_count.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  all = c(TRUE, TRUE),\n  any = c(TRUE, FALSE),\n  none = c(FALSE, FALSE)\n)$select(\n  pl$all()$count()\n)\n</code></pre> <pre><code>#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all \u2506 any \u2506 none \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 u32 \u2506 u32 \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2506 2   \u2506 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cum_count.html","title":"Cumulative count","text":"<p>Source code</p>"},{"location":"man/Expr_cum_count.html#description","title":"Description","text":"<p>Get an array with the cumulative count (zero-indexed) computed at every element.</p>"},{"location":"man/Expr_cum_count.html#usage","title":"Usage","text":"<pre><code>Expr_cum_count(reverse = FALSE)\n</code></pre>"},{"location":"man/Expr_cum_count.html#arguments","title":"Arguments","text":"<code>reverse</code>  If <code>TRUE</code>, reverse the count."},{"location":"man/Expr_cum_count.html#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p> <p><code>$cum_count()</code> does not seem to count within lists.</p>"},{"location":"man/Expr_cum_count.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cum_count.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:4)$with_columns(\n  pl$col(\"a\")$cum_count()$alias(\"cum_count\"),\n  pl$col(\"a\")$cum_count(reverse = TRUE)$alias(\"cum_count_reversed\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 cum_count \u2506 cum_count_reversed \u2502\n#&gt; \u2502 --- \u2506 ---       \u2506 ---                \u2502\n#&gt; \u2502 i32 \u2506 u32       \u2506 u32                \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1         \u2506 4                  \u2502\n#&gt; \u2502 2   \u2506 2         \u2506 3                  \u2502\n#&gt; \u2502 3   \u2506 3         \u2506 2                  \u2502\n#&gt; \u2502 4   \u2506 4         \u2506 1                  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cum_max.html","title":"Cumulative maximum","text":"<p>Source code</p>"},{"location":"man/Expr_cum_max.html#description","title":"Description","text":"<p>Get an array with the cumulative max computed at every element.</p>"},{"location":"man/Expr_cum_max.html#usage","title":"Usage","text":"<pre><code>Expr_cum_max(reverse = FALSE)\n</code></pre>"},{"location":"man/Expr_cum_max.html#arguments","title":"Arguments","text":"<code>reverse</code>  If <code>TRUE</code>, start from the last value."},{"location":"man/Expr_cum_max.html#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Expr_cum_max.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cum_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1:4, 2L))$with_columns(\n  pl$col(\"a\")$cum_max()$alias(\"cummux\"),\n  pl$col(\"a\")$cum_max(reverse = TRUE)$alias(\"cum_max_reversed\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 cummux \u2506 cum_max_reversed \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 ---              \u2502\n#&gt; \u2502 i32 \u2506 i32    \u2506 i32              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1      \u2506 4                \u2502\n#&gt; \u2502 2   \u2506 2      \u2506 4                \u2502\n#&gt; \u2502 3   \u2506 3      \u2506 4                \u2502\n#&gt; \u2502 4   \u2506 4      \u2506 4                \u2502\n#&gt; \u2502 2   \u2506 4      \u2506 2                \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cum_min.html","title":"Cumulative minimum","text":"<p>Source code</p>"},{"location":"man/Expr_cum_min.html#description","title":"Description","text":"<p>Get an array with the cumulative min computed at every element.</p>"},{"location":"man/Expr_cum_min.html#usage","title":"Usage","text":"<pre><code>Expr_cum_min(reverse = FALSE)\n</code></pre>"},{"location":"man/Expr_cum_min.html#arguments","title":"Arguments","text":"<code>reverse</code>  If <code>TRUE</code>, start from the last value."},{"location":"man/Expr_cum_min.html#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Expr_cum_min.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cum_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1:4, 2L))$with_columns(\n  pl$col(\"a\")$cum_min()$alias(\"cum_min\"),\n  pl$col(\"a\")$cum_min(reverse = TRUE)$alias(\"cum_min_reversed\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 cum_min \u2506 cum_min_reversed \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---              \u2502\n#&gt; \u2502 i32 \u2506 i32     \u2506 i32              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1       \u2506 1                \u2502\n#&gt; \u2502 2   \u2506 1       \u2506 2                \u2502\n#&gt; \u2502 3   \u2506 1       \u2506 2                \u2502\n#&gt; \u2502 4   \u2506 1       \u2506 2                \u2502\n#&gt; \u2502 2   \u2506 1       \u2506 2                \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cum_prod.html","title":"Cumulative product","text":"<p>Source code</p>"},{"location":"man/Expr_cum_prod.html#description","title":"Description","text":"<p>Get an array with the cumulative product computed at every element.</p>"},{"location":"man/Expr_cum_prod.html#usage","title":"Usage","text":"<pre><code>Expr_cum_prod(reverse = FALSE)\n</code></pre>"},{"location":"man/Expr_cum_prod.html#arguments","title":"Arguments","text":"<code>reverse</code>  If <code>TRUE</code>, start with the total product of elements and divide each row one by one."},{"location":"man/Expr_cum_prod.html#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Expr_cum_prod.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cum_prod.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:4)$with_columns(\n  pl$col(\"a\")$cum_prod()$alias(\"cum_prod\"),\n  pl$col(\"a\")$cum_prod(reverse = TRUE)$alias(\"cum_prod_reversed\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 cum_prod \u2506 cum_prod_reversed \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---               \u2502\n#&gt; \u2502 i32 \u2506 i64      \u2506 i64               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1        \u2506 24                \u2502\n#&gt; \u2502 2   \u2506 2        \u2506 24                \u2502\n#&gt; \u2502 3   \u2506 6        \u2506 12                \u2502\n#&gt; \u2502 4   \u2506 24       \u2506 4                 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cum_sum.html","title":"Cumulative sum","text":"<p>Source code</p>"},{"location":"man/Expr_cum_sum.html#description","title":"Description","text":"<p>Get an array with the cumulative sum computed at every element.</p>"},{"location":"man/Expr_cum_sum.html#usage","title":"Usage","text":"<pre><code>Expr_cum_sum(reverse = FALSE)\n</code></pre>"},{"location":"man/Expr_cum_sum.html#arguments","title":"Arguments","text":"<code>reverse</code>  If <code>TRUE</code>, start with the total sum of elements and substract each row one by one."},{"location":"man/Expr_cum_sum.html#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Expr_cum_sum.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cum_sum.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:4)$with_columns(\n  pl$col(\"a\")$cum_sum()$alias(\"cum_sum\"),\n  pl$col(\"a\")$cum_sum(reverse = TRUE)$alias(\"cum_sum_reversed\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 cum_sum \u2506 cum_sum_reversed \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---              \u2502\n#&gt; \u2502 i32 \u2506 i32     \u2506 i32              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1       \u2506 10               \u2502\n#&gt; \u2502 2   \u2506 3       \u2506 9                \u2502\n#&gt; \u2502 3   \u2506 6       \u2506 7                \u2502\n#&gt; \u2502 4   \u2506 10      \u2506 4                \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cumulative_eval.html","title":"Cumulative evaluation of expressions","text":"<p>Source code</p>"},{"location":"man/Expr_cumulative_eval.html#description","title":"Description","text":"<p>Run an expression over a sliding window that increases by <code>1</code> slot every iteration.</p>"},{"location":"man/Expr_cumulative_eval.html#usage","title":"Usage","text":"<pre><code>Expr_cumulative_eval(expr, min_periods = 1L, parallel = FALSE)\n</code></pre>"},{"location":"man/Expr_cumulative_eval.html#arguments","title":"Arguments","text":"<code>expr</code>  Expression to evaluate.  <code>min_periods</code>  Number of valid (non-null) values there should be in the window before the expression is evaluated.  <code>parallel</code>  Run in parallel. Don\u2019t do this in a groupby or another operation that already has much parallelization."},{"location":"man/Expr_cumulative_eval.html#details","title":"Details","text":"<p>This can be really slow as it can have <code>O(n^2)</code> complexity. Don\u2019t use this for operations that visit all elements.</p>"},{"location":"man/Expr_cumulative_eval.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cumulative_eval.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(1:5)$cumulative_eval(\n  pl$element()$first() - pl$element()$last()^2\n)$to_r()\n</code></pre> <pre><code>#&gt; [1]   0  -3  -8 -15 -24\n</code></pre>"},{"location":"man/Expr_diff.html","title":"Difference","text":"<p>Source code</p>"},{"location":"man/Expr_diff.html#description","title":"Description","text":"<p>Calculate the n-th discrete difference.</p>"},{"location":"man/Expr_diff.html#usage","title":"Usage","text":"<pre><code>Expr_diff(n = 1, null_behavior = c(\"ignore\", \"drop\"))\n</code></pre>"},{"location":"man/Expr_diff.html#arguments","title":"Arguments","text":"<code>n</code>  Number of slots to shift.  <code>null_behavior</code>  String, either <code>\u201cignore\u201d</code> (default), else <code>\u201cdrop\u201d</code>."},{"location":"man/Expr_diff.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_diff.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(20L, 10L, 30L, 40L))$with_columns(\n  diff_default = pl$col(\"a\")$diff(),\n  diff_2_ignore = pl$col(\"a\")$diff(2, \"ignore\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 diff_default \u2506 diff_2_ignore \u2502\n#&gt; \u2502 --- \u2506 ---          \u2506 ---           \u2502\n#&gt; \u2502 i32 \u2506 i32          \u2506 i32           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 20  \u2506 null         \u2506 null          \u2502\n#&gt; \u2502 10  \u2506 -10          \u2506 null          \u2502\n#&gt; \u2502 30  \u2506 20           \u2506 10            \u2502\n#&gt; \u2502 40  \u2506 10           \u2506 30            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_div.html","title":"Divide two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_div.html#description","title":"Description","text":"<p>Method equivalent of float division operator <code>expr / other</code>.</p>"},{"location":"man/Expr_div.html#usage","title":"Usage","text":"<pre><code>Expr_div(other)\n</code></pre>"},{"location":"man/Expr_div.html#arguments","title":"Arguments","text":"<code>other</code>  Numeric literal or expression value."},{"location":"man/Expr_div.html#details","title":"Details","text":"<p>Zero-division behaviour follows IEEE-754:</p> <ul> <li> <code>0/0</code>: Invalid operation - mathematically undefined, returns <code>NaN</code>.  </li> <li> <code>n/0</code>: On finite operands gives an exact infinite result, e.g.: \u00b1infinity.  </li> </ul>"},{"location":"man/Expr_div.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_div.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> <li> <code>\\$floor_div()"},{"location":"man/Expr_div.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  x = -2:2,\n  y = c(0.5, 0, 0, -4, -0.5)\n)\n\ndf$with_columns(\n  `x/2` = pl$col(\"x\")$div(2),\n  `x/y` = pl$col(\"x\")$div(pl$col(\"y\"))\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y    \u2506 x/2  \u2506 x/y   \u2502\n#&gt; \u2502 --- \u2506 ---  \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 i32 \u2506 f64  \u2506 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -2  \u2506 0.5  \u2506 -1.0 \u2506 -4.0  \u2502\n#&gt; \u2502 -1  \u2506 0.0  \u2506 -0.5 \u2506 -inf  \u2502\n#&gt; \u2502 0   \u2506 0.0  \u2506 0.0  \u2506 NaN   \u2502\n#&gt; \u2502 1   \u2506 -4.0 \u2506 0.5  \u2506 -0.25 \u2502\n#&gt; \u2502 2   \u2506 -0.5 \u2506 1.0  \u2506 -4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_dot.html","title":"Dot product","text":"<p>Source code</p>"},{"location":"man/Expr_dot.html#description","title":"Description","text":"<p>Compute the dot/inner product between two Expressions.</p>"},{"location":"man/Expr_dot.html#usage","title":"Usage","text":"<pre><code>Expr_dot(other)\n</code></pre>"},{"location":"man/Expr_dot.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_dot.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_dot.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  a = 1:4, b = c(1, 2, 3, 4)\n)$with_columns(\n  pl$col(\"a\")$dot(pl$col(\"b\"))$alias(\"a dot b\"),\n  pl$col(\"a\")$dot(pl$col(\"a\"))$alias(\"a dot a\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 a dot b \u2506 a dot a \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 i32 \u2506 f64 \u2506 f64     \u2506 i32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1.0 \u2506 30.0    \u2506 30      \u2502\n#&gt; \u2502 2   \u2506 2.0 \u2506 30.0    \u2506 30      \u2502\n#&gt; \u2502 3   \u2506 3.0 \u2506 30.0    \u2506 30      \u2502\n#&gt; \u2502 4   \u2506 4.0 \u2506 30.0    \u2506 30      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_drop_nans.html","title":"Drop NaN","text":"<p>Source code</p>"},{"location":"man/Expr_drop_nans.html#description","title":"Description","text":"<p>Drop NaN</p>"},{"location":"man/Expr_drop_nans.html#usage","title":"Usage","text":"<pre><code>Expr_drop_nans()\n</code></pre>"},{"location":"man/Expr_drop_nans.html#details","title":"Details","text":"<p>Note that <code>NaN</code> values are not <code>null</code> values. Null values correspond to NA in R.</p>"},{"location":"man/Expr_drop_nans.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_drop_nans.html#see-also","title":"See Also","text":"<p><code>drop_nulls()</code></p>"},{"location":"man/Expr_drop_nans.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(x = c(1, 2, NaN, NA)))$select(pl$col(\"x\")$drop_nans())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 2.0  \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_drop_nulls.html","title":"Drop missing values","text":"<p>Source code</p>"},{"location":"man/Expr_drop_nulls.html#description","title":"Description","text":"<p>Drop missing values</p>"},{"location":"man/Expr_drop_nulls.html#usage","title":"Usage","text":"<pre><code>Expr_drop_nulls()\n</code></pre>"},{"location":"man/Expr_drop_nulls.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_drop_nulls.html#see-also","title":"See Also","text":"<p><code>drop_nans()</code></p>"},{"location":"man/Expr_drop_nulls.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(x = c(1, 2, NaN, NA)))$select(pl$col(\"x\")$drop_nulls())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 NaN \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_entropy.html","title":"Entropy","text":"<p>Source code</p>"},{"location":"man/Expr_entropy.html#description","title":"Description","text":"<p>The entropy is measured with the formula <code>-sum(pk * log(pk))</code> where <code>pk</code> are discrete probabilities.</p>"},{"location":"man/Expr_entropy.html#usage","title":"Usage","text":"<pre><code>Expr_entropy(base = base::exp(1), normalize = TRUE)\n</code></pre>"},{"location":"man/Expr_entropy.html#arguments","title":"Arguments","text":"<code>base</code>  Given exponential base, defaults to <code>exp(1)</code>.  <code>normalize</code>  Normalize <code>pk</code> if it doesn\u2019t sum to 1."},{"location":"man/Expr_entropy.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_entropy.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, 2, 3, 2))$\n  with_columns(entropy = pl$col(\"x\")$entropy(base = 2))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 entropy  \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1.905639 \u2502\n#&gt; \u2502 2.0 \u2506 1.905639 \u2502\n#&gt; \u2502 3.0 \u2506 1.905639 \u2502\n#&gt; \u2502 2.0 \u2506 1.905639 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_eq.html","title":"Check equality","text":"<p>Source code</p>"},{"location":"man/Expr_eq.html#description","title":"Description","text":"<p>Method equivalent of addition operator <code>expr + other</code>.</p>"},{"location":"man/Expr_eq.html#usage","title":"Usage","text":"<pre><code>Expr_eq(other)\n</code></pre>"},{"location":"man/Expr_eq.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_eq.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_eq.html#see-also","title":"See Also","text":"<p>Expr_eq_missing</p>"},{"location":"man/Expr_eq.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(2) == 2\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) == (2.0)]\n</code></pre> <pre><code>pl$lit(2) == pl$lit(2)\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) == (2.0)]\n</code></pre> <pre><code>pl$lit(2)$eq(pl$lit(2))\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) == (2.0)]\n</code></pre>"},{"location":"man/Expr_eq_missing.html","title":"Check equality without <code>null</code> propagation","text":"<p>Source code</p>"},{"location":"man/Expr_eq_missing.html#description","title":"Description","text":"<p>Method equivalent of addition operator <code>expr + other</code>.</p>"},{"location":"man/Expr_eq_missing.html#usage","title":"Usage","text":"<pre><code>Expr_eq_missing(other)\n</code></pre>"},{"location":"man/Expr_eq_missing.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_eq_missing.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_eq_missing.html#see-also","title":"See Also","text":"<p>Expr_eq</p>"},{"location":"man/Expr_eq_missing.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(NA, FALSE, TRUE), y = c(TRUE, TRUE, TRUE))\ndf$with_columns(\n  eq = pl$col(\"x\")$eq(\"y\"),\n  eq_missing = pl$col(\"x\")$eq_missing(\"y\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2506 y    \u2506 eq    \u2506 eq_missing \u2502\n#&gt; \u2502 ---   \u2506 ---  \u2506 ---   \u2506 ---        \u2502\n#&gt; \u2502 bool  \u2506 bool \u2506 bool  \u2506 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null  \u2506 true \u2506 null  \u2506 false      \u2502\n#&gt; \u2502 false \u2506 true \u2506 false \u2506 false      \u2502\n#&gt; \u2502 true  \u2506 true \u2506 false \u2506 false      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_ewm_mean.html","title":"Exponentially-weighted moving average","text":"<p>Source code</p>"},{"location":"man/Expr_ewm_mean.html#description","title":"Description","text":"<p>Exponentially-weighted moving average</p>"},{"location":"man/Expr_ewm_mean.html#usage","title":"Usage","text":"<pre><code>Expr_ewm_mean(\n  com = NULL,\n  span = NULL,\n  half_life = NULL,\n  alpha = NULL,\n  adjust = TRUE,\n  min_periods = 1L,\n  ignore_nulls = TRUE\n)\n</code></pre>"},{"location":"man/Expr_ewm_mean.html#arguments","title":"Arguments","text":"<code>com</code>  Specify decay in terms of center of mass, *\u03b3*, with <code> = ; ; </code> <code>span</code>  Specify decay in terms of span, *\u03b8*, with $= ; ; $  <code>half_life</code>  Specify decay in terms of half-life, :math:<code></code>, with $ = 1 - { } $ $ ; \\&gt; 0$  <code>alpha</code>  Specify smoothing factor alpha directly, 0\u2004\\&lt;\u2004*\u03b1*\u2004\u2264\u20041.  <code>adjust</code>   Divide by decaying adjustment factor in beginning periods to account for imbalance in relative weightings:  <ul> <li>  When <code>adjust=TRUE</code> the EW function is calculatedusing weights $w_i = (1 - )^i $  </li> <li>  When <code>adjust=FALSE</code> the EW function is calculated recursively by <code> y_0 = x_0 \\\\ y_t = (1 - )y\\_{t - 1} + x_t </code> </li> </ul> <code>min_periods</code>  Minimum number of observations in window required to have a value (otherwise result is null).  <code>ignore_nulls</code>   Ignore missing values when calculating weights:  <ul> <li>  When <code>TRUE</code> (default), weights are based on relative positions. For example, the weights of *x*<sub>0</sub> and *x*<sub>2</sub> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub><code>\\]</code> are 1\u2005\u2212\u2005*\u03b1* and 1 if <code>adjust=TRUE</code>, and 1\u2005\u2212\u2005*\u03b1* and *\u03b1* if <code>adjust=FALSE</code>.  </li> <li>  When <code>FALSE</code>, weights are based on absolute positions. For example, the weights of :math:<code>x_0</code> and :math:<code>x_2</code> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub>\\<code>\\]</code> are 1\u2005\u2212\u2005*\u03b1*)<sup>2</sup> and 1 if <code>adjust=TRUE</code>, and (1\u2212*\u03b1*)<sup>2</sup> and *\u03b1* if <code>adjust=FALSE</code>.  </li> </ul>"},{"location":"man/Expr_ewm_mean.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_ewm_mean.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:3)$\n  with_columns(ewm_mean = pl$col(\"a\")$ewm_mean(com = 1))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 ewm_mean \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 i32 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1.0      \u2502\n#&gt; \u2502 2   \u2506 1.666667 \u2502\n#&gt; \u2502 3   \u2506 2.428571 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_ewm_std.html","title":"Exponentially-weighted moving standard deviation","text":"<p>Source code</p>"},{"location":"man/Expr_ewm_std.html#description","title":"Description","text":"<p>Exponentially-weighted moving standard deviation</p>"},{"location":"man/Expr_ewm_std.html#usage","title":"Usage","text":"<pre><code>Expr_ewm_std(\n  com = NULL,\n  span = NULL,\n  half_life = NULL,\n  alpha = NULL,\n  adjust = TRUE,\n  bias = FALSE,\n  min_periods = 1L,\n  ignore_nulls = TRUE\n)\n</code></pre>"},{"location":"man/Expr_ewm_std.html#arguments","title":"Arguments","text":"<code>com</code>  Specify decay in terms of center of mass, *\u03b3*, with <code> = ; ; </code> <code>span</code>  Specify decay in terms of span, *\u03b8*, with $= ; ; $  <code>half_life</code>  Specify decay in terms of half-life, :math:<code></code>, with $ = 1 - { } $ $ ; \\&gt; 0$  <code>alpha</code>  Specify smoothing factor alpha directly, 0\u2004\\&lt;\u2004*\u03b1*\u2004\u2264\u20041.  <code>adjust</code>   Divide by decaying adjustment factor in beginning periods to account for imbalance in relative weightings:  <ul> <li>  When <code>adjust=TRUE</code> the EW function is calculatedusing weights $w_i = (1 - )^i $  </li> <li>  When <code>adjust=FALSE</code> the EW function is calculated recursively by <code> y_0 = x_0 \\\\ y_t = (1 - )y\\_{t - 1} + x_t </code> </li> </ul> <code>bias</code>  If <code>FALSE</code>, the calculations are corrected for statistical bias.  <code>min_periods</code>  Minimum number of observations in window required to have a value (otherwise result is null).  <code>ignore_nulls</code>   Ignore missing values when calculating weights:  <ul> <li>  When <code>TRUE</code> (default), weights are based on relative positions. For example, the weights of *x*<sub>0</sub> and *x*<sub>2</sub> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub><code>\\]</code> are 1\u2005\u2212\u2005*\u03b1* and 1 if <code>adjust=TRUE</code>, and 1\u2005\u2212\u2005*\u03b1* and *\u03b1* if <code>adjust=FALSE</code>.  </li> <li>  When <code>FALSE</code>, weights are based on absolute positions. For example, the weights of :math:<code>x_0</code> and :math:<code>x_2</code> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub>\\<code>\\]</code> are 1\u2005\u2212\u2005*\u03b1*)<sup>2</sup> and 1 if <code>adjust=TRUE</code>, and (1\u2212*\u03b1*)<sup>2</sup> and *\u03b1* if <code>adjust=FALSE</code>.  </li> </ul>"},{"location":"man/Expr_ewm_std.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_ewm_std.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:3)$\n  with_columns(ewm_std = pl$col(\"a\")$ewm_std(com = 1))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 ewm_std  \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 i32 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 0.0      \u2502\n#&gt; \u2502 2   \u2506 0.707107 \u2502\n#&gt; \u2502 3   \u2506 0.963624 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_ewm_var.html","title":"Exponentially-weighted moving variance","text":"<p>Source code</p>"},{"location":"man/Expr_ewm_var.html#description","title":"Description","text":"<p>Exponentially-weighted moving variance</p>"},{"location":"man/Expr_ewm_var.html#usage","title":"Usage","text":"<pre><code>Expr_ewm_var(\n  com = NULL,\n  span = NULL,\n  half_life = NULL,\n  alpha = NULL,\n  adjust = TRUE,\n  bias = FALSE,\n  min_periods = 1L,\n  ignore_nulls = TRUE\n)\n</code></pre>"},{"location":"man/Expr_ewm_var.html#arguments","title":"Arguments","text":"<code>com</code>  Specify decay in terms of center of mass, *\u03b3*, with <code> = ; ; </code> <code>span</code>  Specify decay in terms of span, *\u03b8*, with $= ; ; $  <code>half_life</code>  Specify decay in terms of half-life, :math:<code></code>, with $ = 1 - { } $ $ ; \\&gt; 0$  <code>alpha</code>  Specify smoothing factor alpha directly, 0\u2004\\&lt;\u2004*\u03b1*\u2004\u2264\u20041.  <code>adjust</code>   Divide by decaying adjustment factor in beginning periods to account for imbalance in relative weightings:  <ul> <li>  When <code>adjust=TRUE</code> the EW function is calculatedusing weights $w_i = (1 - )^i $  </li> <li>  When <code>adjust=FALSE</code> the EW function is calculated recursively by <code> y_0 = x_0 \\\\ y_t = (1 - )y\\_{t - 1} + x_t </code> </li> </ul> <code>bias</code>  If <code>FALSE</code>, the calculations are corrected for statistical bias.  <code>min_periods</code>  Minimum number of observations in window required to have a value (otherwise result is null).  <code>ignore_nulls</code>   Ignore missing values when calculating weights:  <ul> <li>  When <code>TRUE</code> (default), weights are based on relative positions. For example, the weights of *x*<sub>0</sub> and *x*<sub>2</sub> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub><code>\\]</code> are 1\u2005\u2212\u2005*\u03b1* and 1 if <code>adjust=TRUE</code>, and 1\u2005\u2212\u2005*\u03b1* and *\u03b1* if <code>adjust=FALSE</code>.  </li> <li>  When <code>FALSE</code>, weights are based on absolute positions. For example, the weights of :math:<code>x_0</code> and :math:<code>x_2</code> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub>\\<code>\\]</code> are 1\u2005\u2212\u2005*\u03b1*)<sup>2</sup> and 1 if <code>adjust=TRUE</code>, and (1\u2212*\u03b1*)<sup>2</sup> and *\u03b1* if <code>adjust=FALSE</code>.  </li> </ul>"},{"location":"man/Expr_ewm_var.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_ewm_var.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:3)$\n  with_columns(ewm_var = pl$col(\"a\")$ewm_var(com = 1))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 ewm_var  \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 i32 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 0.0      \u2502\n#&gt; \u2502 2   \u2506 0.5      \u2502\n#&gt; \u2502 3   \u2506 0.928571 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_exclude.html","title":"Exclude certain columns from selection","text":"<p>Source code</p>"},{"location":"man/Expr_exclude.html#description","title":"Description","text":"<p>Exclude certain columns from selection</p>"},{"location":"man/Expr_exclude.html#usage","title":"Usage","text":"<pre><code>Expr_exclude(columns)\n</code></pre>"},{"location":"man/Expr_exclude.html#arguments","title":"Arguments","text":"<code>columns</code>   Given param type:  <ul> <li>  string: single column name or regex starting with <code>^</code> and ending with <code>$</code> </li> <li>  character vector: exclude all these column names, no regex allowed  </li> <li>  DataType: Exclude any of this DataType  </li> <li>  List(DataType): Exclude any of these DataType(s)  </li> </ul>"},{"location":"man/Expr_exclude.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_exclude.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# make DataFrame\ndf = pl$DataFrame(iris)\n\n# by name(s)\ndf$select(pl$all()$exclude(\"Species\"))\n</code></pre> <pre><code>#&gt; shape: (150, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2502\n#&gt; \u2502 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by type\ndf$select(pl$all()$exclude(pl$Categorical()))\n</code></pre> <pre><code>#&gt; shape: (150, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2502\n#&gt; \u2502 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$all()$exclude(list(pl$Categorical(), pl$Float64)))\n</code></pre> <pre><code>#&gt; shape: (0, 0)\n#&gt; \u250c\u2510\n#&gt; \u255e\u2561\n#&gt; \u2514\u2518\n</code></pre> <pre><code># by regex\ndf$select(pl$all()$exclude(\"^Sepal.*$\"))\n</code></pre> <pre><code>#&gt; shape: (150, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 5.2          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_exp.html","title":"Compute the exponential of the elements","text":"<p>Source code</p>"},{"location":"man/Expr_exp.html#description","title":"Description","text":"<p>Compute the exponential of the elements</p>"},{"location":"man/Expr_exp.html#usage","title":"Usage","text":"<pre><code>Expr_exp()\n</code></pre>"},{"location":"man/Expr_exp.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_exp.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = -1:3)$with_columns(a_exp = pl$col(\"a\")$exp())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 a_exp     \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 i32 \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1  \u2506 0.367879  \u2502\n#&gt; \u2502 0   \u2506 1.0       \u2502\n#&gt; \u2502 1   \u2506 2.718282  \u2502\n#&gt; \u2502 2   \u2506 7.389056  \u2502\n#&gt; \u2502 3   \u2506 20.085537 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_explode.html","title":"Explode a list or String Series","text":"<p>Source code</p>"},{"location":"man/Expr_explode.html#description","title":"Description","text":"<p>This means that every item is expanded to a new row.</p>"},{"location":"man/Expr_explode.html#usage","title":"Usage","text":"<pre><code>Expr_explode()\n</code></pre>"},{"location":"man/Expr_explode.html#details","title":"Details","text":"<p>Categorical values are not supported.</p>"},{"location":"man/Expr_explode.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_explode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(\"abc\", \"ab\"), y = c(list(1:3), list(3:5)))\ndf\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y         \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 str \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 abc \u2506 [1, 2, 3] \u2502\n#&gt; \u2502 ab  \u2506 [3, 4, 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"y\")$explode())\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 y   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_extend_constant.html","title":"Extend Series with a constant","text":"<p>Source code</p>"},{"location":"man/Expr_extend_constant.html#description","title":"Description","text":"<p>Extend the Series with given number of values.</p>"},{"location":"man/Expr_extend_constant.html#usage","title":"Usage","text":"<pre><code>Expr_extend_constant(value, n)\n</code></pre>"},{"location":"man/Expr_extend_constant.html#arguments","title":"Arguments","text":"<code>value</code>  The value to extend the Series with. This value may be <code>NULL</code> to fill with nulls.  <code>n</code>  The number of values to extend."},{"location":"man/Expr_extend_constant.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_extend_constant.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(1:4)$extend_constant(10.1, 2))\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 10  \u2502\n#&gt; \u2502 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$select(pl$lit(1:4)$extend_constant(NULL, 2))\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502      \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 4    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_fill_nan.html","title":"Fill NaN","text":"<p>Source code</p>"},{"location":"man/Expr_fill_nan.html#description","title":"Description","text":"<p>Fill NaN</p>"},{"location":"man/Expr_fill_nan.html#usage","title":"Usage","text":"<pre><code>Expr_fill_nan(expr = NULL)\n</code></pre>"},{"location":"man/Expr_fill_nan.html#arguments","title":"Arguments","text":"<code>expr</code>  Expr or something coercible in an Expr"},{"location":"man/Expr_fill_nan.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_fill_nan.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(NaN, 1, NaN, 2, NA))$\n  with_columns(\n  literal = pl$col(\"a\")$fill_nan(999),\n  # implicit coercion to string\n  string = pl$col(\"a\")$fill_nan(\"invalid\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 literal \u2506 string  \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 f64     \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 NaN  \u2506 999.0   \u2506 invalid \u2502\n#&gt; \u2502 1.0  \u2506 1.0     \u2506 1.0     \u2502\n#&gt; \u2502 NaN  \u2506 999.0   \u2506 invalid \u2502\n#&gt; \u2502 2.0  \u2506 2.0     \u2506 2.0     \u2502\n#&gt; \u2502 null \u2506 null    \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_fill_null.html","title":"Fill null values with a value or strategy","text":"<p>Source code</p>"},{"location":"man/Expr_fill_null.html#description","title":"Description","text":"<p>Fill null values with a value or strategy</p>"},{"location":"man/Expr_fill_null.html#usage","title":"Usage","text":"<pre><code>Expr_fill_null(value = NULL, strategy = NULL, limit = NULL)\n</code></pre>"},{"location":"man/Expr_fill_null.html#arguments","title":"Arguments","text":"<code>value</code>  Expr or something coercible in an Expr  <code>strategy</code>  Possible choice are <code>NULL</code> (default, requires a non-null <code>value</code>), <code>\u201cforward\u201d</code>, <code>\u201cbackward\u201d</code>, <code>\u201cmin\u201d</code>, <code>\u201cmax\u201d</code>, <code>\u201cmean\u201d</code>, <code>\u201czero\u201d</code>, <code>\u201cone\u201d</code>.  <code>limit</code>  Number of consecutive null values to fill when using the <code>\u201cforward\u201d</code> or <code>\u201cbackward\u201d</code> strategy."},{"location":"man/Expr_fill_null.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_fill_null.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(NA, 1, NA, 2, NA))$\n  with_columns(\n  value = pl$col(\"a\")$fill_null(999),\n  backward = pl$col(\"a\")$fill_null(strategy = \"backward\"),\n  mean = pl$col(\"a\")$fill_null(strategy = \"mean\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 value \u2506 backward \u2506 mean \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2506 f64      \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 999.0 \u2506 1.0      \u2506 1.5  \u2502\n#&gt; \u2502 1.0  \u2506 1.0   \u2506 1.0      \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 999.0 \u2506 2.0      \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 2.0   \u2506 2.0      \u2506 2.0  \u2502\n#&gt; \u2502 null \u2506 999.0 \u2506 null     \u2506 1.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_filter.html","title":"Filter a single column.","text":"<p>Source code</p>"},{"location":"man/Expr_filter.html#description","title":"Description","text":"<p>Mostly useful in an aggregation context. If you want to filter on a DataFrame level, use <code>DataFrame$filter()</code> (or <code>LazyFrame$filter()</code>).</p>"},{"location":"man/Expr_filter.html#usage","title":"Usage","text":"<pre><code>Expr_filter(predicate)\n</code></pre>"},{"location":"man/Expr_filter.html#arguments","title":"Arguments","text":"<code>predicate</code>  An Expr or something coercible to an Expr. Must return a boolean."},{"location":"man/Expr_filter.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_filter.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  group_col = c(\"g1\", \"g1\", \"g2\"),\n  b = c(1, 2, 3)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group_col \u2506 b   \u2502\n#&gt; \u2502 ---       \u2506 --- \u2502\n#&gt; \u2502 str       \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 g1        \u2506 1.0 \u2502\n#&gt; \u2502 g1        \u2506 2.0 \u2502\n#&gt; \u2502 g2        \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$group_by(\"group_col\")$agg(\n  lt = pl$col(\"b\")$filter(pl$col(\"b\") &lt; 2),\n  gte = pl$col(\"b\")$filter(pl$col(\"b\") &gt;= 2)\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group_col \u2506 lt        \u2506 gte       \u2502\n#&gt; \u2502 ---       \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 str       \u2506 list[f64] \u2506 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 g2        \u2506 []        \u2506 [3.0]     \u2502\n#&gt; \u2502 g1        \u2506 [1.0]     \u2506 [2.0]     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_first.html","title":"Get the first value.","text":"<p>Source code</p>"},{"location":"man/Expr_first.html#description","title":"Description","text":"<p>Get the first value.</p>"},{"location":"man/Expr_first.html#usage","title":"Usage","text":"<pre><code>Expr_first()\n</code></pre>"},{"location":"man/Expr_first.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_first.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = 3:1)$with_columns(first = pl$col(\"x\")$first())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 first \u2502\n#&gt; \u2502 --- \u2506 ---   \u2502\n#&gt; \u2502 i32 \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 3     \u2502\n#&gt; \u2502 2   \u2506 3     \u2502\n#&gt; \u2502 1   \u2506 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_flatten.html","title":"Explode a list or String Series","text":"<p>Source code</p>"},{"location":"man/Expr_flatten.html#description","title":"Description","text":"<p>This is an alias for <code>\\&lt;Expr&gt;$explode()</code>.</p>"},{"location":"man/Expr_flatten.html#usage","title":"Usage","text":"<pre><code>Expr_flatten()\n</code></pre>"},{"location":"man/Expr_flatten.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_flatten.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(\"abc\", \"ab\"), y = c(list(1:3), list(3:5)))\ndf\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y         \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 str \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 abc \u2506 [1, 2, 3] \u2502\n#&gt; \u2502 ab  \u2506 [3, 4, 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"y\")$flatten())\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 y   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_floor.html","title":"Floor","text":"<p>Source code</p>"},{"location":"man/Expr_floor.html#description","title":"Description","text":"<p>Rounds down to the nearest integer value. Only works on floating point Series.</p>"},{"location":"man/Expr_floor.html#usage","title":"Usage","text":"<pre><code>Expr_floor()\n</code></pre>"},{"location":"man/Expr_floor.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_floor.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0.33, 0.5, 1.02, 1.5, NaN, NA, Inf, -Inf))$with_columns(\n  floor = pl$col(\"a\")$floor()\n)\n</code></pre> <pre><code>#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 floor \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.33 \u2506 0.0   \u2502\n#&gt; \u2502 0.5  \u2506 0.0   \u2502\n#&gt; \u2502 1.02 \u2506 1.0   \u2502\n#&gt; \u2502 1.5  \u2506 1.0   \u2502\n#&gt; \u2502 NaN  \u2506 NaN   \u2502\n#&gt; \u2502 null \u2506 null  \u2502\n#&gt; \u2502 inf  \u2506 inf   \u2502\n#&gt; \u2502 -inf \u2506 -inf  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_floor_div.html","title":"Floor divide two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_floor_div.html#description","title":"Description","text":"<p>Method equivalent of floor division operator <code>expr %/% other</code>.</p>"},{"location":"man/Expr_floor_div.html#usage","title":"Usage","text":"<pre><code>Expr_floor_div(other)\n</code></pre>"},{"location":"man/Expr_floor_div.html#arguments","title":"Arguments","text":"<code>other</code>  Numeric literal or expression value."},{"location":"man/Expr_floor_div.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_floor_div.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> <li> <code>\\$div() <li> <code>\\$mod()"},{"location":"man/Expr_floor_div.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = 1:5)\n\ndf$with_columns(\n  `x/2` = pl$col(\"x\")$div(2),\n  `x%/%2` = pl$col(\"x\")$floor_div(2)\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 x/2 \u2506 x%/%2 \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---   \u2502\n#&gt; \u2502 i32 \u2506 f64 \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 0.5 \u2506 0.0   \u2502\n#&gt; \u2502 2   \u2506 1.0 \u2506 1.0   \u2502\n#&gt; \u2502 3   \u2506 1.5 \u2506 1.0   \u2502\n#&gt; \u2502 4   \u2506 2.0 \u2506 2.0   \u2502\n#&gt; \u2502 5   \u2506 2.5 \u2506 2.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_forward_fill.html","title":"Fill null values forward","text":"<p>Source code</p>"},{"location":"man/Expr_forward_fill.html#description","title":"Description","text":"<p>Fill missing values with the last seen values. Syntactic sugar for <code>$fill_null(strategy = \u201cforward\u201d)</code>.</p>"},{"location":"man/Expr_forward_fill.html#usage","title":"Usage","text":"<pre><code>Expr_forward_fill(limit = NULL)\n</code></pre>"},{"location":"man/Expr_forward_fill.html#arguments","title":"Arguments","text":"<code>limit</code>  Number of consecutive null values to fill when using the <code>\u201cforward\u201d</code> or <code>\u201cbackward\u201d</code> strategy."},{"location":"man/Expr_forward_fill.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_forward_fill.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(NA, 1, NA, 2, NA))$\n  with_columns(\n  backward = pl$col(\"a\")$forward_fill()\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 backward \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 null     \u2502\n#&gt; \u2502 1.0  \u2506 1.0      \u2502\n#&gt; \u2502 null \u2506 1.0      \u2502\n#&gt; \u2502 2.0  \u2506 2.0      \u2502\n#&gt; \u2502 null \u2506 2.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_gather.html","title":"Gather values by index","text":"<p>Source code</p>"},{"location":"man/Expr_gather.html#description","title":"Description","text":"<p>Gather values by index</p>"},{"location":"man/Expr_gather.html#usage","title":"Usage","text":"<pre><code>Expr_gather(indices)\n</code></pre>"},{"location":"man/Expr_gather.html#arguments","title":"Arguments","text":"<code>indices</code>  R vector or Series, or Expr that leads to a Series of dtype Int64. (0-indexed)"},{"location":"man/Expr_gather.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_gather.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = 1:10)\n\ndf$select(pl$col(\"a\")$gather(c(0, 2, 4, -1)))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2502 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_gather_every.html","title":"Gather every nth element","text":"<p>Source code</p>"},{"location":"man/Expr_gather_every.html#description","title":"Description","text":"<p>Gather every nth value in the Series and return as a new Series.</p>"},{"location":"man/Expr_gather_every.html#usage","title":"Usage","text":"<pre><code>Expr_gather_every(n, offset = 0)\n</code></pre>"},{"location":"man/Expr_gather_every.html#arguments","title":"Arguments","text":"<code>n</code>  Positive integer.  <code>offset</code>  Starting index."},{"location":"man/Expr_gather_every.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_gather_every.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 0:24)$select(pl$col(\"a\")$gather_every(6))\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 6   \u2502\n#&gt; \u2502 12  \u2502\n#&gt; \u2502 18  \u2502\n#&gt; \u2502 24  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_gt.html","title":"Check strictly greater inequality","text":"<p>Source code</p>"},{"location":"man/Expr_gt.html#description","title":"Description","text":"<p>Method equivalent of addition operator <code>expr + other</code>.</p>"},{"location":"man/Expr_gt.html#usage","title":"Usage","text":"<pre><code>Expr_gt(other)\n</code></pre>"},{"location":"man/Expr_gt.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_gt.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_gt.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(2) &gt; 1\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt; (1.0)]\n</code></pre> <pre><code>pl$lit(2) &gt; pl$lit(1)\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt; (1.0)]\n</code></pre> <pre><code>pl$lit(2)$gt(pl$lit(1))\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt; (1.0)]\n</code></pre>"},{"location":"man/Expr_gt_eq.html","title":"Check greater or equal inequality","text":"<p>Source code</p>"},{"location":"man/Expr_gt_eq.html#description","title":"Description","text":"<p>Method equivalent of addition operator <code>expr + other</code>.</p>"},{"location":"man/Expr_gt_eq.html#usage","title":"Usage","text":"<pre><code>Expr_gt_eq(other)\n</code></pre>"},{"location":"man/Expr_gt_eq.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_gt_eq.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_gt_eq.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(2) &gt;= 2\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt;= (2.0)]\n</code></pre> <pre><code>pl$lit(2) &gt;= pl$lit(2)\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt;= (2.0)]\n</code></pre> <pre><code>pl$lit(2)$gt_eq(pl$lit(2))\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt;= (2.0)]\n</code></pre>"},{"location":"man/Expr_hash.html","title":"Hash elements","text":"<p>Source code</p>"},{"location":"man/Expr_hash.html#description","title":"Description","text":"<p>The hash value is of type <code>UInt64</code>.</p>"},{"location":"man/Expr_hash.html#usage","title":"Usage","text":"<pre><code>Expr_hash(seed = 0, seed_1 = NULL, seed_2 = NULL, seed_3 = NULL)\n</code></pre>"},{"location":"man/Expr_hash.html#arguments","title":"Arguments","text":"<code>seed</code>  Random seed parameter. Defaults to 0. Doesn\u2019t have any effect for now.  <code>seed_1</code>, <code>seed_2</code>, <code>seed_3</code>  Random seed parameter. Defaults to arg seed. The column will be coerced to UInt32."},{"location":"man/Expr_hash.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_hash.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris[1:3, c(1, 2)])\ndf$with_columns(pl$all()$hash(1234)$name$suffix(\"_hash\"))\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Sepal.Length_hash    \u2506 Sepal.Width_hash     \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---                  \u2506 ---                  \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 u64                  \u2506 u64                  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 18232672881806689409 \u2506 14554506282174058345 \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 8623783022495418418  \u2506 8050606693503481463  \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 18174443662047712936 \u2506 13738524453008131871 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_head.html","title":"Get the first n elements","text":"<p>Source code</p>"},{"location":"man/Expr_head.html#description","title":"Description","text":"<p>Get the first n elements</p>"},{"location":"man/Expr_head.html#usage","title":"Usage","text":"<pre><code>Expr_head(n = 10)\n</code></pre>"},{"location":"man/Expr_head.html#arguments","title":"Arguments","text":"<code>n</code>  Number of elements to take."},{"location":"man/Expr_head.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_head.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = 1:11)$select(pl$col(\"x\")$head(3))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_implode.html","title":"Wrap column in list","text":"<p>Source code</p>"},{"location":"man/Expr_implode.html#description","title":"Description","text":"<p>Aggregate values into a list.</p>"},{"location":"man/Expr_implode.html#usage","title":"Usage","text":"<pre><code>Expr_implode()\n</code></pre>"},{"location":"man/Expr_implode.html#details","title":"Details","text":"<p>Use <code>$to_struct()</code> to wrap a DataFrame.</p>"},{"location":"man/Expr_implode.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_implode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = 1:3,\n  b = 4:6\n)\ndf$select(pl$all()$implode())\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 b         \u2502\n#&gt; \u2502 ---       \u2506 ---       \u2502\n#&gt; \u2502 list[i32] \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, 3] \u2506 [4, 5, 6] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_inspect.html","title":"Inspect evaluated Series","text":"<p>Source code</p>"},{"location":"man/Expr_inspect.html#description","title":"Description","text":"<p>Print the value that this expression evaluates to and pass on the value. The printing will happen when the expression evaluates, not when it is formed.</p>"},{"location":"man/Expr_inspect.html#usage","title":"Usage","text":"<pre><code>Expr_inspect(fmt = \"{}\")\n</code></pre>"},{"location":"man/Expr_inspect.html#arguments","title":"Arguments","text":"<code>fmt</code>  format string, should contain one set of <code>{}</code> where object will be printed. This formatting mimics python \"string\".format() use in py-polars."},{"location":"man/Expr_inspect.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_inspect.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(1:5)$inspect(\n  \"Here's what the Series looked like before keeping the first two values: {}\"\n)$head(2))\n</code></pre> <pre><code>#&gt; Here's what the Series looked like before keeping the first two values: shape: (5,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt;  5\n#&gt; ]\n\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_interpolate.html","title":"Interpolate null values","text":"<p>Source code</p>"},{"location":"man/Expr_interpolate.html#description","title":"Description","text":"<p>Fill nulls with linear interpolation using non-missing values. Can also be used to regrid data to a new grid - see examples below.</p>"},{"location":"man/Expr_interpolate.html#usage","title":"Usage","text":"<pre><code>Expr_interpolate(method = \"linear\")\n</code></pre>"},{"location":"man/Expr_interpolate.html#arguments","title":"Arguments","text":"<code>method</code>  String, either <code>\u201clinear\u201d</code> (default) or <code>\u201cnearest\u201d</code>."},{"location":"man/Expr_interpolate.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_interpolate.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, NA, 4, NA, 100, NaN, 150))$\n  with_columns(\n  interp_lin = pl$col(\"x\")$interpolate(),\n  interp_near = pl$col(\"x\")$interpolate(\"nearest\")\n)\n</code></pre> <pre><code>#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2506 interp_lin \u2506 interp_near \u2502\n#&gt; \u2502 ---   \u2506 ---        \u2506 ---         \u2502\n#&gt; \u2502 f64   \u2506 f64        \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0   \u2506 1.0        \u2506 1.0         \u2502\n#&gt; \u2502 null  \u2506 2.5        \u2506 4.0         \u2502\n#&gt; \u2502 4.0   \u2506 4.0        \u2506 4.0         \u2502\n#&gt; \u2502 null  \u2506 52.0       \u2506 100.0       \u2502\n#&gt; \u2502 100.0 \u2506 100.0      \u2506 100.0       \u2502\n#&gt; \u2502 NaN   \u2506 NaN        \u2506 NaN         \u2502\n#&gt; \u2502 150.0 \u2506 150.0      \u2506 150.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># x, y interpolation over a grid\ndf_original_grid = pl$DataFrame(\n  grid_points = c(1, 3, 10),\n  values = c(2.0, 6.0, 20.0)\n)\ndf_original_grid\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 grid_points \u2506 values \u2502\n#&gt; \u2502 ---         \u2506 ---    \u2502\n#&gt; \u2502 f64         \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0         \u2506 2.0    \u2502\n#&gt; \u2502 3.0         \u2506 6.0    \u2502\n#&gt; \u2502 10.0        \u2506 20.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df_new_grid = pl$DataFrame(grid_points = (1:10) * 1.0)\ndf_new_grid\n</code></pre> <pre><code>#&gt; shape: (10, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 grid_points \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0         \u2502\n#&gt; \u2502 2.0         \u2502\n#&gt; \u2502 3.0         \u2502\n#&gt; \u2502 4.0         \u2502\n#&gt; \u2502 5.0         \u2502\n#&gt; \u2502 6.0         \u2502\n#&gt; \u2502 7.0         \u2502\n#&gt; \u2502 8.0         \u2502\n#&gt; \u2502 9.0         \u2502\n#&gt; \u2502 10.0        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Interpolate from this to the new grid\ndf_new_grid$join(\n  df_original_grid,\n  on = \"grid_points\", how = \"left\"\n)$with_columns(pl$col(\"values\")$interpolate())\n</code></pre> <pre><code>#&gt; shape: (10, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 grid_points \u2506 values \u2502\n#&gt; \u2502 ---         \u2506 ---    \u2502\n#&gt; \u2502 f64         \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0         \u2506 2.0    \u2502\n#&gt; \u2502 2.0         \u2506 4.0    \u2502\n#&gt; \u2502 3.0         \u2506 6.0    \u2502\n#&gt; \u2502 4.0         \u2506 8.0    \u2502\n#&gt; \u2502 5.0         \u2506 10.0   \u2502\n#&gt; \u2502 6.0         \u2506 12.0   \u2502\n#&gt; \u2502 7.0         \u2506 14.0   \u2502\n#&gt; \u2502 8.0         \u2506 16.0   \u2502\n#&gt; \u2502 9.0         \u2506 18.0   \u2502\n#&gt; \u2502 10.0        \u2506 20.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_between.html","title":"Check if an expression is between the given lower and upper bounds","text":"<p>Source code</p>"},{"location":"man/Expr_is_between.html#description","title":"Description","text":"<p>Check if an expression is between the given lower and upper bounds</p>"},{"location":"man/Expr_is_between.html#usage","title":"Usage","text":"<pre><code>Expr_is_between(lower_bound, upper_bound, closed = \"both\")\n</code></pre>"},{"location":"man/Expr_is_between.html#arguments","title":"Arguments","text":"<code>lower_bound</code>  Lower bound, can be an Expr. Strings are parsed as column names.  <code>upper_bound</code>  Upper bound, can be an Expr. Strings are parsed as column names.  <code>closed</code>  Define which sides of the interval are closed (inclusive). This can be either <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code> or <code>\u201cnone\u201d</code>."},{"location":"man/Expr_is_between.html#details","title":"Details","text":"<p>Note that in polars, <code>NaN</code> are equal to other <code>NaN</code>s, and greater than any non-<code>NaN</code> value.</p>"},{"location":"man/Expr_is_between.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_between.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(num = 1:5)\ndf$with_columns(\n  is_between = pl$col(\"num\")$is_between(2, 4),\n  is_between_excl_upper = pl$col(\"num\")$is_between(2, 4, closed = \"left\"),\n  is_between_excl_both = pl$col(\"num\")$is_between(2, 4, closed = \"none\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 num \u2506 is_between \u2506 is_between_excl_upper \u2506 is_between_excl_both \u2502\n#&gt; \u2502 --- \u2506 ---        \u2506 ---                   \u2506 ---                  \u2502\n#&gt; \u2502 i32 \u2506 bool       \u2506 bool                  \u2506 bool                 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 false      \u2506 false                 \u2506 false                \u2502\n#&gt; \u2502 2   \u2506 true       \u2506 true                  \u2506 false                \u2502\n#&gt; \u2502 3   \u2506 true       \u2506 true                  \u2506 true                 \u2502\n#&gt; \u2502 4   \u2506 true       \u2506 false                 \u2506 false                \u2502\n#&gt; \u2502 5   \u2506 false      \u2506 false                 \u2506 false                \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># lower and upper bounds can also be column names or expr\ndf = pl$DataFrame(\n  num = 1:5,\n  lower = c(0, 2, 3, 3, 3),\n  upper = c(6, 4, 4, 8, 3.5)\n)\ndf$with_columns(\n  is_between_cols = pl$col(\"num\")$is_between(\"lower\", \"upper\"),\n  is_between_expr = pl$col(\"num\")$is_between(pl$col(\"lower\") / 2, \"upper\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 num \u2506 lower \u2506 upper \u2506 is_between_cols \u2506 is_between_expr \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---   \u2506 ---             \u2506 ---             \u2502\n#&gt; \u2502 i32 \u2506 f64   \u2506 f64   \u2506 bool            \u2506 bool            \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 0.0   \u2506 6.0   \u2506 true            \u2506 true            \u2502\n#&gt; \u2502 2   \u2506 2.0   \u2506 4.0   \u2506 true            \u2506 true            \u2502\n#&gt; \u2502 3   \u2506 3.0   \u2506 4.0   \u2506 true            \u2506 true            \u2502\n#&gt; \u2502 4   \u2506 3.0   \u2506 8.0   \u2506 true            \u2506 true            \u2502\n#&gt; \u2502 5   \u2506 3.0   \u2506 3.5   \u2506 false           \u2506 false           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_duplicated.html","title":"Check whether each value is duplicated","text":"<p>Source code</p>"},{"location":"man/Expr_is_duplicated.html#description","title":"Description","text":"<p>This is syntactic sugar for <code>$is_unique()$not()</code>.</p>"},{"location":"man/Expr_is_duplicated.html#usage","title":"Usage","text":"<pre><code>Expr_is_duplicated()\n</code></pre>"},{"location":"man/Expr_is_duplicated.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_duplicated.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(head(mtcars[, 1:2]))$\n  with_columns(is_duplicated = pl$col(\"mpg\")$is_duplicated())\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 is_duplicated \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---           \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 bool          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 true          \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 true          \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 false         \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 false         \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 false         \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 false         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_finite.html","title":"Check if elements are finite","text":"<p>Source code</p>"},{"location":"man/Expr_is_finite.html#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are finite.</p>"},{"location":"man/Expr_is_finite.html#usage","title":"Usage","text":"<pre><code>Expr_is_finite()\n</code></pre>"},{"location":"man/Expr_is_finite.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_finite.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = c(0, NaN, NA, Inf, -Inf)))$\n  with_columns(finite = pl$col(\"alice\")$is_finite())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2506 finite \u2502\n#&gt; \u2502 ---   \u2506 ---    \u2502\n#&gt; \u2502 f64   \u2506 bool   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0   \u2506 true   \u2502\n#&gt; \u2502 NaN   \u2506 false  \u2502\n#&gt; \u2502 null  \u2506 null   \u2502\n#&gt; \u2502 inf   \u2506 false  \u2502\n#&gt; \u2502 -inf  \u2506 false  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_first_distinct.html","title":"Check whether each value is the first occurrence","text":"<p>Source code</p>"},{"location":"man/Expr_is_first_distinct.html#description","title":"Description","text":"<p>Check whether each value is the first occurrence</p>"},{"location":"man/Expr_is_first_distinct.html#usage","title":"Usage","text":"<pre><code>Expr_is_first_distinct()\n</code></pre>"},{"location":"man/Expr_is_first_distinct.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_first_distinct.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(head(mtcars[, 1:2]))$\n  with_columns(is_ufirst = pl$col(\"mpg\")$is_first_distinct())\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 is_ufirst \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---       \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 bool      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 true      \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 false     \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 true      \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 true      \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 true      \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 true      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_in.html","title":"Check whether a value is in a vector","text":"<p>Source code</p>"},{"location":"man/Expr_is_in.html#description","title":"Description","text":"<p>Notice that to check whether a factor value is in a vector of strings, you need to use the string cache, either with <code>pl$enable_string_cache()</code> or with <code>pl$with_string_cache()</code>. See examples.</p>"},{"location":"man/Expr_is_in.html#usage","title":"Usage","text":"<pre><code>Expr_is_in(other)\n</code></pre>"},{"location":"man/Expr_is_in.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_is_in.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_in.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1:4, NA_integer_))$with_columns(\n  in_1_3 = pl$col(\"a\")$is_in(c(1, 3)),\n  in_NA = pl$col(\"a\")$is_in(pl$lit(NA_real_))\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 in_1_3 \u2506 in_NA \u2502\n#&gt; \u2502 ---  \u2506 ---    \u2506 ---   \u2502\n#&gt; \u2502 i32  \u2506 bool   \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 true   \u2506 false \u2502\n#&gt; \u2502 2    \u2506 false  \u2506 false \u2502\n#&gt; \u2502 3    \u2506 true   \u2506 false \u2502\n#&gt; \u2502 4    \u2506 false  \u2506 false \u2502\n#&gt; \u2502 null \u2506 null   \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># this fails because we can't compare factors to strings\n# pl$DataFrame(a = factor(letters[1:5]))$with_columns(\n#   in_abc = pl$col(\"a\")$is_in(c(\"a\", \"b\", \"c\"))\n# )\n\n# need to use the string cache for this\npl$with_string_cache({\n  pl$DataFrame(a = factor(letters[1:5]))$with_columns(\n    in_abc = pl$col(\"a\")$is_in(c(\"a\", \"b\", \"c\"))\n  )\n})\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 in_abc \u2502\n#&gt; \u2502 --- \u2506 ---    \u2502\n#&gt; \u2502 cat \u2506 bool   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 true   \u2502\n#&gt; \u2502 b   \u2506 true   \u2502\n#&gt; \u2502 c   \u2506 true   \u2502\n#&gt; \u2502 d   \u2506 false  \u2502\n#&gt; \u2502 e   \u2506 false  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_infinite.html","title":"Check if elements are infinite","text":"<p>Source code</p>"},{"location":"man/Expr_is_infinite.html#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are infinite.</p>"},{"location":"man/Expr_is_infinite.html#usage","title":"Usage","text":"<pre><code>Expr_is_infinite()\n</code></pre>"},{"location":"man/Expr_is_infinite.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_infinite.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = c(0, NaN, NA, Inf, -Inf)))$\n  with_columns(infinite = pl$col(\"alice\")$is_infinite())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2506 infinite \u2502\n#&gt; \u2502 ---   \u2506 ---      \u2502\n#&gt; \u2502 f64   \u2506 bool     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0   \u2506 false    \u2502\n#&gt; \u2502 NaN   \u2506 false    \u2502\n#&gt; \u2502 null  \u2506 null     \u2502\n#&gt; \u2502 inf   \u2506 true     \u2502\n#&gt; \u2502 -inf  \u2506 true     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_last_distinct.html","title":"Check whether each value is the last occurrence","text":"<p>Source code</p>"},{"location":"man/Expr_is_last_distinct.html#description","title":"Description","text":"<p>Check whether each value is the last occurrence</p>"},{"location":"man/Expr_is_last_distinct.html#usage","title":"Usage","text":"<pre><code>Expr_is_last_distinct()\n</code></pre>"},{"location":"man/Expr_is_last_distinct.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_last_distinct.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(head(mtcars[, 1:2]))$\n  with_columns(is_ulast = pl$col(\"mpg\")$is_last_distinct())\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 is_ulast \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 bool     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 false    \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 true     \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 true     \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 true     \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 true     \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 true     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_nan.html","title":"Check if elements are NaN","text":"<p>Source code</p>"},{"location":"man/Expr_is_nan.html#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are NaN.</p>"},{"location":"man/Expr_is_nan.html#usage","title":"Usage","text":"<pre><code>Expr_is_nan()\n</code></pre>"},{"location":"man/Expr_is_nan.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_nan.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = c(0, NaN, NA, Inf, -Inf)))$\n  with_columns(nan = pl$col(\"alice\")$is_nan())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2506 nan   \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 f64   \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0   \u2506 false \u2502\n#&gt; \u2502 NaN   \u2506 true  \u2502\n#&gt; \u2502 null  \u2506 null  \u2502\n#&gt; \u2502 inf   \u2506 false \u2502\n#&gt; \u2502 -inf  \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_not_nan.html","title":"Check if elements are not NaN","text":"<p>Source code</p>"},{"location":"man/Expr_is_not_nan.html#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are not NaN. Syntactic sugar for <code>$is_nan()$not()</code>.</p>"},{"location":"man/Expr_is_not_nan.html#usage","title":"Usage","text":"<pre><code>Expr_is_not_nan()\n</code></pre>"},{"location":"man/Expr_is_not_nan.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_not_nan.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = c(0, NaN, NA, Inf, -Inf)))$\n  with_columns(not_nan = pl$col(\"alice\")$is_not_nan())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2506 not_nan \u2502\n#&gt; \u2502 ---   \u2506 ---     \u2502\n#&gt; \u2502 f64   \u2506 bool    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0   \u2506 true    \u2502\n#&gt; \u2502 NaN   \u2506 false   \u2502\n#&gt; \u2502 null  \u2506 true    \u2502\n#&gt; \u2502 inf   \u2506 true    \u2502\n#&gt; \u2502 -inf  \u2506 true    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_not_null.html","title":"Check if elements are not NULL","text":"<p>Source code</p>"},{"location":"man/Expr_is_not_null.html#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are not null. Syntactic sugar for <code>$is_null()$not()</code>.</p>"},{"location":"man/Expr_is_not_null.html#usage","title":"Usage","text":"<pre><code>Expr_is_not_null()\n</code></pre>"},{"location":"man/Expr_is_not_null.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_not_null.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(x = c(1, NA, 3)))$select(pl$col(\"x\")$is_not_null())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_null.html","title":"Check if elements are NULL","text":"<p>Source code</p>"},{"location":"man/Expr_is_null.html#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are null.</p>"},{"location":"man/Expr_is_null.html#usage","title":"Usage","text":"<pre><code>Expr_is_null()\n</code></pre>"},{"location":"man/Expr_is_null.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_null.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(x = c(1, NA, 3)))$select(pl$col(\"x\")$is_null())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_unique.html","title":"Check whether each value is unique","text":"<p>Source code</p>"},{"location":"man/Expr_is_unique.html#description","title":"Description","text":"<p>Check whether each value is unique</p>"},{"location":"man/Expr_is_unique.html#usage","title":"Usage","text":"<pre><code>Expr_is_unique()\n</code></pre>"},{"location":"man/Expr_is_unique.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(head(mtcars[, 1:2]))$\n  with_columns(is_unique = pl$col(\"mpg\")$is_unique())\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 is_unique \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---       \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 bool      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 false     \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 false     \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 true      \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 true      \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 true      \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 true      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_kurtosis.html","title":"Kurtosis","text":"<p>Source code</p>"},{"location":"man/Expr_kurtosis.html#description","title":"Description","text":"<p>Compute the kurtosis (Fisher or Pearson) of a dataset.</p>"},{"location":"man/Expr_kurtosis.html#usage","title":"Usage","text":"<pre><code>Expr_kurtosis(fisher = TRUE, bias = TRUE)\n</code></pre>"},{"location":"man/Expr_kurtosis.html#arguments","title":"Arguments","text":"<code>fisher</code>  If <code>TRUE</code> (default), Fisher\u2019s definition is used (normal, centered at 0). Otherwise, Pearson\u2019s definition is used (normal, centered at 3).  <code>bias</code>  If <code>FALSE</code>, the calculations are corrected for statistical bias."},{"location":"man/Expr_kurtosis.html#details","title":"Details","text":"<p>Kurtosis is the fourth central moment divided by the square of the variance. If Fisher\u2019s definition is used, then 3 is subtracted from the result to give 0 for a normal distribution.</p> <p>If bias is <code>FALSE</code>, then the kurtosis is calculated using <code>k</code> statistics to eliminate bias coming from biased moment estimators.</p>"},{"location":"man/Expr_kurtosis.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_kurtosis.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1:3, 2:1))$\n  with_columns(kurt = pl$col(\"a\")$kurtosis())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 kurt      \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 i32 \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 -1.153061 \u2502\n#&gt; \u2502 2   \u2506 -1.153061 \u2502\n#&gt; \u2502 3   \u2506 -1.153061 \u2502\n#&gt; \u2502 2   \u2506 -1.153061 \u2502\n#&gt; \u2502 1   \u2506 -1.153061 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_last.html","title":"Get the last value","text":"<p>Source code</p>"},{"location":"man/Expr_last.html#description","title":"Description","text":"<p>Get the last value</p>"},{"location":"man/Expr_last.html#usage","title":"Usage","text":"<pre><code>Expr_last()\n</code></pre>"},{"location":"man/Expr_last.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_last.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = 3:1)$with_columns(last = pl$col(\"x\")$last())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 last \u2502\n#&gt; \u2502 --- \u2506 ---  \u2502\n#&gt; \u2502 i32 \u2506 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 1    \u2502\n#&gt; \u2502 2   \u2506 1    \u2502\n#&gt; \u2502 1   \u2506 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_limit.html","title":"Get the first n elements","text":"<p>Source code</p>"},{"location":"man/Expr_limit.html#description","title":"Description","text":"<p>This is an alias for <code>\\&lt;Expr&gt;$head()</code>.</p>"},{"location":"man/Expr_limit.html#usage","title":"Usage","text":"<pre><code>Expr_limit(n = 10)\n</code></pre>"},{"location":"man/Expr_limit.html#arguments","title":"Arguments","text":"<code>n</code>  Number of elements to take."},{"location":"man/Expr_limit.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_limit.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = 1:11)$select(pl$col(\"x\")$limit(3))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_log.html","title":"Compute the logarithm of elements","text":"<p>Source code</p>"},{"location":"man/Expr_log.html#description","title":"Description","text":"<p>Compute the logarithm of elements</p>"},{"location":"man/Expr_log.html#usage","title":"Usage","text":"<pre><code>Expr_log(base = base::exp(1))\n</code></pre>"},{"location":"man/Expr_log.html#arguments","title":"Arguments","text":"<code>base</code>  Numeric base value for logarithm, default is <code>exp(1)</code>."},{"location":"man/Expr_log.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_log.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 2, 3, exp(1)))$\n  with_columns(log = pl$col(\"a\")$log())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 log      \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0      \u2506 0.0      \u2502\n#&gt; \u2502 2.0      \u2506 0.693147 \u2502\n#&gt; \u2502 3.0      \u2506 1.098612 \u2502\n#&gt; \u2502 2.718282 \u2506 1.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_log10.html","title":"Compute the base-10 logarithm of elements","text":"<p>Source code</p>"},{"location":"man/Expr_log10.html#description","title":"Description","text":"<p>Compute the base-10 logarithm of elements</p>"},{"location":"man/Expr_log10.html#usage","title":"Usage","text":"<pre><code>Expr_log10()\n</code></pre>"},{"location":"man/Expr_log10.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_log10.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 2, 3, exp(1)))$\n  with_columns(log10 = pl$col(\"a\")$log10())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 log10    \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0      \u2506 0.0      \u2502\n#&gt; \u2502 2.0      \u2506 0.30103  \u2502\n#&gt; \u2502 3.0      \u2506 0.477121 \u2502\n#&gt; \u2502 2.718282 \u2506 0.434294 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_lower_bound.html","title":"Find the lower bound of a DataType","text":"<p>Source code</p>"},{"location":"man/Expr_lower_bound.html#description","title":"Description","text":"<p>Find the lower bound of a DataType</p>"},{"location":"man/Expr_lower_bound.html#usage","title":"Usage","text":"<pre><code>Expr_lower_bound()\n</code></pre>"},{"location":"man/Expr_lower_bound.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_lower_bound.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  x = 1:3, y = 1:3,\n  schema = list(x = pl$UInt32, y = pl$Int32)\n)$\n  select(pl$all()$lower_bound())\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y           \u2502\n#&gt; \u2502 --- \u2506 ---         \u2502\n#&gt; \u2502 u32 \u2506 i32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 -2147483648 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_lt.html","title":"Check strictly lower inequality","text":"<p>Source code</p>"},{"location":"man/Expr_lt.html#description","title":"Description","text":"<p>Method equivalent of addition operator <code>expr + other</code>.</p>"},{"location":"man/Expr_lt.html#usage","title":"Usage","text":"<pre><code>Expr_lt(other)\n</code></pre>"},{"location":"man/Expr_lt.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_lt.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_lt.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(5) &lt; 10\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) &lt; (10.0)]\n</code></pre> <pre><code>pl$lit(5) &lt; pl$lit(10)\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) &lt; (10.0)]\n</code></pre> <pre><code>pl$lit(5)$lt(pl$lit(10))\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) &lt; (10.0)]\n</code></pre>"},{"location":"man/Expr_lt_eq.html","title":"Check lower or equal inequality","text":"<p>Source code</p>"},{"location":"man/Expr_lt_eq.html#description","title":"Description","text":"<p>Method equivalent of addition operator <code>expr + other</code>.</p>"},{"location":"man/Expr_lt_eq.html#usage","title":"Usage","text":"<pre><code>Expr_lt_eq(other)\n</code></pre>"},{"location":"man/Expr_lt_eq.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_lt_eq.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_lt_eq.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(2) &lt;= 2\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &lt;= (2.0)]\n</code></pre> <pre><code>pl$lit(2) &lt;= pl$lit(2)\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &lt;= (2.0)]\n</code></pre> <pre><code>pl$lit(2)$lt_eq(pl$lit(2))\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &lt;= (2.0)]\n</code></pre>"},{"location":"man/Expr_map_batches.html","title":"Map an expression with an R function","text":"<p>Source code</p>"},{"location":"man/Expr_map_batches.html#description","title":"Description","text":"<p>Map an expression with an R function</p>"},{"location":"man/Expr_map_batches.html#usage","title":"Usage","text":"<pre><code>Expr_map_batches(\n  f,\n  output_type = NULL,\n  agg_list = FALSE,\n  in_background = FALSE\n)\n</code></pre>"},{"location":"man/Expr_map_batches.html#arguments","title":"Arguments","text":"<code>f</code>  a function to map with  <code>output_type</code> <code>NULL</code> or a type available in <code>names(pl$dtypes)</code>. If <code>NULL</code> (default), the output datatype will match the input datatype. This is used to inform schema of the actual return type of the R function. Setting this wrong could theoretically have some downstream implications to the query.  <code>agg_list</code>  Aggregate list. Map from vector to group in group_by context.  <code>in_background</code>  Logical. Whether to execute the map in a background R process. Combined with setting e.g.\u00a0<code>options(polars.rpool_cap = 4)</code> it can speed up some slow R functions as they can run in parallel R sessions. The communication speed between processes is quite slower than between threads. This will likely only give a speed-up in a \"low IO - high CPU\" use case. If there are multiple <code>$map_batches(in_background = TRUE)</code> calls in the query, they will be run in parallel."},{"location":"man/Expr_map_batches.html#details","title":"Details","text":"<p>It is sometimes necessary to apply a specific R function on one or several columns. However, note that using R code in <code>$map_batches()</code> is slower than native polars. The user function must take one polars <code>Series</code> as input and the return should be a <code>Series</code> or any Robj convertible into a <code>Series</code> (e.g.\u00a0vectors). Map fully supports <code>browser()</code>.</p> <p>If <code>in_background = FALSE</code> the function can access any global variable of the R session. However, note that several calls to <code>$map_batches()</code> will sequentially share the same main R session, so the global environment might change between the start of the query and the moment a <code>$map_batches()</code> call is evaluated. Any native polars computations can still be executed meanwhile. If <code>in_background = TRUE</code>, the map will run in one or more other R sessions and will not have access to global variables. Use <code>options(polars.rpool_cap = 4)</code> and <code>polars_options()$rpool_cap</code> to set and view number of parallel R sessions.</p>"},{"location":"man/Expr_map_batches.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_map_batches.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$\n  select(\n  pl$col(\"Sepal.Length\")$map_batches(\\(x) {\n    paste(\"cheese\", as.character(x$to_vector()))\n  }, pl$dtypes$String)\n)\n</code></pre> <pre><code>#&gt; shape: (150, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 str          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 cheese 5.1   \u2502\n#&gt; \u2502 cheese 4.9   \u2502\n#&gt; \u2502 cheese 4.7   \u2502\n#&gt; \u2502 cheese 4.6   \u2502\n#&gt; \u2502 cheese 5     \u2502\n#&gt; \u2502 \u2026            \u2502\n#&gt; \u2502 cheese 6.7   \u2502\n#&gt; \u2502 cheese 6.3   \u2502\n#&gt; \u2502 cheese 6.5   \u2502\n#&gt; \u2502 cheese 6.2   \u2502\n#&gt; \u2502 cheese 5.9   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># R parallel process example, use Sys.sleep() to imitate some CPU expensive\n# computation.\n\n# map a,b,c,d sequentially\npl$LazyFrame(a = 1, b = 2, c = 3, d = 4)$select(\n  pl$all()$map_batches(\\(s) {\n    Sys.sleep(.1)\n    s * 2\n  })\n)$collect() |&gt; system.time()\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.029   0.000   0.429\n</code></pre> <pre><code># map in parallel 1: Overhead to start up extra R processes / sessions\noptions(polars.rpool_cap = 0) # drop any previous processes, just to show start-up overhead\noptions(polars.rpool_cap = 4) # set back to 4, the default\npolars_options()$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre> <pre><code>pl$LazyFrame(a = 1, b = 2, c = 3, d = 4)$select(\n  pl$all()$map_batches(\\(s) {\n    Sys.sleep(.1)\n    s * 2\n  }, in_background = TRUE)\n)$collect() |&gt; system.time()\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.011   0.000   0.966\n</code></pre> <pre><code># map in parallel 2: Reuse R processes in \"polars global_rpool\".\npolars_options()$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre> <pre><code>pl$LazyFrame(a = 1, b = 2, c = 3, d = 4)$select(\n  pl$all()$map_batches(\\(s) {\n    Sys.sleep(.1)\n    s * 2\n  }, in_background = TRUE)\n)$collect() |&gt; system.time()\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.002   0.007   0.123\n</code></pre>"},{"location":"man/Expr_map_elements.html","title":"Map a custom/user-defined function (UDF) to each element of a column","text":"<p>Source code</p>"},{"location":"man/Expr_map_elements.html#description","title":"Description","text":"<p>The UDF is applied to each element of a column. See Details for more information on specificities related to the context.</p>"},{"location":"man/Expr_map_elements.html#usage","title":"Usage","text":"<pre><code>Expr_map_elements(\n  f,\n  return_type = NULL,\n  strict_return_type = TRUE,\n  allow_fail_eval = FALSE,\n  in_background = FALSE\n)\n</code></pre>"},{"location":"man/Expr_map_elements.html#arguments","title":"Arguments","text":"<code>f</code>  Function to map  <code>return_type</code>  DataType of the output Series. If <code>NULL</code>, the dtype will be <code>pl$Unknown</code>.  <code>strict_return_type</code>  If <code>TRUE</code> (default), error if not correct datatype returned from R. If <code>FALSE</code>, the output will be converted to a polars null value.  <code>allow_fail_eval</code>  If <code>FALSE</code> (default), raise an error if the function fails. If <code>TRUE</code>, the result will be converted to a polars null value.  <code>in_background</code>  Whether to run the function in a background R process, default is <code>FALSE</code>. Combined with setting e.g.\u00a0<code>options(polars.rpool_cap = 4)</code>, this can speed up some slow R functions as they can run in parallel R sessions. The communication speed between processes is quite slower than between threads. This will likely only give a speed-up in a \"low IO - high CPU\" usecase. A single map will not be paralleled, only in case of multiple <code>$map_elements()</code> in the query can these run in parallel."},{"location":"man/Expr_map_elements.html#details","title":"Details","text":"<p>Note that, in a GroupBy context, the column will have been pre-aggregated and so each element will itself be a Series. Therefore, depending on the context, requirements for function differ:</p> <ul> <li>  in <code>$select()</code> or <code>$with_columns()</code> (selection context), the function must operate on R values of length 1. Polars will convert each element into an R value and pass it to the function. The output of the user function will be converted back into a polars type (the return type must match, see argument <code>return_type</code>). Using <code>$map_elements()</code> in this context should be avoided as a <code>lapply()</code> has half the overhead.  </li> <li>  in <code>$agg()</code> (GroupBy context), the function must take a <code>Series</code> and return a <code>Series</code> or an R object convertible to <code>Series</code>, e.g.\u00a0a vector. In this context, it is much faster if there are the number of groups is much lower than the number of rows, as the iteration is only across the groups. The R user function could e.g.\u00a0convert the <code>Series</code> to a vector with <code>$to_r()</code> and perform some vectorized operations.  </li> </ul> <p>Note that it is preferred to express your function in polars syntax, which will almost always be significantly faster and more memory efficient because:</p> <ul> <li>  the native expression engine runs in Rust; functions run in R.  </li> <li>  use of R functions forces the DataFrame to be materialized in memory.  </li> <li>  Polars-native expressions can be parallelized (R functions cannot).  </li> <li>  Polars-native expressions can be logically optimized (R functions cannot).  </li> </ul> <p>Wherever possible you should strongly prefer the native expression API to achieve the best performance and avoid using <code>$map_elements()</code>.</p>"},{"location":"man/Expr_map_elements.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_map_elements.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# apply over groups: here, the input must be a Series\n# prepare two expressions, one to compute the sum of each variable, one to\n# get the first two values of each variable and store them in a list\ne_sum = pl$all()$map_elements(\\(s) sum(s$to_r()))$name$suffix(\"_sum\")\ne_head = pl$all()$map_elements(\\(s) head(s$to_r(), 2))$name$suffix(\"_head\")\npl$DataFrame(iris)$group_by(\"Species\")$agg(e_sum, e_head)\n</code></pre> <pre><code>#&gt; shape: (3, 9)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species   \u2506 Sepal.Len \u2506 Sepal.Wid \u2506 Petal.Len \u2506 \u2026 \u2506 Sepal.Len \u2506 Sepal.Wid \u2506 Petal.Len \u2506 Petal.Wi \u2502\n#&gt; \u2502 ---       \u2506 gth_sum   \u2506 th_sum    \u2506 gth_sum   \u2506   \u2506 gth_head  \u2506 th_head   \u2506 gth_head  \u2506 dth_head \u2502\n#&gt; \u2502 cat       \u2506 ---       \u2506 ---       \u2506 ---       \u2506   \u2506 ---       \u2506 ---       \u2506 ---       \u2506 ---      \u2502\n#&gt; \u2502           \u2506 f64       \u2506 f64       \u2506 f64       \u2506   \u2506 list[f64] \u2506 list[f64] \u2506 list[f64] \u2506 list[f64 \u2502\n#&gt; \u2502           \u2506           \u2506           \u2506           \u2506   \u2506           \u2506           \u2506           \u2506 ]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa    \u2506 250.3     \u2506 171.4     \u2506 73.1      \u2506 \u2026 \u2506 [5.1,     \u2506 [3.5,     \u2506 [1.4,     \u2506 [0.2,    \u2502\n#&gt; \u2502           \u2506           \u2506           \u2506           \u2506   \u2506 4.9]      \u2506 3.0]      \u2506 1.4]      \u2506 0.2]     \u2502\n#&gt; \u2502 virginica \u2506 329.4     \u2506 148.7     \u2506 277.6     \u2506 \u2026 \u2506 [6.3,     \u2506 [3.3,     \u2506 [6.0,     \u2506 [2.5,    \u2502\n#&gt; \u2502           \u2506           \u2506           \u2506           \u2506   \u2506 5.8]      \u2506 2.7]      \u2506 5.1]      \u2506 1.9]     \u2502\n#&gt; \u2502 versicolo \u2506 296.8     \u2506 138.5     \u2506 213.0     \u2506 \u2026 \u2506 [7.0,     \u2506 [3.2,     \u2506 [4.7,     \u2506 [1.4,    \u2502\n#&gt; \u2502 r         \u2506           \u2506           \u2506           \u2506   \u2506 6.4]      \u2506 3.2]      \u2506 4.5]      \u2506 1.5]     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># apply a function on each value (should be avoided): here the input is an R\n# value of length 1\n# select only Float64 columns\nmy_selection = pl$col(pl$dtypes$Float64)\n\n# prepare two expressions, the first one only adds 10 to each element, the\n# second returns the letter whose index matches the element\ne_add10 = my_selection$map_elements(\\(x)  {\n  x + 10\n})$name$suffix(\"_sum\")\n\ne_letter = my_selection$map_elements(\\(x) {\n  letters[ceiling(x)]\n}, return_type = pl$dtypes$String)$name$suffix(\"_letter\")\npl$DataFrame(iris)$select(e_add10, e_letter)\n</code></pre> <pre><code>#&gt; shape: (150, 8)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Leng \u2506 Sepal.Widt \u2506 Petal.Leng \u2506 Petal.Wid \u2506 Sepal.Len \u2506 Sepal.Wid \u2506 Petal.Len \u2506 Petal.Wid \u2502\n#&gt; \u2502 th_sum     \u2506 h_sum      \u2506 th_sum     \u2506 th_sum    \u2506 gth_lette \u2506 th_letter \u2506 gth_lette \u2506 th_letter \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---        \u2506 ---       \u2506 r         \u2506 ---       \u2506 r         \u2506 ---       \u2502\n#&gt; \u2502 f64        \u2506 f64        \u2506 f64        \u2506 f64       \u2506 ---       \u2506 str       \u2506 ---       \u2506 str       \u2502\n#&gt; \u2502            \u2506            \u2506            \u2506           \u2506 str       \u2506           \u2506 str       \u2506           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.1       \u2506 13.5       \u2506 11.4       \u2506 10.2      \u2506 f         \u2506 d         \u2506 b         \u2506 a         \u2502\n#&gt; \u2502 14.9       \u2506 13.0       \u2506 11.4       \u2506 10.2      \u2506 e         \u2506 c         \u2506 b         \u2506 a         \u2502\n#&gt; \u2502 14.7       \u2506 13.2       \u2506 11.3       \u2506 10.2      \u2506 e         \u2506 d         \u2506 b         \u2506 a         \u2502\n#&gt; \u2502 14.6       \u2506 13.1       \u2506 11.5       \u2506 10.2      \u2506 e         \u2506 d         \u2506 b         \u2506 a         \u2502\n#&gt; \u2502 15.0       \u2506 13.6       \u2506 11.4       \u2506 10.2      \u2506 e         \u2506 d         \u2506 b         \u2506 a         \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026          \u2506 \u2026          \u2506 \u2026         \u2506 \u2026         \u2506 \u2026         \u2506 \u2026         \u2506 \u2026         \u2502\n#&gt; \u2502 16.7       \u2506 13.0       \u2506 15.2       \u2506 12.3      \u2506 g         \u2506 c         \u2506 f         \u2506 c         \u2502\n#&gt; \u2502 16.3       \u2506 12.5       \u2506 15.0       \u2506 11.9      \u2506 g         \u2506 c         \u2506 e         \u2506 b         \u2502\n#&gt; \u2502 16.5       \u2506 13.0       \u2506 15.2       \u2506 12.0      \u2506 g         \u2506 c         \u2506 f         \u2506 b         \u2502\n#&gt; \u2502 16.2       \u2506 13.4       \u2506 15.4       \u2506 12.3      \u2506 g         \u2506 d         \u2506 f         \u2506 c         \u2502\n#&gt; \u2502 15.9       \u2506 13.0       \u2506 15.1       \u2506 11.8      \u2506 f         \u2506 c         \u2506 f         \u2506 b         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Small benchmark --------------------------------\n\n# Using `$map_elements()` is much slower than a more polars-native approach.\n# First we multiply each element of a Series of 1M elements by 2.\nn = 1000000L\nset.seed(1)\ndf = pl$DataFrame(list(\n  a = 1:n,\n  b = sample(letters, n, replace = TRUE)\n))\n\nsystem.time({\n  df$with_columns(\n    bob = pl$col(\"a\")$map_elements(\\(x) {\n      x * 2L\n    })\n  )\n})\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   2.205   0.009   2.420\n</code></pre> <pre><code># Comparing this to the standard polars syntax:\nsystem.time({\n  df$with_columns(\n    bob = pl$col(\"a\") * 2L\n  )\n})\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.000   0.004   0.004\n</code></pre> <pre><code># Running in parallel --------------------------------\n\n# here, we use Sys.sleep() to imitate some CPU expensive computation.\n\n# use apply over each Species-group in each column equal to 12 sequential\n# runs ~1.2 sec.\nsystem.time({\n  pl$LazyFrame(iris)$group_by(\"Species\")$agg(\n    pl$all()$map_elements(\\(s) {\n      Sys.sleep(.1)\n      s$sum()\n    })\n  )$collect()\n})\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.028   0.008   1.240\n</code></pre> <pre><code># first run in parallel: there is some overhead to start up extra R processes\n# drop any previous processes, just to show start-up overhead here\noptions(polars.rpool_cap = 0)\n# set back to 4, the default\noptions(polars.rpool_cap = 4)\npolars_options()$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre> <pre><code>system.time({\n  pl$LazyFrame(iris)$group_by(\"Species\")$agg(\n    pl$all()$map_elements(\\(s) {\n      Sys.sleep(.1)\n      s$sum()\n    }, in_background = TRUE)\n  )$collect()\n})\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.016   0.004   1.056\n</code></pre> <pre><code># second run in parallel: this reuses R processes in \"polars global_rpool\".\npolars_options()$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre> <pre><code>system.time({\n  pl$LazyFrame(iris)$group_by(\"Species\")$agg(\n    pl$all()$map_elements(\\(s) {\n      Sys.sleep(.1)\n      s$sum()\n    }, in_background = TRUE)\n  )$collect()\n})\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.017   0.000   0.331\n</code></pre>"},{"location":"man/Expr_max.html","title":"Get maximum value","text":"<p>Source code</p>"},{"location":"man/Expr_max.html#description","title":"Description","text":"<p>Get maximum value</p>"},{"location":"man/Expr_max.html#usage","title":"Usage","text":"<pre><code>Expr_max()\n</code></pre>"},{"location":"man/Expr_max.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, NA, 3))$\n  with_columns(max = pl$col(\"x\")$max())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 max \u2502\n#&gt; \u2502 ---  \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 3.0 \u2502\n#&gt; \u2502 null \u2506 3.0 \u2502\n#&gt; \u2502 3.0  \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_mean.html","title":"Get mean value","text":"<p>Source code</p>"},{"location":"man/Expr_mean.html#description","title":"Description","text":"<p>Get mean value</p>"},{"location":"man/Expr_mean.html#usage","title":"Usage","text":"<pre><code>Expr_mean()\n</code></pre>"},{"location":"man/Expr_mean.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_mean.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1L, NA, 2L))$\n  with_columns(mean = pl$col(\"x\")$mean())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 mean \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 i32  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 1.5  \u2502\n#&gt; \u2502 null \u2506 1.5  \u2502\n#&gt; \u2502 2    \u2506 1.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_median.html","title":"Get median value","text":"<p>Source code</p>"},{"location":"man/Expr_median.html#description","title":"Description","text":"<p>Get median value</p>"},{"location":"man/Expr_median.html#usage","title":"Usage","text":"<pre><code>Expr_median()\n</code></pre>"},{"location":"man/Expr_median.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_median.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1L, NA, 2L))$\n  with_columns(median = pl$col(\"x\")$median())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 median \u2502\n#&gt; \u2502 ---  \u2506 ---    \u2502\n#&gt; \u2502 i32  \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 1.5    \u2502\n#&gt; \u2502 null \u2506 1.5    \u2502\n#&gt; \u2502 2    \u2506 1.5    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_min.html","title":"Get minimum value","text":"<p>Source code</p>"},{"location":"man/Expr_min.html#description","title":"Description","text":"<p>Get minimum value</p>"},{"location":"man/Expr_min.html#usage","title":"Usage","text":"<pre><code>Expr_min()\n</code></pre>"},{"location":"man/Expr_min.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, NA, 3))$\n  with_columns(min = pl$col(\"x\")$min())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 min \u2502\n#&gt; \u2502 ---  \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 1.0 \u2502\n#&gt; \u2502 null \u2506 1.0 \u2502\n#&gt; \u2502 3.0  \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_mod.html","title":"Modulo two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_mod.html#description","title":"Description","text":"<p>Method equivalent of modulus operator <code>expr %% other</code>.</p>"},{"location":"man/Expr_mod.html#usage","title":"Usage","text":"<pre><code>Expr_mod(other)\n</code></pre>"},{"location":"man/Expr_mod.html#arguments","title":"Arguments","text":"<code>other</code>  Numeric literal or expression value."},{"location":"man/Expr_mod.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_mod.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> <li> <code>\\$floor_div()"},{"location":"man/Expr_mod.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = -5L:5L)\n\ndf$with_columns(\n  `x%%2` = pl$col(\"x\")$mod(2)\n)\n</code></pre> <pre><code>#&gt; shape: (11, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 x%%2 \u2502\n#&gt; \u2502 --- \u2506 ---  \u2502\n#&gt; \u2502 i32 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -5  \u2506 1.0  \u2502\n#&gt; \u2502 -4  \u2506 0.0  \u2502\n#&gt; \u2502 -3  \u2506 1.0  \u2502\n#&gt; \u2502 -2  \u2506 0.0  \u2502\n#&gt; \u2502 -1  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026    \u2502\n#&gt; \u2502 1   \u2506 1.0  \u2502\n#&gt; \u2502 2   \u2506 0.0  \u2502\n#&gt; \u2502 3   \u2506 1.0  \u2502\n#&gt; \u2502 4   \u2506 0.0  \u2502\n#&gt; \u2502 5   \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_mode.html","title":"Mode","text":"<p>Source code</p>"},{"location":"man/Expr_mode.html#description","title":"Description","text":"<p>Compute the most occurring value(s). Can return multiple values if there are ties.</p>"},{"location":"man/Expr_mode.html#usage","title":"Usage","text":"<pre><code>Expr_mode()\n</code></pre>"},{"location":"man/Expr_mode.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_mode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = 1:6, b = c(1L, 1L, 3L, 3L, 5L, 6L), c = c(1L, 1L, 2L, 2L, 3L, 3L))\ndf$select(pl$col(\"a\")$mode())\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 6   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"b\")$mode())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"c\")$mode())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 c   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_mul.html","title":"Multiply two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_mul.html#description","title":"Description","text":"<p>Method equivalent of multiplication operator <code>expr * other</code>.</p>"},{"location":"man/Expr_mul.html#usage","title":"Usage","text":"<pre><code>Expr_mul(other)\n</code></pre>"},{"location":"man/Expr_mul.html#arguments","title":"Arguments","text":"<code>other</code>  Numeric literal or expression value."},{"location":"man/Expr_mul.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_mul.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> </ul>"},{"location":"man/Expr_mul.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(1, 2, 4, 8, 16))\n\ndf$with_columns(\n  `x*2` = pl$col(\"x\")$mul(2),\n  `x * xlog2` = pl$col(\"x\")$mul(pl$col(\"x\")$log(2))\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 x*2  \u2506 x * xlog2 \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---       \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 2.0  \u2506 0.0       \u2502\n#&gt; \u2502 2.0  \u2506 4.0  \u2506 2.0       \u2502\n#&gt; \u2502 4.0  \u2506 8.0  \u2506 8.0       \u2502\n#&gt; \u2502 8.0  \u2506 16.0 \u2506 24.0      \u2502\n#&gt; \u2502 16.0 \u2506 32.0 \u2506 64.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_n_unique.html","title":"Count number of unique values","text":"<p>Source code</p>"},{"location":"man/Expr_n_unique.html#description","title":"Description","text":"<p>Count number of unique values</p>"},{"location":"man/Expr_n_unique.html#usage","title":"Usage","text":"<pre><code>Expr_n_unique()\n</code></pre>"},{"location":"man/Expr_n_unique.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_n_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris[, 4:5])$with_columns(count = pl$col(\"Species\")$n_unique())\n</code></pre> <pre><code>#&gt; shape: (150, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Width \u2506 Species   \u2506 count \u2502\n#&gt; \u2502 ---         \u2506 ---       \u2506 ---   \u2502\n#&gt; \u2502 f64         \u2506 cat       \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 \u2026           \u2506 \u2026         \u2506 \u2026     \u2502\n#&gt; \u2502 2.3         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 1.9         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 2.0         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 2.3         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 1.8         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_nan_max.html","title":"Get maximum value with NaN","text":"<p>Source code</p>"},{"location":"man/Expr_nan_max.html#description","title":"Description","text":"<p>Get maximum value, but returns <code>NaN</code> if there are any.</p>"},{"location":"man/Expr_nan_max.html#usage","title":"Usage","text":"<pre><code>Expr_nan_max()\n</code></pre>"},{"location":"man/Expr_nan_max.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_nan_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, NA, 3, NaN, Inf))$\n  with_columns(nan_max = pl$col(\"x\")$nan_max())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 nan_max \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 NaN     \u2502\n#&gt; \u2502 null \u2506 NaN     \u2502\n#&gt; \u2502 3.0  \u2506 NaN     \u2502\n#&gt; \u2502 NaN  \u2506 NaN     \u2502\n#&gt; \u2502 inf  \u2506 NaN     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_nan_min.html","title":"Get minimum value with NaN","text":"<p>Source code</p>"},{"location":"man/Expr_nan_min.html#description","title":"Description","text":"<p>Get minimum value, but returns <code>NaN</code> if there are any.</p>"},{"location":"man/Expr_nan_min.html#usage","title":"Usage","text":"<pre><code>Expr_nan_min()\n</code></pre>"},{"location":"man/Expr_nan_min.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_nan_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, NA, 3, NaN, Inf))$\n  with_columns(nan_min = pl$col(\"x\")$nan_min())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 nan_min \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 NaN     \u2502\n#&gt; \u2502 null \u2506 NaN     \u2502\n#&gt; \u2502 3.0  \u2506 NaN     \u2502\n#&gt; \u2502 NaN  \u2506 NaN     \u2502\n#&gt; \u2502 inf  \u2506 NaN     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_neq.html","title":"Check inequality","text":"<p>Source code</p>"},{"location":"man/Expr_neq.html#description","title":"Description","text":"<p>Method equivalent of addition operator <code>expr + other</code>.</p>"},{"location":"man/Expr_neq.html#usage","title":"Usage","text":"<pre><code>Expr_neq(other)\n</code></pre>"},{"location":"man/Expr_neq.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_neq.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_neq.html#see-also","title":"See Also","text":"<p>Expr_neq_missing</p>"},{"location":"man/Expr_neq.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(1) != 2\n</code></pre> <pre><code>#&gt; polars Expr: [(1.0) != (2.0)]\n</code></pre> <pre><code>pl$lit(1) != pl$lit(2)\n</code></pre> <pre><code>#&gt; polars Expr: [(1.0) != (2.0)]\n</code></pre> <pre><code>pl$lit(1)$neq(pl$lit(2))\n</code></pre> <pre><code>#&gt; polars Expr: [(1.0) != (2.0)]\n</code></pre>"},{"location":"man/Expr_neq_missing.html","title":"Check inequality without <code>null</code> propagation","text":"<p>Source code</p>"},{"location":"man/Expr_neq_missing.html#description","title":"Description","text":"<p>Method equivalent of addition operator <code>expr + other</code>.</p>"},{"location":"man/Expr_neq_missing.html#usage","title":"Usage","text":"<pre><code>Expr_neq_missing(other)\n</code></pre>"},{"location":"man/Expr_neq_missing.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_neq_missing.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_neq_missing.html#see-also","title":"See Also","text":"<p>Expr_neq</p>"},{"location":"man/Expr_neq_missing.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(NA, FALSE, TRUE), y = c(TRUE, TRUE, TRUE))\ndf$with_columns(\n  neq = pl$col(\"x\")$neq(\"y\"),\n  neq_missing = pl$col(\"x\")$neq_missing(\"y\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2506 y    \u2506 neq  \u2506 neq_missing \u2502\n#&gt; \u2502 ---   \u2506 ---  \u2506 ---  \u2506 ---         \u2502\n#&gt; \u2502 bool  \u2506 bool \u2506 bool \u2506 bool        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null  \u2506 true \u2506 null \u2506 true        \u2502\n#&gt; \u2502 false \u2506 true \u2506 true \u2506 true        \u2502\n#&gt; \u2502 true  \u2506 true \u2506 true \u2506 true        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_not.html","title":"Negate a boolean expression","text":"<p>Source code</p>"},{"location":"man/Expr_not.html#description","title":"Description","text":"<p>Method equivalent of negation operator <code>!expr</code>.</p>"},{"location":"man/Expr_not.html#usage","title":"Usage","text":"<pre><code>Expr_not()\n</code></pre>"},{"location":"man/Expr_not.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_not.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# two syntaxes same result\npl$lit(TRUE)$not()\n</code></pre> <pre><code>#&gt; polars Expr: true.not()\n</code></pre> <pre><code>!pl$lit(TRUE)\n</code></pre> <pre><code>#&gt; polars Expr: true.not()\n</code></pre>"},{"location":"man/Expr_null_count.html","title":"Count missing values","text":"<p>Source code</p>"},{"location":"man/Expr_null_count.html#description","title":"Description","text":"<p>Count missing values</p>"},{"location":"man/Expr_null_count.html#usage","title":"Usage","text":"<pre><code>Expr_null_count()\n</code></pre>"},{"location":"man/Expr_null_count.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_null_count.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(NA, \"a\", NA, \"b\"))$\n  with_columns(n_missing = pl$col(\"x\")$null_count())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 n_missing \u2502\n#&gt; \u2502 ---  \u2506 ---       \u2502\n#&gt; \u2502 str  \u2506 u32       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 2         \u2502\n#&gt; \u2502 a    \u2506 2         \u2502\n#&gt; \u2502 null \u2506 2         \u2502\n#&gt; \u2502 b    \u2506 2         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_or.html","title":"Apply logical OR on two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_or.html#description","title":"Description","text":"<p>Combine two boolean expressions with OR.</p>"},{"location":"man/Expr_or.html#usage","title":"Usage","text":"<pre><code>Expr_or(other)\n</code></pre>"},{"location":"man/Expr_or.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_or.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_or.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(TRUE) | FALSE\n</code></pre> <pre><code>#&gt; polars Expr: [(true) | (false)]\n</code></pre> <pre><code>pl$lit(TRUE)$or(pl$lit(TRUE))\n</code></pre> <pre><code>#&gt; polars Expr: [(true) | (true)]\n</code></pre>"},{"location":"man/Expr_over.html","title":"Compute expressions over the given groups","text":"<p>Source code</p>"},{"location":"man/Expr_over.html#description","title":"Description","text":"<p>This expression is similar to performing a group by aggregation and joining the result back into the original DataFrame. The outcome is similar to how window functions work in PostgreSQL.</p>"},{"location":"man/Expr_over.html#usage","title":"Usage","text":"<pre><code>Expr_over(..., mapping_strategy = \"group_to_rows\")\n</code></pre>"},{"location":"man/Expr_over.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Column(s) to group by. Accepts expression input. Characters are parsed as column names.  <code>mapping_strategy</code>   One of the following:  <ul> <li> <code>\u201cgroup_to_rows\u201d</code> (default): if the aggregation results in multiple values, assign them back to their position in the DataFrame. This can only be done if the group yields the same elements before aggregation as after.  </li> <li> <code>\u201cjoin\u201d</code>: join the groups as <code>List\\ to the row positions. Note that this can be memory intensive.   <li> <code>\u201cexplode\u201d</code>: don\u2019t do any mapping, but simply flatten the group. This only makes sense if the input data is sorted.  </li>"},{"location":"man/Expr_over.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_over.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Pass the name of a column to compute the expression over that column.\ndf = pl$DataFrame(\n  a = c(\"a\", \"a\", \"b\", \"b\", \"b\"),\n  b = c(1, 2, 3, 5, 3),\n  c = c(5, 4, 2, 1, 3)\n)\n\ndf$with_columns(\n  pl$col(\"c\")$max()$over(\"a\")$name$suffix(\"_max\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 c_max \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2506 5.0   \u2502\n#&gt; \u2502 a   \u2506 2.0 \u2506 4.0 \u2506 5.0   \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2506 3.0   \u2502\n#&gt; \u2502 b   \u2506 5.0 \u2506 1.0 \u2506 3.0   \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 3.0 \u2506 3.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Expression input is supported.\ndf$with_columns(\n  pl$col(\"c\")$max()$over(pl$col(\"b\") %/% 2)$name$suffix(\"_max\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 c_max \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2506 5.0   \u2502\n#&gt; \u2502 a   \u2506 2.0 \u2506 4.0 \u2506 4.0   \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2506 4.0   \u2502\n#&gt; \u2502 b   \u2506 5.0 \u2506 1.0 \u2506 1.0   \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 3.0 \u2506 4.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Group by multiple columns by passing a character vector of column names\n# or list of expressions.\ndf$with_columns(\n  pl$col(\"c\")$min()$over(c(\"a\", \"b\"))$name$suffix(\"_min\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 c_min \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2506 5.0   \u2502\n#&gt; \u2502 a   \u2506 2.0 \u2506 4.0 \u2506 4.0   \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2506 2.0   \u2502\n#&gt; \u2502 b   \u2506 5.0 \u2506 1.0 \u2506 1.0   \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 3.0 \u2506 2.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(\n  pl$col(\"c\")$min()$over(list(pl$col(\"a\"), pl$col(\"b\")))$name$suffix(\"_min\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 c_min \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2506 5.0   \u2502\n#&gt; \u2502 a   \u2506 2.0 \u2506 4.0 \u2506 4.0   \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2506 2.0   \u2502\n#&gt; \u2502 b   \u2506 5.0 \u2506 1.0 \u2506 1.0   \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 3.0 \u2506 2.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Or use positional arguments to group by multiple columns in the same way.\ndf$with_columns(\n  pl$col(\"c\")$min()$over(\"a\", pl$col(\"b\") %% 2)$name$suffix(\"_min\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 c_min \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2506 5.0   \u2502\n#&gt; \u2502 a   \u2506 2.0 \u2506 4.0 \u2506 4.0   \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2506 1.0   \u2502\n#&gt; \u2502 b   \u2506 5.0 \u2506 1.0 \u2506 1.0   \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 3.0 \u2506 1.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Alternative mapping strategy: join values in a list output\ndf$with_columns(\n  top_2 = pl$col(\"c\")$top_k(2)$over(\"a\", mapping_strategy = \"join\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 top_2      \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---        \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2506 list[f64]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2506 [5.0, 4.0] \u2502\n#&gt; \u2502 a   \u2506 2.0 \u2506 4.0 \u2506 [5.0, 4.0] \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2506 [3.0, 2.0] \u2502\n#&gt; \u2502 b   \u2506 5.0 \u2506 1.0 \u2506 [3.0, 2.0] \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 3.0 \u2506 [3.0, 2.0] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_pct_change.html","title":"Percentage change","text":"<p>Source code</p>"},{"location":"man/Expr_pct_change.html#description","title":"Description","text":"<p>Computes percentage change (as fraction) between current element and most- recent non-null element at least <code>n</code> period(s) before the current element. Computes the change from the previous row by default.</p>"},{"location":"man/Expr_pct_change.html#usage","title":"Usage","text":"<pre><code>Expr_pct_change(n = 1)\n</code></pre>"},{"location":"man/Expr_pct_change.html#arguments","title":"Arguments","text":"<code>n</code>  Periods to shift for computing percent change."},{"location":"man/Expr_pct_change.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_pct_change.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(10L, 11L, 12L, NA_integer_, 12L))$\n  with_columns(pct_change = pl$col(\"a\")$pct_change())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 pct_change \u2502\n#&gt; \u2502 ---  \u2506 ---        \u2502\n#&gt; \u2502 i32  \u2506 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10   \u2506 null       \u2502\n#&gt; \u2502 11   \u2506 0.1        \u2502\n#&gt; \u2502 12   \u2506 0.090909   \u2502\n#&gt; \u2502 null \u2506 0.0        \u2502\n#&gt; \u2502 12   \u2506 0.0        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_peak_max.html","title":"Find local maxima","text":"<p>Source code</p>"},{"location":"man/Expr_peak_max.html#description","title":"Description","text":"<p>A local maximum is the point that marks the transition between an increase and a decrease in a Series. The first and last values of the Series can never be a peak.</p>"},{"location":"man/Expr_peak_max.html#usage","title":"Usage","text":"<pre><code>Expr_peak_max()\n</code></pre>"},{"location":"man/Expr_peak_max.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_peak_max.html#see-also","title":"See Also","text":"<p><code>$peak_min()</code></p>"},{"location":"man/Expr_peak_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(1, 2, 3, 2, 3, 4, 5, 2))\ndf\n</code></pre> <pre><code>#&gt; shape: (8, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 4.0 \u2502\n#&gt; \u2502 5.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(peak_max = pl$col(\"x\")$peak_max())\n</code></pre> <pre><code>#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 peak_max \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 bool     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 false    \u2502\n#&gt; \u2502 2.0 \u2506 false    \u2502\n#&gt; \u2502 3.0 \u2506 true     \u2502\n#&gt; \u2502 2.0 \u2506 false    \u2502\n#&gt; \u2502 3.0 \u2506 false    \u2502\n#&gt; \u2502 4.0 \u2506 false    \u2502\n#&gt; \u2502 5.0 \u2506 true     \u2502\n#&gt; \u2502 2.0 \u2506 false    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_peak_min.html","title":"Find local minima","text":"<p>Source code</p>"},{"location":"man/Expr_peak_min.html#description","title":"Description","text":"<p>A local minimum is the point that marks the transition between a decrease and an increase in a Series. The first and last values of the Series can never be a peak.</p>"},{"location":"man/Expr_peak_min.html#usage","title":"Usage","text":"<pre><code>Expr_peak_min()\n</code></pre>"},{"location":"man/Expr_peak_min.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_peak_min.html#see-also","title":"See Also","text":"<p><code>$peak_max()</code></p>"},{"location":"man/Expr_peak_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(1, 2, 3, 2, 3, 4, 5, 2))\ndf\n</code></pre> <pre><code>#&gt; shape: (8, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 4.0 \u2502\n#&gt; \u2502 5.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(peak_min = pl$col(\"x\")$peak_min())\n</code></pre> <pre><code>#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 peak_min \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 bool     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 false    \u2502\n#&gt; \u2502 2.0 \u2506 false    \u2502\n#&gt; \u2502 3.0 \u2506 false    \u2502\n#&gt; \u2502 2.0 \u2506 true     \u2502\n#&gt; \u2502 3.0 \u2506 false    \u2502\n#&gt; \u2502 4.0 \u2506 false    \u2502\n#&gt; \u2502 5.0 \u2506 false    \u2502\n#&gt; \u2502 2.0 \u2506 false    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_pow.html","title":"Exponentiation two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_pow.html#description","title":"Description","text":"<p>Method equivalent of exponentiation operator <code>expr ^ exponent</code>.</p>"},{"location":"man/Expr_pow.html#usage","title":"Usage","text":"<pre><code>Expr_pow(exponent)\n</code></pre>"},{"location":"man/Expr_pow.html#arguments","title":"Arguments","text":"<code>exponent</code>  Numeric literal or expression value."},{"location":"man/Expr_pow.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_pow.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> </ul>"},{"location":"man/Expr_pow.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(1, 2, 4, 8))\n\ndf$with_columns(\n  cube = pl$col(\"x\")$pow(3),\n  `x^xlog2` = pl$col(\"x\")$pow(pl$col(\"x\")$log(2))\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 cube  \u2506 x^xlog2 \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---     \u2502\n#&gt; \u2502 f64 \u2506 f64   \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1.0   \u2506 1.0     \u2502\n#&gt; \u2502 2.0 \u2506 8.0   \u2506 2.0     \u2502\n#&gt; \u2502 4.0 \u2506 64.0  \u2506 16.0    \u2502\n#&gt; \u2502 8.0 \u2506 512.0 \u2506 512.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_product.html","title":"Product","text":"<p>Source code</p>"},{"location":"man/Expr_product.html#description","title":"Description","text":"<p>Compute the product of an expression.</p>"},{"location":"man/Expr_product.html#usage","title":"Usage","text":"<pre><code>Expr_product()\n</code></pre>"},{"location":"man/Expr_product.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_product.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(2L, NA, 2L))$\n  with_columns(product = pl$col(\"x\")$product())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 product \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 i32  \u2506 i64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2    \u2506 4       \u2502\n#&gt; \u2502 null \u2506 4       \u2502\n#&gt; \u2502 2    \u2506 4       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_quantile.html","title":"Get quantile value.","text":"<p>Source code</p>"},{"location":"man/Expr_quantile.html#description","title":"Description","text":"<p>Get quantile value.</p>"},{"location":"man/Expr_quantile.html#usage","title":"Usage","text":"<pre><code>Expr_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"man/Expr_quantile.html#arguments","title":"Arguments","text":"<code>quantile</code>  Either a numeric value or an Expr whose value must be between 0 and 1.  <code>interpolation</code>  One of <code>\u201cnearest\u201d</code>, <code>\u201chigher\u201d</code>, <code>\u201clower\u201d</code>, <code>\u201cmidpoint\u201d</code>, or <code>\u201clinear\u201d</code>."},{"location":"man/Expr_quantile.html#details","title":"Details","text":"<p>Null values are ignored and <code>NaN</code>s are ranked as the largest value. For linear interpolation <code>NaN</code> poisons <code>Inf</code>, that poisons any other value.</p>"},{"location":"man/Expr_quantile.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_quantile.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = -5:5)$\n  select(pl$col(\"x\")$quantile(0.5))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rank.html","title":"Rank elements","text":"<p>Source code</p>"},{"location":"man/Expr_rank.html#description","title":"Description","text":"<p>Assign ranks to data, dealing with ties appropriately.</p>"},{"location":"man/Expr_rank.html#usage","title":"Usage","text":"<pre><code>Expr_rank(\n  method = c(\"average\", \"min\", \"max\", \"dense\", \"ordinal\", \"random\"),\n  descending = FALSE,\n  seed = NULL\n)\n</code></pre>"},{"location":"man/Expr_rank.html#arguments","title":"Arguments","text":"<code>method</code>   String, one of <code>\u201caverage\u201d</code> (default), <code>\u201cmin\u201d</code>, <code>\u201cmax\u201d</code>, <code>\u201cdense\u201d</code>, <code>\u201cordinal\u201d</code>, <code>\u201crandom\u201d</code>. The method used to assign ranks to tied elements:  <ul> <li> <code>\u201caverage\u201d</code>: The average of the ranks that would have been assigned to all the tied values is assigned to each value.  </li> <li> <code>\u201cmin\u201d</code>: The minimum of the ranks that would have been assigned to all the tied values is assigned to each value. (This is also referred to as \"competition\" ranking.)  </li> <li> <code>\u201cmax\u201d</code> : The maximum of the ranks that would have been assigned to all the tied values is assigned to each value.  </li> <li> <code>\u201cdense\u201d</code>: Like \u2018min\u2019, but the rank of the next highest element is assigned the rank immediately after those assigned to the tied elements.  </li> <li> <code>\u201cordinal\u201d</code> : All values are given a distinct rank, corresponding to the order that the values occur in the Series.  </li> <li> <code>\u201crandom\u201d</code> : Like \u2018ordinal\u2019, but the rank for ties is not dependent on the order that the values occur in the Series.  </li> </ul> <code>descending</code>  Rank in descending order.  <code>seed</code>  string parsed or number converted into uint64. Used if method=\"random\"."},{"location":"man/Expr_rank.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rank.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n#  The 'average' method:\npl$DataFrame(a = c(3, 6, 1, 1, 6))$\n  with_columns(rank = pl$col(\"a\")$rank())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 rank \u2502\n#&gt; \u2502 --- \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2506 3.0  \u2502\n#&gt; \u2502 6.0 \u2506 4.5  \u2502\n#&gt; \u2502 1.0 \u2506 1.5  \u2502\n#&gt; \u2502 1.0 \u2506 1.5  \u2502\n#&gt; \u2502 6.0 \u2506 4.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>#  The 'ordinal' method:\npl$DataFrame(a = c(3, 6, 1, 1, 6))$\n  with_columns(rank = pl$col(\"a\")$rank(\"ordinal\"))\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 rank \u2502\n#&gt; \u2502 --- \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2506 3    \u2502\n#&gt; \u2502 6.0 \u2506 4    \u2502\n#&gt; \u2502 1.0 \u2506 1    \u2502\n#&gt; \u2502 1.0 \u2506 2    \u2502\n#&gt; \u2502 6.0 \u2506 5    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rechunk.html","title":"Rechunk memory layout","text":"<p>Source code</p>"},{"location":"man/Expr_rechunk.html#description","title":"Description","text":"<p>Create a single chunk of memory for this Series.</p>"},{"location":"man/Expr_rechunk.html#usage","title":"Usage","text":"<pre><code>Expr_rechunk()\n</code></pre>"},{"location":"man/Expr_rechunk.html#details","title":"Details","text":"<p>See rechunk() explained here <code>docs_translations</code>.</p>"},{"location":"man/Expr_rechunk.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rechunk.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# get chunked lengths with/without rechunk\nseries_list = pl$DataFrame(list(a = 1:3, b = 4:6))$select(\n  pl$col(\"a\")$append(pl$col(\"b\"))$alias(\"a_chunked\"),\n  pl$col(\"a\")$append(pl$col(\"b\"))$rechunk()$alias(\"a_rechunked\")\n)$get_columns()\nlapply(series_list, \\(x) x$chunk_lengths())\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] 3 3\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 6\n</code></pre>"},{"location":"man/Expr_reinterpret.html","title":"Reinterpret bits","text":"<p>Source code</p>"},{"location":"man/Expr_reinterpret.html#description","title":"Description","text":"<p>Reinterpret the underlying bits as a signed/unsigned integer. This operation is only allowed for Int64. For lower bits integers, you can safely use the cast operation.</p>"},{"location":"man/Expr_reinterpret.html#usage","title":"Usage","text":"<pre><code>Expr_reinterpret(signed = TRUE)\n</code></pre>"},{"location":"man/Expr_reinterpret.html#arguments","title":"Arguments","text":"<code>signed</code>  If <code>TRUE</code> (default), reinterpret into Int64. Otherwise, it will be reinterpreted in UInt64."},{"location":"man/Expr_reinterpret.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_reinterpret.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = 1:5, schema = list(x = pl$Int64))\ndf$select(pl$all()$reinterpret())\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rep.html","title":"Repeat a Series","text":"<p>Source code</p>"},{"location":"man/Expr_rep.html#description","title":"Description","text":"<p>This expression takes input and repeats it n times and append chunk.</p>"},{"location":"man/Expr_rep.html#usage","title":"Usage","text":"<pre><code>Expr_rep(n, rechunk = TRUE)\n</code></pre>"},{"location":"man/Expr_rep.html#arguments","title":"Arguments","text":"<code>n</code>  The number of times to repeat, must be non-negative and finite.  <code>rechunk</code>  If <code>TRUE</code> (default), memory layout will be rewritten."},{"location":"man/Expr_rep.html#details","title":"Details","text":"<p>If the input has length 1, this uses a special faster implementation that doesn\u2019t require rechunking (so <code>rechunk = TRUE</code> has no effect).</p>"},{"location":"man/Expr_rep.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rep.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(\"alice\")$rep(n = 3))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 alice   \u2502\n#&gt; \u2502 alice   \u2502\n#&gt; \u2502 alice   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$select(pl$lit(1:3)$rep(n = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rep_extend.html","title":"Extend a Series by repeating values","text":"<p>Source code</p>"},{"location":"man/Expr_rep_extend.html#description","title":"Description","text":"<p>Extend a Series by repeating values</p>"},{"location":"man/Expr_rep_extend.html#usage","title":"Usage","text":"<pre><code>Expr_rep_extend(expr, n, rechunk = TRUE, upcast = TRUE)\n</code></pre>"},{"location":"man/Expr_rep_extend.html#arguments","title":"Arguments","text":"<code>expr</code>  Expr or something coercible to an Expr.  <code>n</code>  The number of times to repeat, must be non-negative and finite.  <code>rechunk</code>  If <code>TRUE</code> (default), memory layout will be rewritten.  <code>upcast</code>  If <code>TRUE</code> (default), non identical types will be cast to common supertype if there is any. If <code>FALSE</code> or no common super type, having different types will throw an error."},{"location":"man/Expr_rep_extend.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rep_extend.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(c(1, 2, 3))$rep_extend(1:3, n = 5))\n</code></pre> <pre><code>#&gt; shape: (18, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 \u2026   \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_repeat_by.html","title":"Repeat values","text":"<p>Source code</p>"},{"location":"man/Expr_repeat_by.html#description","title":"Description","text":"<p>Repeat the elements in this Series as specified in the given expression. The repeated elements are expanded into a <code>List</code>.</p>"},{"location":"man/Expr_repeat_by.html#usage","title":"Usage","text":"<pre><code>Expr_repeat_by(by)\n</code></pre>"},{"location":"man/Expr_repeat_by.html#arguments","title":"Arguments","text":"<code>by</code>  Expr that determines how often the values will be repeated. The column will be coerced to UInt32."},{"location":"man/Expr_repeat_by.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_repeat_by.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(\"w\", \"x\", \"y\", \"z\"), n = c(-1, 0, 1, 2))\ndf$with_columns(repeated = pl$col(\"a\")$repeat_by(\"n\"))\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 n    \u2506 repeated   \u2502\n#&gt; \u2502 --- \u2506 ---  \u2506 ---        \u2502\n#&gt; \u2502 str \u2506 f64  \u2506 list[str]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 w   \u2506 -1.0 \u2506 null       \u2502\n#&gt; \u2502 x   \u2506 0.0  \u2506 []         \u2502\n#&gt; \u2502 y   \u2506 1.0  \u2506 [\"y\"]      \u2502\n#&gt; \u2502 z   \u2506 2.0  \u2506 [\"z\", \"z\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_replace.html","title":"Replace values by different values","text":"<p>Source code</p>"},{"location":"man/Expr_replace.html#description","title":"Description","text":"<p>This allows one to recode values in a column.</p>"},{"location":"man/Expr_replace.html#usage","title":"Usage","text":"<pre><code>Expr_replace(old, new, default = NULL, return_dtype = NULL)\n</code></pre>"},{"location":"man/Expr_replace.html#arguments","title":"Arguments","text":"<code>old</code>   Can be several things:  <ul> <li>  a vector indicating the values to recode;  </li> <li>  if <code>new</code> is missing, this can be a named list e.g <code>list(old = \u201cnew\u201d)</code> where the names are the old values and the values are the replacements. Note that if old values are numeric, the names must be wrapped in backticks;  </li> <li>  an Expr  </li> </ul> <code>new</code>  Either a vector of length 1, a vector of same length as <code>old</code> or an Expr. If missing, <code>old</code> must be a named list.  <code>default</code>  The default replacement if the value is not in <code>old</code>. Can be an Expr. If <code>NULL</code> (default), then the value doesn\u2019t change.  <code>return_dtype</code>  The data type of the resulting expression. If set to <code>NULL</code> (default), the data type is determined automatically based on the other inputs."},{"location":"man/Expr_replace.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_replace.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(1, 2, 2, 3))\n\n# \"old\" and \"new\" can take vectors of length 1 or of same length\ndf$with_columns(replaced = pl$col(\"a\")$replace(2, 100))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1.0      \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 3.0 \u2506 3.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(replaced = pl$col(\"a\")$replace(c(2, 3), c(100, 200)))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1.0      \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 3.0 \u2506 200.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># \"old\" can be a named list where names are values to replace, and values are\n# the replacements\nmapping = list(`2` = 100, `3` = 200)\ndf$with_columns(replaced = pl$col(\"a\")$replace(mapping, default = -1))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 -1.0     \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 3.0 \u2506 200.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df = pl$DataFrame(a = c(\"x\", \"y\", \"z\"))\nmapping = list(x = 1, y = 2, z = 3)\ndf$with_columns(replaced = pl$col(\"a\")$replace(mapping))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 str \u2506 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 x   \u2506 1.0      \u2502\n#&gt; \u2502 y   \u2506 2.0      \u2502\n#&gt; \u2502 z   \u2506 3.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># one can specify the data type to return instead of automatically inferring it\ndf$with_columns(replaced = pl$col(\"a\")$replace(mapping, return_dtype = pl$Int8))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 str \u2506 i8       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 x   \u2506 1        \u2502\n#&gt; \u2502 y   \u2506 2        \u2502\n#&gt; \u2502 z   \u2506 3        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># \"old\", \"new\", and \"default\" can take Expr\ndf = pl$DataFrame(a = c(1, 2, 2, 3), b = c(1.5, 2.5, 5, 1))\ndf$with_columns(\n  replaced = pl$col(\"a\")$replace(\n    old = pl$col(\"a\")$max(),\n    new = pl$col(\"b\")$sum(),\n    default = pl$col(\"b\"),\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1.5 \u2506 1.5      \u2502\n#&gt; \u2502 2.0 \u2506 2.5 \u2506 2.5      \u2502\n#&gt; \u2502 2.0 \u2506 5.0 \u2506 5.0      \u2502\n#&gt; \u2502 3.0 \u2506 1.0 \u2506 10.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_reshape.html","title":"Reshape","text":"<p>Source code</p>"},{"location":"man/Expr_reshape.html#description","title":"Description","text":"<p>Reshape an Expr to a flat Series or a Series of Lists.</p>"},{"location":"man/Expr_reshape.html#usage","title":"Usage","text":"<pre><code>Expr_reshape(dims)\n</code></pre>"},{"location":"man/Expr_reshape.html#arguments","title":"Arguments","text":"<code>dims</code>  Numeric vec of the dimension sizes. If a -1 is used in any of the dimensions, that dimension is inferred."},{"location":"man/Expr_reshape.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_reshape.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(1:12)$reshape(c(3, 4)))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502               \u2502\n#&gt; \u2502 ---           \u2502\n#&gt; \u2502 list[i32]     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, \u2026 4]   \u2502\n#&gt; \u2502 [5, 6, \u2026 8]   \u2502\n#&gt; \u2502 [9, 10, \u2026 12] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$select(pl$lit(1:12)$reshape(c(3, -1)))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502               \u2502\n#&gt; \u2502 ---           \u2502\n#&gt; \u2502 list[i32]     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, \u2026 4]   \u2502\n#&gt; \u2502 [5, 6, \u2026 8]   \u2502\n#&gt; \u2502 [9, 10, \u2026 12] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_reverse.html","title":"Reverse a variable","text":"<p>Source code</p>"},{"location":"man/Expr_reverse.html#description","title":"Description","text":"<p>Reverse a variable</p>"},{"location":"man/Expr_reverse.html#usage","title":"Usage","text":"<pre><code>Expr_reverse()\n</code></pre>"},{"location":"man/Expr_reverse.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_reverse.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(a = 1:5))$select(pl$col(\"a\")$reverse())\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rle.html","title":"Get the lengths of runs of identical values","text":"<p>Source code</p>"},{"location":"man/Expr_rle.html#description","title":"Description","text":"<p>Get the lengths of runs of identical values</p>"},{"location":"man/Expr_rle.html#usage","title":"Usage","text":"<pre><code>Expr_rle()\n</code></pre>"},{"location":"man/Expr_rle.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rle.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(s = c(1, 1, 2, 1, NA, 1, 3, 3))\ndf$select(pl$col(\"s\")$rle())$unnest(\"s\")\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 lengths \u2506 values \u2502\n#&gt; \u2502 ---     \u2506 ---    \u2502\n#&gt; \u2502 i32     \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2       \u2506 1.0    \u2502\n#&gt; \u2502 1       \u2506 2.0    \u2502\n#&gt; \u2502 1       \u2506 1.0    \u2502\n#&gt; \u2502 1       \u2506 null   \u2502\n#&gt; \u2502 1       \u2506 1.0    \u2502\n#&gt; \u2502 2       \u2506 3.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rle_id.html","title":"Map values to run IDs","text":"<p>Source code</p>"},{"location":"man/Expr_rle_id.html#description","title":"Description","text":"<p>Similar to $rle(), but it maps each value to an ID corresponding to the run into which it falls. This is especially useful when you want to define groups by runs of identical values rather than the values themselves. Note that the ID is 0-indexed.</p>"},{"location":"man/Expr_rle_id.html#usage","title":"Usage","text":"<pre><code>Expr_rle_id()\n</code></pre>"},{"location":"man/Expr_rle_id.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rle_id.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(1, 2, 1, 1, 1, 4))\ndf$with_columns(a_r = pl$col(\"a\")$rle_id())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 a_r \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 0   \u2502\n#&gt; \u2502 2.0 \u2506 1   \u2502\n#&gt; \u2502 1.0 \u2506 2   \u2502\n#&gt; \u2502 1.0 \u2506 2   \u2502\n#&gt; \u2502 1.0 \u2506 2   \u2502\n#&gt; \u2502 4.0 \u2506 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling.html","title":"Create rolling groups based on a time or numeric column","text":"<p>Source code</p>"},{"location":"man/Expr_rolling.html#description","title":"Description","text":"<p>If you have a time series <code>\\&lt;t_0, t_1, \u2026, t_n&gt;</code>, then by default the windows created will be:</p> <ul> <li>  (t_0 - period, t_0\\]  </li> <li>  (t_1 - period, t_1\\]  </li> <li>  \u2026  </li> <li>  (t_n - period, t_n\\]  </li> </ul> <p>whereas if you pass a non-default offset, then the windows will be:</p> <ul> <li>  (t_0 + offset, t_0 + offset + period\\]  </li> <li>  (t_1 + offset, t_1 + offset + period\\]  </li> <li>  \u2026  </li> <li>  (t_n + offset, t_n + offset + period\\]  </li> </ul>"},{"location":"man/Expr_rolling.html#usage","title":"Usage","text":"<pre><code>Expr_rolling(\n  index_column,\n  ...,\n  period,\n  offset = NULL,\n  closed = \"right\",\n  check_sorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling.html#arguments","title":"Arguments","text":"<code>index_column</code>  Column used to group based on the time window. Often of type Date/Datetime. This column must be sorted in ascending order. If this column represents an index, it has to be either Int32 or Int64. Note that Int32 gets temporarily cast to Int64, so if performance matters use an Int64 column.  <code>\u2026</code>  Ignored.  <code>period</code>  A character representing the length of the window, must be non-negative. See the <code>Polars duration string language</code> section for details.  <code>offset</code>  A character representing the offset of the window, or <code>NULL</code> (default). If <code>NULL</code>, <code>-period</code> is used. See the <code>Polars duration string language</code> section for details.  <code>closed</code>  Define which sides of the temporal interval are closed (inclusive). This can be either <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code> or <code>\u201cnone\u201d</code>.  <code>check_sorted</code>  Check whether data is actually sorted. Checking it is expensive so if you are sure the data within the <code>index_column</code> is sorted, you can set this to <code>FALSE</code> but note that if the data actually is unsorted, it will lead to incorrect output."},{"location":"man/Expr_rolling.html#details","title":"Details","text":"<p>In case of a rolling operation on an integer column, the windows are defined by:</p> <ul> <li>  \"1i\" \\# length 1  </li> <li>  \"10i\" \\# length 10  </li> </ul>"},{"location":"man/Expr_rolling.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling.html#polars-duration-string-language","title":"Polars duration string language","text":"<p>Polars duration string language is a simple representation of durations. It is used in many Polars functions that accept durations.</p> <p>It has the following format:</p> <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 calendar day)  </li> <li>  1w (1 calendar week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1q (1 calendar quarter)  </li> <li>  1y (1 calendar year)  </li> </ul> <p>Or combine them: <code>\u201c3d12h4m25s\u201d</code> # 3 days, 12 hours, 4 minutes, and 25 seconds</p> <p>By \"calendar day\", we mean the corresponding time on the next day (which may not be 24 hours, due to daylight savings). Similarly for \"calendar week\", \"calendar month\", \"calendar quarter\", and \"calendar year\".</p>"},{"location":"man/Expr_rolling.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create a DataFrame with a Datetime column and an f64 column\ndates = c(\n  \"2020-01-01 13:45:48\", \"2020-01-01 16:42:13\", \"2020-01-01 16:45:09\",\n  \"2020-01-02 18:12:48\", \"2020-01-03 19:45:32\", \"2020-01-08 23:16:43\"\n)\n\ndf = pl$DataFrame(dt = dates, a = c(3, 7, 5, 9, 2, 1))$\n  with_columns(\n  pl$col(\"dt\")$str$strptime(pl$Datetime(\"us\"), format = \"%Y-%m-%d %H:%M:%S\")$set_sorted()\n)\n\ndf$with_columns(\n  sum_a = pl$sum(\"a\")$rolling(index_column = \"dt\", period = \"2d\"),\n  min_a = pl$min(\"a\")$rolling(index_column = \"dt\", period = \"2d\"),\n  max_a = pl$max(\"a\")$rolling(index_column = \"dt\", period = \"2d\")\n)\n</code></pre> <pre><code>#&gt; shape: (6, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dt                  \u2506 a   \u2506 sum_a \u2506 min_a \u2506 max_a \u2502\n#&gt; \u2502 ---                 \u2506 --- \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 f64 \u2506 f64   \u2506 f64   \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 13:45:48 \u2506 3.0 \u2506 3.0   \u2506 3.0   \u2506 3.0   \u2502\n#&gt; \u2502 2020-01-01 16:42:13 \u2506 7.0 \u2506 10.0  \u2506 3.0   \u2506 7.0   \u2502\n#&gt; \u2502 2020-01-01 16:45:09 \u2506 5.0 \u2506 15.0  \u2506 3.0   \u2506 7.0   \u2502\n#&gt; \u2502 2020-01-02 18:12:48 \u2506 9.0 \u2506 24.0  \u2506 3.0   \u2506 9.0   \u2502\n#&gt; \u2502 2020-01-03 19:45:32 \u2506 2.0 \u2506 11.0  \u2506 2.0   \u2506 9.0   \u2502\n#&gt; \u2502 2020-01-08 23:16:43 \u2506 1.0 \u2506 1.0   \u2506 1.0   \u2506 1.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># we can use \"offset\" to change the start of the window period. Here, with\n# offset = \"1d\", we start the window one day after the value in \"dt\", and\n# then we add a 2-day window relative to the window start.\ndf$with_columns(\n  sum_a_offset1 = pl$sum(\"a\")$rolling(index_column = \"dt\", period = \"2d\", offset = \"1d\")\n)\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dt                  \u2506 a   \u2506 sum_a_offset1 \u2502\n#&gt; \u2502 ---                 \u2506 --- \u2506 ---           \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 f64 \u2506 f64           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 13:45:48 \u2506 3.0 \u2506 11.0          \u2502\n#&gt; \u2502 2020-01-01 16:42:13 \u2506 7.0 \u2506 11.0          \u2502\n#&gt; \u2502 2020-01-01 16:45:09 \u2506 5.0 \u2506 11.0          \u2502\n#&gt; \u2502 2020-01-02 18:12:48 \u2506 9.0 \u2506 2.0           \u2502\n#&gt; \u2502 2020-01-03 19:45:32 \u2506 2.0 \u2506 null          \u2502\n#&gt; \u2502 2020-01-08 23:16:43 \u2506 1.0 \u2506 null          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_max.html","title":"Rolling maximum","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_max.html#description","title":"Description","text":"<p>Compute the rolling (= moving) max over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_max.html#usage","title":"Usage","text":"<pre><code>Expr_rolling_max(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = NULL,\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_max.html#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  Defines whether the temporal window interval is closed or not. Only applicable if <code>by</code> is not <code>NULL</code> (in which case, its possible values are <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code> (default), <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>).  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed)."},{"location":"man/Expr_rolling_max.html#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_max.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_max = pl$col(\"a\")$rolling_max(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_max \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null     \u2502\n#&gt; \u2502 3.0 \u2506 3.0      \u2502\n#&gt; \u2502 2.0 \u2506 3.0      \u2502\n#&gt; \u2502 4.0 \u2506 4.0      \u2502\n#&gt; \u2502 5.0 \u2506 5.0      \u2502\n#&gt; \u2502 6.0 \u2506 6.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_mean.html","title":"Rolling mean","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_mean.html#description","title":"Description","text":"<p>Compute the rolling (= moving) mean over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_mean.html#usage","title":"Usage","text":"<pre><code>Expr_rolling_mean(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = NULL,\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_mean.html#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  Defines whether the temporal window interval is closed or not. Only applicable if <code>by</code> is not <code>NULL</code> (in which case, its possible values are <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code> (default), <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>).  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed)."},{"location":"man/Expr_rolling_mean.html#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_mean.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_mean.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_mean = pl$col(\"a\")$rolling_mean(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_mean \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null      \u2502\n#&gt; \u2502 3.0 \u2506 2.0       \u2502\n#&gt; \u2502 2.0 \u2506 2.5       \u2502\n#&gt; \u2502 4.0 \u2506 3.0       \u2502\n#&gt; \u2502 5.0 \u2506 4.5       \u2502\n#&gt; \u2502 6.0 \u2506 5.5       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_median.html","title":"Rolling median","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_median.html#description","title":"Description","text":"<p>Compute the rolling (= moving) median over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_median.html#usage","title":"Usage","text":"<pre><code>Expr_rolling_median(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = NULL,\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_median.html#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  Defines whether the temporal window interval is closed or not. Only applicable if <code>by</code> is not <code>NULL</code> (in which case, its possible values are <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code> (default), <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>).  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed)."},{"location":"man/Expr_rolling_median.html#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_median.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_median.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_median = pl$col(\"a\")$rolling_median(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_median \u2502\n#&gt; \u2502 --- \u2506 ---         \u2502\n#&gt; \u2502 f64 \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null        \u2502\n#&gt; \u2502 3.0 \u2506 2.0         \u2502\n#&gt; \u2502 2.0 \u2506 2.5         \u2502\n#&gt; \u2502 4.0 \u2506 3.0         \u2502\n#&gt; \u2502 5.0 \u2506 4.5         \u2502\n#&gt; \u2502 6.0 \u2506 5.5         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_min.html","title":"Rolling minimum","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_min.html#description","title":"Description","text":"<p>Compute the rolling (= moving) min over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_min.html#usage","title":"Usage","text":"<pre><code>Expr_rolling_min(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = NULL,\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_min.html#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  Defines whether the temporal window interval is closed or not. Only applicable if <code>by</code> is not <code>NULL</code> (in which case, its possible values are <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code> (default), <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>).  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed)."},{"location":"man/Expr_rolling_min.html#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_min.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_min = pl$col(\"a\")$rolling_min(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_min \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null     \u2502\n#&gt; \u2502 3.0 \u2506 1.0      \u2502\n#&gt; \u2502 2.0 \u2506 2.0      \u2502\n#&gt; \u2502 4.0 \u2506 2.0      \u2502\n#&gt; \u2502 5.0 \u2506 4.0      \u2502\n#&gt; \u2502 6.0 \u2506 5.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_quantile.html","title":"Rolling quantile","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_quantile.html#description","title":"Description","text":"<p>Compute the rolling (= moving) quantile over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_quantile.html#usage","title":"Usage","text":"<pre><code>Expr_rolling_quantile(\n  quantile,\n  interpolation = \"nearest\",\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = NULL,\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_quantile.html#arguments","title":"Arguments","text":"<code>quantile</code>  Quantile between 0 and 1.  <code>interpolation</code>  String, one of <code>\u201cnearest\u201d</code>, <code>\u201chigher\u201d</code>, <code>\u201clower\u201d</code>, <code>\u201cmidpoint\u201d</code>, <code>\u201clinear\u201d</code>.  <code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  Defines whether the temporal window interval is closed or not. Only applicable if <code>by</code> is not <code>NULL</code> (in which case, its possible values are <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code> (default), <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>).  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed)."},{"location":"man/Expr_rolling_quantile.html#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_quantile.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_quantile.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_quant = pl$col(\"a\")$rolling_quantile(0.3, window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_quant \u2502\n#&gt; \u2502 --- \u2506 ---        \u2502\n#&gt; \u2502 f64 \u2506 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null       \u2502\n#&gt; \u2502 3.0 \u2506 1.0        \u2502\n#&gt; \u2502 2.0 \u2506 2.0        \u2502\n#&gt; \u2502 4.0 \u2506 2.0        \u2502\n#&gt; \u2502 5.0 \u2506 4.0        \u2502\n#&gt; \u2502 6.0 \u2506 5.0        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_skew.html","title":"Rolling skew","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_skew.html#description","title":"Description","text":"<p>Compute the rolling (= moving) skewness over the values in this array. A window of length <code>window_size</code> will traverse the array.</p>"},{"location":"man/Expr_rolling_skew.html#usage","title":"Usage","text":"<pre><code>Expr_rolling_skew(window_size, bias = TRUE)\n</code></pre>"},{"location":"man/Expr_rolling_skew.html#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>bias</code>  If <code>FALSE</code>, the calculations are corrected for statistical bias."},{"location":"man/Expr_rolling_skew.html#details","title":"Details","text":"<p>For normally distributed data, the skewness should be about zero. For uni-modal continuous distributions, a skewness value greater than zero means that there is more weight in the right tail of the distribution.</p>"},{"location":"man/Expr_rolling_skew.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_skew.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_skew = pl$col(\"a\")$rolling_skew(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_skew \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null      \u2502\n#&gt; \u2502 3.0 \u2506 0.0       \u2502\n#&gt; \u2502 2.0 \u2506 0.0       \u2502\n#&gt; \u2502 4.0 \u2506 0.0       \u2502\n#&gt; \u2502 5.0 \u2506 0.0       \u2502\n#&gt; \u2502 6.0 \u2506 0.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_std.html","title":"Rolling standard deviation","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_std.html#description","title":"Description","text":"<p>Compute the rolling (= moving) standard deviation over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_std.html#usage","title":"Usage","text":"<pre><code>Expr_rolling_std(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = NULL,\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_std.html#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  Defines whether the temporal window interval is closed or not. Only applicable if <code>by</code> is not <code>NULL</code> (in which case, its possible values are <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code> (default), <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>).  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed)."},{"location":"man/Expr_rolling_std.html#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_std.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_std.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_std = pl$col(\"a\")$rolling_std(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_std \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null     \u2502\n#&gt; \u2502 3.0 \u2506 1.414214 \u2502\n#&gt; \u2502 2.0 \u2506 0.707107 \u2502\n#&gt; \u2502 4.0 \u2506 1.414214 \u2502\n#&gt; \u2502 5.0 \u2506 0.707107 \u2502\n#&gt; \u2502 6.0 \u2506 0.707107 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_sum.html","title":"Rolling sum","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_sum.html#description","title":"Description","text":"<p>Compute the rolling (= moving) sum over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_sum.html#usage","title":"Usage","text":"<pre><code>Expr_rolling_sum(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = NULL,\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_sum.html#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  Defines whether the temporal window interval is closed or not. Only applicable if <code>by</code> is not <code>NULL</code> (in which case, its possible values are <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code> (default), <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>).  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed)."},{"location":"man/Expr_rolling_sum.html#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_sum.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_sum.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_sum = pl$col(\"a\")$rolling_sum(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_sum \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null     \u2502\n#&gt; \u2502 3.0 \u2506 4.0      \u2502\n#&gt; \u2502 2.0 \u2506 5.0      \u2502\n#&gt; \u2502 4.0 \u2506 6.0      \u2502\n#&gt; \u2502 5.0 \u2506 9.0      \u2502\n#&gt; \u2502 6.0 \u2506 11.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_var.html","title":"Rolling variance","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_var.html#description","title":"Description","text":"<p>Compute the rolling (= moving) variance over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_var.html#usage","title":"Usage","text":"<pre><code>Expr_rolling_var(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = NULL,\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_var.html#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  Defines whether the temporal window interval is closed or not. Only applicable if <code>by</code> is not <code>NULL</code> (in which case, its possible values are <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code> (default), <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>).  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed)."},{"location":"man/Expr_rolling_var.html#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_var.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_var.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_var = pl$col(\"a\")$rolling_var(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_var \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null     \u2502\n#&gt; \u2502 3.0 \u2506 2.0      \u2502\n#&gt; \u2502 2.0 \u2506 0.5      \u2502\n#&gt; \u2502 4.0 \u2506 2.0      \u2502\n#&gt; \u2502 5.0 \u2506 0.5      \u2502\n#&gt; \u2502 6.0 \u2506 0.5      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_round.html","title":"Round","text":"<p>Source code</p>"},{"location":"man/Expr_round.html#description","title":"Description","text":"<p>Round underlying floating point data by <code>decimals</code> digits.</p>"},{"location":"man/Expr_round.html#usage","title":"Usage","text":"<pre><code>Expr_round(decimals)\n</code></pre>"},{"location":"man/Expr_round.html#arguments","title":"Arguments","text":"<code>decimals</code>  Number of decimals to round by."},{"location":"man/Expr_round.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_round.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0.33, 0.5, 1.02, 1.5, NaN, NA, Inf, -Inf))$with_columns(\n  round = pl$col(\"a\")$round(1)\n)\n</code></pre> <pre><code>#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 round \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.33 \u2506 0.3   \u2502\n#&gt; \u2502 0.5  \u2506 0.5   \u2502\n#&gt; \u2502 1.02 \u2506 1.0   \u2502\n#&gt; \u2502 1.5  \u2506 1.5   \u2502\n#&gt; \u2502 NaN  \u2506 NaN   \u2502\n#&gt; \u2502 null \u2506 null  \u2502\n#&gt; \u2502 inf  \u2506 inf   \u2502\n#&gt; \u2502 -inf \u2506 -inf  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sample.html","title":"Take a sample","text":"<p>Source code</p>"},{"location":"man/Expr_sample.html#description","title":"Description","text":"<p>Take a sample</p>"},{"location":"man/Expr_sample.html#usage","title":"Usage","text":"<pre><code>Expr_sample(\n  frac = NULL,\n  with_replacement = TRUE,\n  shuffle = FALSE,\n  seed = NULL,\n  n = NULL\n)\n</code></pre>"},{"location":"man/Expr_sample.html#arguments","title":"Arguments","text":"<code>frac</code>  Fraction of items to return (can be higher than 1). Cannot be used with <code>n</code>.  <code>with_replacement</code>  If <code>TRUE</code> (default), allow values to be sampled more than once.  <code>shuffle</code>  Shuffle the order of sampled data points (implicitly <code>TRUE</code> if <code>with_replacement = TRUE</code>).  <code>seed</code>  numeric value of 0 to 2^52 Seed for the random number generator. If <code>NULL</code> (default), a random seed value between 0 and 10000 is picked.  <code>n</code>  Number of items to return. Cannot be used with <code>frac</code>."},{"location":"man/Expr_sample.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sample.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = 1:4)\ndf$select(pl$col(\"a\")$sample(frac = 1, with_replacement = TRUE, seed = 1L))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"a\")$sample(frac = 2, with_replacement = TRUE, seed = 1L))\n</code></pre> <pre><code>#&gt; shape: (8, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"a\")$sample(n = 2, with_replacement = FALSE, seed = 1L))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_search_sorted.html","title":"Where to inject element(s) to maintain sorting","text":"<p>Source code</p>"},{"location":"man/Expr_search_sorted.html#description","title":"Description","text":"<p>Find indices where elements should be inserted to maintain order.</p>"},{"location":"man/Expr_search_sorted.html#usage","title":"Usage","text":"<pre><code>Expr_search_sorted(element)\n</code></pre>"},{"location":"man/Expr_search_sorted.html#arguments","title":"Arguments","text":"<code>element</code>  Element to insert. Can be an Expr or something coercible to an Expr."},{"location":"man/Expr_search_sorted.html#details","title":"Details","text":"<p>This function looks up where to insert element to keep self column sorted. It is assumed the column is already sorted in ascending order (otherwise this leads to wrong results).</p>"},{"location":"man/Expr_search_sorted.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_search_sorted.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(1, 3, 4, 4, 6))\ndf\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 4.0 \u2502\n#&gt; \u2502 4.0 \u2502\n#&gt; \u2502 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># in which row should 5 be inserted in order to not break the sort?\n# (value is 0-indexed)\ndf$select(\n  zero = pl$col(\"a\")$search_sorted(0),\n  three = pl$col(\"a\")$search_sorted(3),\n  five = pl$col(\"a\")$search_sorted(5)\n)\n</code></pre> <pre><code>#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 zero \u2506 three \u2506 five \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---  \u2502\n#&gt; \u2502 u32  \u2506 u32   \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0    \u2506 1     \u2506 4    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_set_sorted.html","title":"Flag an Expr as \"sorted\"","text":"<p>Source code</p>"},{"location":"man/Expr_set_sorted.html#description","title":"Description","text":"<p>This enables downstream code to use fast paths for sorted arrays. WARNING: this doesn\u2019t check whether the data is actually sorted, you have to ensure of that yourself.</p>"},{"location":"man/Expr_set_sorted.html#usage","title":"Usage","text":"<pre><code>Expr_set_sorted(descending = FALSE)\n</code></pre>"},{"location":"man/Expr_set_sorted.html#arguments","title":"Arguments","text":"<code>descending</code>  Sort the columns in descending order."},{"location":"man/Expr_set_sorted.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_set_sorted.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# correct use flag something correctly as ascendingly sorted\ns = pl$select(pl$lit(1:4)$set_sorted()$alias(\"a\"))$get_column(\"a\")\ns$flags\n</code></pre> <pre><code>#&gt; $SORTED_ASC\n#&gt; [1] TRUE\n#&gt; \n#&gt; $SORTED_DESC\n#&gt; [1] FALSE\n</code></pre> <pre><code># incorrect use, flag something as not sorted ascendingly\ns2 = pl$select(pl$lit(c(1, 3, 2, 4))$set_sorted()$alias(\"a\"))$get_column(\"a\")\ns2$sort()\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: 'a' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  3.0\n#&gt;  2.0\n#&gt;  4.0\n#&gt; ]\n</code></pre> <pre><code>s2$flags # returns TRUE while it's not actually sorted\n</code></pre> <pre><code>#&gt; $SORTED_ASC\n#&gt; [1] TRUE\n#&gt; \n#&gt; $SORTED_DESC\n#&gt; [1] FALSE\n</code></pre>"},{"location":"man/Expr_shift.html","title":"Shift values","text":"<p>Source code</p>"},{"location":"man/Expr_shift.html#description","title":"Description","text":"<p>Shift values</p>"},{"location":"man/Expr_shift.html#usage","title":"Usage","text":"<pre><code>Expr_shift(periods = 1)\n</code></pre>"},{"location":"man/Expr_shift.html#arguments","title":"Arguments","text":"<code>periods</code>  Number of periods to shift, may be negative."},{"location":"man/Expr_shift.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_shift.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 2, 4, 5, 8))$\n  with_columns(\n  pl$col(\"a\")$shift(-2)$alias(\"shift-2\"),\n  pl$col(\"a\")$shift(2)$alias(\"shift+2\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 shift-2 \u2506 shift+2 \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 f64 \u2506 f64     \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 4.0     \u2506 null    \u2502\n#&gt; \u2502 2.0 \u2506 5.0     \u2506 null    \u2502\n#&gt; \u2502 4.0 \u2506 8.0     \u2506 1.0     \u2502\n#&gt; \u2502 5.0 \u2506 null    \u2506 2.0     \u2502\n#&gt; \u2502 8.0 \u2506 null    \u2506 4.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_shift_and_fill.html","title":"Shift and fill values","text":"<p>Source code</p>"},{"location":"man/Expr_shift_and_fill.html#description","title":"Description","text":"<p>Shift the values by a given period and fill the resulting null values.</p>"},{"location":"man/Expr_shift_and_fill.html#usage","title":"Usage","text":"<pre><code>Expr_shift_and_fill(periods, fill_value)\n</code></pre>"},{"location":"man/Expr_shift_and_fill.html#arguments","title":"Arguments","text":"<code>periods</code>  Number of periods to shift, may be negative.  <code>fill_value</code>  Fill null values with the result of this expression."},{"location":"man/Expr_shift_and_fill.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_shift_and_fill.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 2, 4, 5, 8))$\n  with_columns(\n  pl$col(\"a\")$shift_and_fill(-2, fill_value = 42)$alias(\"shift-2\"),\n  pl$col(\"a\")$shift_and_fill(2, fill_value = pl$col(\"a\") / 2)$alias(\"shift+2\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 shift-2 \u2506 shift+2 \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 f64 \u2506 f64     \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 4.0     \u2506 0.5     \u2502\n#&gt; \u2502 2.0 \u2506 5.0     \u2506 0.5     \u2502\n#&gt; \u2502 4.0 \u2506 8.0     \u2506 1.0     \u2502\n#&gt; \u2502 5.0 \u2506 42.0    \u2506 2.0     \u2502\n#&gt; \u2502 8.0 \u2506 42.0    \u2506 4.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_shrink_dtype.html","title":"Shrink numeric columns to the minimal required datatype","text":"<p>Source code</p>"},{"location":"man/Expr_shrink_dtype.html#description","title":"Description","text":"<p>Shrink to the dtype needed to fit the extrema of this Series. This can be used to reduce memory pressure.</p>"},{"location":"man/Expr_shrink_dtype.html#usage","title":"Usage","text":"<pre><code>Expr_shrink_dtype()\n</code></pre>"},{"location":"man/Expr_shrink_dtype.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_shrink_dtype.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = 1:3,\n  b = c(1, 2, 3)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1.0 \u2502\n#&gt; \u2502 2   \u2506 2.0 \u2502\n#&gt; \u2502 3   \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(pl$all()$shrink_dtype()$name$suffix(\"_shrunk\"))\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 a_shrunk \u2506 b_shrunk \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 i32 \u2506 f64 \u2506 i8       \u2506 f32      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1.0 \u2506 1        \u2506 1.0      \u2502\n#&gt; \u2502 2   \u2506 2.0 \u2506 2        \u2506 2.0      \u2502\n#&gt; \u2502 3   \u2506 3.0 \u2506 3        \u2506 3.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_shuffle.html","title":"Shuffle values","text":"<p>Source code</p>"},{"location":"man/Expr_shuffle.html#description","title":"Description","text":"<p>Shuffle values</p>"},{"location":"man/Expr_shuffle.html#usage","title":"Usage","text":"<pre><code>Expr_shuffle(seed = NULL)\n</code></pre>"},{"location":"man/Expr_shuffle.html#arguments","title":"Arguments","text":"<code>seed</code>  numeric value of 0 to 2^52 Seed for the random number generator. If <code>NULL</code> (default), a random seed value between 0 and 10000 is picked."},{"location":"man/Expr_shuffle.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_shuffle.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:4)$with_columns(shuff = pl$col(\"a\")$shuffle(seed = 1))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 shuff \u2502\n#&gt; \u2502 --- \u2506 ---   \u2502\n#&gt; \u2502 i32 \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 2     \u2502\n#&gt; \u2502 2   \u2506 3     \u2502\n#&gt; \u2502 3   \u2506 4     \u2502\n#&gt; \u2502 4   \u2506 1     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sign.html","title":"Get the sign of elements","text":"<p>Source code</p>"},{"location":"man/Expr_sign.html#description","title":"Description","text":"<p>Get the sign of elements</p>"},{"location":"man/Expr_sign.html#usage","title":"Usage","text":"<pre><code>Expr_sign()\n</code></pre>"},{"location":"man/Expr_sign.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sign.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(.9, -3, -0, 0, 4, NA_real_))$\n  with_columns(sign = pl$col(\"a\")$sign())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 sign \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 i64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.9  \u2506 1    \u2502\n#&gt; \u2502 -3.0 \u2506 -1   \u2502\n#&gt; \u2502 -0.0 \u2506 0    \u2502\n#&gt; \u2502 0.0  \u2506 0    \u2502\n#&gt; \u2502 4.0  \u2506 1    \u2502\n#&gt; \u2502 null \u2506 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sin.html","title":"Compute sine","text":"<p>Source code</p>"},{"location":"man/Expr_sin.html#description","title":"Description","text":"<p>Compute sine</p>"},{"location":"man/Expr_sin.html#usage","title":"Usage","text":"<pre><code>Expr_sin()\n</code></pre>"},{"location":"man/Expr_sin.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sin.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0, pi / 2, pi, NA_real_))$\n  with_columns(sine = pl$col(\"a\")$sin())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 sine       \u2502\n#&gt; \u2502 ---      \u2506 ---        \u2502\n#&gt; \u2502 f64      \u2506 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0      \u2506 0.0        \u2502\n#&gt; \u2502 1.570796 \u2506 1.0        \u2502\n#&gt; \u2502 3.141593 \u2506 1.2246e-16 \u2502\n#&gt; \u2502 null     \u2506 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sinh.html","title":"Compute hyperbolic sine","text":"<p>Source code</p>"},{"location":"man/Expr_sinh.html#description","title":"Description","text":"<p>Compute hyperbolic sine</p>"},{"location":"man/Expr_sinh.html#usage","title":"Usage","text":"<pre><code>Expr_sinh()\n</code></pre>"},{"location":"man/Expr_sinh.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sinh.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, asinh(0.5), 0, 1, NA_real_))$\n  with_columns(sinh = pl$col(\"a\")$sinh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 sinh      \u2502\n#&gt; \u2502 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -1.175201 \u2502\n#&gt; \u2502 0.481212 \u2506 0.5       \u2502\n#&gt; \u2502 0.0      \u2506 0.0       \u2502\n#&gt; \u2502 1.0      \u2506 1.175201  \u2502\n#&gt; \u2502 null     \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_skew.html","title":"Skewness","text":"<p>Source code</p>"},{"location":"man/Expr_skew.html#description","title":"Description","text":"<p>Compute the sample skewness of a data set.</p>"},{"location":"man/Expr_skew.html#usage","title":"Usage","text":"<pre><code>Expr_skew(bias = TRUE)\n</code></pre>"},{"location":"man/Expr_skew.html#arguments","title":"Arguments","text":"<code>bias</code>  If <code>FALSE</code>, then the calculations are corrected for statistical bias."},{"location":"man/Expr_skew.html#details","title":"Details","text":"<p>For normally distributed data, the skewness should be about zero. For uni-modal continuous distributions, a skewness value greater than zero means that there is more weight in the right tail of the distribution.</p>"},{"location":"man/Expr_skew.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_skew.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = c(1:3, 2:1)))\ndf$select(pl$col(\"a\")$skew())\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.343622 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_slice.html","title":"Get a slice of an Expr","text":"<p>Source code</p>"},{"location":"man/Expr_slice.html#description","title":"Description","text":"<p>Performing a slice of length 1 on a subset of columns will recycle this value in those columns but will not change the number of rows in the data. See examples.</p>"},{"location":"man/Expr_slice.html#usage","title":"Usage","text":"<pre><code>Expr_slice(offset, length = NULL)\n</code></pre>"},{"location":"man/Expr_slice.html#arguments","title":"Arguments","text":"<code>offset</code>  Numeric or expression, zero-indexed. Indicates where to start the slice. A negative value is one-indexed and starts from the end.  <code>length</code>  Maximum number of elements contained in the slice. Default is full data."},{"location":"man/Expr_slice.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_slice.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# as head\npl$DataFrame(list(a = 0:100))$select(\n  pl$all()$slice(0, 6)\n)\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># as tail\npl$DataFrame(list(a = 0:100))$select(\n  pl$all()$slice(-6, 6)\n)\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 95  \u2502\n#&gt; \u2502 96  \u2502\n#&gt; \u2502 97  \u2502\n#&gt; \u2502 98  \u2502\n#&gt; \u2502 99  \u2502\n#&gt; \u2502 100 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$DataFrame(list(a = 0:100))$select(\n  pl$all()$slice(80)\n)\n</code></pre> <pre><code>#&gt; shape: (21, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 80  \u2502\n#&gt; \u2502 81  \u2502\n#&gt; \u2502 82  \u2502\n#&gt; \u2502 83  \u2502\n#&gt; \u2502 84  \u2502\n#&gt; \u2502 \u2026   \u2502\n#&gt; \u2502 96  \u2502\n#&gt; \u2502 97  \u2502\n#&gt; \u2502 98  \u2502\n#&gt; \u2502 99  \u2502\n#&gt; \u2502 100 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># recycling\npl$DataFrame(mtcars)$with_columns(pl$col(\"mpg\")$slice(0, 1))\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.0 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 21.0 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.0 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 21.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.0 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sort.html","title":"Sort an Expr","text":"<p>Source code</p>"},{"location":"man/Expr_sort.html#description","title":"Description","text":"<p>Sort this column. If used in a groupby context, the groups are sorted.</p>"},{"location":"man/Expr_sort.html#usage","title":"Usage","text":"<pre><code>Expr_sort(descending = FALSE, nulls_last = FALSE)\n</code></pre>"},{"location":"man/Expr_sort.html#arguments","title":"Arguments","text":"<code>descending</code>  Sort in descending order. When sorting by multiple columns, can be specified per column by passing a vector of booleans.  <code>nulls_last</code>  If <code>TRUE</code>, place nulls values last."},{"location":"man/Expr_sort.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sort.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(6, 1, 0, NA, Inf, NaN))$\n  with_columns(sorted = pl$col(\"a\")$sort())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 sorted \u2502\n#&gt; \u2502 ---  \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0  \u2506 null   \u2502\n#&gt; \u2502 1.0  \u2506 0.0    \u2502\n#&gt; \u2502 0.0  \u2506 1.0    \u2502\n#&gt; \u2502 null \u2506 6.0    \u2502\n#&gt; \u2502 inf  \u2506 inf    \u2502\n#&gt; \u2502 NaN  \u2506 NaN    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sort_by.html","title":"Sort Expr by order of others","text":"<p>Source code</p>"},{"location":"man/Expr_sort_by.html#description","title":"Description","text":"<p>Sort this column by the ordering of another column, or multiple other columns. If used in a groupby context, the groups are sorted.</p>"},{"location":"man/Expr_sort_by.html#usage","title":"Usage","text":"<pre><code>Expr_sort_by(by, descending = FALSE)\n</code></pre>"},{"location":"man/Expr_sort_by.html#arguments","title":"Arguments","text":"<code>by</code>  One expression or a list of expressions and/or strings (interpreted as column names).  <code>descending</code>  Sort in descending order. When sorting by multiple columns, can be specified per column by passing a vector of booleans."},{"location":"man/Expr_sort_by.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sort_by.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  group = c(\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"),\n  value1 = c(98, 1, 3, 2, 99, 100),\n  value2 = c(\"d\", \"f\", \"b\", \"e\", \"c\", \"a\")\n)\n\n# by one column/expression\ndf$with_columns(\n  sorted = pl$col(\"group\")$sort_by(\"value1\")\n)\n</code></pre> <pre><code>#&gt; shape: (6, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2506 value1 \u2506 value2 \u2506 sorted \u2502\n#&gt; \u2502 ---   \u2506 ---    \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 str   \u2506 f64    \u2506 str    \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a     \u2506 98.0   \u2506 d      \u2506 a      \u2502\n#&gt; \u2502 a     \u2506 1.0    \u2506 f      \u2506 b      \u2502\n#&gt; \u2502 a     \u2506 3.0    \u2506 b      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 2.0    \u2506 e      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 99.0   \u2506 c      \u2506 b      \u2502\n#&gt; \u2502 b     \u2506 100.0  \u2506 a      \u2506 b      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by two columns/expressions\ndf$with_columns(\n  sorted = pl$col(\"group\")$sort_by(\n    list(\"value2\", pl$col(\"value1\")),\n    descending = c(TRUE, FALSE)\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (6, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2506 value1 \u2506 value2 \u2506 sorted \u2502\n#&gt; \u2502 ---   \u2506 ---    \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 str   \u2506 f64    \u2506 str    \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a     \u2506 98.0   \u2506 d      \u2506 a      \u2502\n#&gt; \u2502 a     \u2506 1.0    \u2506 f      \u2506 b      \u2502\n#&gt; \u2502 a     \u2506 3.0    \u2506 b      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 2.0    \u2506 e      \u2506 b      \u2502\n#&gt; \u2502 b     \u2506 99.0   \u2506 c      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 100.0  \u2506 a      \u2506 b      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by some expression\ndf$with_columns(\n  sorted = pl$col(\"group\")$sort_by(pl$col(\"value1\")$sort(descending = TRUE))\n)\n</code></pre> <pre><code>#&gt; shape: (6, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2506 value1 \u2506 value2 \u2506 sorted \u2502\n#&gt; \u2502 ---   \u2506 ---    \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 str   \u2506 f64    \u2506 str    \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a     \u2506 98.0   \u2506 d      \u2506 b      \u2502\n#&gt; \u2502 a     \u2506 1.0    \u2506 f      \u2506 b      \u2502\n#&gt; \u2502 a     \u2506 3.0    \u2506 b      \u2506 b      \u2502\n#&gt; \u2502 b     \u2506 2.0    \u2506 e      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 99.0   \u2506 c      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 100.0  \u2506 a      \u2506 a      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sqrt.html","title":"Compute the square root of the elements","text":"<p>Source code</p>"},{"location":"man/Expr_sqrt.html#description","title":"Description","text":"<p>Compute the square root of the elements</p>"},{"location":"man/Expr_sqrt.html#usage","title":"Usage","text":"<pre><code>Expr_sqrt()\n</code></pre>"},{"location":"man/Expr_sqrt.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sqrt.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = -1:3)$with_columns(a_sqrt = pl$col(\"a\")$sqrt())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 a_sqrt   \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 i32 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1  \u2506 NaN      \u2502\n#&gt; \u2502 0   \u2506 0.0      \u2502\n#&gt; \u2502 1   \u2506 1.0      \u2502\n#&gt; \u2502 2   \u2506 1.414214 \u2502\n#&gt; \u2502 3   \u2506 1.732051 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_std.html","title":"Get standard deviation","text":"<p>Source code</p>"},{"location":"man/Expr_std.html#description","title":"Description","text":"<p>Get standard deviation</p>"},{"location":"man/Expr_std.html#usage","title":"Usage","text":"<pre><code>Expr_std(ddof = 1)\n</code></pre>"},{"location":"man/Expr_std.html#arguments","title":"Arguments","text":"<code>ddof</code>  An integer representing \"Delta Degrees of Freedom\": the divisor used in the calculation is <code>N - ddof</code>, where <code>N</code> represents the number of elements. By default ddof is <code>1</code>."},{"location":"man/Expr_std.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_std.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(1:5)$std())\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502          \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.581139 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sub.html","title":"Substract two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_sub.html#description","title":"Description","text":"<p>Method equivalent of subtraction operator <code>expr - other</code>.</p>"},{"location":"man/Expr_sub.html#usage","title":"Usage","text":"<pre><code>Expr_sub(other)\n</code></pre>"},{"location":"man/Expr_sub.html#arguments","title":"Arguments","text":"<code>other</code>  Numeric literal or expression value."},{"location":"man/Expr_sub.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sub.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> </ul>"},{"location":"man/Expr_sub.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = 0:4)\n\ndf$with_columns(\n  `x-2` = pl$col(\"x\")$sub(2),\n  `x-expr` = pl$col(\"x\")$sub(pl$col(\"x\")$cum_sum())\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 x-2  \u2506 x-expr \u2502\n#&gt; \u2502 --- \u2506 ---  \u2506 ---    \u2502\n#&gt; \u2502 i32 \u2506 f64  \u2506 i32    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 -2.0 \u2506 0      \u2502\n#&gt; \u2502 1   \u2506 -1.0 \u2506 0      \u2502\n#&gt; \u2502 2   \u2506 0.0  \u2506 -1     \u2502\n#&gt; \u2502 3   \u2506 1.0  \u2506 -3     \u2502\n#&gt; \u2502 4   \u2506 2.0  \u2506 -6     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sum.html","title":"Get sum value","text":"<p>Source code</p>"},{"location":"man/Expr_sum.html#description","title":"Description","text":"<p>Get sum value</p>"},{"location":"man/Expr_sum.html#usage","title":"Usage","text":"<pre><code>Expr_sum()\n</code></pre>"},{"location":"man/Expr_sum.html#details","title":"Details","text":"<p>The dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Expr_sum.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sum.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1L, NA, 2L))$\n  with_columns(sum = pl$col(\"x\")$sum())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 sum \u2502\n#&gt; \u2502 ---  \u2506 --- \u2502\n#&gt; \u2502 i32  \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 3   \u2502\n#&gt; \u2502 null \u2506 3   \u2502\n#&gt; \u2502 2    \u2506 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_tail.html","title":"Get the last n elements","text":"<p>Source code</p>"},{"location":"man/Expr_tail.html#description","title":"Description","text":"<p>Get the last n elements</p>"},{"location":"man/Expr_tail.html#usage","title":"Usage","text":"<pre><code>Expr_tail(n = 10)\n</code></pre>"},{"location":"man/Expr_tail.html#arguments","title":"Arguments","text":"<code>n</code>  Number of elements to take."},{"location":"man/Expr_tail.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_tail.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = 1:11)$select(pl$col(\"x\")$tail(3))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 9   \u2502\n#&gt; \u2502 10  \u2502\n#&gt; \u2502 11  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_tan.html","title":"Compute tangent","text":"<p>Source code</p>"},{"location":"man/Expr_tan.html#description","title":"Description","text":"<p>Compute tangent</p>"},{"location":"man/Expr_tan.html#usage","title":"Usage","text":"<pre><code>Expr_tan()\n</code></pre>"},{"location":"man/Expr_tan.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_tan.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0, pi / 2, pi, NA_real_))$\n  with_columns(tangent = pl$col(\"a\")$tan())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 tangent     \u2502\n#&gt; \u2502 ---      \u2506 ---         \u2502\n#&gt; \u2502 f64      \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0      \u2506 0.0         \u2502\n#&gt; \u2502 1.570796 \u2506 1.6331e16   \u2502\n#&gt; \u2502 3.141593 \u2506 -1.2246e-16 \u2502\n#&gt; \u2502 null     \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_tanh.html","title":"Compute hyperbolic tangent","text":"<p>Source code</p>"},{"location":"man/Expr_tanh.html#description","title":"Description","text":"<p>Compute hyperbolic tangent</p>"},{"location":"man/Expr_tanh.html#usage","title":"Usage","text":"<pre><code>Expr_tanh()\n</code></pre>"},{"location":"man/Expr_tanh.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_tanh.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, atanh(0.5), 0, 1, NA_real_))$\n  with_columns(tanh = pl$col(\"a\")$tanh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 tanh      \u2502\n#&gt; \u2502 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -0.761594 \u2502\n#&gt; \u2502 0.549306 \u2506 0.5       \u2502\n#&gt; \u2502 0.0      \u2506 0.0       \u2502\n#&gt; \u2502 1.0      \u2506 0.761594  \u2502\n#&gt; \u2502 null     \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_to_physical.html","title":"Cast an Expr to its physical representation","text":"<p>Source code</p>"},{"location":"man/Expr_to_physical.html#description","title":"Description","text":"<p>The following DataTypes will be converted:</p> <ul> <li>  Date -\\&gt; Int32  </li> <li>  Datetime -\\&gt; Int64  </li> <li>  Time -\\&gt; Int64  </li> <li>  Duration -\\&gt; Int64  </li> <li>  Categorical -\\&gt; UInt32  </li> <li>  List(inner) -\\&gt; List(physical of inner) Other data types will be left unchanged.  </li> </ul>"},{"location":"man/Expr_to_physical.html#usage","title":"Usage","text":"<pre><code>Expr_to_physical()\n</code></pre>"},{"location":"man/Expr_to_physical.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_to_physical.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  list(vals = c(\"a\", \"x\", NA, \"a\", \"b\"))\n)$with_columns(\n  pl$col(\"vals\")$cast(pl$Categorical()),\n  pl$col(\"vals\")\n  $cast(pl$Categorical())\n  $to_physical()\n  $alias(\"vals_physical\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 vals \u2506 vals_physical \u2502\n#&gt; \u2502 ---  \u2506 ---           \u2502\n#&gt; \u2502 cat  \u2506 u32           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a    \u2506 0             \u2502\n#&gt; \u2502 x    \u2506 1             \u2502\n#&gt; \u2502 null \u2506 null          \u2502\n#&gt; \u2502 a    \u2506 0             \u2502\n#&gt; \u2502 b    \u2506 2             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_to_r.html","title":"Convert an Expr to R output","text":"<p>Source code</p>"},{"location":"man/Expr_to_r.html#description","title":"Description","text":"<p>This is mostly useful to debug an expression. It evaluates the Expr in an empty DataFrame and return the first Series to R.</p>"},{"location":"man/Expr_to_r.html#usage","title":"Usage","text":"<pre><code>Expr_to_r(\n  df = NULL,\n  i = 0,\n  ...,\n  int64_conversion = polars_options()\\$int64_conversion\n)\n</code></pre>"},{"location":"man/Expr_to_r.html#arguments","title":"Arguments","text":"<code>df</code>  If <code>NULL</code> (default), it evaluates the Expr in an empty DataFrame. Otherwise, provide a DataFrame that the Expr should be evaluated in.  <code>i</code>  Numeric column to extract. Default is zero (which gives the first column).  <code>\u2026</code>  Any args pased to <code>as.data.frame()</code>.  <code>int64_conversion</code>   How should Int64 values be handled when converting a polars object to R?  <ul> <li> <code>\u201cdouble\u201d</code> (default) converts the integer values to double.  </li> <li> <code>\u201cbit64\u201d</code> uses <code>bit64::as.integer64()</code> to do the conversion (requires the package <code>bit64</code> to be attached).  </li> <li> <code>\u201cstring\u201d</code> converts Int64 values to character.  </li> </ul>"},{"location":"man/Expr_to_r.html#value","title":"Value","text":"<p>R object</p>"},{"location":"man/Expr_to_r.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(1:3)$to_r()\n</code></pre> <pre><code>#&gt; [1] 1 2 3\n</code></pre>"},{"location":"man/Expr_to_series.html","title":"Convert Literal to Series","text":"<p>Source code</p>"},{"location":"man/Expr_to_series.html#description","title":"Description","text":"<p>Collect an expression based on literals into a Series.</p>"},{"location":"man/Expr_to_series.html#usage","title":"Usage","text":"<pre><code>Expr_to_series()\n</code></pre>"},{"location":"man/Expr_to_series.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Expr_to_series.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(1:5)$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt;  5\n#&gt; ]\n</code></pre>"},{"location":"man/Expr_to_struct.html","title":"Convert an Expr to a Struct","text":"<p>Source code</p>"},{"location":"man/Expr_to_struct.html#description","title":"Description","text":"<p>Convert an Expr to a Struct</p>"},{"location":"man/Expr_to_struct.html#usage","title":"Usage","text":"<pre><code>Expr_to_struct()\n</code></pre>"},{"location":"man/Expr_to_struct.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_to_struct.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris[, 3:5])$with_columns(\n  my_struct = pl$all()$to_struct()\n)\n</code></pre> <pre><code>#&gt; shape: (150, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Length \u2506 Petal.Width \u2506 Species   \u2506 my_struct             \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---       \u2506 ---                   \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 cat       \u2506 struct[3]             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2506 {1.4,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2506 {1.4,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 1.3          \u2506 0.2         \u2506 setosa    \u2506 {1.3,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 1.5          \u2506 0.2         \u2506 setosa    \u2506 {1.5,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2506 {1.4,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026         \u2506 \u2026                     \u2502\n#&gt; \u2502 5.2          \u2506 2.3         \u2506 virginica \u2506 {5.2,2.3,\"virginica\"} \u2502\n#&gt; \u2502 5.0          \u2506 1.9         \u2506 virginica \u2506 {5.0,1.9,\"virginica\"} \u2502\n#&gt; \u2502 5.2          \u2506 2.0         \u2506 virginica \u2506 {5.2,2.0,\"virginica\"} \u2502\n#&gt; \u2502 5.4          \u2506 2.3         \u2506 virginica \u2506 {5.4,2.3,\"virginica\"} \u2502\n#&gt; \u2502 5.1          \u2506 1.8         \u2506 virginica \u2506 {5.1,1.8,\"virginica\"} \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_top_k.html","title":"Top k values","text":"<p>Source code</p>"},{"location":"man/Expr_top_k.html#description","title":"Description","text":"<p>Return the <code>k</code> largest elements. This has time complexity: <code> O(n + k \\log{}n - ) </code></p>"},{"location":"man/Expr_top_k.html#usage","title":"Usage","text":"<pre><code>Expr_top_k(k)\n</code></pre>"},{"location":"man/Expr_top_k.html#arguments","title":"Arguments","text":"<code>k</code>  Number of top values to get"},{"location":"man/Expr_top_k.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_top_k.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(6, 1, 0, NA, Inf, NaN))$select(pl$col(\"a\")$top_k(5))\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 NaN \u2502\n#&gt; \u2502 inf \u2502\n#&gt; \u2502 6.0 \u2502\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 0.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_unique.html","title":"Get unique values","text":"<p>Source code</p>"},{"location":"man/Expr_unique.html#description","title":"Description","text":"<p>Get unique values</p>"},{"location":"man/Expr_unique.html#usage","title":"Usage","text":"<pre><code>Expr_unique(maintain_order = FALSE)\n</code></pre>"},{"location":"man/Expr_unique.html#arguments","title":"Arguments","text":"<code>maintain_order</code>  If <code>TRUE</code>, the unique values are returned in order of appearance."},{"location":"man/Expr_unique.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$select(pl$col(\"Species\")$unique())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species    \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 cat        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2502\n#&gt; \u2502 versicolor \u2502\n#&gt; \u2502 virginica  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_unique_counts.html","title":"Count unique values","text":"<p>Source code</p>"},{"location":"man/Expr_unique_counts.html#description","title":"Description","text":"<p>Return a count of the unique values in the order of appearance. This method differs from <code>$value_counts()</code> in that it does not return the values, only the counts and it might be faster.</p>"},{"location":"man/Expr_unique_counts.html#usage","title":"Usage","text":"<pre><code>Expr_unique_counts()\n</code></pre>"},{"location":"man/Expr_unique_counts.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_unique_counts.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$select(pl$col(\"Species\")$unique_counts())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 50      \u2502\n#&gt; \u2502 50      \u2502\n#&gt; \u2502 50      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_upper_bound.html","title":"Find the upper bound of a DataType","text":"<p>Source code</p>"},{"location":"man/Expr_upper_bound.html#description","title":"Description","text":"<p>Find the upper bound of a DataType</p>"},{"location":"man/Expr_upper_bound.html#usage","title":"Usage","text":"<pre><code>Expr_upper_bound()\n</code></pre>"},{"location":"man/Expr_upper_bound.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_upper_bound.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  x = c(1, 2, 3), y = -2:0,\n  schema = list(x = pl$Float64, y = pl$Int32)\n)$\n  select(pl$all()$upper_bound())\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y          \u2502\n#&gt; \u2502 --- \u2506 ---        \u2502\n#&gt; \u2502 f64 \u2506 i32        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 inf \u2506 2147483647 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_value_counts.html","title":"Value counts","text":"<p>Source code</p>"},{"location":"man/Expr_value_counts.html#description","title":"Description","text":"<p>Count all unique values and create a struct mapping value to count.</p>"},{"location":"man/Expr_value_counts.html#usage","title":"Usage","text":"<pre><code>Expr_value_counts(sort = FALSE, parallel = FALSE)\n</code></pre>"},{"location":"man/Expr_value_counts.html#arguments","title":"Arguments","text":"<code>sort</code>  Ensure the output is sorted from most values to least.  <code>parallel</code>  Better to turn this off in the aggregation context, as it can lead to contention."},{"location":"man/Expr_value_counts.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_value_counts.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris)$select(pl$col(\"Species\")$value_counts())\ndf\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species           \u2502\n#&gt; \u2502 ---               \u2502\n#&gt; \u2502 struct[2]         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"virginica\",50}  \u2502\n#&gt; \u2502 {\"setosa\",50}     \u2502\n#&gt; \u2502 {\"versicolor\",50} \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$unnest()$to_data_frame() # recommended to unnest structs before converting to R\n</code></pre> <pre><code>#&gt;      Species count\n#&gt; 1  virginica    50\n#&gt; 2     setosa    50\n#&gt; 3 versicolor    50\n</code></pre>"},{"location":"man/Expr_var.html","title":"Get variance","text":"<p>Source code</p>"},{"location":"man/Expr_var.html#description","title":"Description","text":"<p>Get variance</p>"},{"location":"man/Expr_var.html#usage","title":"Usage","text":"<pre><code>Expr_var(ddof = 1)\n</code></pre>"},{"location":"man/Expr_var.html#arguments","title":"Arguments","text":"<code>ddof</code>  An integer representing \"Delta Degrees of Freedom\": the divisor used in the calculation is <code>N - ddof</code>, where <code>N</code> represents the number of elements. By default ddof is <code>1</code>."},{"location":"man/Expr_var.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_var.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(1:5)$var())\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2.5 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_when_then_otherwise.html","title":"Make a when-then-otherwise expression","text":""},{"location":"man/Expr_when_then_otherwise.html#description","title":"Description","text":"<p><code>when-then-otherwise</code> is similar to R <code>ifelse()</code>. Always initiated by a <code>pl$when(\\&lt;condition&gt;)$then(\\&lt;value if condition&gt;)</code>, and optionally followed by chaining one or more <code>$when(\\&lt;condition&gt;)$then(\\&lt;value if condition&gt;)</code> statements.</p>"},{"location":"man/Expr_when_then_otherwise.html#usage","title":"Usage","text":"<pre><code>pl_when(...)\n\nWhen_then(statement)\n\nThen_when(...)\n\nThen_otherwise(statement)\n\nChainedWhen_then(statement)\n\nChainedThen_when(...)\n\nChainedThen_otherwise(statement)\n</code></pre>"},{"location":"man/Expr_when_then_otherwise.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Expr or something coercible to an Expr that returns a boolian each row.  <code>statement</code>  Expr or something coercible to an Expr value to insert in <code>$then()</code> or <code>$otherwise()</code>. A character vector is parsed as column names."},{"location":"man/Expr_when_then_otherwise.html#details","title":"Details","text":"<p>Chained when-then operations should be read like <code>if, else if, else if, \u2026</code> in R, not as <code>if, if, if, \u2026</code>, i.e.\u00a0the first condition that evaluates to <code>true</code> will be picked.</p> <p>If none of the conditions are <code>true</code>, an optional <code>$otherwise(\\&lt;value if all statements are false&gt;)</code> can be appended at the end. If not appended, and none of the conditions are <code>true</code>, <code>null</code> will be returned.</p> <p><code>RPolarsThen</code> objects and <code>RPolarsChainedThen</code> objects (returned by <code>$then()</code>) stores the same methods as Expr.</p>"},{"location":"man/Expr_when_then_otherwise.html#value","title":"Value","text":"<ul> <li> <code>pl$when()</code> returns a <code>When</code> object  </li> <li> <code>\\$then() returns a <code>Then</code> object   <li> <code>\\$when() returns a <code>ChainedWhen</code> object   <li> <code>\\$then() returns a <code>ChainedThen</code> object   <li> <code>$otherwise()</code> returns an Expr object.  </li>"},{"location":"man/Expr_when_then_otherwise.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(1, 3, 4), bar = c(3, 4, 0))\n\n# Add a column with the value 1, where column \"foo\" &gt; 2 and the value -1\n# where it isn\u2019t.\ndf$with_columns(\n  val = pl$when(pl$col(\"foo\") &gt; 2)$then(1)$otherwise(-1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 val  \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3.0 \u2506 -1.0 \u2502\n#&gt; \u2502 3.0 \u2506 4.0 \u2506 1.0  \u2502\n#&gt; \u2502 4.0 \u2506 0.0 \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># With multiple when-then chained:\ndf$with_columns(\n  val = pl$when(pl$col(\"foo\") &gt; 2)\n  $then(1)\n  $when(pl$col(\"bar\") &gt; 2)\n  $then(4)\n  $otherwise(-1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 val \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3.0 \u2506 4.0 \u2502\n#&gt; \u2502 3.0 \u2506 4.0 \u2506 1.0 \u2502\n#&gt; \u2502 4.0 \u2506 0.0 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># The `$otherwise` at the end is optional.\n# If left out, any rows where none of the `$when()` expressions are evaluated to `true`,\n# are set to `null`\ndf$with_columns(\n  val = pl$when(pl$col(\"foo\") &gt; 2)$then(1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 val  \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3.0 \u2506 null \u2502\n#&gt; \u2502 3.0 \u2506 4.0 \u2506 1.0  \u2502\n#&gt; \u2502 4.0 \u2506 0.0 \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Pass multiple predicates, each of which must be met:\ndf$with_columns(\n  val = pl$when(\n    pl$col(\"bar\") &gt; 0,\n    pl$col(\"foo\") %% 2 != 0\n  )\n  $then(99)\n  $otherwise(-1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 val  \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3.0 \u2506 99.0 \u2502\n#&gt; \u2502 3.0 \u2506 4.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0 \u2506 0.0 \u2506 -1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># In `$then()`, a character vector is parsed as column names\ndf$with_columns(baz = pl$when(pl$col(\"foo\") %% 2 == 1)$then(\"bar\"))\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 baz  \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3.0 \u2506 3.0  \u2502\n#&gt; \u2502 3.0 \u2506 4.0 \u2506 4.0  \u2502\n#&gt; \u2502 4.0 \u2506 0.0 \u2506 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># So use `pl$lit()` to insert a string\ndf$with_columns(baz = pl$when(pl$col(\"foo\") %% 2 == 1)$then(pl$lit(\"bar\")))\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 baz  \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3.0 \u2506 bar  \u2502\n#&gt; \u2502 3.0 \u2506 4.0 \u2506 bar  \u2502\n#&gt; \u2502 4.0 \u2506 0.0 \u2506 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_xor.html","title":"Apply logical XOR on two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_xor.html#description","title":"Description","text":"<p>Combine two boolean expressions with XOR.</p>"},{"location":"man/Expr_xor.html#usage","title":"Usage","text":"<pre><code>Expr_xor(other)\n</code></pre>"},{"location":"man/Expr_xor.html#arguments","title":"Arguments","text":"<code>other</code>  numeric or string value; accepts expression input."},{"location":"man/Expr_xor.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_xor.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(TRUE)$xor(pl$lit(FALSE))\n</code></pre> <pre><code>#&gt; polars Expr: [(true) ^ (false)]\n</code></pre>"},{"location":"man/GroupBy_agg.html","title":"Aggregate over a GroupBy","text":"<p>Source code</p>"},{"location":"man/GroupBy_agg.html#description","title":"Description","text":"<p>Aggregate a DataFrame over a groupby</p>"},{"location":"man/GroupBy_agg.html#usage","title":"Usage","text":"<pre><code>GroupBy_agg(...)\n</code></pre>"},{"location":"man/GroupBy_agg.html#arguments","title":"Arguments","text":"<code>\u2026</code>  exprs to aggregate over. \u2026 args can also be passed wrapped in a list <code>$agg(list(e1,e2,e3))</code>"},{"location":"man/GroupBy_agg.html#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_agg.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  foo = c(\"one\", \"two\", \"two\", \"one\", \"two\"),\n  bar = c(5, 3, 2, 4, 1)\n)$group_by(\"foo\")$agg(\n  pl$col(\"bar\")$sum()$name$suffix(\"_sum\"),\n  pl$col(\"bar\")$mean()$alias(\"bar_tail_sum\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar_sum \u2506 bar_tail_sum \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---          \u2502\n#&gt; \u2502 str \u2506 f64     \u2506 f64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one \u2506 9.0     \u2506 4.5          \u2502\n#&gt; \u2502 two \u2506 6.0     \u2506 2.0          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_class.html","title":"Operations on Polars grouped DataFrame","text":""},{"location":"man/GroupBy_class.html#description","title":"Description","text":"<p>The GroupBy class in R, is just another interface on top of the DataFrame in rust polars. Groupby does not use the rust api for <code>\\&lt;DataFrame&gt;$group_by()</code> + <code>$agg()</code> because the groupby-struct is a reference to a DataFrame and that reference will share lifetime with its parent DataFrame.</p>"},{"location":"man/GroupBy_class.html#details","title":"Details","text":"<p>There is no way to expose lifetime limited objects via extendr currently (might be quirky anyhow with R GC). Instead the inputs for the <code>group_by</code> are just stored on R side, until also <code>agg</code> is called. Which will end up in a self-owned DataFrame object and all is fine. groupby aggs are performed via the rust polars LazyGroupBy methods, see DataFrame.groupby_agg method.</p>"},{"location":"man/GroupBy_class.html#active-bindings","title":"Active bindings","text":"columns  <p><code>$columns</code> returns a character vector with the column names.</p>"},{"location":"man/GroupBy_class.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_df(mtcars)$group_by(\"cyl\")$agg(\n  pl$col(\"mpg\")$sum()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg   \u2502\n#&gt; \u2502 --- \u2506 ---   \u2502\n#&gt; \u2502 f64 \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0 \u2506 211.4 \u2502\n#&gt; \u2502 4.0 \u2506 293.3 \u2502\n#&gt; \u2502 6.0 \u2506 138.2 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_first.html","title":"GroupBy First","text":"<p>Source code</p>"},{"location":"man/GroupBy_first.html#description","title":"Description","text":"<p>Reduce the groups to the first value.</p>"},{"location":"man/GroupBy_first.html#usage","title":"Usage","text":"<pre><code>GroupBy_first()\n</code></pre>"},{"location":"man/GroupBy_first.html#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_first.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$first()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c     \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Banana \u2506 4.0 \u2506 13.0 \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_last.html","title":"GroupBy Last","text":"<p>Source code</p>"},{"location":"man/GroupBy_last.html#description","title":"Description","text":"<p>Reduce the groups to the last value.</p>"},{"location":"man/GroupBy_last.html#usage","title":"Usage","text":"<pre><code>GroupBy_last()\n</code></pre>"},{"location":"man/GroupBy_last.html#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_last.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$last()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c     \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 3.0 \u2506 10.0 \u2506 false \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Banana \u2506 5.0 \u2506 14.0 \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_max.html","title":"GroupBy Max","text":"<p>Source code</p>"},{"location":"man/GroupBy_max.html#description","title":"Description","text":"<p>Reduce the groups to the maximum value.</p>"},{"location":"man/GroupBy_max.html#usage","title":"Usage","text":"<pre><code>GroupBy_max()\n</code></pre>"},{"location":"man/GroupBy_max.html#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$max()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c    \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 3.0 \u2506 10.0 \u2506 true \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true \u2502\n#&gt; \u2502 Banana \u2506 5.0 \u2506 14.0 \u2506 true \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_mean.html","title":"GroupBy Mean","text":"<p>Source code</p>"},{"location":"man/GroupBy_mean.html#description","title":"Description","text":"<p>Reduce the groups to the mean value.</p>"},{"location":"man/GroupBy_mean.html#usage","title":"Usage","text":"<pre><code>GroupBy_mean()\n</code></pre>"},{"location":"man/GroupBy_mean.html#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_mean.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$mean()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b        \u2506 c        \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 2.0 \u2506 4.833333 \u2506 0.666667 \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5      \u2506 1.0      \u2502\n#&gt; \u2502 Banana \u2506 4.5 \u2506 13.5     \u2506 0.5      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_median.html","title":"GroupBy Median","text":"<p>Source code</p>"},{"location":"man/GroupBy_median.html#description","title":"Description","text":"<p>Reduce the groups to the median value.</p>"},{"location":"man/GroupBy_median.html#usage","title":"Usage","text":"<pre><code>GroupBy_median()\n</code></pre>"},{"location":"man/GroupBy_median.html#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_median.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$median()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c   \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 --- \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 2.0 \u2506 4.0  \u2506 1.0 \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 1.0 \u2502\n#&gt; \u2502 Banana \u2506 4.5 \u2506 13.5 \u2506 0.5 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_min.html","title":"GroupBy Min","text":"<p>Source code</p>"},{"location":"man/GroupBy_min.html#description","title":"Description","text":"<p>Reduce the groups to the minimum value.</p>"},{"location":"man/GroupBy_min.html#usage","title":"Usage","text":"<pre><code>GroupBy_min()\n</code></pre>"},{"location":"man/GroupBy_min.html#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$min()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c     \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0 \u2506 0.5  \u2506 false \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Banana \u2506 4.0 \u2506 13.0 \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_null_count.html","title":"GroupBy null count","text":"<p>Source code</p>"},{"location":"man/GroupBy_null_count.html#description","title":"Description","text":"<p>Create a new DataFrame that shows the null counts per column.</p>"},{"location":"man/GroupBy_null_count.html#usage","title":"Usage","text":"<pre><code>GroupBy_null_count()\n</code></pre>"},{"location":"man/GroupBy_null_count.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/GroupBy_null_count.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nx = mtcars\nx[1:10, 3:5] = NA\npl$DataFrame(x)$group_by(\"cyl\")$null_count()\n</code></pre> <pre><code>#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg \u2506 disp \u2506 hp  \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2506 --- \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 u32 \u2506 u32  \u2506 u32 \u2506   \u2506 u32 \u2506 u32 \u2506 u32  \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 0   \u2506 5    \u2506 5   \u2506 \u2026 \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2502 8.0 \u2506 0   \u2506 2    \u2506 2   \u2506 \u2026 \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2502 4.0 \u2506 0   \u2506 3    \u2506 3   \u2506 \u2026 \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_quantile.html","title":"Quantile","text":"<p>Source code</p>"},{"location":"man/GroupBy_quantile.html#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to their quantile value.</p>"},{"location":"man/GroupBy_quantile.html#usage","title":"Usage","text":"<pre><code>GroupBy_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"man/GroupBy_quantile.html#arguments","title":"Arguments","text":"<code>quantile</code>  numeric Quantile between 0.0 and 1.0.  <code>interpolation</code>  string Interpolation method: \"nearest\", \"higher\", \"lower\", \"midpoint\", or \"linear\"."},{"location":"man/GroupBy_quantile.html#value","title":"Value","text":"<p>GroupBy</p>"},{"location":"man/GroupBy_quantile.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$lazy()$quantile(.4)$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_shift.html","title":"Shift","text":"<p>Source code</p>"},{"location":"man/GroupBy_shift.html#description","title":"Description","text":"<p>Shift the values by a given period.</p>"},{"location":"man/GroupBy_shift.html#usage","title":"Usage","text":"<pre><code>GroupBy_shift(periods = 1)\n</code></pre>"},{"location":"man/GroupBy_shift.html#arguments","title":"Arguments","text":"<code>periods</code>  integer Number of periods to shift (may be negative)."},{"location":"man/GroupBy_shift.html#value","title":"Value","text":"<p>GroupBy</p>"},{"location":"man/GroupBy_shift.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$group_by(\"cyl\")$shift(2)\n</code></pre> <pre><code>#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg        \u2506 disp       \u2506 hp         \u2506 \u2026 \u2506 vs         \u2506 am         \u2506 gear      \u2506 carb      \u2502\n#&gt; \u2502 --- \u2506 ---        \u2506 ---        \u2506 ---        \u2506   \u2506 ---        \u2506 ---        \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64]  \u2506   \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64] \u2506 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 [null,     \u2506 [null,     \u2506 [null,     \u2506 \u2026 \u2506 [null,     \u2506 [null,     \u2506 [null,    \u2506 [null,    \u2502\n#&gt; \u2502     \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026    \u2506   \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026   \u2506 null, \u2026   \u2502\n#&gt; \u2502     \u2506 19.2]      \u2506 167.6]     \u2506 123.0]     \u2506   \u2506 1.0]       \u2506 0.0]       \u2506 4.0]      \u2506 4.0]      \u2502\n#&gt; \u2502 4.0 \u2506 [null,     \u2506 [null,     \u2506 [null,     \u2506 \u2026 \u2506 [null,     \u2506 [null,     \u2506 [null,    \u2506 [null,    \u2502\n#&gt; \u2502     \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026    \u2506   \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026   \u2506 null, \u2026   \u2502\n#&gt; \u2502     \u2506 26.0]      \u2506 120.3]     \u2506 91.0]      \u2506   \u2506 0.0]       \u2506 1.0]       \u2506 5.0]      \u2506 2.0]      \u2502\n#&gt; \u2502 8.0 \u2506 [null,     \u2506 [null,     \u2506 [null,     \u2506 \u2026 \u2506 [null,     \u2506 [null,     \u2506 [null,    \u2506 [null,    \u2502\n#&gt; \u2502     \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026    \u2506   \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026   \u2506 null, \u2026   \u2502\n#&gt; \u2502     \u2506 19.2]      \u2506 400.0]     \u2506 175.0]     \u2506   \u2506 0.0]       \u2506 0.0]       \u2506 3.0]      \u2506 2.0]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_shift_and_fill.html","title":"Shift and fill","text":"<p>Source code</p>"},{"location":"man/GroupBy_shift_and_fill.html#description","title":"Description","text":"<p>Shift and fill the values by a given period.</p>"},{"location":"man/GroupBy_shift_and_fill.html#usage","title":"Usage","text":"<pre><code>GroupBy_shift_and_fill(fill_value, periods = 1)\n</code></pre>"},{"location":"man/GroupBy_shift_and_fill.html#arguments","title":"Arguments","text":"<code>fill_value</code>  fill None values with the result of this expression.  <code>periods</code>  integer Number of periods to shift (may be negative)."},{"location":"man/GroupBy_shift_and_fill.html#value","title":"Value","text":"<p>GroupBy</p>"},{"location":"man/GroupBy_shift_and_fill.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$group_by(\"cyl\")$shift_and_fill(99, 1)\n</code></pre> <pre><code>#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg        \u2506 disp       \u2506 hp         \u2506 \u2026 \u2506 vs         \u2506 am         \u2506 gear      \u2506 carb      \u2502\n#&gt; \u2502 --- \u2506 ---        \u2506 ---        \u2506 ---        \u2506   \u2506 ---        \u2506 ---        \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64]  \u2506   \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64] \u2506 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,     \u2506 \u2026 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,    \u2506 [99.0,    \u2502\n#&gt; \u2502     \u2506 22.8, \u2026    \u2506 108.0, \u2026   \u2506 93.0, \u2026    \u2506   \u2506 1.0, \u2026     \u2506 1.0, \u2026     \u2506 4.0, \u2026    \u2506 1.0, \u2026    \u2502\n#&gt; \u2502     \u2506 30.4]      \u2506 95.1]      \u2506 113.0]     \u2506   \u2506 1.0]       \u2506 1.0]       \u2506 5.0]      \u2506 2.0]      \u2502\n#&gt; \u2502 8.0 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,     \u2506 \u2026 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,    \u2506 [99.0,    \u2502\n#&gt; \u2502     \u2506 18.7, \u2026    \u2506 360.0, \u2026   \u2506 175.0, \u2026   \u2506   \u2506 0.0, \u2026     \u2506 0.0, \u2026     \u2506 3.0, \u2026    \u2506 2.0, \u2026    \u2502\n#&gt; \u2502     \u2506 15.8]      \u2506 351.0]     \u2506 264.0]     \u2506   \u2506 0.0]       \u2506 1.0]       \u2506 5.0]      \u2506 4.0]      \u2502\n#&gt; \u2502 6.0 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,     \u2506 \u2026 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,    \u2506 [99.0,    \u2502\n#&gt; \u2502     \u2506 21.0, \u2026    \u2506 160.0, \u2026   \u2506 110.0, \u2026   \u2506   \u2506 0.0, \u2026     \u2506 1.0, \u2026     \u2506 4.0, \u2026    \u2506 4.0, \u2026    \u2502\n#&gt; \u2502     \u2506 17.8]      \u2506 167.6]     \u2506 123.0]     \u2506   \u2506 1.0]       \u2506 0.0]       \u2506 4.0]      \u2506 4.0]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_std.html","title":"GroupBy Std","text":"<p>Source code</p>"},{"location":"man/GroupBy_std.html#description","title":"Description","text":"<p>Reduce the groups to the standard deviation value.</p>"},{"location":"man/GroupBy_std.html#usage","title":"Usage","text":"<pre><code>GroupBy_std()\n</code></pre>"},{"location":"man/GroupBy_std.html#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_std.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$std()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a        \u2506 b        \u2506 c        \u2502\n#&gt; \u2502 ---    \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 str    \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0      \u2506 4.804512 \u2506 0.57735  \u2502\n#&gt; \u2502 Orange \u2506 null     \u2506 null     \u2506 null     \u2502\n#&gt; \u2502 Banana \u2506 0.707107 \u2506 0.707107 \u2506 0.707107 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_sum.html","title":"GroupBy Sum","text":"<p>Source code</p>"},{"location":"man/GroupBy_sum.html#description","title":"Description","text":"<p>Reduce the groups to the sum value.</p>"},{"location":"man/GroupBy_sum.html#usage","title":"Usage","text":"<pre><code>GroupBy_sum()\n</code></pre>"},{"location":"man/GroupBy_sum.html#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_sum.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$sum()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c   \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 --- \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 6.0 \u2506 14.5 \u2506 2   \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 1   \u2502\n#&gt; \u2502 Banana \u2506 9.0 \u2506 27.0 \u2506 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_ungroup.html","title":"GroupBy_ungroup","text":"<p>Source code</p>"},{"location":"man/GroupBy_ungroup.html#description","title":"Description","text":"<p>Revert the group by operation.</p>"},{"location":"man/GroupBy_ungroup.html#usage","title":"Usage","text":"<pre><code>GroupBy_ungroup()\n</code></pre>"},{"location":"man/GroupBy_ungroup.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/GroupBy_ungroup.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ngb = pl$DataFrame(mtcars)$group_by(\"cyl\")\ngb\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; groups: cyl\n#&gt; maintain order: FALSE\n</code></pre> <pre><code>gb$ungroup()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_var.html","title":"GroupBy Var","text":"<p>Source code</p>"},{"location":"man/GroupBy_var.html#description","title":"Description","text":"<p>Reduce the groups to the variance value.</p>"},{"location":"man/GroupBy_var.html#usage","title":"Usage","text":"<pre><code>GroupBy_var()\n</code></pre>"},{"location":"man/GroupBy_var.html#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_var.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$var()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a    \u2506 b         \u2506 c        \u2502\n#&gt; \u2502 ---    \u2506 ---  \u2506 ---       \u2506 ---      \u2502\n#&gt; \u2502 str    \u2506 f64  \u2506 f64       \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0  \u2506 23.083333 \u2506 0.333333 \u2502\n#&gt; \u2502 Orange \u2506 null \u2506 null      \u2506 null     \u2502\n#&gt; \u2502 Banana \u2506 0.5  \u2506 0.5       \u2506 0.5      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_read_csv.html","title":"New DataFrame from CSV","text":""},{"location":"man/IO_read_csv.html#description","title":"Description","text":"<p>New DataFrame from CSV</p>"},{"location":"man/IO_read_csv.html#usage","title":"Usage","text":"<pre><code>pl_read_csv(\n  source,\n  ...,\n  has_header = TRUE,\n  separator = \",\",\n  comment_prefix = NULL,\n  quote_char = \"\\\"\",\n  skip_rows = 0,\n  dtypes = NULL,\n  null_values = NULL,\n  ignore_errors = FALSE,\n  cache = FALSE,\n  infer_schema_length = 100,\n  n_rows = NULL,\n  encoding = \"utf8\",\n  low_memory = FALSE,\n  rechunk = TRUE,\n  skip_rows_after_header = 0,\n  row_index_name = NULL,\n  row_index_offset = 0,\n  try_parse_dates = FALSE,\n  eol_char = \"\\n\",\n  raise_if_empty = TRUE,\n  truncate_ragged_lines = FALSE,\n  reuse_downloaded = TRUE\n)\n</code></pre>"},{"location":"man/IO_read_csv.html#arguments","title":"Arguments","text":"<code>source</code>  Path to a file or URL. It is possible to provide multiple paths provided that all CSV files have the same schema. It is not possible to provide several URLs.  <code>\u2026</code>  Ignored.  <code>has_header</code>  Indicate if the first row of dataset is a header or not.If <code>FALSE</code>, column names will be autogenerated in the following format: <code>\u201ccolumn_x\u201d</code> <code>x</code> being an enumeration over every column in the dataset starting at 1.  <code>separator</code>  Single byte character to use as separator in the file.  <code>comment_prefix</code>  A string, which can be up to 5 symbols in length, used to indicate the start of a comment line. For instance, it can be set to <code>\\#</code> or <code>//</code>.  <code>quote_char</code>  Single byte character used for quoting. Set to <code>NULL</code> to turn off special handling and escaping of quotes.  <code>skip_rows</code>  Start reading after a particular number of rows. The header will be parsed at this offset.  <code>dtypes</code>   Named list of column names - dtypes or dtype - column names. This list is used while reading to overwrite dtypes. Supported types so far are:  <ul> <li>  \"Boolean\" or \"logical\" for DataType::Boolean,  </li> <li>  \"Categorical\" or \"factor\" for DataType::Categorical,  </li> <li>  \"Float32\" or \"double\" for DataType::Float32,  </li> <li>  \"Float64\" or \"float64\" for DataType::Float64,  </li> <li>  \"Int32\" or \"integer\" for DataType::Int32,  </li> <li>  \"Int64\" or \"integer64\" for DataType::Int64,  </li> <li>  \"String\" or \"character\" for DataType::String,  </li> </ul> <code>null_values</code>   Values to interpret as <code>NA</code> values. Can be:  <ul> <li>  a character vector: all values that match one of the values in this vector will be <code>NA</code>;  </li> <li>  a named list with column names and null values.  </li> </ul> <code>ignore_errors</code>  Keep reading the file even if some lines yield errors. You can also use <code>infer_schema_length = 0</code> to read all columns as UTF8 to check which values might cause an issue.  <code>cache</code>  Cache the result after reading.  <code>infer_schema_length</code>  Maximum number of rows to read to infer the column types. If set to 0, all columns will be read as UTF-8. If <code>NULL</code>, a full table scan will be done (slow).  <code>n_rows</code>  Maximum number of rows to read.  <code>encoding</code>  Either <code>\u201cutf8\u201d</code> or <code>\u201cutf8-lossy\u201d</code>. Lossy means that invalid UTF8 values are replaced with \"?\" characters.  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>rechunk</code>  Reallocate to contiguous memory when all chunks / files are parsed.  <code>skip_rows_after_header</code>  Parse the first row as headers, and then skip this number of rows.  <code>row_index_name</code>  If not <code>NULL</code>, this will insert a row index column with the given name into the DataFrame.  <code>row_index_offset</code>  Offset to start the row index column (only used if the name is set).  <code>try_parse_dates</code>  Try to automatically parse dates. Most ISO8601-like formats can be inferred, as well as a handful of others. If this does not succeed, the column remains of data type <code>pl$String</code>.  <code>eol_char</code>  Single byte end of line character (default: <code></code>). When encountering a file with Windows line endings (<code></code>), one can go with the default <code></code>. The extra <code>/code\\&gt; will be removed when processed.  <code>raise_if_empty</code>  If <code>FALSE</code>, parsing an empty file returns an empty DataFrame or LazyFrame.  <code>truncate_ragged_lines</code>  Truncate lines that are longer than the schema.  <code>reuse_downloaded</code>  If <code>TRUE</code>(default) and a URL was provided, cache the downloaded files in session for an easy reuse."},{"location":"man/IO_read_csv.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/IO_read_ndjson.html","title":"New DataFrame from NDJSON","text":""},{"location":"man/IO_read_ndjson.html#description","title":"Description","text":"<p>Read a file from path into a polars DataFrame.</p>"},{"location":"man/IO_read_ndjson.html#usage","title":"Usage","text":"<pre><code>pl_read_ndjson(\n  source,\n  ...,\n  infer_schema_length = 100,\n  batch_size = NULL,\n  n_rows = NULL,\n  low_memory = FALSE,\n  rechunk = FALSE,\n  row_index_name = NULL,\n  row_index_offset = 0,\n  ignore_errors = FALSE\n)\n</code></pre>"},{"location":"man/IO_read_ndjson.html#arguments","title":"Arguments","text":"<code>source</code>  Path to a file or URL. It is possible to provide multiple paths provided that all NDJSON files have the same schema. It is not possible to provide several URLs.  <code>\u2026</code>  Ignored.  <code>infer_schema_length</code>  Maximum number of rows to read to infer the column types. If set to 0, all columns will be read as UTF-8. If <code>NULL</code>, a full table scan will be done (slow).  <code>batch_size</code>  Number of rows that will be processed per thread.  <code>n_rows</code>  Maximum number of rows to read.  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>rechunk</code>  Reallocate to contiguous memory when all chunks / files are parsed.  <code>row_index_name</code>  If not <code>NULL</code>, this will insert a row index column with the given name into the DataFrame.  <code>row_index_offset</code>  Offset to start the row index column (only used if the name is set).  <code>ignore_errors</code>  Keep reading the file even if some lines yield errors. You can also use <code>infer_schema_length = 0</code> to read all columns as UTF8 to check which values might cause an issue."},{"location":"man/IO_read_ndjson.html#value","title":"Value","text":"<p>A DataFrame</p>"},{"location":"man/IO_read_ndjson.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nif (require(\"jsonlite\", quietly = TRUE)) {\n  ndjson_filename = tempfile()\n  jsonlite::stream_out(iris, file(ndjson_filename), verbose = FALSE)\n  pl$read_ndjson(ndjson_filename)\n}\n</code></pre> <pre><code>#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_read_parquet.html","title":"Read a parquet file","text":""},{"location":"man/IO_read_parquet.html#description","title":"Description","text":"<p>Read a parquet file</p>"},{"location":"man/IO_read_parquet.html#usage","title":"Usage","text":"<pre><code>pl_read_parquet(\n  source,\n  ...,\n  n_rows = NULL,\n  cache = TRUE,\n  parallel = c(\"Auto\", \"None\", \"Columns\", \"RowGroups\"),\n  rechunk = TRUE,\n  row_index_name = NULL,\n  row_index_offset = 0L,\n  low_memory = FALSE,\n  use_statistics = TRUE,\n  hive_partitioning = TRUE\n)\n</code></pre>"},{"location":"man/IO_read_parquet.html#arguments","title":"Arguments","text":"<code>source</code>  Path to a file. You can use globbing with <code>\\*</code> to scan/read multiple files in the same directory (see examples).  <code>\u2026</code>  Ignored.  <code>n_rows</code>  Maximum number of rows to read.  <code>cache</code>  Cache the result after reading.  <code>parallel</code>  This determines the direction of parallelism. <code>\u201cauto\u201d</code> will try to determine the optimal direction. Can be <code>\u201cauto\u201d</code>, <code>\u201cnone\u201d</code>, <code>\u201ccolumns\u201d</code>, or <code>\u201crowgroups\u201d</code>,  <code>rechunk</code>  In case of reading multiple files via a glob pattern, rechunk the final DataFrame into contiguous memory chunks.  <code>row_index_name</code>  If not <code>NULL</code>, this will insert a row index column with the given name into the DataFrame.  <code>row_index_offset</code>  Offset to start the row index column (only used if the name is set).  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>use_statistics</code>  Use statistics in the parquet file to determine if pages can be skipped from reading.  <code>hive_partitioning</code>  Infer statistics and schema from hive partitioned URL and use them to prune reads."},{"location":"man/IO_read_parquet.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/IO_scan_csv.html","title":"New LazyFrame from CSV","text":""},{"location":"man/IO_scan_csv.html#description","title":"Description","text":"<p>Read a file from path into a polars LazyFrame.</p>"},{"location":"man/IO_scan_csv.html#usage","title":"Usage","text":"<pre><code>pl_scan_csv(\n  source,\n  ...,\n  has_header = TRUE,\n  separator = \",\",\n  comment_prefix = NULL,\n  quote_char = \"\\\"\",\n  skip_rows = 0,\n  dtypes = NULL,\n  null_values = NULL,\n  ignore_errors = FALSE,\n  cache = FALSE,\n  infer_schema_length = 100,\n  n_rows = NULL,\n  encoding = \"utf8\",\n  low_memory = FALSE,\n  rechunk = TRUE,\n  skip_rows_after_header = 0,\n  row_index_name = NULL,\n  row_index_offset = 0,\n  try_parse_dates = FALSE,\n  eol_char = \"\\n\",\n  raise_if_empty = TRUE,\n  truncate_ragged_lines = FALSE,\n  reuse_downloaded = TRUE\n)\n</code></pre>"},{"location":"man/IO_scan_csv.html#arguments","title":"Arguments","text":"<code>source</code>  Path to a file or URL. It is possible to provide multiple paths provided that all CSV files have the same schema. It is not possible to provide several URLs.  <code>\u2026</code>  Ignored.  <code>has_header</code>  Indicate if the first row of dataset is a header or not.If <code>FALSE</code>, column names will be autogenerated in the following format: <code>\u201ccolumn_x\u201d</code> <code>x</code> being an enumeration over every column in the dataset starting at 1.  <code>separator</code>  Single byte character to use as separator in the file.  <code>comment_prefix</code>  A string, which can be up to 5 symbols in length, used to indicate the start of a comment line. For instance, it can be set to <code>\\#</code> or <code>//</code>.  <code>quote_char</code>  Single byte character used for quoting. Set to <code>NULL</code> to turn off special handling and escaping of quotes.  <code>skip_rows</code>  Start reading after a particular number of rows. The header will be parsed at this offset.  <code>dtypes</code>   Named list of column names - dtypes or dtype - column names. This list is used while reading to overwrite dtypes. Supported types so far are:  <ul> <li>  \"Boolean\" or \"logical\" for DataType::Boolean,  </li> <li>  \"Categorical\" or \"factor\" for DataType::Categorical,  </li> <li>  \"Float32\" or \"double\" for DataType::Float32,  </li> <li>  \"Float64\" or \"float64\" for DataType::Float64,  </li> <li>  \"Int32\" or \"integer\" for DataType::Int32,  </li> <li>  \"Int64\" or \"integer64\" for DataType::Int64,  </li> <li>  \"String\" or \"character\" for DataType::String,  </li> </ul> <code>null_values</code>   Values to interpret as <code>NA</code> values. Can be:  <ul> <li>  a character vector: all values that match one of the values in this vector will be <code>NA</code>;  </li> <li>  a named list with column names and null values.  </li> </ul> <code>ignore_errors</code>  Keep reading the file even if some lines yield errors. You can also use <code>infer_schema_length = 0</code> to read all columns as UTF8 to check which values might cause an issue.  <code>cache</code>  Cache the result after reading.  <code>infer_schema_length</code>  Maximum number of rows to read to infer the column types. If set to 0, all columns will be read as UTF-8. If <code>NULL</code>, a full table scan will be done (slow).  <code>n_rows</code>  Maximum number of rows to read.  <code>encoding</code>  Either <code>\u201cutf8\u201d</code> or <code>\u201cutf8-lossy\u201d</code>. Lossy means that invalid UTF8 values are replaced with \"?\" characters.  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>rechunk</code>  Reallocate to contiguous memory when all chunks / files are parsed.  <code>skip_rows_after_header</code>  Parse the first row as headers, and then skip this number of rows.  <code>row_index_name</code>  If not <code>NULL</code>, this will insert a row index column with the given name into the DataFrame.  <code>row_index_offset</code>  Offset to start the row index column (only used if the name is set).  <code>try_parse_dates</code>  Try to automatically parse dates. Most ISO8601-like formats can be inferred, as well as a handful of others. If this does not succeed, the column remains of data type <code>pl$String</code>.  <code>eol_char</code>  Single byte end of line character (default: <code></code>). When encountering a file with Windows line endings (<code></code>), one can go with the default <code></code>. The extra <code>/code\\&gt; will be removed when processed.  <code>raise_if_empty</code>  If <code>FALSE</code>, parsing an empty file returns an empty DataFrame or LazyFrame.  <code>truncate_ragged_lines</code>  Truncate lines that are longer than the schema.  <code>reuse_downloaded</code>  If <code>TRUE</code>(default) and a URL was provided, cache the downloaded files in session for an easy reuse."},{"location":"man/IO_scan_csv.html#value","title":"Value","text":"<p>scan_csv returns a LazyFrame. read_csv returns a DataFrame.</p>"},{"location":"man/IO_scan_csv.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nmy_file = tempfile()\nwrite.csv(iris, my_file)\nlazy_frame = pl$scan_csv(my_file)\nlazy_frame$collect()\n</code></pre> <pre><code>#&gt; shape: (150, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2506 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 --- \u2506 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 i64 \u2506 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 2   \u2506 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 3   \u2506 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4   \u2506 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5   \u2506 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 146 \u2506 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 147 \u2506 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 148 \u2506 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 149 \u2506 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 150 \u2506 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>unlink(my_file)\n</code></pre>"},{"location":"man/IO_scan_ipc.html","title":"Import data in Apache Arrow IPC format","text":""},{"location":"man/IO_scan_ipc.html#description","title":"Description","text":"<p>Import data in Apache Arrow IPC format</p>"},{"location":"man/IO_scan_ipc.html#usage","title":"Usage","text":"<pre><code>pl_scan_ipc(\n  source,\n  ...,\n  n_rows = NULL,\n  cache = TRUE,\n  rechunk = TRUE,\n  row_index_name = NULL,\n  row_index_offset = 0L,\n  memmap = TRUE\n)\n</code></pre>"},{"location":"man/IO_scan_ipc.html#arguments","title":"Arguments","text":"<code>source</code>  Path to a file or URL. It is possible to provide multiple paths provided that all CSV files have the same schema. It is not possible to provide several URLs.  <code>\u2026</code>  Ignored.  <code>n_rows</code>  Maximum number of rows to read.  <code>cache</code>  Cache the result after reading.  <code>rechunk</code>  Reallocate to contiguous memory when all chunks / files are parsed.  <code>row_index_name</code>  If not <code>NULL</code>, this will insert a row index column with the given name into the DataFrame.  <code>row_index_offset</code>  Offset to start the row index column (only used if the name is set).  <code>memmap</code>  bool, mapped memory"},{"location":"man/IO_scan_ipc.html#details","title":"Details","text":"<p>Create new LazyFrame from Apache Arrow IPC file or stream</p>"},{"location":"man/IO_scan_ipc.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/IO_scan_ndjson.html","title":"New LazyFrame from NDJSON","text":""},{"location":"man/IO_scan_ndjson.html#description","title":"Description","text":"<p>Read a file from path into a polars LazyFrame.</p>"},{"location":"man/IO_scan_ndjson.html#usage","title":"Usage","text":"<pre><code>pl_scan_ndjson(\n  source,\n  ...,\n  infer_schema_length = 100,\n  batch_size = NULL,\n  n_rows = NULL,\n  low_memory = FALSE,\n  rechunk = FALSE,\n  row_index_name = NULL,\n  row_index_offset = 0,\n  reuse_downloaded = TRUE,\n  ignore_errors = FALSE\n)\n</code></pre>"},{"location":"man/IO_scan_ndjson.html#arguments","title":"Arguments","text":"<code>source</code>  Path to a file or URL. It is possible to provide multiple paths provided that all NDJSON files have the same schema. It is not possible to provide several URLs.  <code>\u2026</code>  Ignored.  <code>infer_schema_length</code>  Maximum number of rows to read to infer the column types. If set to 0, all columns will be read as UTF-8. If <code>NULL</code>, a full table scan will be done (slow).  <code>batch_size</code>  Number of rows that will be processed per thread.  <code>n_rows</code>  Maximum number of rows to read.  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>rechunk</code>  Reallocate to contiguous memory when all chunks / files are parsed.  <code>row_index_name</code>  If not <code>NULL</code>, this will insert a row index column with the given name into the DataFrame.  <code>row_index_offset</code>  Offset to start the row index column (only used if the name is set).  <code>reuse_downloaded</code>  If <code>TRUE</code>(default) and a URL was provided, cache the downloaded files in session for an easy reuse.  <code>ignore_errors</code>  Keep reading the file even if some lines yield errors. You can also use <code>infer_schema_length = 0</code> to read all columns as UTF8 to check which values might cause an issue."},{"location":"man/IO_scan_ndjson.html#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/IO_scan_ndjson.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nif (require(\"jsonlite\", quietly = TRUE)) {\n  ndjson_filename = tempfile()\n  jsonlite::stream_out(iris, file(ndjson_filename), verbose = FALSE)\n  pl$scan_ndjson(ndjson_filename)$collect()\n}\n</code></pre> <pre><code>#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_scan_parquet.html","title":"Scan a parquet file","text":""},{"location":"man/IO_scan_parquet.html#description","title":"Description","text":"<p>Scan a parquet file</p>"},{"location":"man/IO_scan_parquet.html#usage","title":"Usage","text":"<pre><code>pl_scan_parquet(\n  source,\n  ...,\n  n_rows = NULL,\n  cache = TRUE,\n  parallel = c(\"Auto\", \"None\", \"Columns\", \"RowGroups\"),\n  rechunk = TRUE,\n  row_index_name = NULL,\n  row_index_offset = 0L,\n  low_memory = FALSE,\n  use_statistics = TRUE,\n  hive_partitioning = TRUE\n)\n</code></pre>"},{"location":"man/IO_scan_parquet.html#arguments","title":"Arguments","text":"<code>source</code>  Path to a file. You can use globbing with <code>\\*</code> to scan/read multiple files in the same directory (see examples).  <code>\u2026</code>  Ignored.  <code>n_rows</code>  Maximum number of rows to read.  <code>cache</code>  Cache the result after reading.  <code>parallel</code>  This determines the direction of parallelism. <code>\u201cauto\u201d</code> will try to determine the optimal direction. Can be <code>\u201cauto\u201d</code>, <code>\u201cnone\u201d</code>, <code>\u201ccolumns\u201d</code>, or <code>\u201crowgroups\u201d</code>,  <code>rechunk</code>  In case of reading multiple files via a glob pattern, rechunk the final DataFrame into contiguous memory chunks.  <code>row_index_name</code>  If not <code>NULL</code>, this will insert a row index column with the given name into the DataFrame.  <code>row_index_offset</code>  Offset to start the row index column (only used if the name is set).  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>use_statistics</code>  Use statistics in the parquet file to determine if pages can be skipped from reading.  <code>hive_partitioning</code>  Infer statistics and schema from hive partitioned URL and use them to prune reads."},{"location":"man/IO_scan_parquet.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/IO_scan_parquet.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\ntemp_dir = tempfile()\n# Write a hive-style partitioned parquet dataset\narrow::write_dataset(\n  mtcars,\n  temp_dir,\n  partitioning = c(\"cyl\", \"gear\"),\n  format = \"parquet\",\n  hive_style = TRUE\n)\nlist.files(temp_dir, recursive = TRUE)\n</code></pre> <pre><code>#&gt; [1] \"cyl=4/gear=3/part-0.parquet\" \"cyl=4/gear=4/part-0.parquet\"\n#&gt; [3] \"cyl=4/gear=5/part-0.parquet\" \"cyl=6/gear=3/part-0.parquet\"\n#&gt; [5] \"cyl=6/gear=4/part-0.parquet\" \"cyl=6/gear=5/part-0.parquet\"\n#&gt; [7] \"cyl=8/gear=3/part-0.parquet\" \"cyl=8/gear=5/part-0.parquet\"\n</code></pre> <pre><code># Read the dataset\npl$scan_parquet(\n  file.path(temp_dir, \"**/*.parquet\")\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 disp  \u2506 hp    \u2506 drat \u2506 \u2026 \u2506 am  \u2506 carb \u2506 cyl \u2506 gear \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---   \u2506 ---  \u2506   \u2506 --- \u2506 ---  \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2506 f64   \u2506 f64  \u2506   \u2506 f64 \u2506 f64  \u2506 i64 \u2506 i64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.5 \u2506 120.1 \u2506 97.0  \u2506 3.7  \u2506 \u2026 \u2506 0.0 \u2506 1.0  \u2506 4   \u2506 3    \u2502\n#&gt; \u2502 22.8 \u2506 108.0 \u2506 93.0  \u2506 3.85 \u2506 \u2026 \u2506 1.0 \u2506 1.0  \u2506 4   \u2506 4    \u2502\n#&gt; \u2502 24.4 \u2506 146.7 \u2506 62.0  \u2506 3.69 \u2506 \u2026 \u2506 0.0 \u2506 2.0  \u2506 4   \u2506 4    \u2502\n#&gt; \u2502 22.8 \u2506 140.8 \u2506 95.0  \u2506 3.92 \u2506 \u2026 \u2506 0.0 \u2506 2.0  \u2506 4   \u2506 4    \u2502\n#&gt; \u2502 32.4 \u2506 78.7  \u2506 66.0  \u2506 4.08 \u2506 \u2026 \u2506 1.0 \u2506 1.0  \u2506 4   \u2506 4    \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026     \u2506 \u2026     \u2506 \u2026    \u2506 \u2026 \u2506 \u2026   \u2506 \u2026    \u2506 \u2026   \u2506 \u2026    \u2502\n#&gt; \u2502 15.2 \u2506 304.0 \u2506 150.0 \u2506 3.15 \u2506 \u2026 \u2506 0.0 \u2506 2.0  \u2506 8   \u2506 3    \u2502\n#&gt; \u2502 13.3 \u2506 350.0 \u2506 245.0 \u2506 3.73 \u2506 \u2026 \u2506 0.0 \u2506 4.0  \u2506 8   \u2506 3    \u2502\n#&gt; \u2502 19.2 \u2506 400.0 \u2506 175.0 \u2506 3.08 \u2506 \u2026 \u2506 0.0 \u2506 2.0  \u2506 8   \u2506 3    \u2502\n#&gt; \u2502 15.8 \u2506 351.0 \u2506 264.0 \u2506 4.22 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 8   \u2506 5    \u2502\n#&gt; \u2502 15.0 \u2506 301.0 \u2506 335.0 \u2506 3.54 \u2506 \u2026 \u2506 1.0 \u2506 8.0  \u2506 8   \u2506 5    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_sink_csv.html","title":"Stream the output of a query to a CSV file","text":""},{"location":"man/IO_sink_csv.html#description","title":"Description","text":"<p>This writes the output of a query directly to a CSV file without collecting it in the R session first. This is useful if the output of the query is still larger than RAM as it would crash the R session if it was collected into R.</p>"},{"location":"man/IO_sink_csv.html#usage","title":"Usage","text":"<pre><code>LazyFrame_sink_csv(\n  path,\n  ...,\n  include_bom = FALSE,\n  include_header = TRUE,\n  separator = \",\",\n  line_terminator = \"\\n\",\n  quote = \"\\\"\",\n  batch_size = 1024,\n  datetime_format = NULL,\n  date_format = NULL,\n  time_format = NULL,\n  float_precision = NULL,\n  null_values = \"\",\n  quote_style = \"necessary\",\n  maintain_order = TRUE,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE\n)\n</code></pre>"},{"location":"man/IO_sink_csv.html#arguments","title":"Arguments","text":"<code>path</code>  A character. File path to which the file should be written.  <code>\u2026</code>  Ignored.  <code>include_bom</code>  Whether to include UTF-8 BOM (byte order mark) in the CSV output.  <code>include_header</code>  Whether to include header in the CSV output.  <code>separator</code>  Separate CSV fields with this symbol.  <code>line_terminator</code>  String used to end each row.  <code>quote</code>  Byte to use as quoting character.  <code>batch_size</code>  Number of rows that will be processed per thread.  <code>datetime_format</code>  A format string, with the specifiers defined by the chrono Rust crate. If no format specified, the default fractional-second precision is inferred from the maximum timeunit found in the frame\u2019s Datetime cols (if any).  <code>date_format</code>  A format string, with the specifiers defined by the chrono Rust crate.  <code>time_format</code>  A format string, with the specifiers defined by the chrono Rust crate.  <code>float_precision</code>  Number of decimal places to write, applied to both Float32 and Float64 datatypes.  <code>null_values</code>  A string representing null values (defaulting to the empty string).  <code>quote_style</code>   Determines the quoting strategy used.  <ul> <li> <code>\u201cnecessary\u201d</code> (default): This puts quotes around fields only when necessary. They are necessary when fields contain a quote, delimiter or record terminator. Quotes are also necessary when writing an empty record (which is indistinguishable from a record with one empty field). This is the default.  </li> <li> <code>\u201calways\u201d</code>: This puts quotes around every field.  </li> <li> <code>\u201cnon_numeric\u201d</code>: This puts quotes around all fields that are non-numeric. Namely, when writing a field that does not parse as a valid float or integer, then quotes will be used even if they aren\u2019t strictly necessary.  </li> <li> <code>\u201cnever\u201d</code>: This never puts quotes around fields, even if that results in invalid CSV data (e.g.\u00a0by not quoting strings containing the separator).  </li> </ul> <code>maintain_order</code>  Maintain the order in which data is processed. Setting this to <code>FALSE</code> will be slightly faster.  <code>type_coercion</code>  Logical. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Logical. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Logical. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Logical. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Logical. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>no_optimization</code>  Logical. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Logical. Use existing optimization settings regardless the settings specified in this function call."},{"location":"man/IO_sink_csv.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# sink table 'mtcars' from mem to CSV\ntmpf = tempfile()\npl$LazyFrame(mtcars)$sink_csv(tmpf)\n\n# stream a query end-to-end\ntmpf2 = tempfile()\npl$scan_csv(tmpf)$select(pl$col(\"cyl\") * 2)$sink_csv(tmpf2)\n\n# load parquet directly into a DataFrame / memory\npl$scan_csv(tmpf2)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl  \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 8.0  \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 16.0 \u2502\n#&gt; \u2502 \u2026    \u2502\n#&gt; \u2502 8.0  \u2502\n#&gt; \u2502 16.0 \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 16.0 \u2502\n#&gt; \u2502 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_sink_ipc.html","title":"Stream the output of a query to an Arrow IPC file","text":""},{"location":"man/IO_sink_ipc.html#description","title":"Description","text":"<p>This writes the output of a query directly to an Arrow IPC file without collecting it in the R session first. This is useful if the output of the query is still larger than RAM as it would crash the R session if it was collected into R.</p>"},{"location":"man/IO_sink_ipc.html#usage","title":"Usage","text":"<pre><code>LazyFrame_sink_ipc(\n  path,\n  ...,\n  compression = \"zstd\",\n  maintain_order = TRUE,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE\n)\n</code></pre>"},{"location":"man/IO_sink_ipc.html#arguments","title":"Arguments","text":"<code>path</code>  A character. File path to which the file should be written.  <code>\u2026</code>  Ignored.  <code>compression</code> <code>NULL</code> or string, the compression method. One of <code>NULL</code>, \"lz4\" or \"zstd\". Choose \"zstd\" for good compression performance. Choose \"lz4\" for fast compression/decompression.  <code>maintain_order</code>  Maintain the order in which data is processed. Setting this to <code>FALSE</code> will be slightly faster.  <code>type_coercion</code>  Logical. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Logical. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Logical. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Logical. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Logical. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>no_optimization</code>  Logical. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Logical. Use existing optimization settings regardless the settings specified in this function call."},{"location":"man/IO_sink_ipc.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# sink table 'mtcars' from mem to ipc\ntmpf = tempfile()\npl$LazyFrame(mtcars)$sink_ipc(tmpf)\n\n# stream a query end-to-end (not supported yet, https://github.com/pola-rs/polars/issues/1040)\n# tmpf2 = tempfile()\n# pl$scan_ipc(tmpf)$select(pl$col(\"cyl\") * 2)$sink_ipc(tmpf2)\n\n# load ipc directly into a DataFrame / memory\n# pl$scan_ipc(tmpf2)$collect()\n</code></pre>"},{"location":"man/IO_sink_ndjson.html","title":"Stream the output of a query to a JSON file","text":""},{"location":"man/IO_sink_ndjson.html#description","title":"Description","text":"<p>This writes the output of a query directly to a JSON file without collecting it in the R session first. This is useful if the output of the query is still larger than RAM as it would crash the R session if it was collected into R.</p>"},{"location":"man/IO_sink_ndjson.html#usage","title":"Usage","text":"<pre><code>LazyFrame_sink_ndjson(\n  path,\n  ...,\n  maintain_order = TRUE,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE\n)\n</code></pre>"},{"location":"man/IO_sink_ndjson.html#arguments","title":"Arguments","text":"<code>path</code>  A character. File path to which the file should be written.  <code>\u2026</code>  Ignored.  <code>maintain_order</code>  Maintain the order in which data is processed. Setting this to <code>FALSE</code> will be slightly faster.  <code>type_coercion</code>  Logical. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Logical. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Logical. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Logical. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Logical. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>no_optimization</code>  Logical. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Logical. Use existing optimization settings regardless the settings specified in this function call."},{"location":"man/IO_sink_ndjson.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# sink table 'mtcars' from mem to JSON\ntmpf = tempfile(fileext = \".json\")\npl$LazyFrame(mtcars)$sink_ndjson(tmpf)\n\n# load parquet directly into a DataFrame / memory\npl$scan_ndjson(tmpf)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_sink_parquet.html","title":"Stream the output of a query to a Parquet file","text":""},{"location":"man/IO_sink_parquet.html#description","title":"Description","text":"<p>This writes the output of a query directly to a Parquet file without collecting it in the R session first. This is useful if the output of the query is still larger than RAM as it would crash the R session if it was collected into R.</p>"},{"location":"man/IO_sink_parquet.html#usage","title":"Usage","text":"<pre><code>LazyFrame_sink_parquet(\n  path,\n  ...,\n  compression = \"zstd\",\n  compression_level = 3,\n  statistics = FALSE,\n  row_group_size = NULL,\n  data_pagesize_limit = NULL,\n  maintain_order = TRUE,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE\n)\n</code></pre>"},{"location":"man/IO_sink_parquet.html#arguments","title":"Arguments","text":"<code>path</code>  A character. File path to which the file should be written.  <code>\u2026</code>  Ignored.  <code>compression</code>   String. The compression method. One of:  <ul> <li>  \"lz4\": fast compression/decompression.  </li> <li>  \"uncompressed\"  </li> <li>  \"snappy\": this guarantees that the parquet file will be compatible with older parquet readers.  </li> <li>  \"gzip\"  </li> <li>  \"lzo\"  </li> <li>  \"brotli\"  </li> <li>  \"zstd\": good compression performance.  </li> </ul> <code>compression_level</code> <code>NULL</code> or Integer. The level of compression to use. Only used if method is one of \u2018gzip\u2019, \u2018brotli\u2019, or \u2018zstd\u2019. Higher compression means smaller files on disk:  <ul> <li>  \"gzip\": min-level: 0, max-level: 10.  </li> <li>  \"brotli\": min-level: 0, max-level: 11.  </li> <li>  \"zstd\": min-level: 1, max-level: 22.  </li> </ul> <code>statistics</code>  Logical. Whether compute and write column statistics. This requires extra compute.  <code>row_group_size</code> <code>NULL</code> or Integer. Size of the row groups in number of rows. If <code>NULL</code> (default), the chunks of the DataFrame are used. Writing in smaller chunks may reduce memory pressure and improve writing speeds.  <code>data_pagesize_limit</code> <code>NULL</code> or Integer. If <code>NULL</code> (default), the limit will be ~1MB.  <code>maintain_order</code>  Maintain the order in which data is processed. Setting this to <code>FALSE</code> will be slightly faster.  <code>type_coercion</code>  Logical. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Logical. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Logical. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Logical. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Logical. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>no_optimization</code>  Logical. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Logical. Use existing optimization settings regardless the settings specified in this function call."},{"location":"man/IO_sink_parquet.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# sink table 'mtcars' from mem to parquet\ntmpf = tempfile()\npl$LazyFrame(mtcars)$sink_parquet(tmpf)\n\n# stream a query end-to-end\ntmpf2 = tempfile()\npl$scan_parquet(tmpf)$select(pl$col(\"cyl\") * 2)$sink_parquet(tmpf2)\n\n# load parquet directly into a DataFrame / memory\npl$scan_parquet(tmpf2)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl  \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 8.0  \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 16.0 \u2502\n#&gt; \u2502 \u2026    \u2502\n#&gt; \u2502 8.0  \u2502\n#&gt; \u2502 16.0 \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 16.0 \u2502\n#&gt; \u2502 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_write_csv.html","title":"Write to comma-separated values (CSV) file","text":""},{"location":"man/IO_write_csv.html#description","title":"Description","text":"<p>Write to comma-separated values (CSV) file</p>"},{"location":"man/IO_write_csv.html#usage","title":"Usage","text":"<pre><code>DataFrame_write_csv(\n  file,\n  ...,\n  include_bom = FALSE,\n  include_header = TRUE,\n  separator = \",\",\n  line_terminator = \"\\n\",\n  quote = \"\\\"\",\n  batch_size = 1024,\n  datetime_format = NULL,\n  date_format = NULL,\n  time_format = NULL,\n  float_precision = NULL,\n  null_values = \"\",\n  quote_style = \"necessary\"\n)\n</code></pre>"},{"location":"man/IO_write_csv.html#arguments","title":"Arguments","text":"<code>file</code>  File path to which the result should be written.  <code>\u2026</code>  Ignored.  <code>include_bom</code>  Whether to include UTF-8 BOM (byte order mark) in the CSV output.  <code>include_header</code>  Whether to include header in the CSV output.  <code>separator</code>  Separate CSV fields with this symbol.  <code>line_terminator</code>  String used to end each row.  <code>quote</code>  Byte to use as quoting character.  <code>batch_size</code>  Number of rows that will be processed per thread.  <code>datetime_format</code>  A format string, with the specifiers defined by the chrono Rust crate. If no format specified, the default fractional-second precision is inferred from the maximum timeunit found in the frame\u2019s Datetime cols (if any).  <code>date_format</code>  A format string, with the specifiers defined by the chrono Rust crate.  <code>time_format</code>  A format string, with the specifiers defined by the chrono Rust crate.  <code>float_precision</code>  Number of decimal places to write, applied to both Float32 and Float64 datatypes.  <code>null_values</code>  A string representing null values (defaulting to the empty string).  <code>quote_style</code>   Determines the quoting strategy used.  <ul> <li> <code>\u201cnecessary\u201d</code> (default): This puts quotes around fields only when necessary. They are necessary when fields contain a quote, delimiter or record terminator. Quotes are also necessary when writing an empty record (which is indistinguishable from a record with one empty field). This is the default.  </li> <li> <code>\u201calways\u201d</code>: This puts quotes around every field.  </li> <li> <code>\u201cnon_numeric\u201d</code>: This puts quotes around all fields that are non-numeric. Namely, when writing a field that does not parse as a valid float or integer, then quotes will be used even if they aren\u2019t strictly necessary.  </li> <li> <code>\u201cnever\u201d</code>: This never puts quotes around fields, even if that results in invalid CSV data (e.g.\u00a0by not quoting strings containing the separator).  </li> </ul>"},{"location":"man/IO_write_csv.html#value","title":"Value","text":"<p>This doesn\u2019t return anything but creates a CSV file.</p>"},{"location":"man/IO_write_csv.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat = pl$DataFrame(mtcars)\n\ndestination = tempfile(fileext = \".csv\")\ndat$select(pl$col(\"drat\", \"mpg\"))$write_csv(destination)\n\npl$read_csv(destination)\n</code></pre> <pre><code>#&gt; shape: (32, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 drat \u2506 mpg  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.9  \u2506 21.0 \u2502\n#&gt; \u2502 3.9  \u2506 21.0 \u2502\n#&gt; \u2502 3.85 \u2506 22.8 \u2502\n#&gt; \u2502 3.08 \u2506 21.4 \u2502\n#&gt; \u2502 3.15 \u2506 18.7 \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 3.77 \u2506 30.4 \u2502\n#&gt; \u2502 4.22 \u2506 15.8 \u2502\n#&gt; \u2502 3.62 \u2506 19.7 \u2502\n#&gt; \u2502 3.54 \u2506 15.0 \u2502\n#&gt; \u2502 4.11 \u2506 21.4 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_write_json.html","title":"Write to JSON file","text":""},{"location":"man/IO_write_json.html#description","title":"Description","text":"<p>Write to JSON file</p>"},{"location":"man/IO_write_json.html#usage","title":"Usage","text":"<pre><code>DataFrame_write_json(file, ..., pretty = FALSE, row_oriented = FALSE)\n</code></pre>"},{"location":"man/IO_write_json.html#arguments","title":"Arguments","text":"<code>file</code>  File path to which the result should be written.  <code>\u2026</code>  Ignored.  <code>pretty</code>  Pretty serialize JSON.  <code>row_oriented</code>  Write to row-oriented JSON. This is slower, but more common."},{"location":"man/IO_write_json.html#value","title":"Value","text":"<p>This doesn\u2019t return anything.</p>"},{"location":"man/IO_write_json.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nif (require(\"jsonlite\", quiet = TRUE)) {\n  dat = pl$DataFrame(head(mtcars))\n  destination = tempfile()\n\n  dat$select(pl$col(\"drat\", \"mpg\"))$write_json(destination)\n  jsonlite::fromJSON(destination)\n\n  dat$select(pl$col(\"drat\", \"mpg\"))$write_json(destination, row_oriented = TRUE)\n  jsonlite::fromJSON(destination)\n}\n</code></pre> <pre><code>#&gt;   drat  mpg\n#&gt; 1 3.90 21.0\n#&gt; 2 3.90 21.0\n#&gt; 3 3.85 22.8\n#&gt; 4 3.08 21.4\n#&gt; 5 3.15 18.7\n#&gt; 6 2.76 18.1\n</code></pre>"},{"location":"man/IO_write_ndjson.html","title":"Write to NDJSON file","text":""},{"location":"man/IO_write_ndjson.html#description","title":"Description","text":"<p>Write to NDJSON file</p>"},{"location":"man/IO_write_ndjson.html#usage","title":"Usage","text":"<pre><code>DataFrame_write_ndjson(file)\n</code></pre>"},{"location":"man/IO_write_ndjson.html#arguments","title":"Arguments","text":"<code>file</code>  File path to which the result should be written."},{"location":"man/IO_write_ndjson.html#value","title":"Value","text":"<p>This doesn\u2019t return anything.</p>"},{"location":"man/IO_write_ndjson.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat = pl$DataFrame(head(mtcars))\n\ndestination = tempfile()\ndat$select(pl$col(\"drat\", \"mpg\"))$write_ndjson(destination)\n\npl$read_ndjson(destination)\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 drat \u2506 mpg  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.9  \u2506 21.0 \u2502\n#&gt; \u2502 3.9  \u2506 21.0 \u2502\n#&gt; \u2502 3.85 \u2506 22.8 \u2502\n#&gt; \u2502 3.08 \u2506 21.4 \u2502\n#&gt; \u2502 3.15 \u2506 18.7 \u2502\n#&gt; \u2502 2.76 \u2506 18.1 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_write_parquet.html","title":"Write to parquet file","text":""},{"location":"man/IO_write_parquet.html#description","title":"Description","text":"<p>Write to parquet file</p>"},{"location":"man/IO_write_parquet.html#usage","title":"Usage","text":"<pre><code>DataFrame_write_parquet(\n  file,\n  ...,\n  compression = \"zstd\",\n  compression_level = 3,\n  statistics = FALSE,\n  row_group_size = NULL,\n  data_pagesize_limit = NULL\n)\n</code></pre>"},{"location":"man/IO_write_parquet.html#arguments","title":"Arguments","text":"<code>file</code>  File path to which the result should be written.  <code>\u2026</code>  Ignored.  <code>compression</code>   String. The compression method. One of:  <ul> <li>  \"lz4\": fast compression/decompression.  </li> <li>  \"uncompressed\"  </li> <li>  \"snappy\": this guarantees that the parquet file will be compatible with older parquet readers.  </li> <li>  \"gzip\"  </li> <li>  \"lzo\"  </li> <li>  \"brotli\"  </li> <li>  \"zstd\": good compression performance.  </li> </ul> <code>compression_level</code> <code>NULL</code> or Integer. The level of compression to use. Only used if method is one of \u2018gzip\u2019, \u2018brotli\u2019, or \u2018zstd\u2019. Higher compression means smaller files on disk:  <ul> <li>  \"gzip\": min-level: 0, max-level: 10.  </li> <li>  \"brotli\": min-level: 0, max-level: 11.  </li> <li>  \"zstd\": min-level: 1, max-level: 22.  </li> </ul> <code>statistics</code>  Logical. Whether compute and write column statistics. This requires extra compute.  <code>row_group_size</code> <code>NULL</code> or Integer. Size of the row groups in number of rows. If <code>NULL</code> (default), the chunks of the DataFrame are used. Writing in smaller chunks may reduce memory pressure and improve writing speeds.  <code>data_pagesize_limit</code> <code>NULL</code> or Integer. If <code>NULL</code> (default), the limit will be ~1MB."},{"location":"man/IO_write_parquet.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# write table 'mtcars' from mem to parquet\ndat = pl$DataFrame(mtcars)\n\ndestination = tempfile(fileext = \".parquet\")\ndat$write_parquet(destination)\n</code></pre>"},{"location":"man/LazyFrame_class.html","title":"Inner workings of the LazyFrame-class","text":""},{"location":"man/LazyFrame_class.html#description","title":"Description","text":"<p>The <code>LazyFrame</code>-class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instantiated <code>LazyFrame</code>-object is an <code>externalptr</code> to a lowlevel rust polars LazyFrame object. The pointer address is the only statefullness of the LazyFrame object on the R side. Any other state resides on the rust side. The S3 method <code>.DollarNames.RPolarsLazyFrame</code> exposes all public <code>$foobar()</code>-methods which are callable onto the object.</p> <p>Most methods return another <code>LazyFrame</code>-class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from <code>.pr$LazyFrame$methodname()</code>. Also, all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications.</p> <p><code>DataFrame</code> and <code>LazyFrame</code> can both be said to be a <code>Frame</code>. To convert use <code>\\&lt;DataFrame&gt;$lazy()</code> and <code>\\&lt;LazyFrame&gt;$collect()</code>. You can also create a <code>LazyFrame</code> directly with <code>pl$LazyFrame()</code>. This is quite similar to the lazy-collect syntax of the <code>dplyr</code> package to interact with database connections such as SQL variants. Most SQL databases would be able to perform the same optimizations as polars such predicate pushdown and projection pushdown. However polars can interact and optimize queries with both SQL DBs and other data sources such parquet files simultaneously.</p>"},{"location":"man/LazyFrame_class.html#active-bindings","title":"Active bindings","text":"columns  <p><code>$columns</code> returns a character vector with the column names.</p>  dtypes  <p><code>$dtypes</code> returns a unnamed list with the data type of each column.</p>  schema  <p><code>$schema</code> returns a named list with the data type of each column.</p>  width  <p><code>$width</code> returns the number of columns in the LazyFrame.</p>"},{"location":"man/LazyFrame_class.html#conversion-to-r-data-types-considerations","title":"Conversion to R data types considerations","text":"<p>When converting Polars objects, such as DataFrames to R objects, for example via the <code>as.data.frame()</code> generic function, each type in the Polars object is converted to an R type. In some cases, an error may occur because the conversion is not appropriate. In particular, there is a high possibility of an error when converting a Datetime type without a time zone. A Datetime type without a time zone in Polars is converted to the POSIXct type in R, which takes into account the time zone in which the R session is running (which can be checked with the <code>Sys.timezone()</code> function). In this case, if ambiguous times are included, a conversion error will occur. In such cases, change the session time zone using <code>Sys.setenv(TZ = \"UTC\")</code> and then perform the conversion, or use the <code>$dt$replace_time_zone()</code> method on the Datetime type column to explicitly specify the time zone before conversion.</p> <pre># Due to daylight savings, clocks were turned forward 1 hour on Sunday, March 8, 2020, 2:00:00 am\n# so this particular date-time doesn't exist\nnon_existent_time = as_polars_series(\"2020-03-08 02:00:00\")\\$str\\$strptime(pl\\$Datetime(), \"%F %T\")\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    tryCatch(\n      # This causes an error due to the time zone (the `TZ` env var is affected).\n      as.vector(non_existent_time),\n      error = function(e) e\n    )\n  }\n)\n#&gt; &lt;error: in to_r: ComputeError(ErrString(\"datetime '2020-03-08 02:00:00' is non-existent in time zone 'America/New_York'. You may be able to use `non_existent='null'` to return `null` in this case.\")) When calling: devtools::document()&gt;\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    # This is safe.\n    as.vector(non_existent_time\\$dt\\$replace_time_zone(\"UTC\"))\n  }\n)\n#&gt; [1] \"2020-03-08 02:00:00 UTC\"\n</pre>"},{"location":"man/LazyFrame_class.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# see all exported methods\nls(.pr$env$RPolarsLazyFrame)\n</code></pre> <pre><code>#&gt;  [1] \"clone\"                   \"collect\"                \n#&gt;  [3] \"collect_in_background\"   \"columns\"                \n#&gt;  [5] \"describe_optimized_plan\" \"describe_plan\"          \n#&gt;  [7] \"drop\"                    \"drop_nulls\"             \n#&gt;  [9] \"dtypes\"                  \"explode\"                \n#&gt; [11] \"fetch\"                   \"fill_nan\"               \n#&gt; [13] \"fill_null\"               \"filter\"                 \n#&gt; [15] \"first\"                   \"get_optimization_toggle\"\n#&gt; [17] \"group_by\"                \"group_by_dynamic\"       \n#&gt; [19] \"head\"                    \"join\"                   \n#&gt; [21] \"join_asof\"               \"last\"                   \n#&gt; [23] \"limit\"                   \"max\"                    \n#&gt; [25] \"mean\"                    \"median\"                 \n#&gt; [27] \"melt\"                    \"min\"                    \n#&gt; [29] \"print\"                   \"profile\"                \n#&gt; [31] \"quantile\"                \"rename\"                 \n#&gt; [33] \"reverse\"                 \"rolling\"                \n#&gt; [35] \"schema\"                  \"select\"                 \n#&gt; [37] \"set_optimization_toggle\" \"shift\"                  \n#&gt; [39] \"shift_and_fill\"          \"sink_csv\"               \n#&gt; [41] \"sink_ipc\"                \"sink_ndjson\"            \n#&gt; [43] \"sink_parquet\"            \"slice\"                  \n#&gt; [45] \"sort\"                    \"std\"                    \n#&gt; [47] \"sum\"                     \"tail\"                   \n#&gt; [49] \"to_dot\"                  \"unique\"                 \n#&gt; [51] \"unnest\"                  \"var\"                    \n#&gt; [53] \"width\"                   \"with_columns\"           \n#&gt; [55] \"with_context\"            \"with_row_index\"\n</code></pre> <pre><code># see all private methods (not intended for regular use)\nls(.pr$LazyFrame)\n</code></pre> <pre><code>#&gt;  [1] \"clone_in_rust\"           \"collect\"                \n#&gt;  [3] \"collect_in_background\"   \"debug_plan\"             \n#&gt;  [5] \"describe_optimized_plan\" \"describe_plan\"          \n#&gt;  [7] \"drop\"                    \"drop_nulls\"             \n#&gt;  [9] \"explode\"                 \"fetch\"                  \n#&gt; [11] \"fill_nan\"                \"fill_null\"              \n#&gt; [13] \"filter\"                  \"first\"                  \n#&gt; [15] \"get_optimization_toggle\" \"group_by\"               \n#&gt; [17] \"group_by_dynamic\"        \"join\"                   \n#&gt; [19] \"join_asof\"               \"last\"                   \n#&gt; [21] \"max\"                     \"mean\"                   \n#&gt; [23] \"median\"                  \"melt\"                   \n#&gt; [25] \"min\"                     \"print\"                  \n#&gt; [27] \"profile\"                 \"quantile\"               \n#&gt; [29] \"rename\"                  \"reverse\"                \n#&gt; [31] \"rolling\"                 \"schema\"                 \n#&gt; [33] \"select\"                  \"select_str_as_lit\"      \n#&gt; [35] \"set_optimization_toggle\" \"shift\"                  \n#&gt; [37] \"shift_and_fill\"          \"sink_csv\"               \n#&gt; [39] \"sink_ipc\"                \"sink_json\"              \n#&gt; [41] \"sink_parquet\"            \"slice\"                  \n#&gt; [43] \"sort_by_exprs\"           \"std\"                    \n#&gt; [45] \"sum\"                     \"tail\"                   \n#&gt; [47] \"to_dot\"                  \"unique\"                 \n#&gt; [49] \"unnest\"                  \"var\"                    \n#&gt; [51] \"with_columns\"            \"with_context\"           \n#&gt; [53] \"with_row_index\"\n</code></pre> <pre><code># Practical example ##\n# First writing R iris dataset to disk, to illustrte a difference\ntemp_filepath = tempfile()\nwrite.csv(iris, temp_filepath, row.names = FALSE)\n\n# Following example illustrates 2 ways to obtain a LazyFrame\n\n# The-Okay-way: convert an in-memory DataFrame to LazyFrame\n\n# eager in-mem R data.frame\nRdf = read.csv(temp_filepath)\n\n# eager in-mem polars DataFrame\nPdf = as_polars_df(Rdf)\n\n# lazy frame starting from in-mem DataFrame\nLdf_okay = Pdf$lazy()\n\n# The-Best-Way:  LazyFrame created directly from a data source is best...\nLdf_best = pl$scan_csv(temp_filepath)\n\n# ... as if to e.g. filter the LazyFrame, that filtering also caleld predicate will be\n# pushed down in the executation stack to the csv_reader, and thereby only bringing into\n# memory the rows matching to filter.\n# apply filter:\nfilter_expr = pl$col(\"Species\") == \"setosa\" # get only rows where Species is setosa\nLdf_okay = Ldf_okay$filter(filter_expr) # overwrite LazyFrame with new\nLdf_best = Ldf_best$filter(filter_expr)\n\n# the non optimized plans are similar, on entire in-mem csv, apply filter\nLdf_okay$describe_plan()\n</code></pre> <pre><code>#&gt; FILTER [(col(\"Species\")) == (String(setosa))] FROM\n#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>Ldf_best$describe_plan()\n</code></pre> <pre><code>#&gt; FILTER [(col(\"Species\")) == (String(setosa))] FROM\n#&gt; \n#&gt;   Csv SCAN /tmp/RtmpxRLbC5/file7ba166f6abd8\n#&gt;   PROJECT */5 COLUMNS\n</code></pre> <pre><code># NOTE For Ldf_okay, the full time to load csv alrady paid when creating Rdf and Pdf\n\n# The optimized plan are quite different, Ldf_best will read csv and perform filter simultaneously\nLdf_okay$describe_optimized_plan()\n</code></pre> <pre><code>#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"[(col(\\\"Species\\\")) == (String(setosa))]\"\n</code></pre> <pre><code>Ldf_best$describe_optimized_plan()\n</code></pre> <pre><code>#&gt; \n#&gt;   Csv SCAN /tmp/RtmpxRLbC5/file7ba166f6abd8\n#&gt;   PROJECT */5 COLUMNS\n#&gt;   SELECTION: [(col(\"Species\")) == (String(setosa))]\n</code></pre> <pre><code># To acquire result in-mem use $colelct()\nPdf_okay = Ldf_okay$collect()\nPdf_best = Ldf_best$collect()\n\n\n# verify tables would be the same\nall.equal(\n  Pdf_okay$to_data_frame(),\n  Pdf_best$to_data_frame()\n)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># a user might write it as a one-liner like so:\nPdf_best2 = pl$scan_csv(temp_filepath)$filter(pl$col(\"Species\") == \"setosa\")\n</code></pre>"},{"location":"man/LazyFrame_clone.html","title":"Clone a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_clone.html#description","title":"Description","text":"<p>This makes a very cheap deep copy/clone of an existing <code>LazyFrame</code>. Rarely useful as <code>LazyFrame</code>s are nearly 100% immutable. Any modification of a <code>LazyFrame</code> should lead to a clone anyways, but this can be useful when dealing with attributes (see examples).</p>"},{"location":"man/LazyFrame_clone.html#usage","title":"Usage","text":"<pre><code>LazyFrame_clone()\n</code></pre>"},{"location":"man/LazyFrame_clone.html#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_clone.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf1 = pl$LazyFrame(iris)\n\n# Make a function to take a LazyFrame, add an attribute, and return a LazyFrame\ngive_attr = function(data) {\n  attr(data, \"created_on\") = \"2024-01-29\"\n  data\n}\ndf2 = give_attr(df1)\n\n# Problem: the original LazyFrame also gets the attribute while it shouldn't!\nattributes(df1)\n</code></pre> <pre><code>#&gt; $class\n#&gt; [1] \"RPolarsLazyFrame\"\n#&gt; \n#&gt; $created_on\n#&gt; [1] \"2024-01-29\"\n</code></pre> <pre><code># Use $clone() inside the function to avoid that\ngive_attr = function(data) {\n  data = data$clone()\n  attr(data, \"created_on\") = \"2024-01-29\"\n  data\n}\ndf1 = pl$LazyFrame(iris)\ndf2 = give_attr(df1)\n\n# now, the original LazyFrame doesn't get this attribute\nattributes(df1)\n</code></pre> <pre><code>#&gt; $class\n#&gt; [1] \"RPolarsLazyFrame\"\n</code></pre>"},{"location":"man/LazyFrame_collect.html","title":"Collect a query into a DataFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_collect.html#description","title":"Description","text":"<p><code>$collect()</code> performs the query on the LazyFrame. It returns a DataFrame</p>"},{"location":"man/LazyFrame_collect.html#usage","title":"Usage","text":"<pre><code>LazyFrame_collect(\n  ...,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE,\n  collect_in_background = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_collect.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Ignored.  <code>type_coercion</code>  Logical. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Logical. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Logical. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Logical. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Logical. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Logical. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Logical. Common subexpressions will be cached and reused.  <code>streaming</code>  Logical. Run parts of the query in a streaming fashion (this is in an alpha state).  <code>no_optimization</code>  Logical. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Logical. Use existing optimization settings regardless the settings specified in this function call.  <code>collect_in_background</code>  Logical. Detach this query from R session. Computation will start in background. Get a handle which later can be converted into the resulting DataFrame. Useful in interactive mode to not lock R session."},{"location":"man/LazyFrame_collect.html#details","title":"Details","text":"<p>Note: use <code>$fetch(n)</code> if you want to run your query on the first <code>n</code> rows only. This can be a huge time saver in debugging queries.</p>"},{"location":"man/LazyFrame_collect.html#value","title":"Value","text":"<p>A <code>DataFrame</code></p>"},{"location":"man/LazyFrame_collect.html#see-also","title":"See Also","text":"<ul> <li> <code>$fetch()</code> - fast limited query check  </li> <li> <code>$profile()</code> - same as <code>$collect()</code> but also returns a table with each operation profiled.  </li> <li> <code>$collect_in_background()</code> - non-blocking collect returns a future handle. Can also just be used via <code>$collect(collect_in_background = TRUE)</code>.  </li> <li> <code>$sink_parquet()</code> streams query to a parquet file.  </li> <li> <code>$sink_ipc()</code> streams query to a arrow file.  </li> </ul>"},{"location":"man/LazyFrame_collect.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(iris)$filter(pl$col(\"Species\") == \"setosa\")$collect()\n</code></pre> <pre><code>#&gt; shape: (50, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026       \u2502\n#&gt; \u2502 4.8          \u2506 3.0         \u2506 1.4          \u2506 0.3         \u2506 setosa  \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.6          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.2         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.3          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.3         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_collect_in_background.html","title":"Collect a query in background","text":"<p>Source code</p>"},{"location":"man/LazyFrame_collect_in_background.html#description","title":"Description","text":"<p>This doesn\u2019t block the R session as it calls <code>$collect()</code> in a a detached thread. This can also be used via <code>$collect(collect_in_background = TRUE)</code>.</p>"},{"location":"man/LazyFrame_collect_in_background.html#usage","title":"Usage","text":"<pre><code>LazyFrame_collect_in_background()\n</code></pre>"},{"location":"man/LazyFrame_collect_in_background.html#details","title":"Details","text":"<p>This function immediately returns an RThreadHandle. Use <code>\\&lt;RPolarsRThreadHandle&gt;$is_finished()</code> to see if done. Use <code>\\&lt;RPolarsRThreadHandle&gt;$join()</code> to wait and get the final result.</p> <p>It is useful to not block the R session while query executes. If you use <code>\\&lt;Expr&gt;$map_batches()</code> or <code>\\&lt;Expr&gt;$map_elements()</code> to run R functions in the query, then you must pass <code>in_background = TRUE</code> in <code>$map_batches()</code> (or <code>$map_elements()</code>). Otherwise, <code>$collect_in_background()</code> will fail because the main R session is not available for polars execution. See also examples below.</p>"},{"location":"man/LazyFrame_collect_in_background.html#value","title":"Value","text":"<p>RThreadHandle, a future-like thread handle for the task</p>"},{"location":"man/LazyFrame_collect_in_background.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Some expression which does contain a map\nexpr = pl$col(\"mpg\")$map_batches(\n  \\(x) {\n    Sys.sleep(.1)\n    x * 0.43\n  },\n  in_background = TRUE # set TRUE if collecting in background queries with $map or $apply\n)$alias(\"kml\")\n\n# return is immediately a handle to another thread.\nhandle = pl$LazyFrame(mtcars)$with_columns(expr)$collect_in_background()\n\n# ask if query is done\nif (!handle$is_finished()) print(\"not done yet\")\n</code></pre> <pre><code>#&gt; [1] \"not done yet\"\n</code></pre> <pre><code># get result, blocking until polars query is done\ndf = handle$join()\ndf\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 am  \u2506 gear \u2506 carb \u2506 kml    \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 ---  \u2506 ---  \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64  \u2506 f64  \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 9.03   \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 9.03   \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2506 9.804  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2506 9.202  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2506 8.041  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2506 \u2026      \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2506 13.072 \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2506 6.794  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2506 8.471  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2506 6.45   \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2506 9.202  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_describe_plan.html","title":"Print the optimized or non-optimized plans of <code>LazyFrame</code>","text":"<p>Source code</p>"},{"location":"man/LazyFrame_describe_plan.html#description","title":"Description","text":"<p><code>$describe_plan()</code> shows the query in the format that <code>polars</code> understands. <code>$describe_optimized_plan()</code> shows the optimized query plan that <code>polars</code> will execute when <code>$collect()</code> is called. It is possible that both plans are identical if <code>polars</code> doesn\u2019t find any way to optimize the query.</p>"},{"location":"man/LazyFrame_describe_plan.html#usage","title":"Usage","text":"<pre><code>LazyFrame_describe_optimized_plan()\n\nLazyFrame_describe_plan()\n</code></pre>"},{"location":"man/LazyFrame_describe_plan.html#value","title":"Value","text":"<p>This only prints the plan in the console, it doesn\u2019t return any value.</p>"},{"location":"man/LazyFrame_describe_plan.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlazy_frame = pl$LazyFrame(iris)\n\n# Prepare your query\nlazy_query = lazy_frame$sort(\"Species\")$filter(pl$col(\"Species\") != \"setosa\")\n\n# This is the query as `polars` understands it\nlazy_query$describe_plan()\n</code></pre> <pre><code>#&gt; FILTER [(col(\"Species\")) != (String(setosa))] FROM\n#&gt; SORT BY [col(\"Species\")]\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># This is the query after `polars` optimizes it: instead of sorting first and\n# then filtering, it is faster to filter first and then sort the rest.\nlazy_query$describe_optimized_plan()\n</code></pre> <pre><code>#&gt; SORT BY [col(\"Species\")]\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"[(col(\\\"Species\\\")) != (String(setosa))]\"\n</code></pre>"},{"location":"man/LazyFrame_drop.html","title":"Drop columns of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_drop.html#description","title":"Description","text":"<p>Drop columns of a LazyFrame</p>"},{"location":"man/LazyFrame_drop.html#usage","title":"Usage","text":"<pre><code>LazyFrame_drop(...)\n</code></pre>"},{"location":"man/LazyFrame_drop.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters of column names to drop. Passed to <code>pl$col()</code>."},{"location":"man/LazyFrame_drop.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_drop.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$drop(c(\"mpg\", \"hp\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 9)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 disp  \u2506 drat \u2506 wt    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---  \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64   \u2506 f64  \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.62  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.875 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 4.0 \u2506 108.0 \u2506 3.85 \u2506 2.32  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 6.0 \u2506 258.0 \u2506 3.08 \u2506 3.215 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 8.0 \u2506 360.0 \u2506 3.15 \u2506 3.44  \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026     \u2506 \u2026    \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 4.0 \u2506 95.1  \u2506 3.77 \u2506 1.513 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 8.0 \u2506 351.0 \u2506 4.22 \u2506 3.17  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 145.0 \u2506 3.62 \u2506 2.77  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 8.0 \u2506 301.0 \u2506 3.54 \u2506 3.57  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 4.0 \u2506 121.0 \u2506 4.11 \u2506 2.78  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># equivalent\npl$LazyFrame(mtcars)$drop(\"mpg\", \"hp\")$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 9)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 disp  \u2506 drat \u2506 wt    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---  \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64   \u2506 f64  \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.62  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.875 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 4.0 \u2506 108.0 \u2506 3.85 \u2506 2.32  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 6.0 \u2506 258.0 \u2506 3.08 \u2506 3.215 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 8.0 \u2506 360.0 \u2506 3.15 \u2506 3.44  \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026     \u2506 \u2026    \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 4.0 \u2506 95.1  \u2506 3.77 \u2506 1.513 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 8.0 \u2506 351.0 \u2506 4.22 \u2506 3.17  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 145.0 \u2506 3.62 \u2506 2.77  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 8.0 \u2506 301.0 \u2506 3.54 \u2506 3.57  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 4.0 \u2506 121.0 \u2506 4.11 \u2506 2.78  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_drop_nulls.html","title":"Drop nulls (missing values)","text":"<p>Source code</p>"},{"location":"man/LazyFrame_drop_nulls.html#description","title":"Description","text":"<p>Drop all rows that contain nulls (which correspond to <code>NA</code> in R).</p>"},{"location":"man/LazyFrame_drop_nulls.html#usage","title":"Usage","text":"<pre><code>LazyFrame_drop_nulls(subset = NULL)\n</code></pre>"},{"location":"man/LazyFrame_drop_nulls.html#arguments","title":"Arguments","text":"<code>subset</code>  A character vector with the names of the column(s) for which nulls are considered. If <code>NULL</code> (default), use all columns."},{"location":"man/LazyFrame_drop_nulls.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_drop_nulls.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ntmp = mtcars\ntmp[1:3, \"mpg\"] = NA\ntmp[4, \"hp\"] = NA\ntmp = pl$LazyFrame(tmp)\n\n# number of rows in `tmp` before dropping nulls\ntmp$collect()$height\n</code></pre> <pre><code>#&gt; [1] 32\n</code></pre> <pre><code>tmp$drop_nulls()$collect()$height\n</code></pre> <pre><code>#&gt; [1] 28\n</code></pre> <pre><code>tmp$drop_nulls(\"mpg\")$collect()$height\n</code></pre> <pre><code>#&gt; [1] 29\n</code></pre> <pre><code>tmp$drop_nulls(c(\"mpg\", \"hp\"))$collect()$height\n</code></pre> <pre><code>#&gt; [1] 28\n</code></pre>"},{"location":"man/LazyFrame_explode.html","title":"Explode columns containing a list of values","text":"<p>Source code</p>"},{"location":"man/LazyFrame_explode.html#description","title":"Description","text":"<p>This will take every element of a list column and add it on an additional row.</p>"},{"location":"man/LazyFrame_explode.html#usage","title":"Usage","text":"<pre><code>LazyFrame_explode(...)\n</code></pre>"},{"location":"man/LazyFrame_explode.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Column(s) to be exploded as individual <code>Into\\ or list/vector of <code>Into\\. In a handful of places in rust-polars, only the plain variant <code>Expr::Column</code> is accepted. This is currenly one of such places. Therefore <code>pl$col(\u201cname\u201d)</code> and <code>pl$all()</code> is allowed, not <code>pl$col(\u201cname\u201d)$alias(\u201cnewname\u201d)</code>. <code>\u201cname\u201d</code> is implicitly converted to <code>pl$col(\u201cname\u201d)</code>."},{"location":"man/LazyFrame_explode.html#details","title":"Details","text":"<p>Only columns of DataType <code>List</code> or <code>Array</code> can be exploded.</p> <p>Named expressions like <code>$explode(a = pl$col(\u201cb\u201d))</code> will not implicitly trigger <code>$alias(\u201ca\u201d)</code> here, due to only variant <code>Expr::Column</code> is supported in rust-polars.</p>"},{"location":"man/LazyFrame_explode.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_explode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$LazyFrame(\n  letters = c(\"aa\", \"aa\", \"bb\", \"cc\"),\n  numbers = list(1, c(2, 3), c(4, 5), c(6, 7, 8)),\n  numbers_2 = list(0, c(1, 2), c(3, 4), c(5, 6, 7)) # same structure as numbers\n)\ndf\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; DF [\"letters\", \"numbers\", \"numbers_2\"]; PROJECT */3 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># explode a single column, append others\ndf$explode(\"numbers\")$collect()\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2       \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---             \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 list[f64]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 aa      \u2506 1.0     \u2506 [0.0]           \u2502\n#&gt; \u2502 aa      \u2506 2.0     \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 aa      \u2506 3.0     \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 bb      \u2506 4.0     \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 bb      \u2506 5.0     \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 cc      \u2506 6.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2502 cc      \u2506 7.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2502 cc      \u2506 8.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># explode two columns of same nesting structure, by names or the common dtype\n# \"List(Float64)\"\ndf$explode(\"numbers\", \"numbers_2\")$collect()\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2 \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---       \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 aa      \u2506 1.0     \u2506 0.0       \u2502\n#&gt; \u2502 aa      \u2506 2.0     \u2506 1.0       \u2502\n#&gt; \u2502 aa      \u2506 3.0     \u2506 2.0       \u2502\n#&gt; \u2502 bb      \u2506 4.0     \u2506 3.0       \u2502\n#&gt; \u2502 bb      \u2506 5.0     \u2506 4.0       \u2502\n#&gt; \u2502 cc      \u2506 6.0     \u2506 5.0       \u2502\n#&gt; \u2502 cc      \u2506 7.0     \u2506 6.0       \u2502\n#&gt; \u2502 cc      \u2506 8.0     \u2506 7.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$explode(pl$col(pl$List(pl$Float64)))$collect()\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2 \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---       \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 aa      \u2506 1.0     \u2506 0.0       \u2502\n#&gt; \u2502 aa      \u2506 2.0     \u2506 1.0       \u2502\n#&gt; \u2502 aa      \u2506 3.0     \u2506 2.0       \u2502\n#&gt; \u2502 bb      \u2506 4.0     \u2506 3.0       \u2502\n#&gt; \u2502 bb      \u2506 5.0     \u2506 4.0       \u2502\n#&gt; \u2502 cc      \u2506 6.0     \u2506 5.0       \u2502\n#&gt; \u2502 cc      \u2506 7.0     \u2506 6.0       \u2502\n#&gt; \u2502 cc      \u2506 8.0     \u2506 7.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_fetch.html","title":"Fetch <code>n</code> rows of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_fetch.html#description","title":"Description","text":"<p>This is similar to <code>$collect()</code> but limit the number of rows to collect. It is mostly useful to check that a query works as expected.</p>"},{"location":"man/LazyFrame_fetch.html#usage","title":"Usage","text":"<pre><code>LazyFrame_fetch(\n  n_rows = 500,\n  ...,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_fetch.html#arguments","title":"Arguments","text":"<code>n_rows</code>  Integer. Maximum number of rows to fetch.  <code>\u2026</code>  Ignored.  <code>type_coercion</code>  Logical. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Logical. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Logical. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Logical. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Logical. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Logical. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Logical. Common subexpressions will be cached and reused.  <code>streaming</code>  Logical. Run parts of the query in a streaming fashion (this is in an alpha state).  <code>no_optimization</code>  Logical. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Logical. Use existing optimization settings regardless the settings specified in this function call."},{"location":"man/LazyFrame_fetch.html#details","title":"Details","text":"<p><code>$fetch()</code> does not guarantee the final number of rows in the DataFrame output. It only guarantees that <code>n</code> rows are used at the beginning of the query. Filters, join operations and a lower number of rows available in the scanned file influence the final number of rows.</p>"},{"location":"man/LazyFrame_fetch.html#value","title":"Value","text":"<p>A DataFrame of maximum n_rows</p>"},{"location":"man/LazyFrame_fetch.html#see-also","title":"See Also","text":"<ul> <li> <code>$collect()</code> - regular collect.  </li> <li> <code>$profile()</code> - same as <code>$collect()</code> but also returns a table with each operation profiled.  </li> <li> <code>$collect_in_background()</code> - non-blocking collect returns a future handle. Can also just be used via <code>$collect(collect_in_background = TRUE)</code>.  </li> <li> <code>$sink_parquet()</code> streams query to a parquet file.  </li> <li> <code>$sink_ipc()</code> streams query to a arrow file.  </li> </ul>"},{"location":"man/LazyFrame_fetch.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# fetch 3 rows\npl$LazyFrame(iris)$fetch(3)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># this fetch-query returns 4 rows, because we started with 3 and appended one\n# row in the query (see section 'Details')\npl$LazyFrame(iris)$\n  select(pl$col(\"Species\")$append(\"flora gigantica, alien\"))$\n  fetch(3)\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species                \u2502\n#&gt; \u2502 ---                    \u2502\n#&gt; \u2502 str                    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa                 \u2502\n#&gt; \u2502 setosa                 \u2502\n#&gt; \u2502 setosa                 \u2502\n#&gt; \u2502 flora gigantica, alien \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_fill_nan.html","title":"Fill <code>NaN</code>","text":"<p>Source code</p>"},{"location":"man/LazyFrame_fill_nan.html#description","title":"Description","text":"<p>Fill <code>NaN</code> values by an Expression evaluation.</p>"},{"location":"man/LazyFrame_fill_nan.html#usage","title":"Usage","text":"<pre><code>LazyFrame_fill_nan(fill_value)\n</code></pre>"},{"location":"man/LazyFrame_fill_nan.html#arguments","title":"Arguments","text":"<code>fill_value</code>  Value to fill <code>NaN</code> with."},{"location":"man/LazyFrame_fill_nan.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_fill_nan.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$LazyFrame(\n  a = c(1.5, 2, NaN, 4),\n  b = c(1.5, NaN, NaN, 4)\n)\ndf$fill_nan(99)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_fill_null.html","title":"Fill nulls","text":"<p>Source code</p>"},{"location":"man/LazyFrame_fill_null.html#description","title":"Description","text":"<p>Fill null values (which correspond to <code>NA</code> in R) using the specified value or strategy.</p>"},{"location":"man/LazyFrame_fill_null.html#usage","title":"Usage","text":"<pre><code>LazyFrame_fill_null(fill_value)\n</code></pre>"},{"location":"man/LazyFrame_fill_null.html#arguments","title":"Arguments","text":"<code>fill_value</code>  Value to fill nulls with."},{"location":"man/LazyFrame_fill_null.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_fill_null.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$LazyFrame(\n  a = c(1.5, 2, NA, 4),\n  b = c(1.5, NA, NA, 4)\n)\ndf$fill_null(99)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_filter.html","title":"Apply filter to LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_filter.html#description","title":"Description","text":"<p>Filter rows with an Expression defining a boolean column. Multiple expressions are combined with <code>&amp;</code> (AND). This is equivalent to <code>dplyr::filter()</code>.</p>"},{"location":"man/LazyFrame_filter.html#usage","title":"Usage","text":"<pre><code>LazyFrame_filter(...)\n</code></pre>"},{"location":"man/LazyFrame_filter.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Polars expressions which will evaluate to a boolean."},{"location":"man/LazyFrame_filter.html#details","title":"Details","text":"<p>Rows where the condition returns <code>NA</code> are dropped.</p>"},{"location":"man/LazyFrame_filter.html#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object with add/modified column.</p>"},{"location":"man/LazyFrame_filter.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(iris)\n\nlf$filter(pl$col(\"Species\") == \"setosa\")$collect()\n</code></pre> <pre><code>#&gt; shape: (50, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026       \u2502\n#&gt; \u2502 4.8          \u2506 3.0         \u2506 1.4          \u2506 0.3         \u2506 setosa  \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.6          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.2         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.3          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.3         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># This is equivalent to\n# lf$filter(pl$col(\"Sepal.Length\") &gt; 5 &amp; pl$col(\"Petal.Width\") &lt; 1)\nlf$filter(pl$col(\"Sepal.Length\") &gt; 5, pl$col(\"Petal.Width\") &lt; 1)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; FILTER [([(col(\"Sepal.Length\")) &gt; (5.0)]) &amp; ([(col(\"Petal.Width\")) &lt; (1.0)])] FROM\n#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyFrame_first.html","title":"Get the first row of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_first.html#description","title":"Description","text":"<p>Get the first row of a LazyFrame</p>"},{"location":"man/LazyFrame_first.html#usage","title":"Usage","text":"<pre><code>LazyFrame_first()\n</code></pre>"},{"location":"man/LazyFrame_first.html#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_first.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$first()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_get_optimization_toggle.html","title":"Get optimization settings","text":"<p>Source code</p>"},{"location":"man/LazyFrame_get_optimization_toggle.html#description","title":"Description","text":"<p>Get the current optimization toggles for the lazy query</p>"},{"location":"man/LazyFrame_get_optimization_toggle.html#usage","title":"Usage","text":"<pre><code>LazyFrame_get_optimization_toggle()\n</code></pre>"},{"location":"man/LazyFrame_get_optimization_toggle.html#value","title":"Value","text":"<p>List of optimization toggles</p>"},{"location":"man/LazyFrame_get_optimization_toggle.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$get_optimization_toggle()\n</code></pre> <pre><code>#&gt; $type_coercion\n#&gt; [1] TRUE\n#&gt; \n#&gt; $predicate_pushdown\n#&gt; [1] TRUE\n#&gt; \n#&gt; $projection_pushdown\n#&gt; [1] TRUE\n#&gt; \n#&gt; $simplify_expression\n#&gt; [1] TRUE\n#&gt; \n#&gt; $slice_pushdown\n#&gt; [1] TRUE\n#&gt; \n#&gt; $comm_subplan_elim\n#&gt; [1] TRUE\n#&gt; \n#&gt; $comm_subexpr_elim\n#&gt; [1] TRUE\n#&gt; \n#&gt; $streaming\n#&gt; [1] FALSE\n#&gt; \n#&gt; $eager\n#&gt; [1] FALSE\n</code></pre>"},{"location":"man/LazyFrame_group_by.html","title":"Group a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_group_by.html#description","title":"Description","text":"<p>This doesn\u2019t modify the data but only stores information about the group structure. This structure can then be used by several functions (<code>$agg()</code>, <code>$filter()</code>, etc.).</p>"},{"location":"man/LazyFrame_group_by.html#usage","title":"Usage","text":"<pre><code>LazyFrame_group_by(..., maintain_order = polars_options()\\$maintain_order)\n</code></pre>"},{"location":"man/LazyFrame_group_by.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Column(s) to group by. Accepts expression input. Characters are parsed as column names.  <code>maintain_order</code>  Ensure that the order of the groups is consistent with the input data. This is slower than a default group by. Setting this to <code>TRUE</code> blocks the possibility to run on the streaming engine. The default value can be changed with <code>options(polars.maintain_order = TRUE)</code>."},{"location":"man/LazyFrame_group_by.html#value","title":"Value","text":"<p>LazyGroupBy (a LazyFrame with special groupby methods like <code>$agg()</code>)</p>"},{"location":"man/LazyFrame_group_by.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(\n  a = c(\"a\", \"b\", \"a\", \"b\", \"c\"),\n  b = c(1, 2, 1, 3, 3),\n  c = c(5, 4, 3, 2, 1)\n)\n\nlf$group_by(\"a\")$agg(pl$col(\"b\")$sum())$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 c   \u2506 3.0 \u2502\n#&gt; \u2502 b   \u2506 5.0 \u2502\n#&gt; \u2502 a   \u2506 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Set `maintain_order = TRUE` to ensure the order of the groups is consistent with the input.\nlf$group_by(\"a\", maintain_order = TRUE)$agg(pl$col(\"c\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 c          \u2502\n#&gt; \u2502 --- \u2506 ---        \u2502\n#&gt; \u2502 str \u2506 list[f64]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 [5.0, 3.0] \u2502\n#&gt; \u2502 b   \u2506 [4.0, 2.0] \u2502\n#&gt; \u2502 c   \u2506 [1.0]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Group by multiple columns by passing a list of column names.\nlf$group_by(c(\"a\", \"b\"))$agg(pl$max(\"c\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 b   \u2506 2.0 \u2506 4.0 \u2502\n#&gt; \u2502 a   \u2506 1.0 \u2506 5.0 \u2502\n#&gt; \u2502 b   \u2506 3.0 \u2506 2.0 \u2502\n#&gt; \u2502 c   \u2506 3.0 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Or pass some arguments to group by multiple columns in the same way.\n# Expressions are also accepted.\nlf$group_by(\"a\", pl$col(\"b\") %/% 2)$agg(\n  pl$col(\"c\")$mean()\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 b   \u2506 1.0 \u2506 3.0 \u2502\n#&gt; \u2502 c   \u2506 1.0 \u2506 1.0 \u2502\n#&gt; \u2502 a   \u2506 0.0 \u2506 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># The columns will be renamed to the argument names.\nlf$group_by(d = \"a\", e = pl$col(\"b\") %/% 2)$agg(\n  pl$col(\"c\")$mean()\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d   \u2506 e   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 c   \u2506 1.0 \u2506 1.0 \u2502\n#&gt; \u2502 b   \u2506 1.0 \u2506 3.0 \u2502\n#&gt; \u2502 a   \u2506 0.0 \u2506 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_group_by_dynamic.html","title":"Group based on a date/time or integer column","text":"<p>Source code</p>"},{"location":"man/LazyFrame_group_by_dynamic.html#description","title":"Description","text":"<p>If you have a time series <code>\\&lt;t_0, t_1, \u2026, t_n&gt;</code>, then by default the windows created will be:</p> <ul> <li>  (t_0 - period, t_0\\]  </li> <li>  (t_1 - period, t_1\\]  </li> <li>  \u2026  </li> <li>  (t_n - period, t_n\\]  </li> </ul> <p>whereas if you pass a non-default offset, then the windows will be:</p> <ul> <li>  (t_0 + offset, t_0 + offset + period\\]  </li> <li>  (t_1 + offset, t_1 + offset + period\\]  </li> <li>  \u2026  </li> <li>  (t_n + offset, t_n + offset + period\\]  </li> </ul>"},{"location":"man/LazyFrame_group_by_dynamic.html#usage","title":"Usage","text":"<pre><code>LazyFrame_group_by_dynamic(\n  index_column,\n  ...,\n  every,\n  period = NULL,\n  offset = NULL,\n  include_boundaries = FALSE,\n  closed = \"left\",\n  label = \"left\",\n  group_by = NULL,\n  start_by = \"window\",\n  check_sorted = TRUE\n)\n</code></pre>"},{"location":"man/LazyFrame_group_by_dynamic.html#arguments","title":"Arguments","text":"<code>index_column</code>  Column used to group based on the time window. Often of type Date/Datetime. This column must be sorted in ascending order (or, if <code>by</code> is specified, then it must be sorted in ascending order within each group). In case of a rolling group by on indices, dtype needs to be either Int32 or Int64. Note that Int32 gets temporarily cast to Int64, so if performance matters use an Int64 column.  <code>\u2026</code>  Ignored.  <code>every</code>  Interval of the window.  <code>period</code>  A character representing the length of the window, must be non-negative. See the <code>Polars duration string language</code> section for details.  <code>offset</code>  A character representing the offset of the window, or <code>NULL</code> (default). If <code>NULL</code>, <code>-period</code> is used. See the <code>Polars duration string language</code> section for details.  <code>include_boundaries</code>  Add two columns <code>\u201c\\_lower_boundary\u201d</code> and <code>\u201c\\_upper_boundary\u201d</code> columns that show the boundaries of the window. This will impact performance because it\u2019s harder to parallelize.  <code>closed</code>  Define which sides of the temporal interval are closed (inclusive). This can be either <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code> or <code>\u201cnone\u201d</code>.  <code>label</code>   Define which label to use for the window:  <ul> <li> <code>\u201cleft\u201d</code>: lower boundary of the window  </li> <li> <code>\u201cright\u201d</code>: upper boundary of the window  </li> <li> <code>\u201cdatapoint\u201d</code>: the first value of the index column in the given window. If you don\u2019t need the label to be at one of the boundaries, choose this option for maximum performance.  </li> </ul> <code>group_by</code>  Also group by this column/these columns.  <code>start_by</code>   The strategy to determine the start of the first window by:  <ul> <li> <code>\u201cwindow\u201d</code>: start by taking the earliest timestamp, truncating it with <code>every</code>, and then adding <code>offset</code>. Note that weekly windows start on Monday.  </li> <li> <code>\u201cdatapoint\u201d</code>: start from the first encountered data point.  </li> <li>  a day of the week (only takes effect if <code>every</code> contains <code>\u201cw\u201d</code>): <code>\u201cmonday\u201d</code> starts the window on the Monday before the first data point, etc.  </li> </ul> <code>check_sorted</code>  Check whether data is actually sorted. Checking it is expensive so if you are sure the data within the <code>index_column</code> is sorted, you can set this to <code>FALSE</code> but note that if the data actually is unsorted, it will lead to incorrect output."},{"location":"man/LazyFrame_group_by_dynamic.html#details","title":"Details","text":"<p>In case of a rolling operation on an integer column, the windows are defined by:</p> <ul> <li>  \"1i\" \\# length 1  </li> <li>  \"10i\" \\# length 10  </li> </ul>"},{"location":"man/LazyFrame_group_by_dynamic.html#value","title":"Value","text":"<p>A LazyGroupBy object</p>"},{"location":"man/LazyFrame_group_by_dynamic.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$rolling()"},{"location":"man/LazyFrame_group_by_dynamic.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(\n  time = pl$date_range(\n    start = strptime(\"2021-12-16 00:00:00\", format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"),\n    end = strptime(\"2021-12-16 03:00:00\", format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"),\n    interval = \"30m\"\n  ),\n  n = 0:6\n)\nlf$collect()\n</code></pre> <pre><code>#&gt; shape: (7, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 n   \u2502\n#&gt; \u2502 ---                     \u2506 --- \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 0   \u2502\n#&gt; \u2502 2021-12-16 00:30:00 UTC \u2506 1   \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 2   \u2502\n#&gt; \u2502 2021-12-16 01:30:00 UTC \u2506 3   \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 4   \u2502\n#&gt; \u2502 2021-12-16 02:30:00 UTC \u2506 5   \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 6   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># get the sum in the following hour relative to the \"time\" column\nlf$group_by_dynamic(\"time\", every = \"1h\")$agg(\n  vals = pl$col(\"n\"),\n  sum = pl$col(\"n\")$sum()\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 vals      \u2506 sum \u2502\n#&gt; \u2502 ---                     \u2506 ---       \u2506 --- \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 list[i32] \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 [0, 1]    \u2506 1   \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 [2, 3]    \u2506 5   \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 [4, 5]    \u2506 9   \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 [6]       \u2506 6   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># using \"include_boundaries = TRUE\" is helpful to see the period considered\nlf$group_by_dynamic(\"time\", every = \"1h\", include_boundaries = TRUE)$agg(\n  vals = pl$col(\"n\")\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 _lower_boundary         \u2506 _upper_boundary         \u2506 time                    \u2506 vals      \u2502\n#&gt; \u2502 ---                     \u2506 ---                     \u2506 ---                     \u2506 ---       \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 00:00:00 UTC \u2506 [0, 1]    \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 [2, 3]    \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 [4, 5]    \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 2021-12-16 04:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 [6]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># in the example above, the values didn't include the one *exactly* 1h after\n# the start because \"closed = 'left'\" by default.\n# Changing it to \"right\" includes values that are exactly 1h after. Note that\n# the value at 00:00:00 now becomes included in the interval [23:00:00 - 00:00:00],\n# even if this interval wasn't there originally\nlf$group_by_dynamic(\"time\", every = \"1h\", closed = \"right\")$agg(\n  vals = pl$col(\"n\")\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 vals      \u2502\n#&gt; \u2502 ---                     \u2506 ---       \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-15 23:00:00 UTC \u2506 [0]       \u2502\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 [1, 2]    \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 [3, 4]    \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 [5, 6]    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># To keep both boundaries, we use \"closed = 'both'\". Some values now belong to\n# several groups:\nlf$group_by_dynamic(\"time\", every = \"1h\", closed = \"both\")$agg(\n  vals = pl$col(\"n\")\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 vals      \u2502\n#&gt; \u2502 ---                     \u2506 ---       \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-15 23:00:00 UTC \u2506 [0]       \u2502\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 [0, 1, 2] \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 [2, 3, 4] \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 [4, 5, 6] \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 [6]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Dynamic group bys can also be combined with grouping on normal keys\nlf = lf$with_columns(\n  groups = as_polars_series(c(\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"a\"))\n)\nlf$collect()\n</code></pre> <pre><code>#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time                    \u2506 n   \u2506 groups \u2502\n#&gt; \u2502 ---                     \u2506 --- \u2506 ---    \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 i32 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-12-16 00:00:00 UTC \u2506 0   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 00:30:00 UTC \u2506 1   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 01:00:00 UTC \u2506 2   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 01:30:00 UTC \u2506 3   \u2506 b      \u2502\n#&gt; \u2502 2021-12-16 02:00:00 UTC \u2506 4   \u2506 b      \u2502\n#&gt; \u2502 2021-12-16 02:30:00 UTC \u2506 5   \u2506 a      \u2502\n#&gt; \u2502 2021-12-16 03:00:00 UTC \u2506 6   \u2506 a      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>lf$group_by_dynamic(\n  \"time\",\n  every = \"1h\",\n  closed = \"both\",\n  group_by = \"groups\",\n  include_boundaries = TRUE\n)$agg(pl$col(\"n\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (7, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 groups \u2506 _lower_boundary         \u2506 _upper_boundary         \u2506 time                    \u2506 n         \u2502\n#&gt; \u2502 ---    \u2506 ---                     \u2506 ---                     \u2506 ---                     \u2506 ---       \u2502\n#&gt; \u2502 str    \u2506 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 datetime[ms, UTC]       \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a      \u2506 2021-12-15 23:00:00 UTC \u2506 2021-12-16 00:00:00 UTC \u2506 2021-12-15 23:00:00 UTC \u2506 [0]       \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 00:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 00:00:00 UTC \u2506 [0, 1, 2] \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 [2]       \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 [5, 6]    \u2502\n#&gt; \u2502 a      \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 04:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 [6]       \u2502\n#&gt; \u2502 b      \u2506 2021-12-16 01:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 01:00:00 UTC \u2506 [3, 4]    \u2502\n#&gt; \u2502 b      \u2506 2021-12-16 02:00:00 UTC \u2506 2021-12-16 03:00:00 UTC \u2506 2021-12-16 02:00:00 UTC \u2506 [4]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># We can also create a dynamic group by based on an index column\nlf = pl$LazyFrame(\n  idx = 0:5,\n  A = c(\"A\", \"A\", \"B\", \"B\", \"B\", \"C\")\n)$with_columns(pl$col(\"idx\")$set_sorted())\nlf$collect()\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 idx \u2506 A   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 A   \u2502\n#&gt; \u2502 1   \u2506 A   \u2502\n#&gt; \u2502 2   \u2506 B   \u2502\n#&gt; \u2502 3   \u2506 B   \u2502\n#&gt; \u2502 4   \u2506 B   \u2502\n#&gt; \u2502 5   \u2506 C   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>lf$group_by_dynamic(\n  \"idx\",\n  every = \"2i\",\n  period = \"3i\",\n  include_boundaries = TRUE,\n  closed = \"right\"\n)$agg(A_agg_list = pl$col(\"A\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 _lower_boundary \u2506 _upper_boundary \u2506 idx \u2506 A_agg_list      \u2502\n#&gt; \u2502 ---             \u2506 ---             \u2506 --- \u2506 ---             \u2502\n#&gt; \u2502 i32             \u2506 i32             \u2506 i32 \u2506 list[str]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -2              \u2506 1               \u2506 -2  \u2506 [\"A\", \"A\"]      \u2502\n#&gt; \u2502 0               \u2506 3               \u2506 0   \u2506 [\"A\", \"B\", \"B\"] \u2502\n#&gt; \u2502 2               \u2506 5               \u2506 2   \u2506 [\"B\", \"B\", \"C\"] \u2502\n#&gt; \u2502 4               \u2506 7               \u2506 4   \u2506 [\"C\"]           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_head.html","title":"Get the first <code>n</code> rows.","text":"<p>Source code</p>"},{"location":"man/LazyFrame_head.html#description","title":"Description","text":"<p>A shortcut for <code>$slice(0, n)</code>. Consider using the <code>$fetch()</code> method if you want to test your query. The <code>$fetch()</code> operation will load the first <code>n</code> rows at the scan level, whereas <code>$head()</code> is applied at the end.</p>"},{"location":"man/LazyFrame_head.html#usage","title":"Usage","text":"<pre><code>LazyFrame_head(n = 5L)\n</code></pre>"},{"location":"man/LazyFrame_head.html#arguments","title":"Arguments","text":"<code>n</code>  Number of rows to return."},{"location":"man/LazyFrame_head.html#details","title":"Details","text":"<p><code>$limit()</code> is an alias for <code>$head()</code>.</p>"},{"location":"man/LazyFrame_head.html#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object with applied filter.</p>"},{"location":"man/LazyFrame_head.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(a = 1:6, b = 7:12)\n\nlf$head()$collect()\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 7   \u2502\n#&gt; \u2502 2   \u2506 8   \u2502\n#&gt; \u2502 3   \u2506 9   \u2502\n#&gt; \u2502 4   \u2506 10  \u2502\n#&gt; \u2502 5   \u2506 11  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>lf$head(2)$collect()\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 7   \u2502\n#&gt; \u2502 2   \u2506 8   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_join.html","title":"Join LazyFrames","text":"<p>Source code</p>"},{"location":"man/LazyFrame_join.html#description","title":"Description","text":"<p>This function can do both mutating joins (adding columns based on matching observations, for example with <code>how = \u201cleft\u201d</code>) and filtering joins (keeping observations based on matching observations, for example with <code>how = \u201cinner\u201d</code>).</p>"},{"location":"man/LazyFrame_join.html#usage","title":"Usage","text":"<pre><code>LazyFrame_join(\n  other,\n  on = NULL,\n  how = c(\"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\", \"outer_coalesce\"),\n  ...,\n  left_on = NULL,\n  right_on = NULL,\n  suffix = \"_right\",\n  validate = \"m:m\",\n  join_nulls = FALSE,\n  allow_parallel = TRUE,\n  force_parallel = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_join.html#arguments","title":"Arguments","text":"<code>other</code>  LazyFrame to join with.  <code>on</code>  Either a vector of column names or a list of expressions and/or strings. Use <code>left_on</code> and <code>right_on</code> if the column names to match on are different between the two DataFrames.  <code>how</code>  One of the following methods: \"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\", \"outer_coalesce\".  <code>\u2026</code>  Ignored.  <code>left_on</code>, <code>right_on</code>  Same as <code>on</code> but only for the left or the right DataFrame. They must have the same length.  <code>suffix</code>  Suffix to add to duplicated column names.  <code>validate</code>   Checks if join is of specified type:  <ul> <li> <code>\u201cm:m\u201d</code> (default): many-to-many, doesn\u2019t perform any checks;  </li> <li> <code>\u201c1:1\u201d</code>: one-to-one, check if join keys are unique in both left and right datasets;  </li> <li> <code>\u201c1:m\u201d</code>: one-to-many, check if join keys are unique in left dataset  </li> <li> <code>\u201cm:1\u201d</code>: many-to-one, check if join keys are unique in right dataset  </li> </ul> Note that this is currently not supported by the streaming engine, and is only supported when joining by single columns.  <code>join_nulls</code>  Join on null values. By default null values will never produce matches.  <code>allow_parallel</code>  Allow the physical plan to optionally evaluate the computation of both DataFrames up to the join in parallel.  <code>force_parallel</code>  Force the physical plan to evaluate the computation of both DataFrames up to the join in parallel."},{"location":"man/LazyFrame_join.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_join.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# inner join by default\ndf1 = pl$LazyFrame(list(key = 1:3, payload = c(\"f\", \"i\", NA)))\ndf2 = pl$LazyFrame(list(key = c(3L, 4L, 5L, NA_integer_)))\ndf1$join(other = df2, on = \"key\")\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; INNER JOIN:\n#&gt; LEFT PLAN ON: [col(\"key\")]\n#&gt;   DF [\"key\", \"payload\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n#&gt; RIGHT PLAN ON: [col(\"key\")]\n#&gt;   DF [\"key\"]; PROJECT */1 COLUMNS; SELECTION: \"None\"\n#&gt; END INNER JOIN\n</code></pre> <pre><code># cross join\ndf1 = pl$LazyFrame(x = letters[1:3])\ndf2 = pl$LazyFrame(y = 1:4)\ndf1$join(other = df2, how = \"cross\")\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; CROSS JOIN:\n#&gt; LEFT PLAN ON: [col(\"x\")]\n#&gt;   DF [\"x\"]; PROJECT */1 COLUMNS; SELECTION: \"None\"\n#&gt; RIGHT PLAN ON: [col(\"y\")]\n#&gt;   DF [\"y\"]; PROJECT */1 COLUMNS; SELECTION: \"None\"\n#&gt; END CROSS JOIN\n</code></pre> <pre><code># use \"validate\" to ensure join keys are not duplicated\ndf1 = pl$LazyFrame(x = letters[1:5], y = 1:5)\ndf2 = pl$LazyFrame(x = c(\"a\", letters[1:4]), y2 = 6:10)\n\n# this throws an error because there are two keys in df2 that match the key\n# in df1\ntryCatch(\n  df1$join(df2, on = \"x\", validate = \"1:1\")$collect(),\n  error = function(e) print(e)\n)\n</code></pre> <pre><code>#&gt; &lt;RPolarsErr_error: Execution halted with the following contexts\n#&gt;    0: In R: in $collect():\n#&gt;    0: During function call [.main()]\n#&gt;    1: Encountered the following error in Rust-Polars:\n#&gt;          the join keys did not fulfil 1:1 validation\n#&gt; &gt;\n</code></pre>"},{"location":"man/LazyFrame_join_asof.html","title":"Perform joins on nearest keys","text":"<p>Source code</p>"},{"location":"man/LazyFrame_join_asof.html#description","title":"Description","text":"<p>This is similar to a left-join except that we match on nearest key rather than equal keys.</p>"},{"location":"man/LazyFrame_join_asof.html#usage","title":"Usage","text":"<pre><code>LazyFrame_join_asof(\n  other,\n  ...,\n  left_on = NULL,\n  right_on = NULL,\n  on = NULL,\n  by_left = NULL,\n  by_right = NULL,\n  by = NULL,\n  strategy = c(\"backward\", \"forward\", \"nearest\"),\n  suffix = \"_right\",\n  tolerance = NULL,\n  allow_parallel = TRUE,\n  force_parallel = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_join_asof.html#arguments","title":"Arguments","text":"<code>other</code>  LazyFrame  <code>\u2026</code>  Not used, blocks use of further positional arguments  <code>left_on</code>, <code>right_on</code>  Same as <code>on</code> but only for the left or the right DataFrame. They must have the same length.  <code>on</code>  Either a vector of column names or a list of expressions and/or strings. Use <code>left_on</code> and <code>right_on</code> if the column names to match on are different between the two DataFrames.  <code>by_left</code>, <code>by_right</code>  Same as <code>by</code> but only for the left or the right table. They must have the same length.  <code>by</code>  Join on these columns before performing asof join. Either a vector of column names or a list of expressions and/or strings. Use <code>left_by</code> and <code>right_by</code> if the column names to match on are different between the two tables.  <code>strategy</code>   Strategy for where to find match:  <ul> <li>  \"backward\" (default): search for the last row in the right table whose <code>on</code> key is less than or equal to the left key.  </li> <li>  \"forward\": search for the first row in the right table whose <code>on</code> key is greater than or equal to the left key.  </li> <li>  \"nearest\": search for the last row in the right table whose value is nearest to the left key. String keys are not currently supported for a nearest search.  </li> </ul> <code>suffix</code>  Suffix to add to duplicated column names.  <code>tolerance</code>   Numeric tolerance. By setting this the join will only be done if the near keys are within this distance. If an asof join is done on columns of dtype \"Date\", \"Datetime\", \"Duration\" or \"Time\", use the Polars duration string language. About the language, see the <code>Polars duration string language</code> section for details.  There may be a circumstance where R types are not sufficient to express a numeric tolerance. In that case, you can use the expression syntax like <code>tolerance = pl$lit(42)$cast(pl$Uint64)</code> <code>allow_parallel</code>  Allow the physical plan to optionally evaluate the computation of both DataFrames up to the join in parallel.  <code>force_parallel</code>  Force the physical plan to evaluate the computation of both DataFrames up to the join in parallel."},{"location":"man/LazyFrame_join_asof.html#details","title":"Details","text":"<p>Both tables (DataFrames or LazyFrames) must be sorted by the asof_join key.</p>"},{"location":"man/LazyFrame_join_asof.html#polars-duration-string-language","title":"Polars duration string language","text":"<p>Polars duration string language is a simple representation of durations. It is used in many Polars functions that accept durations.</p> <p>It has the following format:</p> <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 calendar day)  </li> <li>  1w (1 calendar week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1q (1 calendar quarter)  </li> <li>  1y (1 calendar year)  </li> </ul> <p>Or combine them: <code>\u201c3d12h4m25s\u201d</code> # 3 days, 12 hours, 4 minutes, and 25 seconds</p> <p>By \"calendar day\", we mean the corresponding time on the next day (which may not be 24 hours, due to daylight savings). Similarly for \"calendar week\", \"calendar month\", \"calendar quarter\", and \"calendar year\".</p>"},{"location":"man/LazyFrame_join_asof.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n#\n# create two LazyFrame to join asof\ngdp = pl$LazyFrame(\n  date = as.Date(c(\"2015-1-1\", \"2016-1-1\", \"2017-5-1\", \"2018-1-1\", \"2019-1-1\")),\n  gdp = c(4321, 4164, 4411, 4566, 4696),\n  group = c(\"b\", \"a\", \"a\", \"b\", \"b\")\n)\n\npop = pl$LazyFrame(\n  date = as.Date(c(\"2016-5-12\", \"2017-5-12\", \"2018-5-12\", \"2019-5-12\")),\n  population = c(82.19, 82.66, 83.12, 83.52),\n  group = c(\"b\", \"b\", \"a\", \"a\")\n)\n\n# optional make sure tables are already sorted with \"on\" join-key\ngdp = gdp$sort(\"date\")\npop = pop$sort(\"date\")\n\n\n# Left-join_asof LazyFrame pop with gdp on \"date\"\n# Look backward in gdp to find closest matching date\npop$join_asof(gdp, on = \"date\", strategy = \"backward\")$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4164.0 \u2506 a           \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4566.0 \u2506 b           \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 4696.0 \u2506 b           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># .... and forward\npop$join_asof(gdp, on = \"date\", strategy = \"forward\")$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4566.0 \u2506 b           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4696.0 \u2506 b           \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># join by a group: \"only look within groups\"\npop$join_asof(gdp, on = \"date\", by = \"group\", strategy = \"backward\")$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4321.0 \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4321.0 \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4411.0 \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 4411.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># only look 2 weeks and 2 days back\npop$join_asof(gdp, on = \"date\", strategy = \"backward\", tolerance = \"2w2d\")$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># only look 11 days back (numeric tolerance depends on polars type, &lt;date&gt; is in days)\npop$join_asof(gdp, on = \"date\", strategy = \"backward\", tolerance = 11)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_last.html","title":"Get the last row of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_last.html#description","title":"Description","text":"<p>Aggregate the columns in the LazyFrame to their maximum value.</p>"},{"location":"man/LazyFrame_last.html#usage","title":"Usage","text":"<pre><code>LazyFrame_last()\n</code></pre>"},{"location":"man/LazyFrame_last.html#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_last.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$last()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_max.html","title":"Max","text":"<p>Source code</p>"},{"location":"man/LazyFrame_max.html#description","title":"Description","text":"<p>Aggregate the columns in the LazyFrame to their maximum value.</p>"},{"location":"man/LazyFrame_max.html#usage","title":"Usage","text":"<pre><code>LazyFrame_max()\n</code></pre>"},{"location":"man/LazyFrame_max.html#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$max()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 33.9 \u2506 8.0 \u2506 472.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_mean.html","title":"Mean","text":"<p>Source code</p>"},{"location":"man/LazyFrame_mean.html#description","title":"Description","text":"<p>Aggregate the columns in the LazyFrame to their mean value.</p>"},{"location":"man/LazyFrame_mean.html#usage","title":"Usage","text":"<pre><code>LazyFrame_mean()\n</code></pre>"},{"location":"man/LazyFrame_mean.html#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_mean.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$mean()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl    \u2506 disp       \u2506 hp       \u2506 \u2026 \u2506 vs     \u2506 am      \u2506 gear   \u2506 carb   \u2502\n#&gt; \u2502 ---       \u2506 ---    \u2506 ---        \u2506 ---      \u2506   \u2506 ---    \u2506 ---     \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 f64       \u2506 f64    \u2506 f64        \u2506 f64      \u2506   \u2506 f64    \u2506 f64     \u2506 f64    \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 20.090625 \u2506 6.1875 \u2506 230.721875 \u2506 146.6875 \u2506 \u2026 \u2506 0.4375 \u2506 0.40625 \u2506 3.6875 \u2506 2.8125 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_median.html","title":"Median","text":"<p>Source code</p>"},{"location":"man/LazyFrame_median.html#description","title":"Description","text":"<p>Aggregate the columns in the LazyFrame to their median value.</p>"},{"location":"man/LazyFrame_median.html#usage","title":"Usage","text":"<pre><code>LazyFrame_median()\n</code></pre>"},{"location":"man/LazyFrame_median.html#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_median.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$median()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 6.0 \u2506 196.3 \u2506 123.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_melt.html","title":"Unpivot a Frame from wide to long format","text":"<p>Source code</p>"},{"location":"man/LazyFrame_melt.html#description","title":"Description","text":"<p>Unpivot a Frame from wide to long format</p>"},{"location":"man/LazyFrame_melt.html#usage","title":"Usage","text":"<pre><code>LazyFrame_melt(\n  id_vars = NULL,\n  value_vars = NULL,\n  variable_name = NULL,\n  value_name = NULL,\n  ...,\n  streamable = TRUE\n)\n</code></pre>"},{"location":"man/LazyFrame_melt.html#arguments","title":"Arguments","text":"<code>id_vars</code>  Columns to use as identifier variables.  <code>value_vars</code>  Values to use as identifier variables. If <code>value_vars</code> is empty all columns that are not in <code>id_vars</code> will be used.  <code>variable_name</code>  Name to give to the new column containing the names of the melted columns. Defaults to \"variable\".  <code>value_name</code>  Name to give to the new column containing the values of the melted columns. Defaults to \"value\"  <code>\u2026</code>  Not used.  <code>streamable</code>  Allow this node to run in the streaming engine. If this runs in streaming, the output of the melt operation will not have a stable ordering."},{"location":"man/LazyFrame_melt.html#details","title":"Details","text":"<p>Optionally leaves identifiers set.</p> <p>This function is useful to massage a Frame into a format where one or more columns are identifier variables (id_vars), while all other columns, considered measured variables (value_vars), are \"unpivoted\" to the row axis, leaving just two non-identifier columns, \u2018variable\u2019 and \u2018value\u2019.</p>"},{"location":"man/LazyFrame_melt.html#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_melt.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(\n  a = c(\"x\", \"y\", \"z\"),\n  b = c(1, 3, 5),\n  c = c(2, 4, 6)\n)\nlf$melt(id_vars = \"a\", value_vars = c(\"b\", \"c\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 variable \u2506 value \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 str      \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 x   \u2506 b        \u2506 1.0   \u2502\n#&gt; \u2502 y   \u2506 b        \u2506 3.0   \u2502\n#&gt; \u2502 z   \u2506 b        \u2506 5.0   \u2502\n#&gt; \u2502 x   \u2506 c        \u2506 2.0   \u2502\n#&gt; \u2502 y   \u2506 c        \u2506 4.0   \u2502\n#&gt; \u2502 z   \u2506 c        \u2506 6.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_min.html","title":"Min","text":"<p>Source code</p>"},{"location":"man/LazyFrame_min.html#description","title":"Description","text":"<p>Aggregate the columns in the LazyFrame to their minimum value.</p>"},{"location":"man/LazyFrame_min.html#usage","title":"Usage","text":"<pre><code>LazyFrame_min()\n</code></pre>"},{"location":"man/LazyFrame_min.html#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$min()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp \u2506 hp   \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---  \u2506 ---  \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64  \u2506 f64  \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 4.0 \u2506 71.1 \u2506 52.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_print.html","title":"print LazyFrame internal method","text":"<p>Source code</p>"},{"location":"man/LazyFrame_print.html#description","title":"Description","text":"<p>can be used i the middle of a method chain</p>"},{"location":"man/LazyFrame_print.html#usage","title":"Usage","text":"<pre><code>LazyFrame_print(x)\n</code></pre>"},{"location":"man/LazyFrame_print.html#arguments","title":"Arguments","text":"<code>x</code>  LazyFrame"},{"location":"man/LazyFrame_print.html#value","title":"Value","text":"<p>self</p>"},{"location":"man/LazyFrame_print.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(iris)$print()\n</code></pre> <pre><code>#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n\n#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyFrame_profile.html","title":"Collect and profile a lazy query.","text":"<p>Source code</p>"},{"location":"man/LazyFrame_profile.html#description","title":"Description","text":"<p>This will run the query and return a list containing the materialized DataFrame and a DataFrame that contains profiling information of each node that is executed.</p>"},{"location":"man/LazyFrame_profile.html#usage","title":"Usage","text":"<pre><code>LazyFrame_profile(\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE,\n  collect_in_background = FALSE,\n  show_plot = FALSE,\n  truncate_nodes = 0\n)\n</code></pre>"},{"location":"man/LazyFrame_profile.html#arguments","title":"Arguments","text":"<code>type_coercion</code>  Logical. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Logical. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Logical. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Logical. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Logical. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Logical. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Logical. Common subexpressions will be cached and reused.  <code>streaming</code>  Logical. Run parts of the query in a streaming fashion (this is in an alpha state).  <code>no_optimization</code>  Logical. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Logical. Use existing optimization settings regardless the settings specified in this function call.  <code>collect_in_background</code>  Logical. Detach this query from R session. Computation will start in background. Get a handle which later can be converted into the resulting DataFrame. Useful in interactive mode to not lock R session.  <code>show_plot</code>  Show a Gantt chart of the profiling result  <code>truncate_nodes</code>  Truncate the label lengths in the Gantt chart to this number of characters. If <code>0</code> (default), do not truncate."},{"location":"man/LazyFrame_profile.html#details","title":"Details","text":"<p>The units of the timings are microseconds.</p>"},{"location":"man/LazyFrame_profile.html#value","title":"Value","text":"<p>List of two <code>DataFrame</code>s: one with the collected result, the other with the timings of each step. If <code>show_graph = TRUE</code>, then the plot is also stored in the list.</p>"},{"location":"man/LazyFrame_profile.html#see-also","title":"See Also","text":"<ul> <li> <code>$collect()</code> - regular collect.  </li> <li> <code>$fetch()</code> - fast limited query check  </li> <li> <code>$collect_in_background()</code> - non-blocking collect returns a future handle. Can also just be used via <code>$collect(collect_in_background = TRUE)</code>.  </li> <li> <code>$sink_parquet()</code> streams query to a parquet file.  </li> <li> <code>$sink_ipc()</code> streams query to a arrow file.  </li> </ul>"},{"location":"man/LazyFrame_profile.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Simplest use case\npl$LazyFrame()$select(pl$lit(2) + 2)$profile()\n</code></pre> <pre><code>#&gt; $result\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; $profile\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 node                \u2506 start \u2506 end \u2502\n#&gt; \u2502 ---                 \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 str                 \u2506 u64   \u2506 u64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 optimization        \u2506 0     \u2506 32  \u2502\n#&gt; \u2502 projection(literal) \u2506 32    \u2506 93  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Use $profile() to compare two queries\n\n# -1-  map each Species-group with native polars, takes ~120us only\npl$LazyFrame(iris)$\n  sort(\"Sepal.Length\")$\n  group_by(\"Species\", maintain_order = TRUE)$\n  agg(pl$col(pl$Float64)$first() + 5)$\n  profile()\n</code></pre> <pre><code>#&gt; $result\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species    \u2506 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2502\n#&gt; \u2502 ---        \u2506 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 cat        \u2506 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2506 9.3          \u2506 8.0         \u2506 6.1          \u2506 5.1         \u2502\n#&gt; \u2502 versicolor \u2506 9.9          \u2506 7.4         \u2506 8.3          \u2506 6.0         \u2502\n#&gt; \u2502 virginica  \u2506 9.9          \u2506 7.5         \u2506 9.5          \u2506 6.7         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; $profile\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 node               \u2506 start \u2506 end \u2502\n#&gt; \u2502 ---                \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 str                \u2506 u64   \u2506 u64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 optimization       \u2506 0     \u2506 15  \u2502\n#&gt; \u2502 sort(Sepal.Length) \u2506 15    \u2506 500 \u2502\n#&gt; \u2502 group_by(Species)  \u2506 503   \u2506 875 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># -2-  map each Species-group of each numeric column with an R function, takes ~7000us (slow!)\n\n# some R function, prints `.` for each time called by polars\nr_func = \\(s) {\n  cat(\".\")\n  s$to_r()[1] + 5\n}\n\npl$LazyFrame(iris)$\n  sort(\"Sepal.Length\")$\n  group_by(\"Species\", maintain_order = TRUE)$\n  agg(pl$col(pl$Float64)$map_elements(r_func))$\n  profile()\n</code></pre> <pre><code>#&gt; ............\n\n#&gt; $result\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species    \u2506 Sepal.Length_apply \u2506 Sepal.Width_apply \u2506 Petal.Length_apply \u2506 Petal.Width_apply \u2502\n#&gt; \u2502 ---        \u2506 ---                \u2506 ---               \u2506 ---                \u2506 ---               \u2502\n#&gt; \u2502 cat        \u2506 f64                \u2506 f64               \u2506 f64                \u2506 f64               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2506 9.3                \u2506 8.0               \u2506 6.1                \u2506 5.1               \u2502\n#&gt; \u2502 versicolor \u2506 9.9                \u2506 7.4               \u2506 8.3                \u2506 6.0               \u2502\n#&gt; \u2502 virginica  \u2506 9.9                \u2506 7.5               \u2506 9.5                \u2506 6.7               \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; $profile\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 node               \u2506 start \u2506 end   \u2502\n#&gt; \u2502 ---                \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 str                \u2506 u64   \u2506 u64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 optimization       \u2506 0     \u2506 9     \u2502\n#&gt; \u2502 sort(Sepal.Length) \u2506 9     \u2506 389   \u2502\n#&gt; \u2502 group_by(Species)  \u2506 392   \u2506 62542 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_quantile.html","title":"Quantile","text":"<p>Source code</p>"},{"location":"man/LazyFrame_quantile.html#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to a unique quantile value. Use <code>$describe()</code> to specify several quantiles.</p>"},{"location":"man/LazyFrame_quantile.html#usage","title":"Usage","text":"<pre><code>LazyFrame_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"man/LazyFrame_quantile.html#arguments","title":"Arguments","text":"<code>quantile</code>  Numeric of length 1 between 0 and 1.  <code>interpolation</code>  One of <code>\u201cnearest\u201d</code>, <code>\u201chigher\u201d</code>, <code>\u201clower\u201d</code>, <code>\u201cmidpoint\u201d</code>, or <code>\u201clinear\u201d</code>."},{"location":"man/LazyFrame_quantile.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_quantile.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$quantile(.4)$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_rename.html","title":"Rename columns of a DataFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_rename.html#description","title":"Description","text":"<p>Rename columns of a DataFrame</p>"},{"location":"man/LazyFrame_rename.html#usage","title":"Usage","text":"<pre><code>LazyFrame_rename(...)\n</code></pre>"},{"location":"man/LazyFrame_rename.html#arguments","title":"Arguments","text":"<code>\u2026</code>   One of the following:  <ul> <li>  params like <code>new_name = \u201cold_name\u201d</code> to rename selected variables.  </li> <li>  as above but with params wrapped in a list  </li> </ul>"},{"location":"man/LazyFrame_rename.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_rename.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$\n  rename(miles_per_gallon = \"mpg\", horsepower = \"hp\")$\n  collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 miles_per_gallon \u2506 cyl \u2506 disp  \u2506 horsepower \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---              \u2506 --- \u2506 ---   \u2506 ---        \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64              \u2506 f64 \u2506 f64   \u2506 f64        \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8             \u2506 4.0 \u2506 108.0 \u2506 93.0       \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4             \u2506 6.0 \u2506 258.0 \u2506 110.0      \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7             \u2506 8.0 \u2506 360.0 \u2506 175.0      \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026                \u2506 \u2026   \u2506 \u2026     \u2506 \u2026          \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4             \u2506 4.0 \u2506 95.1  \u2506 113.0      \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8             \u2506 8.0 \u2506 351.0 \u2506 264.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7             \u2506 6.0 \u2506 145.0 \u2506 175.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0             \u2506 8.0 \u2506 301.0 \u2506 335.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4             \u2506 4.0 \u2506 121.0 \u2506 109.0      \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_reverse.html","title":"Reverse","text":"<p>Source code</p>"},{"location":"man/LazyFrame_reverse.html#description","title":"Description","text":"<p>Reverse the LazyFrame (the last row becomes the first one, etc.).</p>"},{"location":"man/LazyFrame_reverse.html#usage","title":"Usage","text":"<pre><code>LazyFrame_reverse()\n</code></pre>"},{"location":"man/LazyFrame_reverse.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_reverse.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$reverse()$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_rolling.html","title":"Create rolling groups based on a date/time or integer column","text":"<p>Source code</p>"},{"location":"man/LazyFrame_rolling.html#description","title":"Description","text":"<p>If you have a time series <code>\\&lt;t_0, t_1, \u2026, t_n&gt;</code>, then by default the windows created will be:</p> <ul> <li>  (t_0 - period, t_0\\]  </li> <li>  (t_1 - period, t_1\\]  </li> <li>  \u2026  </li> <li>  (t_n - period, t_n\\]  </li> </ul> <p>whereas if you pass a non-default offset, then the windows will be:</p> <ul> <li>  (t_0 + offset, t_0 + offset + period\\]  </li> <li>  (t_1 + offset, t_1 + offset + period\\]  </li> <li>  \u2026  </li> <li>  (t_n + offset, t_n + offset + period\\]  </li> </ul>"},{"location":"man/LazyFrame_rolling.html#usage","title":"Usage","text":"<pre><code>LazyFrame_rolling(\n  index_column,\n  ...,\n  period,\n  offset = NULL,\n  closed = \"right\",\n  group_by = NULL,\n  check_sorted = TRUE\n)\n</code></pre>"},{"location":"man/LazyFrame_rolling.html#arguments","title":"Arguments","text":"<code>index_column</code>  Column used to group based on the time window. Often of type Date/Datetime. This column must be sorted in ascending order (or, if <code>by</code> is specified, then it must be sorted in ascending order within each group). In case of a rolling group by on indices, dtype needs to be either Int32 or Int64. Note that Int32 gets temporarily cast to Int64, so if performance matters use an Int64 column.  <code>\u2026</code>  Ignored.  <code>period</code>  A character representing the length of the window, must be non-negative. See the <code>Polars duration string language</code> section for details.  <code>offset</code>  A character representing the offset of the window, or <code>NULL</code> (default). If <code>NULL</code>, <code>-period</code> is used. See the <code>Polars duration string language</code> section for details.  <code>closed</code>  Define which sides of the temporal interval are closed (inclusive). This can be either <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code> or <code>\u201cnone\u201d</code>.  <code>group_by</code>  Also group by this column/these columns.  <code>check_sorted</code>  Check whether data is actually sorted. Checking it is expensive so if you are sure the data within the <code>index_column</code> is sorted, you can set this to <code>FALSE</code> but note that if the data actually is unsorted, it will lead to incorrect output."},{"location":"man/LazyFrame_rolling.html#details","title":"Details","text":"<p>In case of a rolling operation on an integer column, the windows are defined by:</p> <ul> <li>  \"1i\" \\# length 1  </li> <li>  \"10i\" \\# length 10  </li> </ul>"},{"location":"man/LazyFrame_rolling.html#value","title":"Value","text":"<p>A LazyGroupBy object</p>"},{"location":"man/LazyFrame_rolling.html#polars-duration-string-language","title":"Polars duration string language","text":"<p>Polars duration string language is a simple representation of durations. It is used in many Polars functions that accept durations.</p> <p>It has the following format:</p> <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 calendar day)  </li> <li>  1w (1 calendar week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1q (1 calendar quarter)  </li> <li>  1y (1 calendar year)  </li> </ul> <p>Or combine them: <code>\u201c3d12h4m25s\u201d</code> # 3 days, 12 hours, 4 minutes, and 25 seconds</p> <p>By \"calendar day\", we mean the corresponding time on the next day (which may not be 24 hours, due to daylight savings). Similarly for \"calendar week\", \"calendar month\", \"calendar quarter\", and \"calendar year\".</p>"},{"location":"man/LazyFrame_rolling.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$group_by_dynamic()"},{"location":"man/LazyFrame_rolling.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndates = c(\n  \"2020-01-01 13:45:48\",\n  \"2020-01-01 16:42:13\",\n  \"2020-01-01 16:45:09\",\n  \"2020-01-02 18:12:48\",\n  \"2020-01-03 19:45:32\",\n  \"2020-01-08 23:16:43\"\n)\n\ndf = pl$LazyFrame(dt = dates, a = c(3, 7, 5, 9, 2, 1))$with_columns(\n  pl$col(\"dt\")$str$strptime(pl$Datetime())$set_sorted()\n)\n\ndf$rolling(index_column = \"dt\", period = \"2d\")$agg(\n  sum_a = pl$sum(\"a\"),\n  min_a = pl$min(\"a\"),\n  max_a = pl$max(\"a\")\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (6, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dt                  \u2506 sum_a \u2506 min_a \u2506 max_a \u2502\n#&gt; \u2502 ---                 \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 f64   \u2506 f64   \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 13:45:48 \u2506 3.0   \u2506 3.0   \u2506 3.0   \u2502\n#&gt; \u2502 2020-01-01 16:42:13 \u2506 10.0  \u2506 3.0   \u2506 7.0   \u2502\n#&gt; \u2502 2020-01-01 16:45:09 \u2506 15.0  \u2506 3.0   \u2506 7.0   \u2502\n#&gt; \u2502 2020-01-02 18:12:48 \u2506 24.0  \u2506 3.0   \u2506 9.0   \u2502\n#&gt; \u2502 2020-01-03 19:45:32 \u2506 11.0  \u2506 2.0   \u2506 9.0   \u2502\n#&gt; \u2502 2020-01-08 23:16:43 \u2506 1.0   \u2506 1.0   \u2506 1.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_select.html","title":"Select and modify columns of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_select.html#description","title":"Description","text":"<p>Similar to <code>dplyr::mutate()</code>. However, it discards unmentioned columns (like <code>.()</code> in <code>data.table</code>).</p>"},{"location":"man/LazyFrame_select.html#usage","title":"Usage","text":"<pre><code>LazyFrame_select(...)\n</code></pre>"},{"location":"man/LazyFrame_select.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to keep. Those can be expressions (e.g <code>pl$col(\u201ca\u201d)</code>), column names (e.g <code>\u201ca\u201d</code>), or list containing expressions or column names (e.g <code>list(pl$col(\u201ca\u201d))</code>)."},{"location":"man/LazyFrame_select.html#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_select.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(iris)$select(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt;  SELECT [col(\"Sepal.Length\").abs().alias(\"abs_SL\"), [(col(\"Sepal.Length\")) + (2.0)].alias(\"add_2_SL\")] FROM\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyFrame_set_optimization_toggle.html","title":"Configure optimization toggles","text":"<p>Source code</p>"},{"location":"man/LazyFrame_set_optimization_toggle.html#description","title":"Description","text":"<p>Configure the optimization toggles for the lazy query</p>"},{"location":"man/LazyFrame_set_optimization_toggle.html#usage","title":"Usage","text":"<pre><code>LazyFrame_set_optimization_toggle(\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE,\n  eager = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_set_optimization_toggle.html#arguments","title":"Arguments","text":"<code>type_coercion</code>  Logical. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Logical. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Logical. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Logical. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Logical. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Logical. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Logical. Common subexpressions will be cached and reused.  <code>streaming</code>  Logical. Run parts of the query in a streaming fashion (this is in an alpha state).  <code>eager</code>  Logical. Run the query eagerly."},{"location":"man/LazyFrame_set_optimization_toggle.html#value","title":"Value","text":"<p>LazyFrame with specified optimization toggles</p>"},{"location":"man/LazyFrame_set_optimization_toggle.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$set_optimization_toggle(type_coercion = FALSE)\n</code></pre> <pre><code>#&gt; $ok\n#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n#&gt; \n#&gt; $err\n#&gt; NULL\n#&gt; \n#&gt; attr(,\"class\")\n#&gt; [1] \"extendr_result\"\n</code></pre>"},{"location":"man/LazyFrame_shift.html","title":"Shift","text":"<p>Source code</p>"},{"location":"man/LazyFrame_shift.html#description","title":"Description","text":"<p>Shift the values by a given period.</p>"},{"location":"man/LazyFrame_shift.html#usage","title":"Usage","text":"<pre><code>LazyFrame_shift(periods = 1)\n</code></pre>"},{"location":"man/LazyFrame_shift.html#arguments","title":"Arguments","text":"<code>periods</code>  integer Number of periods to shift (may be negative)."},{"location":"man/LazyFrame_shift.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_shift.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$shift(2)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl  \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs   \u2506 am   \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2506   \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64   \u2506 f64   \u2506   \u2506 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0  \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026    \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 27.3 \u2506 4.0  \u2506 79.0  \u2506 66.0  \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 26.0 \u2506 4.0  \u2506 120.3 \u2506 91.0  \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0  \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0  \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0  \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_shift_and_fill.html","title":"Shift a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_shift_and_fill.html#description","title":"Description","text":"<p>Shift the values by a given period. If the period (<code>n</code>) is positive, then <code>n</code> rows will be inserted at the top of the LazyFrame and the last <code>n</code> rows will be discarded. Vice-versa if the period is negative. In the end, the total number of rows of the LazyFrame doesn\u2019t change.</p>"},{"location":"man/LazyFrame_shift_and_fill.html#usage","title":"Usage","text":"<pre><code>LazyFrame_shift_and_fill(fill_value, periods = 1)\n</code></pre>"},{"location":"man/LazyFrame_shift_and_fill.html#arguments","title":"Arguments","text":"<code>fill_value</code>  Fill new <code>NULL</code> values with this value. Must of length 1. A logical value will be converted to numeric.  <code>periods</code>  Number of periods to shift (can be negative)."},{"location":"man/LazyFrame_shift_and_fill.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_shift_and_fill.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$shift_and_fill(0., 2.)$collect()$to_data_frame()\n</code></pre> <pre><code>#&gt;     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#&gt; 1   0.0   0   0.0   0 0.00 0.000  0.00  0  0    0    0\n#&gt; 2   0.0   0   0.0   0 0.00 0.000  0.00  0  0    0    0\n#&gt; 3  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#&gt; 4  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#&gt; 5  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#&gt; 6  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#&gt; 7  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#&gt; 8  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n#&gt; 9  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n#&gt; 10 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n#&gt; 11 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n#&gt; 12 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n#&gt; 13 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n#&gt; 14 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n#&gt; 15 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n#&gt; 16 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n#&gt; 17 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n#&gt; 18 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n#&gt; 19 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n#&gt; 20 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n#&gt; 21 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n#&gt; 22 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n#&gt; 23 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n#&gt; 24 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n#&gt; 25 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n#&gt; 26 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n#&gt; 27 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n#&gt; 28 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n#&gt; 29 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n#&gt; 30 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n#&gt; 31 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n#&gt; 32 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n</code></pre>"},{"location":"man/LazyFrame_slice.html","title":"Slice","text":"<p>Source code</p>"},{"location":"man/LazyFrame_slice.html#description","title":"Description","text":"<p>Get a slice of the LazyFrame.</p>"},{"location":"man/LazyFrame_slice.html#usage","title":"Usage","text":"<pre><code>LazyFrame_slice(offset, length = NULL)\n</code></pre>"},{"location":"man/LazyFrame_slice.html#arguments","title":"Arguments","text":"<code>offset</code>  Start index, can be a negative value. This is 0-indexed, so <code>offset = 1</code> doesn\u2019t include the first row.  <code>length</code>  Length of the slice. If <code>NULL</code> (default), all rows starting at the offset will be selected."},{"location":"man/LazyFrame_slice.html#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_slice.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$slice(2, 4)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 225.0 \u2506 105.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$LazyFrame(mtcars)$slice(30)$collect()\n</code></pre> <pre><code>#&gt; shape: (2, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>mtcars[2:6, ]\n</code></pre> <pre><code>#&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#&gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n</code></pre>"},{"location":"man/LazyFrame_sort.html","title":"Sort a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_sort.html#description","title":"Description","text":"<p>Sort by one or more Expressions.</p>"},{"location":"man/LazyFrame_sort.html#usage","title":"Usage","text":"<pre><code>LazyFrame_sort(\n  by,\n  ...,\n  descending = FALSE,\n  nulls_last = FALSE,\n  maintain_order = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_sort.html#arguments","title":"Arguments","text":"<code>by</code>  Column(s) to sort by. Can be character vector of column names, a list of Expr(s) or a list with a mix of Expr(s) and column names.  <code>\u2026</code>  More columns to sort by as above but provided one Expr per argument.  <code>descending</code>  Logical. Sort in descending order (default is <code>FALSE</code>). This must be either of length 1 or a logical vector of the same length as the number of Expr(s) specified in <code>by</code> and <code>\u2026</code>.  <code>nulls_last</code>  Logical. Place <code>NULL</code>s at the end? Default is <code>FALSE</code>.  <code>maintain_order</code>  Whether the order should be maintained if elements are equal. If <code>TRUE</code>, streaming is not possible and performance might be worse since this requires a stable search."},{"location":"man/LazyFrame_sort.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_sort.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = mtcars\ndf$mpg[1] = NA\ndf = pl$LazyFrame(df)\ndf$sort(\"mpg\")$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 27.3 \u2506 4.0 \u2506 79.0  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(\"mpg\", nulls_last = TRUE)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.7 \u2506 8.0 \u2506 440.0 \u2506 230.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(\"cyl\", \"mpg\")$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 24.4 \u2506 4.0 \u2506 146.7 \u2506 62.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 24.4 \u2506 4.0 \u2506 146.7 \u2506 62.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"), descending = TRUE)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 24.4 \u2506 4.0 \u2506 146.7 \u2506 62.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"), descending = c(TRUE, FALSE))$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.7 \u2506 8.0 \u2506 440.0 \u2506 230.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 27.3 \u2506 4.0 \u2506 79.0  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(pl$col(\"cyl\"), pl$col(\"mpg\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 24.4 \u2506 4.0 \u2506 146.7 \u2506 62.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_std.html","title":"Std","text":"<p>Source code</p>"},{"location":"man/LazyFrame_std.html#description","title":"Description","text":"<p>Aggregate the columns of this LazyFrame to their standard deviation values.</p>"},{"location":"man/LazyFrame_std.html#usage","title":"Usage","text":"<pre><code>LazyFrame_std(ddof = 1)\n</code></pre>"},{"location":"man/LazyFrame_std.html#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/LazyFrame_std.html#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_std.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$std()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg      \u2506 cyl      \u2506 disp       \u2506 hp        \u2506 \u2026 \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb   \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2506 ---        \u2506 ---       \u2506   \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---    \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2506 f64        \u2506 f64       \u2506   \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.026948 \u2506 1.785922 \u2506 123.938694 \u2506 68.562868 \u2506 \u2026 \u2506 0.504016 \u2506 0.498991 \u2506 0.737804 \u2506 1.6152 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_sum.html","title":"Sum","text":"<p>Source code</p>"},{"location":"man/LazyFrame_sum.html#description","title":"Description","text":"<p>Aggregate the columns of this LazyFrame to their sum values.</p>"},{"location":"man/LazyFrame_sum.html#usage","title":"Usage","text":"<pre><code>LazyFrame_sum()\n</code></pre>"},{"location":"man/LazyFrame_sum.html#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_sum.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$sum()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg   \u2506 cyl   \u2506 disp   \u2506 hp     \u2506 \u2026 \u2506 vs   \u2506 am   \u2506 gear  \u2506 carb \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---    \u2506 ---    \u2506   \u2506 ---  \u2506 ---  \u2506 ---   \u2506 ---  \u2502\n#&gt; \u2502 f64   \u2506 f64   \u2506 f64    \u2506 f64    \u2506   \u2506 f64  \u2506 f64  \u2506 f64   \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 642.9 \u2506 198.0 \u2506 7383.1 \u2506 4694.0 \u2506 \u2026 \u2506 14.0 \u2506 13.0 \u2506 118.0 \u2506 90.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_tail.html","title":"Get the last <code>n</code> rows.","text":"<p>Source code</p>"},{"location":"man/LazyFrame_tail.html#description","title":"Description","text":"<p>Get the last <code>n</code> rows.</p>"},{"location":"man/LazyFrame_tail.html#usage","title":"Usage","text":"<pre><code>LazyFrame_tail(n = 5L)\n</code></pre>"},{"location":"man/LazyFrame_tail.html#arguments","title":"Arguments","text":"<code>n</code>  Number of rows to return."},{"location":"man/LazyFrame_tail.html#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object with applied filter.</p>"},{"location":"man/LazyFrame_tail.html#see-also","title":"See Also","text":"<p><code>\\&lt;LazyFrame&gt;$head()</code></p>"},{"location":"man/LazyFrame_tail.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(a = 1:6, b = 7:12)\n\nlf$tail()$collect()\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2506 8   \u2502\n#&gt; \u2502 3   \u2506 9   \u2502\n#&gt; \u2502 4   \u2506 10  \u2502\n#&gt; \u2502 5   \u2506 11  \u2502\n#&gt; \u2502 6   \u2506 12  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>lf$tail(2)$collect()\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5   \u2506 11  \u2502\n#&gt; \u2502 6   \u2506 12  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_to_dot.html","title":"Plot the query plan","text":"<p>Source code</p>"},{"location":"man/LazyFrame_to_dot.html#description","title":"Description","text":"<p>This only returns the \"dot\" output that can be passed to other packages, such as <code>DiagrammeR::grViz()</code>.</p>"},{"location":"man/LazyFrame_to_dot.html#usage","title":"Usage","text":"<pre><code>LazyFrame_to_dot(\n  ...,\n  optimized = TRUE,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_to_dot.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Not used..  <code>optimized</code>  Optimize the query plan.  <code>type_coercion</code>  Logical. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Logical. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Logical. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Logical. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Logical. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Logical. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Logical. Common subexpressions will be cached and reused.  <code>streaming</code>  Logical. Run parts of the query in a streaming fashion (this is in an alpha state)."},{"location":"man/LazyFrame_to_dot.html#value","title":"Value","text":"<p>A character vector</p>"},{"location":"man/LazyFrame_to_dot.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(\n  a = c(\"a\", \"b\", \"a\", \"b\", \"b\", \"c\"),\n  b = 1:6,\n  c = 6:1\n)\n\nquery = lf$group_by(\"a\", maintain_order = TRUE)$agg(\n  pl$all()$sum()\n)$sort(\n  \"a\"\n)\n\nquery$to_dot() |&gt; cat()\n</code></pre> <pre><code>#&gt; graph  polars_query {\n#&gt; \"SORT BY [col(\\\"a\\\")] [(0, 0)]\" -- \"AGG [col(\\\"b\\\").sum(), col(\\\"c\\\").sum()]\n#&gt; BY\n#&gt; [col(\\\"a\\\")] [(0, 1)] [(0, 1)]\"\n#&gt; \"AGG [col(\\\"b\\\").sum(), col(\\\"c\\\").sum()]\n#&gt; BY\n#&gt; [col(\\\"a\\\")] [(0, 1)] [(0, 1)]\" -- \"TABLE\n#&gt; \u03c0 3/3;\n#&gt; \u03c3 - [(0, 2)]\"\n#&gt; \n#&gt; \"AGG [col(\\\"b\\\").sum(), col(\\\"c\\\").sum()]\n#&gt; BY\n#&gt; [col(\\\"a\\\")] [(0, 1)] [(0, 1)]\"[label=\"AGG [col(\\\"b\\\").sum(), col(\\\"c\\\").sum()]\n#&gt; BY\n#&gt; [col(\\\"a\\\")] [(0, 1)]\"]\n#&gt; \"SORT BY [col(\\\"a\\\")] [(0, 0)]\"[label=\"SORT BY [col(\\\"a\\\")]\"]\n#&gt; \"TABLE\n#&gt; \u03c0 3/3;\n#&gt; \u03c3 - [(0, 2)]\"[label=\"TABLE\n#&gt; \u03c0 3/3;\n#&gt; \u03c3 -\"]\n#&gt; \n#&gt; }\n</code></pre> <pre><code># You could print the graph by using DiagrammeR for example, with\n# query$to_dot() |&gt; DiagrammeR::grViz().\n</code></pre>"},{"location":"man/LazyFrame_unique.html","title":"Drop duplicated rows","text":"<p>Source code</p>"},{"location":"man/LazyFrame_unique.html#description","title":"Description","text":"<p>Drop duplicated rows</p>"},{"location":"man/LazyFrame_unique.html#usage","title":"Usage","text":"<pre><code>LazyFrame_unique(subset = NULL, ..., keep = \"any\", maintain_order = FALSE)\n</code></pre>"},{"location":"man/LazyFrame_unique.html#arguments","title":"Arguments","text":"<code>subset</code>  A character vector with the names of the column(s) to use to identify duplicates. If <code>NULL</code> (default), use all columns.  <code>\u2026</code>  Not used.  <code>keep</code>   Which of the duplicate rows to keep:  <ul> <li> <code>\u201cany\u201d</code> (default): Does not give any guarantee of which row is kept. This allows more optimizations.  </li> <li> <code>\u201cfirst\u201d</code>: Keep first unique row.  </li> <li> <code>\u201clast\u201d</code>: Keep last unique row.  </li> <li> <code>\u201cnone\u201d</code>: Don\u2019t keep duplicate rows.  </li> </ul> <code>maintain_order</code>  Keep the same order as the original data. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine."},{"location":"man/LazyFrame_unique.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$LazyFrame(\n  x = sample(10, 100, rep = TRUE),\n  y = sample(10, 100, rep = TRUE)\n)\ndf$collect()$height\n</code></pre> <pre><code>#&gt; [1] 100\n</code></pre> <pre><code>df$unique()$collect()$height\n</code></pre> <pre><code>#&gt; [1] 66\n</code></pre> <pre><code>df$unique(subset = \"x\")$collect()$height\n</code></pre> <pre><code>#&gt; [1] 10\n</code></pre> <pre><code>df$unique(keep = \"last\")\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; UNIQUE[maintain_order: false, keep_strategy: Last] BY None\n#&gt;   DF [\"x\", \"y\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># only keep unique rows\ndf$unique(keep = \"none\")\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; UNIQUE[maintain_order: false, keep_strategy: None] BY None\n#&gt;   DF [\"x\", \"y\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyFrame_unnest.html","title":"Unnest the Struct columns of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_unnest.html#description","title":"Description","text":"<p>Unnest the Struct columns of a LazyFrame</p>"},{"location":"man/LazyFrame_unnest.html#usage","title":"Usage","text":"<pre><code>LazyFrame_unnest(names = NULL)\n</code></pre>"},{"location":"man/LazyFrame_unnest.html#arguments","title":"Arguments","text":"<code>names</code>  Names of the struct columns to unnest. If <code>NULL</code> (default), then all \"struct\" columns are unnested."},{"location":"man/LazyFrame_unnest.html#value","title":"Value","text":"<p>A LazyFrame where all \"struct\" columns are unnested. Non-struct columns are not modified.</p>"},{"location":"man/LazyFrame_unnest.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(\n  a = 1:5,\n  b = c(\"one\", \"two\", \"three\", \"four\", \"five\"),\n  c = 6:10\n)$\n  select(\n  pl$col(\"b\")$to_struct(),\n  pl$col(\"a\", \"c\")$to_struct()$alias(\"a_and_c\")\n)\nlf$collect()\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b         \u2506 a_and_c   \u2502\n#&gt; \u2502 ---       \u2506 ---       \u2502\n#&gt; \u2502 struct[1] \u2506 struct[2] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"one\"}   \u2506 {1,6}     \u2502\n#&gt; \u2502 {\"two\"}   \u2506 {2,7}     \u2502\n#&gt; \u2502 {\"three\"} \u2506 {3,8}     \u2502\n#&gt; \u2502 {\"four\"}  \u2506 {4,9}     \u2502\n#&gt; \u2502 {\"five\"}  \u2506 {5,10}    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by default, all struct columns are unnested\nlf$unnest()$collect()\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b     \u2506 a   \u2506 c   \u2502\n#&gt; \u2502 ---   \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str   \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one   \u2506 1   \u2506 6   \u2502\n#&gt; \u2502 two   \u2506 2   \u2506 7   \u2502\n#&gt; \u2502 three \u2506 3   \u2506 8   \u2502\n#&gt; \u2502 four  \u2506 4   \u2506 9   \u2502\n#&gt; \u2502 five  \u2506 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># we can specify specific columns to unnest\nlf$unnest(\"a_and_c\")$collect()\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b         \u2506 a   \u2506 c   \u2502\n#&gt; \u2502 ---       \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 struct[1] \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"one\"}   \u2506 1   \u2506 6   \u2502\n#&gt; \u2502 {\"two\"}   \u2506 2   \u2506 7   \u2502\n#&gt; \u2502 {\"three\"} \u2506 3   \u2506 8   \u2502\n#&gt; \u2502 {\"four\"}  \u2506 4   \u2506 9   \u2502\n#&gt; \u2502 {\"five\"}  \u2506 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_var.html","title":"Var","text":"<p>Source code</p>"},{"location":"man/LazyFrame_var.html#description","title":"Description","text":"<p>Aggregate the columns of this LazyFrame to their variance values.</p>"},{"location":"man/LazyFrame_var.html#usage","title":"Usage","text":"<pre><code>LazyFrame_var(ddof = 1)\n</code></pre>"},{"location":"man/LazyFrame_var.html#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/LazyFrame_var.html#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_var.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$var()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl      \u2506 disp        \u2506 hp          \u2506 \u2026 \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb     \u2502\n#&gt; \u2502 ---       \u2506 ---      \u2506 ---         \u2506 ---         \u2506   \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64       \u2506 f64      \u2506 f64         \u2506 f64         \u2506   \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 36.324103 \u2506 3.189516 \u2506 15360.79982 \u2506 4700.866935 \u2506 \u2026 \u2506 0.254032 \u2506 0.248992 \u2506 0.544355 \u2506 2.608871 \u2502\n#&gt; \u2502           \u2506          \u2506 9           \u2506             \u2506   \u2506          \u2506          \u2506          \u2506          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_with_columns.html","title":"Select and modify columns of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_with_columns.html#description","title":"Description","text":"<p>Add columns or modify existing ones with expressions. This is the equivalent of <code>dplyr::mutate()</code> as it keeps unmentioned columns (unlike <code>$select()</code>).</p>"},{"location":"man/LazyFrame_with_columns.html#usage","title":"Usage","text":"<pre><code>LazyFrame_with_columns(...)\n</code></pre>"},{"location":"man/LazyFrame_with_columns.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Any expressions or string column name, or same wrapped in a list. If first and only element is a list, it is unwrapped as a list of args."},{"location":"man/LazyFrame_with_columns.html#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_with_columns.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(iris)$with_columns(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt;  WITH_COLUMNS:\n#&gt;  [col(\"Sepal.Length\").abs().alias(\"abs_SL\"), [(col(\"Sepal.Length\")) + (2.0)].alias(\"add_2_SL\")]\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># same query\nl_expr = list(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\npl$LazyFrame(iris)$with_columns(l_expr)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt;  WITH_COLUMNS:\n#&gt;  [col(\"Sepal.Length\").abs().alias(\"abs_SL\"), [(col(\"Sepal.Length\")) + (2.0)].alias(\"add_2_SL\")]\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>pl$LazyFrame(iris)$with_columns(\n  pl$col(\"Sepal.Length\")$abs(), # not named expr will keep name \"Sepal.Length\"\n  SW_add_2 = (pl$col(\"Sepal.Width\") + 2)\n)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt;  WITH_COLUMNS:\n#&gt;  [col(\"Sepal.Length\").abs(), [(col(\"Sepal.Width\")) + (2.0)].alias(\"SW_add_2\")]\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyFrame_with_context.html","title":"Add an external context to the computation graph","text":"<p>Source code</p>"},{"location":"man/LazyFrame_with_context.html#description","title":"Description","text":"<p>This allows expressions to also access columns from DataFrames or LazyFrames that are not part of this one.</p>"},{"location":"man/LazyFrame_with_context.html#usage","title":"Usage","text":"<pre><code>LazyFrame_with_context(other)\n</code></pre>"},{"location":"man/LazyFrame_with_context.html#arguments","title":"Arguments","text":"<code>other</code>  Data/LazyFrame to have access to. This can be a list of DataFrames and LazyFrames."},{"location":"man/LazyFrame_with_context.html#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_with_context.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(a = c(1, 2, 3), b = c(\"a\", \"c\", NA))\nlf_other = pl$LazyFrame(c = c(\"foo\", \"ham\"))\n\nlf$with_context(lf_other)$select(\n  pl$col(\"b\") + pl$col(\"c\")$first()\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 afoo \u2502\n#&gt; \u2502 cfoo \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Fill nulls with the median from another lazyframe:\ntrain_lf = pl$LazyFrame(\n  feature_0 = c(-1.0, 0, 1), feature_1 = c(-1.0, 0, 1)\n)\ntest_lf = pl$LazyFrame(\n  feature_0 = c(-1.0, NA, 1), feature_1 = c(-1.0, 0, 1)\n)\n\ntest_lf$with_context(train_lf$select(pl$all()$name$suffix(\"_train\")))$select(\n  pl$col(\"feature_0\")$fill_null(pl$col(\"feature_0_train\")$median())\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 feature_0 \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0      \u2502\n#&gt; \u2502 0.0       \u2502\n#&gt; \u2502 1.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_with_row_index.html","title":"Add a column for row indices","text":"<p>Source code</p>"},{"location":"man/LazyFrame_with_row_index.html#description","title":"Description","text":"<p>Add a new column at index 0 that counts the rows</p>"},{"location":"man/LazyFrame_with_row_index.html#usage","title":"Usage","text":"<pre><code>LazyFrame_with_row_index(name, offset = NULL)\n</code></pre>"},{"location":"man/LazyFrame_with_row_index.html#arguments","title":"Arguments","text":"<code>name</code>  string name of the created column  <code>offset</code>  positive integer offset for the start of the counter"},{"location":"man/LazyFrame_with_row_index.html#value","title":"Value","text":"<p>A new LazyFrame with a counter column in front</p>"},{"location":"man/LazyFrame_with_row_index.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$LazyFrame(mtcars)\n\n# by default, the index starts at 0 (to mimic the behavior of Python Polars)\ndf$with_row_index(\"idx\")\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; WITH ROW INDEX\n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># but in R, we use a 1-index\ndf$with_row_index(\"idx\", offset = 1)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; WITH ROW INDEX\n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyGroupBy_agg.html","title":"LazyGroupBy_agg","text":"<p>Source code</p>"},{"location":"man/LazyGroupBy_agg.html#description","title":"Description","text":"<p>aggregate a polar_lazy_group_by</p>"},{"location":"man/LazyGroupBy_agg.html#usage","title":"Usage","text":"<pre><code>LazyGroupBy_agg(...)\n</code></pre>"},{"location":"man/LazyGroupBy_agg.html#arguments","title":"Arguments","text":"<code>\u2026</code>  exprs to aggregate over. \u2026 args can also be passed wrapped in a list <code>$agg(list(e1,e2,e3))</code>"},{"location":"man/LazyGroupBy_agg.html#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object.</p>"},{"location":"man/LazyGroupBy_agg.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlgb = pl$DataFrame(\n  foo = c(\"one\", \"two\", \"two\", \"one\", \"two\"),\n  bar = c(5, 3, 2, 4, 1)\n)$\n  lazy()$\n  group_by(\"foo\")\n\n\nprint(lgb)\n</code></pre> <pre><code>#&gt; polars LazyGroupBy: \n#&gt; LazyGroupBy (internals are opaque)\n</code></pre> <pre><code>lgb$\n  agg(\n  pl$col(\"bar\")$sum()$name$suffix(\"_sum\"),\n  pl$col(\"bar\")$mean()$alias(\"bar_tail_sum\")\n)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; AGGREGATE\n#&gt;  [col(\"bar\").sum().alias(\"bar_sum\"), col(\"bar\").mean().alias(\"bar_tail_sum\")] BY [col(\"foo\")] FROM\n#&gt;   DF [\"foo\", \"bar\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyGroupBy_class.html","title":"Operations on Polars grouped LazyFrame","text":""},{"location":"man/LazyGroupBy_class.html#description","title":"Description","text":"<p>This class comes from <code>\\&lt;LazyFrame&gt;$group_by()</code>, etc.</p>"},{"location":"man/LazyGroupBy_class.html#active-bindings","title":"Active bindings","text":"columns  <p><code>$columns</code> returns a character vector with the column names.</p>"},{"location":"man/LazyGroupBy_class.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_lf(mtcars)$group_by(\"cyl\")$agg(\n  pl$col(\"mpg\")$sum()\n)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; AGGREGATE\n#&gt;  [col(\"mpg\").sum()] BY [col(\"cyl\")] FROM\n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyGroupBy_head.html","title":"LazyGroupBy_head","text":"<p>Source code</p>"},{"location":"man/LazyGroupBy_head.html#description","title":"Description","text":"<p>get n rows of head of group</p>"},{"location":"man/LazyGroupBy_head.html#usage","title":"Usage","text":"<pre><code>LazyGroupBy_head(n = 1L)\n</code></pre>"},{"location":"man/LazyGroupBy_head.html#arguments","title":"Arguments","text":"<code>n</code>  integer number of rows to get"},{"location":"man/LazyGroupBy_head.html#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object.</p>"},{"location":"man/LazyGroupBy_print.html","title":"LazyGroupBy_print","text":"<p>Source code</p>"},{"location":"man/LazyGroupBy_print.html#description","title":"Description","text":"<p>prints opaque groupby, not much to show</p>"},{"location":"man/LazyGroupBy_print.html#usage","title":"Usage","text":"<pre><code>LazyGroupBy_print()\n</code></pre>"},{"location":"man/LazyGroupBy_print.html#value","title":"Value","text":"<p>invisible self</p>"},{"location":"man/LazyGroupBy_tail.html","title":"LazyGroupBy_tail","text":"<p>Source code</p>"},{"location":"man/LazyGroupBy_tail.html#description","title":"Description","text":"<p>get n tail rows of group</p>"},{"location":"man/LazyGroupBy_tail.html#usage","title":"Usage","text":"<pre><code>LazyGroupBy_tail(n = 1L)\n</code></pre>"},{"location":"man/LazyGroupBy_tail.html#arguments","title":"Arguments","text":"<code>n</code>  integer number of rows to get"},{"location":"man/LazyGroupBy_tail.html#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object.</p>"},{"location":"man/LazyGroupBy_ungroup.html","title":"LazyGroupBy_ungroup","text":"<p>Source code</p>"},{"location":"man/LazyGroupBy_ungroup.html#description","title":"Description","text":"<p>Revert the group by operation.</p>"},{"location":"man/LazyGroupBy_ungroup.html#usage","title":"Usage","text":"<pre><code>LazyGroupBy_ungroup()\n</code></pre>"},{"location":"man/LazyGroupBy_ungroup.html#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object.</p>"},{"location":"man/LazyGroupBy_ungroup.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(mtcars)\nlf\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>lgb = lf$group_by(\"cyl\")\nlgb\n</code></pre> <pre><code>#&gt; polars LazyGroupBy: \n#&gt; LazyGroupBy (internals are opaque)\n</code></pre> <pre><code>lgb$ungroup()\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/RThreadHandle_class.html","title":"The RPolarsRThreadHandle class","text":""},{"location":"man/RThreadHandle_class.html#description","title":"Description","text":"<p>A handle to some polars query running in a background thread.</p>"},{"location":"man/RThreadHandle_class.html#details","title":"Details","text":"<p><code>\\&lt;LazyFrame&gt;$collect_in_background()</code> will execute a polars query detached from the R session and return an <code>RPolarsRThreadHandle</code> immediately. This <code>RPolarsRThreadHandle</code>-class has the methods <code>is_finished()</code> and <code>join()</code>.</p>"},{"location":"man/RThreadHandle_class.html#notice","title":"NOTICE","text":"<p>The background thread cannot use the main R session, but can access the pool of extra R sessions to process R code embedded in polars query via <code>$map_batches(\u2026, in_background = TRUE)</code> or <code>$map_elements(background=TRUE)</code>. Use <code>options(polars.rpool_cap = XX)</code> to limit number of parallel R sessions. Starting polars <code>\\&lt;LazyFrame&gt;$collect_in_background()</code> with e.g.\u00a0some <code>$map_batches(\u2026, in_background = FALSE)</code> will raise an Error as the main R session is not available to process the R part of the polars query. Native polars query does not need any R session.</p>"},{"location":"man/RThreadHandle_class.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$collect_in_background() <li> <code>\\$map_batches() <li> <code>\\$map_elements()"},{"location":"man/RThreadHandle_class.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nprexpr = pl$col(\"mpg\")$map_batches(\\(x) {\n  Sys.sleep(.1)\n  x * 0.43\n}, in_background = TRUE)$alias(\"kml\")\nhandle = pl$LazyFrame(mtcars)$with_columns(prexpr)$collect_in_background()\nif (!handle$is_finished()) print(\"not done yet\")\n</code></pre> <pre><code>#&gt; [1] \"not done yet\"\n</code></pre> <pre><code>df = handle$join() # get result\ndf\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 am  \u2506 gear \u2506 carb \u2506 kml    \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 ---  \u2506 ---  \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64  \u2506 f64  \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 9.03   \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 9.03   \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2506 9.804  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2506 9.202  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2506 8.041  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2506 \u2026      \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2506 13.072 \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2506 6.794  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2506 8.471  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2506 6.45   \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2506 9.202  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/RThreadHandle_is_finished.html","title":"Ask if RThreadHandle is finished?","text":"<p>Source code</p>"},{"location":"man/RThreadHandle_is_finished.html#description","title":"Description","text":"<p>Ask if RThreadHandle is finished?</p>"},{"location":"man/RThreadHandle_is_finished.html#usage","title":"Usage","text":"<pre><code>RThreadHandle_is_finished()\n</code></pre>"},{"location":"man/RThreadHandle_is_finished.html#value","title":"Value","text":"<p>trinary value: <code>TRUE</code> if finished, <code>FALSE</code> if not, and <code>NULL</code> if the handle was exhausted with <code>\\&lt;RThreadHandle&gt;$join()</code>.</p>"},{"location":"man/RThreadHandle_join.html","title":"Join a RThreadHandle","text":"<p>Source code</p>"},{"location":"man/RThreadHandle_join.html#description","title":"Description","text":"<p>Join a RThreadHandle</p>"},{"location":"man/RThreadHandle_join.html#usage","title":"Usage","text":"<pre><code>RThreadHandle_join()\n</code></pre>"},{"location":"man/RThreadHandle_join.html#details","title":"Details","text":"<p>method <code>\\&lt;RThreadHandle&gt;$join()</code>: will block until job is done and then return some value or raise an error from the thread. Calling <code>\\&lt;RThreadHandle&gt;$join()</code> a second time will raise an error because handle is already exhausted.</p>"},{"location":"man/RThreadHandle_join.html#value","title":"Value","text":"<p>return value from background thread</p>"},{"location":"man/RThreadHandle_join.html#see-also","title":"See Also","text":"<p>RThreadHandle_class</p>"},{"location":"man/RollingGroupBy_agg.html","title":"Aggregate over a RollingGroupBy","text":"<p>Source code</p>"},{"location":"man/RollingGroupBy_agg.html#description","title":"Description","text":"<p>Aggregate a DataFrame over a rolling window created with <code>$rolling()</code>.</p>"},{"location":"man/RollingGroupBy_agg.html#usage","title":"Usage","text":"<pre><code>RollingGroupBy_agg(...)\n</code></pre>"},{"location":"man/RollingGroupBy_agg.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Exprs to aggregate over. Those can also be passed wrapped in a list, e.g <code>$agg(list(e1,e2,e3))</code>."},{"location":"man/RollingGroupBy_agg.html#value","title":"Value","text":"<p>An aggregated DataFrame</p>"},{"location":"man/RollingGroupBy_agg.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  dt = c(\"2020-01-01\", \"2020-01-01\", \"2020-01-01\", \"2020-01-02\", \"2020-01-03\", \"2020-01-08\"),\n  a = c(3, 7, 5, 9, 2, 1)\n)$with_columns(\n  pl$col(\"dt\")$str$strptime(pl$Date, format = NULL)$set_sorted()\n)\n\ndf$rolling(index_column = \"dt\", period = \"2d\")$agg(\n  pl$col(\"a\"),\n  pl$sum(\"a\")$alias(\"sum_a\"),\n  pl$min(\"a\")$alias(\"min_a\"),\n  pl$max(\"a\")$alias(\"max_a\")\n)\n</code></pre> <pre><code>#&gt; shape: (6, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dt         \u2506 a                 \u2506 sum_a \u2506 min_a \u2506 max_a \u2502\n#&gt; \u2502 ---        \u2506 ---               \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 date       \u2506 list[f64]         \u2506 f64   \u2506 f64   \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 \u2506 [3.0, 7.0, 5.0]   \u2506 15.0  \u2506 3.0   \u2506 7.0   \u2502\n#&gt; \u2502 2020-01-01 \u2506 [3.0, 7.0, 5.0]   \u2506 15.0  \u2506 3.0   \u2506 7.0   \u2502\n#&gt; \u2502 2020-01-01 \u2506 [3.0, 7.0, 5.0]   \u2506 15.0  \u2506 3.0   \u2506 7.0   \u2502\n#&gt; \u2502 2020-01-02 \u2506 [3.0, 7.0, \u2026 9.0] \u2506 24.0  \u2506 3.0   \u2506 9.0   \u2502\n#&gt; \u2502 2020-01-03 \u2506 [9.0, 2.0]        \u2506 11.0  \u2506 2.0   \u2506 9.0   \u2502\n#&gt; \u2502 2020-01-08 \u2506 [1.0]             \u2506 1.0   \u2506 1.0   \u2506 1.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/RollingGroupBy_class.html","title":"Operations on Polars DataFrame grouped by rolling windows","text":""},{"location":"man/RollingGroupBy_class.html#description","title":"Description","text":"<p>This class comes from <code>\\&lt;DataFrame&gt;$rolling()</code>.</p>"},{"location":"man/RollingGroupBy_class.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  dt = c(\"2020-01-01\", \"2020-01-01\", \"2020-01-01\", \"2020-01-02\", \"2020-01-03\", \"2020-01-08\"),\n  a = c(3, 7, 5, 9, 2, 1)\n)$with_columns(\n  pl$col(\"dt\")$str$strptime(pl$Date, format = NULL)$set_sorted()\n)\n\ndf$rolling(index_column = \"dt\", period = \"2d\")\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dt         \u2506 a   \u2502\n#&gt; \u2502 ---        \u2506 --- \u2502\n#&gt; \u2502 date       \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 \u2506 3.0 \u2502\n#&gt; \u2502 2020-01-01 \u2506 7.0 \u2502\n#&gt; \u2502 2020-01-01 \u2506 5.0 \u2502\n#&gt; \u2502 2020-01-02 \u2506 9.0 \u2502\n#&gt; \u2502 2020-01-03 \u2506 2.0 \u2502\n#&gt; \u2502 2020-01-08 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/RollingGroupBy_ungroup.html","title":"Ungroup a RollingGroupBy object","text":"<p>Source code</p>"},{"location":"man/RollingGroupBy_ungroup.html#description","title":"Description","text":"<p>Revert the <code>$rolling()</code> operation. Doing <code>\\&lt;DataFrame&gt;$rolling(\u2026)$ungroup()</code> returns the original <code>DataFrame</code>.</p>"},{"location":"man/RollingGroupBy_ungroup.html#usage","title":"Usage","text":"<pre><code>RollingGroupBy_ungroup()\n</code></pre>"},{"location":"man/RollingGroupBy_ungroup.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/RollingGroupBy_ungroup.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  dt = c(\"2020-01-01\", \"2020-01-01\", \"2020-01-01\", \"2020-01-02\", \"2020-01-03\", \"2020-01-08\"),\n  a = c(3, 7, 5, 9, 2, 1)\n)$with_columns(\n  pl$col(\"dt\")$str$strptime(pl$Date, format = NULL)$set_sorted()\n)\n\ndf$rolling(index_column = \"dt\", period = \"2d\")$ungroup()\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dt         \u2506 a   \u2502\n#&gt; \u2502 ---        \u2506 --- \u2502\n#&gt; \u2502 date       \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 \u2506 3.0 \u2502\n#&gt; \u2502 2020-01-01 \u2506 7.0 \u2502\n#&gt; \u2502 2020-01-01 \u2506 5.0 \u2502\n#&gt; \u2502 2020-01-02 \u2506 9.0 \u2502\n#&gt; \u2502 2020-01-03 \u2506 2.0 \u2502\n#&gt; \u2502 2020-01-08 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/S3_arithmetic.html","title":"Arithmetic operators for RPolars objects","text":""},{"location":"man/S3_arithmetic.html#description","title":"Description","text":"<p>Arithmetic operators for RPolars objects</p>"},{"location":"man/S3_arithmetic.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsExpr'\nx + y\n\n# S3 method for class 'RPolarsExpr'\nx - y\n\n# S3 method for class 'RPolarsExpr'\nx * y\n\n# S3 method for class 'RPolarsExpr'\nx / y\n\n# S3 method for class 'RPolarsExpr'\nx ^ y\n\n# S3 method for class 'RPolarsExpr'\nx %% y\n\n# S3 method for class 'RPolarsExpr'\nx %/% y\n\n# S3 method for class 'RPolarsSeries'\nx + y\n\n# S3 method for class 'RPolarsSeries'\nx - y\n\n# S3 method for class 'RPolarsSeries'\nx * y\n\n# S3 method for class 'RPolarsSeries'\nx / y\n\n# S3 method for class 'RPolarsSeries'\nx ^ y\n\n# S3 method for class 'RPolarsSeries'\nx %% y\n\n# S3 method for class 'RPolarsSeries'\nx %/% y\n</code></pre>"},{"location":"man/S3_arithmetic.html#arguments","title":"Arguments","text":"<code>x</code>, <code>y</code>  numeric type of RPolars objects or objects that can be coerced such. Only <code>+</code> can take strings."},{"location":"man/S3_arithmetic.html#value","title":"Value","text":"<p>A Polars object the same type as the input.</p>"},{"location":"man/S3_arithmetic.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$add() <li> <code>\\$sub() <li> <code>\\$mul() <li> <code>\\$div() <li> <code>\\$pow() <li> <code>\\$mod() <li> <code>\\$floor_div() <li> <code>\\$add() <li> <code>\\$sub() <li> <code>\\$mul() <li> <code>\\$div() <li> <code>\\$pow() <li> <code>\\$mod() <li> <code>\\$floor_div()"},{"location":"man/S3_arithmetic.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(5) + 10\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) + (10.0)]\n</code></pre> <pre><code>5 + pl$lit(10)\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) + (10.0)]\n</code></pre> <pre><code>pl$lit(5) + pl$lit(10)\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) + (10.0)]\n</code></pre> <pre><code>+pl$lit(1)\n</code></pre> <pre><code>#&gt; polars Expr: 1.0\n</code></pre> <pre><code># This will not raise an error as it is not actually evaluated.\nexpr = pl$lit(5) + \"10\"\nexpr\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) + (String(10))]\n</code></pre> <pre><code># Will raise an error as it is evaluated.\ntryCatch(\n  expr$to_series(),\n  error = function(e) e\n)\n</code></pre> <pre><code>#&gt; &lt;RPolarsErr_error: Execution halted with the following contexts\n#&gt;    0: In R: in $select()\n#&gt;    0: During function call [.main()]\n#&gt;    1: Encountered the following error in Rust-Polars:\n#&gt;          arithmetic on string and numeric not allowed, try an explicit cast first\n#&gt; &gt;\n</code></pre> <pre><code>as_polars_series(5) + 10\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  15.0\n#&gt; ]\n</code></pre> <pre><code>+as_polars_series(5)\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  5.0\n#&gt; ]\n</code></pre> <pre><code>-as_polars_series(5)\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  -5.0\n#&gt; ]\n</code></pre>"},{"location":"man/S3_as.character.html","title":"Convert to a character vector","text":""},{"location":"man/S3_as.character.html#description","title":"Description","text":"<p>Convert to a character vector</p>"},{"location":"man/S3_as.character.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsSeries'\nas.character(x, ..., str_length = NULL)\n</code></pre>"},{"location":"man/S3_as.character.html#arguments","title":"Arguments","text":"<code>x</code>  A Polars Series  <code>\u2026</code>  Not used.  <code>str_length</code>  An integer. If specified, utf8 or categorical type Series will be formatted to a string of this length."},{"location":"man/S3_as.character.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = as_polars_series(c(\"foo\", \"barbaz\"))\nas.character(s)\n</code></pre> <pre><code>#&gt; [1] \"foo\"    \"barbaz\"\n</code></pre> <pre><code>as.character(s, str_length = 3)\n</code></pre> <pre><code>#&gt; [1] \"\\\"fo\u2026\" \"\\\"ba\u2026\"\n</code></pre>"},{"location":"man/S3_as.data.frame.html","title":"Convert to a data.frame","text":""},{"location":"man/S3_as.data.frame.html#description","title":"Description","text":"<p>Equivalent to <code>as_polars_df(x, \u2026)$to_data_frame(\u2026)</code>.</p>"},{"location":"man/S3_as.data.frame.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nas.data.frame(x, ..., int64_conversion = polars_options()\\$int64_conversion)\n\n# S3 method for class 'RPolarsLazyFrame'\nas.data.frame(\n  x,\n  ...,\n  n_rows = Inf,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE,\n  collect_in_background = FALSE\n)\n</code></pre>"},{"location":"man/S3_as.data.frame.html#arguments","title":"Arguments","text":"<code>x</code>  An object to convert to a data.frame.  <code>\u2026</code>  Additional arguments passed to methods.  <code>int64_conversion</code>   How should Int64 values be handled when converting a polars object to R?  <ul> <li> <code>\u201cdouble\u201d</code> (default) converts the integer values to double.  </li> <li> <code>\u201cbit64\u201d</code> uses <code>bit64::as.integer64()</code> to do the conversion (requires the package <code>bit64</code> to be attached).  </li> <li> <code>\u201cstring\u201d</code> converts Int64 values to character.  </li> </ul> <code>n_rows</code>  Number of rows to fetch. Defaults to <code>Inf</code>, meaning all rows.  <code>type_coercion</code>  Logical. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Logical. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Logical. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Logical. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Logical. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Logical. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Logical. Common subexpressions will be cached and reused.  <code>streaming</code>  Logical. Run parts of the query in a streaming fashion (this is in an alpha state).  <code>no_optimization</code>  Logical. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Logical. Use existing optimization settings regardless the settings specified in this function call.  <code>collect_in_background</code>  Logical. Detach this query from R session. Computation will start in background. Get a handle which later can be converted into the resulting DataFrame. Useful in interactive mode to not lock R session."},{"location":"man/S3_as.data.frame.html#conversion-to-r-data-types-considerations","title":"Conversion to R data types considerations","text":"<p>When converting Polars objects, such as DataFrames to R objects, for example via the <code>as.data.frame()</code> generic function, each type in the Polars object is converted to an R type. In some cases, an error may occur because the conversion is not appropriate. In particular, there is a high possibility of an error when converting a Datetime type without a time zone. A Datetime type without a time zone in Polars is converted to the POSIXct type in R, which takes into account the time zone in which the R session is running (which can be checked with the <code>Sys.timezone()</code> function). In this case, if ambiguous times are included, a conversion error will occur. In such cases, change the session time zone using <code>Sys.setenv(TZ = \"UTC\")</code> and then perform the conversion, or use the <code>$dt$replace_time_zone()</code> method on the Datetime type column to explicitly specify the time zone before conversion.</p> <pre># Due to daylight savings, clocks were turned forward 1 hour on Sunday, March 8, 2020, 2:00:00 am\n# so this particular date-time doesn't exist\nnon_existent_time = as_polars_series(\"2020-03-08 02:00:00\")\\$str\\$strptime(pl\\$Datetime(), \"%F %T\")\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    tryCatch(\n      # This causes an error due to the time zone (the `TZ` env var is affected).\n      as.vector(non_existent_time),\n      error = function(e) e\n    )\n  }\n)\n#&gt; &lt;error: in to_r: ComputeError(ErrString(\"datetime '2020-03-08 02:00:00' is non-existent in time zone 'America/New_York'. You may be able to use `non_existent='null'` to return `null` in this case.\")) When calling: devtools::document()&gt;\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    # This is safe.\n    as.vector(non_existent_time\\$dt\\$replace_time_zone(\"UTC\"))\n  }\n)\n#&gt; [1] \"2020-03-08 02:00:00 UTC\"\n</pre>"},{"location":"man/S3_as.data.frame.html#see-also","title":"See Also","text":"<ul> <li> <code>as_polars_df()</code> </li> <li> <code>\\$to_data_frame()"},{"location":"man/S3_as.matrix.html","title":"Convert to a matrix","text":""},{"location":"man/S3_as.matrix.html#description","title":"Description","text":"<p>Equivalent to <code>as.data.frame(x, \u2026) |&gt; as.matrix()</code>.</p>"},{"location":"man/S3_as.matrix.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nas.matrix(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nas.matrix(x, ...)\n</code></pre>"},{"location":"man/S3_as.matrix.html#arguments","title":"Arguments","text":"<code>x</code>  An object to convert to a matrix.  <code>\u2026</code>  Additional arguments passed to methods."},{"location":"man/S3_as.vector.html","title":"Convert to a vector","text":""},{"location":"man/S3_as.vector.html#description","title":"Description","text":"<p>Convert to a vector</p>"},{"location":"man/S3_as.vector.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsSeries'\nas.vector(x, mode)\n</code></pre>"},{"location":"man/S3_as.vector.html#arguments","title":"Arguments","text":"<code>x</code>  A Polars Series  <code>mode</code>  Not used."},{"location":"man/S3_as.vector.html#conversion-to-r-data-types-considerations","title":"Conversion to R data types considerations","text":"<p>When converting Polars objects, such as DataFrames to R objects, for example via the <code>as.data.frame()</code> generic function, each type in the Polars object is converted to an R type. In some cases, an error may occur because the conversion is not appropriate. In particular, there is a high possibility of an error when converting a Datetime type without a time zone. A Datetime type without a time zone in Polars is converted to the POSIXct type in R, which takes into account the time zone in which the R session is running (which can be checked with the <code>Sys.timezone()</code> function). In this case, if ambiguous times are included, a conversion error will occur. In such cases, change the session time zone using <code>Sys.setenv(TZ = \"UTC\")</code> and then perform the conversion, or use the <code>$dt$replace_time_zone()</code> method on the Datetime type column to explicitly specify the time zone before conversion.</p> <pre># Due to daylight savings, clocks were turned forward 1 hour on Sunday, March 8, 2020, 2:00:00 am\n# so this particular date-time doesn't exist\nnon_existent_time = as_polars_series(\"2020-03-08 02:00:00\")\\$str\\$strptime(pl\\$Datetime(), \"%F %T\")\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    tryCatch(\n      # This causes an error due to the time zone (the `TZ` env var is affected).\n      as.vector(non_existent_time),\n      error = function(e) e\n    )\n  }\n)\n#&gt; &lt;error: in to_r: ComputeError(ErrString(\"datetime '2020-03-08 02:00:00' is non-existent in time zone 'America/New_York'. You may be able to use `non_existent='null'` to return `null` in this case.\")) When calling: devtools::document()&gt;\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    # This is safe.\n    as.vector(non_existent_time\\$dt\\$replace_time_zone(\"UTC\"))\n  }\n)\n#&gt; [1] \"2020-03-08 02:00:00 UTC\"\n</pre>"},{"location":"man/S3_as_arrow_table.html","title":"Create a arrow Table from a Polars object","text":""},{"location":"man/S3_as_arrow_table.html#description","title":"Description","text":"<p>Create a arrow Table from a Polars object</p>"},{"location":"man/S3_as_arrow_table.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nas_arrow_table(x, ...)\n</code></pre>"},{"location":"man/S3_as_arrow_table.html#arguments","title":"Arguments","text":"<code>x</code>  A Polars DataFrame  <code>\u2026</code>  Ignored"},{"location":"man/S3_as_arrow_table.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nlibrary(arrow)\n\npl_df = as_polars_df(mtcars)\nas_arrow_table(pl_df)\n</code></pre> <pre><code>#&gt; Table\n#&gt; 32 rows x 11 columns\n#&gt; $mpg &lt;double&gt;\n#&gt; $cyl &lt;double&gt;\n#&gt; $disp &lt;double&gt;\n#&gt; $hp &lt;double&gt;\n#&gt; $drat &lt;double&gt;\n#&gt; $wt &lt;double&gt;\n#&gt; $qsec &lt;double&gt;\n#&gt; $vs &lt;double&gt;\n#&gt; $am &lt;double&gt;\n#&gt; $gear &lt;double&gt;\n#&gt; $carb &lt;double&gt;\n</code></pre>"},{"location":"man/S3_as_nanoarrow_array_stream.html","title":"Create a nanoarrow_array_stream from a Polars object","text":""},{"location":"man/S3_as_nanoarrow_array_stream.html#description","title":"Description","text":"<p>Create a nanoarrow_array_stream from a Polars object</p>"},{"location":"man/S3_as_nanoarrow_array_stream.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nas_nanoarrow_array_stream(x, ..., schema = NULL)\n</code></pre>"},{"location":"man/S3_as_nanoarrow_array_stream.html#arguments","title":"Arguments","text":"<code>x</code>  A Polars DataFrame  <code>\u2026</code>  Ignored  <code>schema</code>  must stay at default value NULL"},{"location":"man/S3_as_nanoarrow_array_stream.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlibrary(nanoarrow)\npl_df = as_polars_df(mtcars)\n\nnanoarrow_array_stream = as_nanoarrow_array_stream(pl_df)\nas.data.frame(nanoarrow_array_stream)\n</code></pre> <pre><code>#&gt;     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#&gt; 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#&gt; 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#&gt; 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#&gt; 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#&gt; 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#&gt; 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n#&gt; 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n#&gt; 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n#&gt; 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n#&gt; 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n#&gt; 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n#&gt; 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n#&gt; 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n#&gt; 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n#&gt; 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n#&gt; 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n#&gt; 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n#&gt; 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n#&gt; 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n#&gt; 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n#&gt; 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n#&gt; 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n#&gt; 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n#&gt; 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n#&gt; 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n#&gt; 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n#&gt; 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n#&gt; 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n#&gt; 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n#&gt; 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n#&gt; 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n#&gt; 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n</code></pre>"},{"location":"man/S3_as_record_batch_reader.html","title":"Create a arrow RecordBatchReader from a Polars object","text":""},{"location":"man/S3_as_record_batch_reader.html#description","title":"Description","text":"<p>Create a arrow RecordBatchReader from a Polars object</p>"},{"location":"man/S3_as_record_batch_reader.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nas_record_batch_reader(x, ...)\n</code></pre>"},{"location":"man/S3_as_record_batch_reader.html#arguments","title":"Arguments","text":"<code>x</code>  A Polars DataFrame  <code>\u2026</code>  Ignored"},{"location":"man/S3_as_record_batch_reader.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nlibrary(arrow)\n\npl_df = as_polars_df(mtcars)\nas_record_batch_reader(pl_df)\n</code></pre> <pre><code>#&gt; RecordBatchReader\n#&gt; mpg: double\n#&gt; cyl: double\n#&gt; disp: double\n#&gt; hp: double\n#&gt; drat: double\n#&gt; wt: double\n#&gt; qsec: double\n#&gt; vs: double\n#&gt; am: double\n#&gt; gear: double\n#&gt; carb: double\n</code></pre>"},{"location":"man/S3_c.html","title":"Combine to a Series","text":""},{"location":"man/S3_c.html#description","title":"Description","text":"<p>Combine to a Series</p>"},{"location":"man/S3_c.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsSeries'\nc(x, ...)\n</code></pre>"},{"location":"man/S3_c.html#arguments","title":"Arguments","text":"<code>x</code>  A Polars Series  <code>\u2026</code>  Series(s) or any object that can be converted to a Series."},{"location":"man/S3_c.html#details","title":"Details","text":"<p>All objects must have the same datatype. Combining does not rechunk. Read more about R vectors, Series and chunks in <code>docs_translations</code>:</p>"},{"location":"man/S3_c.html#value","title":"Value","text":"<p>a combined Series</p>"},{"location":"man/S3_c.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = c(as_polars_series(1:5), 3:1, NA_integer_)\ns$chunk_lengths() # the series contain three unmerged chunks\n</code></pre> <pre><code>#&gt; [1] 5 3 1\n</code></pre>"},{"location":"man/S3_dim.html","title":"Get the dimensions","text":""},{"location":"man/S3_dim.html#description","title":"Description","text":"<p>Get the dimensions</p>"},{"location":"man/S3_dim.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\ndim(x)\n\n# S3 method for class 'RPolarsLazyFrame'\ndim(x)\n</code></pre>"},{"location":"man/S3_dim.html#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame"},{"location":"man/S3_dimnames.html","title":"Get the row and column names","text":""},{"location":"man/S3_dimnames.html#description","title":"Description","text":"<p>Get the row and column names</p>"},{"location":"man/S3_dimnames.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\ndimnames(x)\n\n# S3 method for class 'RPolarsLazyFrame'\ndimnames(x)\n</code></pre>"},{"location":"man/S3_dimnames.html#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame"},{"location":"man/S3_extract.html","title":"Extract Parts of a Polars Object","text":""},{"location":"man/S3_extract.html#description","title":"Description","text":"<p>Mimics the behavior of [<code>x[i, j, drop = TRUE]</code>][Extract] for data.frame or R vector.</p>"},{"location":"man/S3_extract.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nx[i, j, drop = TRUE]\n\n# S3 method for class 'RPolarsLazyFrame'\nx[i, j, drop = TRUE]\n\n# S3 method for class 'RPolarsSeries'\nx[i]\n</code></pre>"},{"location":"man/S3_extract.html#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>i</code>  Rows to select. Integer vector, logical vector, or an Expression.  <code>j</code>  Columns to select. Integer vector, logical vector, character vector, or an Expression. For LazyFrames, only an Expression can be used.  <code>drop</code>  Convert to a Polars Series if only one column is selected. For LazyFrames, if the result has one column and <code>drop = TRUE</code>, an error will occur."},{"location":"man/S3_extract.html#details","title":"Details","text":"<p><code>\\&lt;Series&gt;[i]</code> is equivalent to <code>pl$select(\\&lt;Series&gt;)[i, , drop = TRUE]</code>.</p>"},{"location":"man/S3_extract.html#see-also","title":"See Also","text":"<p><code>\\&lt;DataFrame&gt;$select()</code>, <code>\\&lt;LazyFrame&gt;$select()</code>, <code>\\&lt;DataFrame&gt;$filter()</code>, <code>\\&lt;LazyFrame&gt;$filter()</code></p>"},{"location":"man/S3_extract.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(data.frame(a = 1:3, b = letters[1:3]))\nlf = df$lazy()\n\n# Select a row\ndf[1, ]\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 a   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># If only `i` is specified, it is treated as `j`\n# Select a column\ndf[1]\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Select a column by name (and convert to a Series)\ndf[, \"b\"]\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'b' [str]\n#&gt; [\n#&gt;  \"a\"\n#&gt;  \"b\"\n#&gt;  \"c\"\n#&gt; ]\n</code></pre> <pre><code># Can use Expression for filtering and column selection\nlf[pl$col(\"a\") &gt;= 2, pl$col(\"b\")$alias(\"new\"), drop = FALSE] |&gt;\n  as.data.frame()\n</code></pre> <pre><code>#&gt;   new\n#&gt; 1   b\n#&gt; 2   c\n</code></pre>"},{"location":"man/S3_head.html","title":"Return the first or the last <code>n</code> parts of an object","text":""},{"location":"man/S3_head.html#description","title":"Description","text":"<p>They are equivalent to <code>$head()</code> and <code>$tail()</code> methods.</p>"},{"location":"man/S3_head.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nhead(x, n = 6L, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nhead(x, n = 6L, ...)\n\n# S3 method for class 'RPolarsDataFrame'\ntail(x, n = 6L, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\ntail(x, n = 6L, ...)\n</code></pre>"},{"location":"man/S3_head.html#arguments","title":"Arguments","text":"<code>x</code>  A polars object  <code>n</code>  An integer vector of length 1. Note that negative values are not supported for if <code>x</code> is a LazyFrame.  <code>\u2026</code>  Ignored"},{"location":"man/S3_head.html#value","title":"Value","text":"<p>A polars object of the same class as <code>x</code></p>"},{"location":"man/S3_head.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$head() <li> <code>\\$head() <li> <code>\\$tail() <li> <code>\\$tail() <li> <code>\\$fetch()"},{"location":"man/S3_head.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = 1:5, bar = 6:10, ham = letters[1:5])\nlf = df$lazy()\n\nhead(df, 2)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 ham \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 6   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 7   \u2506 b   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>tail(df, 2)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 ham \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4   \u2506 9   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 10  \u2506 e   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>head(lf, 2)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; SLICE[offset: 0, len: 2]\n#&gt;   DF [\"foo\", \"bar\", \"ham\"]; PROJECT */3 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>tail(lf, 2)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; SLICE[offset: -2, len: 2]\n#&gt;   DF [\"foo\", \"bar\", \"ham\"]; PROJECT */3 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>head(df, -2)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 ham \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 6   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 7   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 8   \u2506 c   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>tail(df, -2)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 ham \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 8   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 9   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 10  \u2506 e   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/S3_infer_nanoarrow_schema.html","title":"Infer nanoarrow schema from a Polars object","text":""},{"location":"man/S3_infer_nanoarrow_schema.html#description","title":"Description","text":"<p>Infer nanoarrow schema from a Polars object</p>"},{"location":"man/S3_infer_nanoarrow_schema.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\ninfer_nanoarrow_schema(x, ...)\n</code></pre>"},{"location":"man/S3_infer_nanoarrow_schema.html#arguments","title":"Arguments","text":"<code>x</code>  A Polars DataFrame  <code>\u2026</code>  Ignored"},{"location":"man/S3_infer_nanoarrow_schema.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlibrary(nanoarrow)\npl_df = as_polars_df(mtcars)\n\ninfer_nanoarrow_schema(pl_df)\n</code></pre> <pre><code>#&gt; &lt;nanoarrow_schema struct&gt;\n#&gt;  $ format    : chr \"+s\"\n#&gt;  $ name      : chr \"\"\n#&gt;  $ metadata  : list()\n#&gt;  $ flags     : int 0\n#&gt;  $ children  :List of 11\n#&gt;   ..$ mpg :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"mpg\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ cyl :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"cyl\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ disp:&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"disp\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ hp  :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"hp\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ drat:&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"drat\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ wt  :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"wt\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ qsec:&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"qsec\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ vs  :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"vs\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ am  :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"am\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ gear:&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"gear\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ carb:&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"carb\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;  $ dictionary: NULL\n</code></pre>"},{"location":"man/S3_knit_print.html","title":"knit print polars DataFrame","text":""},{"location":"man/S3_knit_print.html#description","title":"Description","text":"<p>Mimics python-polars\u2019 NotebookFormatter for HTML outputs.</p>"},{"location":"man/S3_knit_print.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nknit_print(x, ...)\n</code></pre>"},{"location":"man/S3_knit_print.html#arguments","title":"Arguments","text":"<code>x</code>  a polars DataFrame to knit_print  <code>\u2026</code>  additional arguments, not used"},{"location":"man/S3_knit_print.html#details","title":"Details","text":"<p>Outputs HTML tables if the output format is HTML and the document\u2019s <code>df_print</code> option is not <code>\u201cdefault\u201d</code> or <code>\u201ctibble\u201d</code>.</p> <p>Or, the output format can be enforced with R\u2019s <code>options</code> function as follows:</p> <ul> <li> <code>options(polars.df_knitr_print = \u201cdefault\u201d)</code> for the default print method.  </li> <li> <code>options(polars.df_knitr_print = \u201chtml\u201d)</code> for the HTML table.  </li> </ul>"},{"location":"man/S3_knit_print.html#value","title":"Value","text":"<p>invisible x or NULL</p>"},{"location":"man/S3_length.html","title":"Get the length","text":""},{"location":"man/S3_length.html#description","title":"Description","text":"<p>Get the length</p>"},{"location":"man/S3_length.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nlength(x)\n\n# S3 method for class 'RPolarsLazyFrame'\nlength(x)\n\n# S3 method for class 'RPolarsSeries'\nlength(x)\n</code></pre>"},{"location":"man/S3_length.html#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series"},{"location":"man/S3_max.html","title":"Compute the maximum value","text":""},{"location":"man/S3_max.html#description","title":"Description","text":"<p>Compute the maximum value</p>"},{"location":"man/S3_max.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nmax(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nmax(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nmax(x, ...)\n</code></pre>"},{"location":"man/S3_max.html#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>\u2026</code>  Not used."},{"location":"man/S3_mean.html","title":"Compute the mean","text":""},{"location":"man/S3_mean.html#description","title":"Description","text":"<p>Compute the mean</p>"},{"location":"man/S3_mean.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nmean(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nmean(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nmean(x, ...)\n</code></pre>"},{"location":"man/S3_mean.html#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>\u2026</code>  Not used."},{"location":"man/S3_median.html","title":"Compute the median","text":""},{"location":"man/S3_median.html#description","title":"Description","text":"<p>Compute the median</p>"},{"location":"man/S3_median.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nmedian(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nmedian(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nmedian(x, ...)\n</code></pre>"},{"location":"man/S3_median.html#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>\u2026</code>  Not used."},{"location":"man/S3_min.html","title":"Compute the minimum value","text":""},{"location":"man/S3_min.html#description","title":"Description","text":"<p>Compute the minimum value</p>"},{"location":"man/S3_min.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nmin(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nmin(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nmin(x, ...)\n</code></pre>"},{"location":"man/S3_min.html#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>\u2026</code>  Not used."},{"location":"man/S3_na.omit.html","title":"Drop missing values","text":""},{"location":"man/S3_na.omit.html#description","title":"Description","text":"<p>Drop missing values</p>"},{"location":"man/S3_na.omit.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsLazyFrame'\nna.omit(object, subset = NULL, ...)\n\n# S3 method for class 'RPolarsDataFrame'\nna.omit(object, subset = NULL, ...)\n</code></pre>"},{"location":"man/S3_na.omit.html#arguments","title":"Arguments","text":"<code>object</code>  A DataFrame or LazyFrame  <code>subset</code>  Character vector of column names to drop missing values from.  <code>\u2026</code>  Not used."},{"location":"man/S3_na.omit.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(data.frame(a = c(NA, 2:10), b = c(1, NA, 3:10)))$lazy()\nna.omit(df)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; FILTER col(\"a\").is_not_null().all_horizontal([col(\"b\").is_not_null()]) FROM\n#&gt; DF [\"a\", \"b\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>na.omit(df, subset = \"a\")\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; FILTER col(\"a\").is_not_null().all_horizontal() FROM\n#&gt; DF [\"a\", \"b\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>na.omit(df, subset = c(\"a\", \"b\"))\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; FILTER [(col(\"a\").is_not_null()) &amp; (col(\"b\").is_not_null())] FROM\n#&gt; DF [\"a\", \"b\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/S3_names.html","title":"Get the column names","text":""},{"location":"man/S3_names.html#description","title":"Description","text":"<p>Get the column names</p>"},{"location":"man/S3_names.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nnames(x)\n\n# S3 method for class 'RPolarsLazyFrame'\nnames(x)\n\n# S3 method for class 'RPolarsLazyGroupBy'\nnames(x)\n\n# S3 method for class 'RPolarsGroupBy'\nnames(x)\n</code></pre>"},{"location":"man/S3_names.html#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame"},{"location":"man/S3_print.html","title":"Print values","text":""},{"location":"man/S3_print.html#description","title":"Description","text":"<p>Print values</p>"},{"location":"man/S3_print.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsSeries'\nprint(x, ...)\n</code></pre>"},{"location":"man/S3_print.html#arguments","title":"Arguments","text":"<code>x</code>  A Polars Series  <code>\u2026</code>  Not used"},{"location":"man/S3_rownames.html","title":"Get the row names","text":""},{"location":"man/S3_rownames.html#description","title":"Description","text":"<p>Get the row names</p>"},{"location":"man/S3_rownames.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nrow.names(x)\n</code></pre>"},{"location":"man/S3_rownames.html#arguments","title":"Arguments","text":"<code>x</code>  A Polars DataFrame"},{"location":"man/S3_sum.html","title":"Compute the sum","text":""},{"location":"man/S3_sum.html#description","title":"Description","text":"<p>Compute the sum</p>"},{"location":"man/S3_sum.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nsum(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nsum(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nsum(x, ...)\n</code></pre>"},{"location":"man/S3_sum.html#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>\u2026</code>  Not used."},{"location":"man/S3_unique.html","title":"Drop duplicated rows","text":""},{"location":"man/S3_unique.html#description","title":"Description","text":"<p>Drop duplicated rows</p>"},{"location":"man/S3_unique.html#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nunique(x, incomparables = FALSE, subset = NULL, keep = \"first\", ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nunique(x, incomparables = FALSE, subset = NULL, keep = \"first\", ...)\n</code></pre>"},{"location":"man/S3_unique.html#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame  <code>incomparables</code>  Not used.  <code>subset</code>  Character vector of column names to drop duplicated values from.  <code>keep</code>  Either <code>\u201cfirst\u201d</code>, <code>\u201clast\u201d</code>, or <code>\u201cnone\u201d</code>.  <code>\u2026</code>  Not used."},{"location":"man/S3_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  x = as.numeric(c(1, 1:5)),\n  y = as.numeric(c(1, 1:5)),\n  z = as.numeric(c(1, 1, 1:4))\n)\nunique(df)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2506 z   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1.0 \u2506 1.0 \u2502\n#&gt; \u2502 2.0 \u2506 2.0 \u2506 1.0 \u2502\n#&gt; \u2502 4.0 \u2506 4.0 \u2506 3.0 \u2502\n#&gt; \u2502 3.0 \u2506 3.0 \u2506 2.0 \u2502\n#&gt; \u2502 5.0 \u2506 5.0 \u2506 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/SQLContext_class.html","title":"Run SQL queries against DataFrame/LazyFrame data.","text":""},{"location":"man/SQLContext_class.html#description","title":"Description","text":"<p>Run SQL queries against DataFrame/LazyFrame data.</p>"},{"location":"man/SQLContext_class.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nlf = pl$LazyFrame(a = 1:3, b = c(\"x\", NA, \"z\"))\n\nres = pl$SQLContext(frame = lf)$execute(\n  \"SELECT b, a*2 AS two_a FROM frame WHERE b IS NOT NULL\"\n)\nres$collect()\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2506 two_a \u2502\n#&gt; \u2502 --- \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 x   \u2506 2     \u2502\n#&gt; \u2502 z   \u2506 6     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/SQLContext_execute.html","title":"Execute SQL query against the registered data","text":"<p>Source code</p>"},{"location":"man/SQLContext_execute.html#description","title":"Description","text":"<p>Parse the given SQL query and execute it against the registered frame data.</p>"},{"location":"man/SQLContext_execute.html#usage","title":"Usage","text":"<pre><code>SQLContext_execute(query)\n</code></pre>"},{"location":"man/SQLContext_execute.html#arguments","title":"Arguments","text":"<code>query</code>  A valid string SQL query."},{"location":"man/SQLContext_execute.html#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/SQLContext_execute.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nquery = \"SELECT * FROM mtcars WHERE cyl = 4\"\n\npl$SQLContext(mtcars = mtcars)$execute(query)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt;  SELECT [col(\"mpg\"), col(\"cyl\"), col(\"disp\"), col(\"hp\"), col(\"drat\"), col(\"wt\"), col(\"qsec\"), col(\"vs\"), col(\"am\"), col(\"gear\"), col(\"carb\")] FROM\n#&gt;   FILTER [(col(\"cyl\")) == (4)] FROM\n#&gt; \n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/SQLContext_register.html","title":"Register a single data as a table","text":"<p>Source code</p>"},{"location":"man/SQLContext_register.html#description","title":"Description","text":"<p>Register a single frame as a table, using the given name.</p>"},{"location":"man/SQLContext_register.html#usage","title":"Usage","text":"<pre><code>SQLContext_register(name, frame)\n</code></pre>"},{"location":"man/SQLContext_register.html#arguments","title":"Arguments","text":"<code>name</code>  A string name to register the frame as.  <code>frame</code>  A LazyFrame like object to register."},{"location":"man/SQLContext_register.html#value","title":"Value","text":"<p>Returns the SQLContext_class object invisibly.</p>"},{"location":"man/SQLContext_register.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nctx = pl$SQLContext()\nctx$register(\"mtcars\", mtcars)\n\nctx$execute(\"SELECT * FROM mtcars LIMIT 5\")$collect()\n</code></pre> <pre><code>#&gt; shape: (5, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/SQLContext_register_many.html","title":"Register multiple data as tables","text":"<p>Source code</p>"},{"location":"man/SQLContext_register_many.html#description","title":"Description","text":"<p>Register multiple frames as tables.</p>"},{"location":"man/SQLContext_register_many.html#usage","title":"Usage","text":"<pre><code>SQLContext_register_many(...)\n</code></pre>"},{"location":"man/SQLContext_register_many.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Name-value pairs of LazyFrame like objects to register."},{"location":"man/SQLContext_register_many.html#value","title":"Value","text":"<p>Returns the SQLContext_class object invisibly.</p>"},{"location":"man/SQLContext_register_many.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nctx = pl$SQLContext()\nr_df = mtcars\npl_df = pl$DataFrame(mtcars)\npl_lf = pl$LazyFrame(mtcars)\n\nctx$register_many(r_df = r_df, pl_df = pl_df, pl_lf = pl_lf)\n\nctx$execute(\n  \"SELECT * FROM r_df\n  UNION ALL\n  SELECT * FROM pl_df\n  UNION ALL\n  SELECT * FROM pl_lf\"\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (96, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/SQLContext_tables.html","title":"List registered tables","text":"<p>Source code</p>"},{"location":"man/SQLContext_tables.html#description","title":"Description","text":"<p>Return a character vector of the registered table names.</p>"},{"location":"man/SQLContext_tables.html#usage","title":"Usage","text":"<pre><code>SQLContext_tables()\n</code></pre>"},{"location":"man/SQLContext_tables.html#value","title":"Value","text":"<p>A character vector of the registered table names.</p>"},{"location":"man/SQLContext_tables.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nctx = pl$SQLContext()\nctx$tables()\n</code></pre> <pre><code>#&gt; character(0)\n</code></pre> <pre><code>ctx$register(\"df1\", mtcars)\nctx$tables()\n</code></pre> <pre><code>#&gt; [1] \"df1\"\n</code></pre> <pre><code>ctx$register(\"df2\", mtcars)\nctx$tables()\n</code></pre> <pre><code>#&gt; [1] \"df1\" \"df2\"\n</code></pre>"},{"location":"man/SQLContext_unregister.html","title":"Unregister tables by name","text":"<p>Source code</p>"},{"location":"man/SQLContext_unregister.html#description","title":"Description","text":"<p>Unregister tables by name.</p>"},{"location":"man/SQLContext_unregister.html#usage","title":"Usage","text":"<pre><code>SQLContext_unregister(names)\n</code></pre>"},{"location":"man/SQLContext_unregister.html#arguments","title":"Arguments","text":"<code>names</code>  A character vector of table names to unregister."},{"location":"man/SQLContext_unregister.html#value","title":"Value","text":"<p>Returns the SQLContext_class object invisibly.</p>"},{"location":"man/SQLContext_unregister.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# Initialise a new SQLContext and register the given tables.\nctx = pl$SQLContext(x = mtcars, y = mtcars, z = mtcars)\nctx$tables()\n</code></pre> <pre><code>#&gt; [1] \"x\" \"y\" \"z\"\n</code></pre> <pre><code># Unregister some tables.\nctx$unregister(c(\"x\", \"y\"))\nctx$tables()\n</code></pre> <pre><code>#&gt; [1] \"z\"\n</code></pre>"},{"location":"man/Series_add.html","title":"Add Series","text":"<p>Source code</p>"},{"location":"man/Series_add.html#description","title":"Description","text":"<p>Method equivalent of addition operator <code>series + other</code>.</p>"},{"location":"man/Series_add.html#usage","title":"Usage","text":"<pre><code>Series_add(other)\n</code></pre>"},{"location":"man/Series_add.html#arguments","title":"Arguments","text":"<code>other</code>  Series like object of numeric or string values. Converted to Series by <code>as_polars_series()</code> in this method."},{"location":"man/Series_add.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_add.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> </ul>"},{"location":"man/Series_add.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:3)$add(as_polars_series(11:13))\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  12\n#&gt;  14\n#&gt;  16\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$add(11:13)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  12\n#&gt;  14\n#&gt;  16\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$add(1L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(\"a\")$add(\"-z\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [str]\n#&gt; [\n#&gt;  \"a-z\"\n#&gt; ]\n</code></pre>"},{"location":"man/Series_alias.html","title":"Change name of Series","text":"<p>Source code</p>"},{"location":"man/Series_alias.html#description","title":"Description","text":"<p>Change name of Series</p>"},{"location":"man/Series_alias.html#usage","title":"Usage","text":"<pre><code>Series_alias(name)\n</code></pre>"},{"location":"man/Series_alias.html#arguments","title":"Arguments","text":"<code>name</code>  New name."},{"location":"man/Series_alias.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_alias.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:3, name = \"alice\")$alias(\"bob\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'bob' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre>"},{"location":"man/Series_all.html","title":"Reduce Boolean Series with ALL","text":"<p>Source code</p>"},{"location":"man/Series_all.html#description","title":"Description","text":"<p>Reduce Boolean Series with ALL</p>"},{"location":"man/Series_all.html#usage","title":"Usage","text":"<pre><code>Series_all()\n</code></pre>"},{"location":"man/Series_all.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/Series_all.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(c(TRUE, TRUE, NA))$all()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/Series_any.html","title":"Reduce boolean Series with ANY","text":"<p>Source code</p>"},{"location":"man/Series_any.html#description","title":"Description","text":"<p>Reduce boolean Series with ANY</p>"},{"location":"man/Series_any.html#usage","title":"Usage","text":"<pre><code>Series_any()\n</code></pre>"},{"location":"man/Series_any.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/Series_any.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(c(TRUE, FALSE, NA))$any()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/Series_append.html","title":"Append two Series","text":"<p>Source code</p>"},{"location":"man/Series_append.html#description","title":"Description","text":"<p>Append two Series</p>"},{"location":"man/Series_append.html#usage","title":"Usage","text":"<pre><code>Series_append(other, immutable = TRUE)\n</code></pre>"},{"location":"man/Series_append.html#arguments","title":"Arguments","text":"<code>other</code>  Series to append.  <code>immutable</code>  Should the <code>other</code> Series be immutable? Default is <code>TRUE</code>."},{"location":"man/Series_append.html#details","title":"Details","text":"<p>If <code>immutable = FALSE</code>, the Series object will not behave as immutable. This means that appending to this Series will affect any variable pointing to this memory location. This will break normal scoping rules of R. Setting <code>immutable = FALSE</code> is discouraged as it can have undesirable side effects and cloning Polars Series is a cheap operation.</p>"},{"location":"man/Series_append.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_append.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# default immutable behavior, s_imut and s_imut_copy stay the same\ns_imut = as_polars_series(1:3)\ns_imut_copy = s_imut\ns_new = s_imut$append(as_polars_series(1:3))\ns_new\n</code></pre> <pre><code>#&gt; polars Series: shape: (6,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre> <pre><code># the original Series didn't change\ns_imut\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre> <pre><code>s_imut_copy\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre> <pre><code># enabling mutable behavior requires setting a global option\nwithr::with_options(\n  list(polars.strictly_immutable = FALSE),\n  {\n    s_mut = as_polars_series(1:3)\n    s_mut_copy = s_mut\n    s_new = s_mut$append(as_polars_series(1:3), immutable = FALSE)\n    print(s_new)\n\n    # the original Series also changed since it's mutable\n    print(s_mut)\n    print(s_mut_copy)\n  }\n)\n</code></pre> <pre><code>#&gt; polars Series: shape: (6,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n#&gt; polars Series: shape: (6,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n#&gt; polars Series: shape: (6,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre>"},{"location":"man/Series_arg_max.html","title":"Index of max value","text":"<p>Source code</p>"},{"location":"man/Series_arg_max.html#description","title":"Description","text":"<p>Note that this is 0-indexed.</p>"},{"location":"man/Series_arg_max.html#usage","title":"Usage","text":"<pre><code>Series_arg_max()\n</code></pre>"},{"location":"man/Series_arg_max.html#value","title":"Value","text":"<p>A numeric value</p>"},{"location":"man/Series_arg_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(c(5, 1))$arg_max()\n</code></pre> <pre><code>#&gt; [1] 0\n</code></pre>"},{"location":"man/Series_arg_min.html","title":"Index of min value","text":"<p>Source code</p>"},{"location":"man/Series_arg_min.html#description","title":"Description","text":"<p>Note that this is 0-indexed.</p>"},{"location":"man/Series_arg_min.html#usage","title":"Usage","text":"<pre><code>Series_arg_min()\n</code></pre>"},{"location":"man/Series_arg_min.html#value","title":"Value","text":"<p>A numeric value</p>"},{"location":"man/Series_arg_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(c(5, 1))$arg_min()\n</code></pre> <pre><code>#&gt; [1] 1\n</code></pre>"},{"location":"man/Series_chunk_lengths.html","title":"Lengths of Series memory chunks","text":"<p>Source code</p>"},{"location":"man/Series_chunk_lengths.html#description","title":"Description","text":"<p>Lengths of Series memory chunks</p>"},{"location":"man/Series_chunk_lengths.html#usage","title":"Usage","text":"<pre><code>Series_chunk_lengths()\n</code></pre>"},{"location":"man/Series_chunk_lengths.html#value","title":"Value","text":"<p>Numeric vector. Output length is the number of chunks, and the sum of the output is equal to the length of the full Series.</p>"},{"location":"man/Series_chunk_lengths.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nchunked_series = c(as_polars_series(1:3), as_polars_series(1:10))\nchunked_series$chunk_lengths()\n</code></pre> <pre><code>#&gt; [1]  3 10\n</code></pre>"},{"location":"man/Series_class.html","title":"Inner workings of the Series-class","text":""},{"location":"man/Series_class.html#description","title":"Description","text":"<p>The <code>Series</code>-class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instantiated <code>Series</code>-object is an <code>externalptr</code> to a lowlevel rust polars Series object. The pointer address is the only statefullness of the Series object on the R side. Any other state resides on the rust side. The S3 method <code>.DollarNames.RPolarsSeries</code> exposes all public <code>$foobar()</code>-methods which are callable onto the object. Most methods return another <code>Series</code>-class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from <code>.pr$Series$methodname()</code>, also all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications.</p>"},{"location":"man/Series_class.html#details","title":"Details","text":"<p>Check out the source code in R/Series_frame.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to .pr and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed <code>Series_</code>.</p>"},{"location":"man/Series_class.html#active-bindings","title":"Active bindings","text":"dtype  <p><code>$dtype</code> returns the data type of the Series.</p>  flags  <p><code>$flags</code> returns a named list with flag names and their values.</p> <p>Flags are used internally to avoid doing unnecessary computations, such as sorting a variable that we know is already sorted. The number of flags varies depending on the column type: columns of type <code>array</code> and <code>list</code> have the flags <code>SORTED_ASC</code>, <code>SORTED_DESC</code>, and <code>FAST_EXPLODE</code>, while other column types only have the former two.</p> <ul> <li> <code>SORTED_ASC</code> is set to <code>TRUE</code> when we sort a column in increasing order, so that we can use this information later on to avoid re-sorting it.  </li> <li> <code>SORTED_DESC</code> is similar but applies to sort in decreasing order.  </li> </ul>  name  <p><code>$name</code> returns the name of the Series.</p>  shape  <p><code>$shape</code> returns a numeric vector of length two with the number of length of the Series and width of the Series (always 1).</p>"},{"location":"man/Series_class.html#expression-methods","title":"Expression methods","text":"<p>Series stores most of all Expr methods.</p> <p>Some of these are stored in sub-namespaces.</p>  arr  <p><code>$arr</code> stores all array related methods.</p>  bin  <p><code>$bin</code> stores all binary related methods.</p>  cat  <p><code>$cat</code> stores all categorical related methods.</p>  dt  <p><code>$dt</code> stores all temporal related methods.</p>  list  <p><code>$list</code> stores all list related methods.</p>  str  <p><code>$str</code> stores all string related methods.</p>  struct  <p><code>$struct</code> stores all struct related methods.</p>"},{"location":"man/Series_class.html#conversion-to-r-data-types-considerations","title":"Conversion to R data types considerations","text":"<p>When converting Polars objects, such as DataFrames to R objects, for example via the <code>as.data.frame()</code> generic function, each type in the Polars object is converted to an R type. In some cases, an error may occur because the conversion is not appropriate. In particular, there is a high possibility of an error when converting a Datetime type without a time zone. A Datetime type without a time zone in Polars is converted to the POSIXct type in R, which takes into account the time zone in which the R session is running (which can be checked with the <code>Sys.timezone()</code> function). In this case, if ambiguous times are included, a conversion error will occur. In such cases, change the session time zone using <code>Sys.setenv(TZ = \"UTC\")</code> and then perform the conversion, or use the <code>$dt$replace_time_zone()</code> method on the Datetime type column to explicitly specify the time zone before conversion.</p> <pre># Due to daylight savings, clocks were turned forward 1 hour on Sunday, March 8, 2020, 2:00:00 am\n# so this particular date-time doesn't exist\nnon_existent_time = as_polars_series(\"2020-03-08 02:00:00\")\\$str\\$strptime(pl\\$Datetime(), \"%F %T\")\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    tryCatch(\n      # This causes an error due to the time zone (the `TZ` env var is affected).\n      as.vector(non_existent_time),\n      error = function(e) e\n    )\n  }\n)\n#&gt; &lt;error: in to_r: ComputeError(ErrString(\"datetime '2020-03-08 02:00:00' is non-existent in time zone 'America/New_York'. You may be able to use `non_existent='null'` to return `null` in this case.\")) When calling: devtools::document()&gt;\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    # This is safe.\n    as.vector(non_existent_time\\$dt\\$replace_time_zone(\"UTC\"))\n  }\n)\n#&gt; [1] \"2020-03-08 02:00:00 UTC\"\n</pre>"},{"location":"man/Series_class.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# make a Series\ns = as_polars_series(c(1:3, 1L))\n\n# call an active binding\ns$shape\n</code></pre> <pre><code>#&gt; [1] 4 1\n</code></pre> <pre><code># show flags\ns$sort()$flags\n</code></pre> <pre><code>#&gt; $SORTED_ASC\n#&gt; [1] TRUE\n#&gt; \n#&gt; $SORTED_DESC\n#&gt; [1] FALSE\n</code></pre> <pre><code># use Expr method\ns$cos()\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  0.540302\n#&gt;  -0.416147\n#&gt;  -0.989992\n#&gt;  0.540302\n#&gt; ]\n</code></pre> <pre><code># use Expr method in subnamespaces\nas_polars_series(list(3:1, 1:2, NULL))$list$first()\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  3\n#&gt;  1\n#&gt;  null\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(c(1, NA, 2))$str$concat(\"-\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [str]\n#&gt; [\n#&gt;  \"1.0-2.0\"\n#&gt; ]\n</code></pre> <pre><code>s = pl$date_range(\n  as.Date(\"2024-02-18\"), as.Date(\"2024-02-24\"),\n  interval = \"1d\"\n)$to_series()\ns\n</code></pre> <pre><code>#&gt; polars Series: shape: (7,)\n#&gt; Series: '' [date]\n#&gt; [\n#&gt;  2024-02-18\n#&gt;  2024-02-19\n#&gt;  2024-02-20\n#&gt;  2024-02-21\n#&gt;  2024-02-22\n#&gt;  2024-02-23\n#&gt;  2024-02-24\n#&gt; ]\n</code></pre> <pre><code>s$dt$day()\n</code></pre> <pre><code>#&gt; polars Series: shape: (7,)\n#&gt; Series: '' [i8]\n#&gt; [\n#&gt;  18\n#&gt;  19\n#&gt;  20\n#&gt;  21\n#&gt;  22\n#&gt;  23\n#&gt;  24\n#&gt; ]\n</code></pre> <pre><code># show all available methods for Series\npl$show_all_public_methods(\"RPolarsSeries\")\n</code></pre> <pre><code>#&gt; \n#&gt; \n#&gt;     RPolarsSeries class methods, access via object$method() ( environment ):\n#&gt; \n#&gt;        RPolarsSeries ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ approx_n_unique ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ arr ; property function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ bottom_k ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ chunk_lengths ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ clone ; function ]\n#&gt;           [ compare ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cum_count ; function ]\n#&gt;           [ cum_max ; function ]\n#&gt;           [ cum_min ; function ]\n#&gt;           [ cum_prod ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ dtype ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ eq_missing ; function ]\n#&gt;           [ equals ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flags ; property function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ floor_div ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gather ; function ]\n#&gt;           [ gather_every ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ implode ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first_distinct ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_last_distinct ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_numeric ; function ]\n#&gt;           [ is_sorted ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ item ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map_batches ; function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mod ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ neq_missing ; function ]\n#&gt;           [ not ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ peak_max ; function ]\n#&gt;           [ peak_min ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ replace ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rle ; function ]\n#&gt;           [ rle_id ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_frame ; function ]\n#&gt;           [ to_list ; function ]\n#&gt;           [ to_lit ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ to_vector ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ xor ; function ]\n</code></pre>"},{"location":"man/Series_clone.html","title":"Clone a Series","text":"<p>Source code</p>"},{"location":"man/Series_clone.html#description","title":"Description","text":"<p>This makes a very cheap deep copy/clone of an existing <code>Series</code>. Rarely useful as <code>Series</code> are nearly 100% immutable. Any modification of a <code>Series</code> should lead to a clone anyways, but this can be useful when dealing with attributes (see examples).</p>"},{"location":"man/Series_clone.html#usage","title":"Usage","text":"<pre><code>Series_clone()\n</code></pre>"},{"location":"man/Series_clone.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_clone.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf1 = as_polars_series(1:10)\n\n# Make a function to take a Series, add an attribute, and return a Series\ngive_attr = function(data) {\n  attr(data, \"created_on\") = \"2024-01-29\"\n  data\n}\ndf2 = give_attr(df1)\n\n# Problem: the original Series also gets the attribute while it shouldn't!\nattributes(df1)\n</code></pre> <pre><code>#&gt; $class\n#&gt; [1] \"RPolarsSeries\"\n#&gt; \n#&gt; $created_on\n#&gt; [1] \"2024-01-29\"\n</code></pre> <pre><code># Use $clone() inside the function to avoid that\ngive_attr = function(data) {\n  data = data$clone()\n  attr(data, \"created_on\") = \"2024-01-29\"\n  data\n}\ndf1 = as_polars_series(1:10)\ndf2 = give_attr(df1)\n\n# now, the original Series doesn't get this attribute\nattributes(df1)\n</code></pre> <pre><code>#&gt; $class\n#&gt; [1] \"RPolarsSeries\"\n</code></pre>"},{"location":"man/Series_compare.html","title":"Compare Series","text":"<p>Source code</p>"},{"location":"man/Series_compare.html#description","title":"Description","text":"<p>Check the (in)equality of two Series.</p>"},{"location":"man/Series_compare.html#usage","title":"Usage","text":"<pre><code>Series_compare(other, op)\n\n# S3 method for class 'RPolarsSeries'\ns1 == s2\n\n# S3 method for class 'RPolarsSeries'\ns1 != s2\n\n# S3 method for class 'RPolarsSeries'\ns1 &lt; s2\n\n# S3 method for class 'RPolarsSeries'\ns1 &gt; s2\n\n# S3 method for class 'RPolarsSeries'\ns1 &lt;= s2\n\n# S3 method for class 'RPolarsSeries'\ns1 &gt;= s2\n</code></pre>"},{"location":"man/Series_compare.html#arguments","title":"Arguments","text":"<code>other</code>  A Series or something a Series can be created from  <code>op</code>  The chosen operator, must be one of <code>\u201cequal\u201d</code>, <code>\u201cnot_equal\u201d</code>, <code>\u201clt\u201d</code>, <code>\u201cgt\u201d</code>, <code>\u201clt_eq\u201d</code> or <code>\u201cgt_eq\u201d</code> <code>s1</code>  lhs Series  <code>s2</code>  rhs Series or any into Series"},{"location":"man/Series_compare.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_compare.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# We can either use `compare()`...\nas_polars_series(1:5)$compare(as_polars_series(c(1:3, NA_integer_, 10L)), op = \"equal\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [bool]\n#&gt; [\n#&gt;  true\n#&gt;  true\n#&gt;  true\n#&gt;  null\n#&gt;  false\n#&gt; ]\n</code></pre> <pre><code># ... or the more classic way\nas_polars_series(1:5) == as_polars_series(c(1:3, NA_integer_, 10L))\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [bool]\n#&gt; [\n#&gt;  true\n#&gt;  true\n#&gt;  true\n#&gt;  null\n#&gt;  false\n#&gt; ]\n</code></pre>"},{"location":"man/Series_div.html","title":"Divide Series","text":"<p>Source code</p>"},{"location":"man/Series_div.html#description","title":"Description","text":"<p>Method equivalent of division operator <code>series / other</code>.</p>"},{"location":"man/Series_div.html#usage","title":"Usage","text":"<pre><code>Series_div(other)\n</code></pre>"},{"location":"man/Series_div.html#arguments","title":"Arguments","text":"<code>other</code>  Series like object of numeric. Converted to Series by <code>as_polars_series()</code> in this method."},{"location":"man/Series_div.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_div.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> </ul>"},{"location":"man/Series_div.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:3)$div(11:13)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  0\n#&gt;  0\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$div(as_polars_series(11:13))\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  0\n#&gt;  0\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$div(1L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre>"},{"location":"man/Series_equals.html","title":"Are two Series equal?","text":"<p>Source code</p>"},{"location":"man/Series_equals.html#description","title":"Description","text":"<p>This checks whether two Series are equal in values and in their name.</p>"},{"location":"man/Series_equals.html#usage","title":"Usage","text":"<pre><code>Series_equals(other, null_equal = FALSE, strict = FALSE)\n</code></pre>"},{"location":"man/Series_equals.html#arguments","title":"Arguments","text":"<code>other</code>  Series to compare with.  <code>null_equal</code>  If <code>TRUE</code>, consider that null values are equal. Overridden by <code>strict</code>.  <code>strict</code>  If <code>TRUE</code>, do not allow similar DataType comparison. Overrides <code>null_equal</code>."},{"location":"man/Series_equals.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/Series_equals.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:4)$equals(as_polars_series(1:4))\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># names are different\nas_polars_series(1:4, \"bob\")$equals(as_polars_series(1:4))\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code># nulls are different by default\nas_polars_series(c(1:4, NA))$equals(as_polars_series(c(1:4, NA)))\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>as_polars_series(c(1:4, NA))$equals(as_polars_series(c(1:4, NA)), null_equal = TRUE)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># datatypes are ignored by default\nas_polars_series(1:4)$cast(pl$Int16)$equals(as_polars_series(1:4))\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>as_polars_series(1:4)$cast(pl$Int16)$equals(as_polars_series(1:4), strict = TRUE)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/Series_floor_div.html","title":"Floor Divide Series","text":"<p>Source code</p>"},{"location":"man/Series_floor_div.html#description","title":"Description","text":"<p>Method equivalent of floor division operator <code>series %/% other</code>.</p>"},{"location":"man/Series_floor_div.html#usage","title":"Usage","text":"<pre><code>Series_floor_div(other)\n</code></pre>"},{"location":"man/Series_floor_div.html#arguments","title":"Arguments","text":"<code>other</code>  Series like object of numeric. Converted to Series by <code>as_polars_series()</code> in this method."},{"location":"man/Series_floor_div.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_floor_div.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> </ul>"},{"location":"man/Series_floor_div.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:3)$floor_div(11:13)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  0\n#&gt;  0\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$floor_div(as_polars_series(11:13))\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  0\n#&gt;  0\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$floor_div(1L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre>"},{"location":"man/Series_is_numeric.html","title":"Check if the Series is numeric","text":"<p>Source code</p>"},{"location":"man/Series_is_numeric.html#description","title":"Description","text":"<p>This checks whether the Series DataType is in <code>pl$numeric_dtypes</code>.</p>"},{"location":"man/Series_is_numeric.html#usage","title":"Usage","text":"<pre><code>Series_is_numeric()\n</code></pre>"},{"location":"man/Series_is_numeric.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/Series_is_numeric.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:4)$is_numeric()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>as_polars_series(c(\"a\", \"b\", \"c\"))$is_numeric()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>pl$numeric_dtypes\n</code></pre> <pre><code>#&gt; $Int8\n#&gt; DataType: Int8\n#&gt; \n#&gt; $Int16\n#&gt; DataType: Int16\n#&gt; \n#&gt; $Int32\n#&gt; DataType: Int32\n#&gt; \n#&gt; $Int64\n#&gt; DataType: Int64\n#&gt; \n#&gt; $Float32\n#&gt; DataType: Float32\n#&gt; \n#&gt; $Float64\n#&gt; DataType: Float64\n</code></pre>"},{"location":"man/Series_is_sorted.html","title":"Check if the Series is sorted","text":"<p>Source code</p>"},{"location":"man/Series_is_sorted.html#description","title":"Description","text":"<p>Check if the Series is sorted</p>"},{"location":"man/Series_is_sorted.html#usage","title":"Usage","text":"<pre><code>Series_is_sorted(descending = FALSE)\n</code></pre>"},{"location":"man/Series_is_sorted.html#arguments","title":"Arguments","text":"<code>descending</code>  Check if the Series is sorted in descending order."},{"location":"man/Series_is_sorted.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/Series_is_sorted.html#see-also","title":"See Also","text":"<p>Use <code>$set_sorted()</code> to add a \"sorted\" flag to the Series that could be used for faster operations later on.</p>"},{"location":"man/Series_is_sorted.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:4)$sort()$is_sorted()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/Series_item.html","title":"Return the element at the given index","text":"<p>Source code</p>"},{"location":"man/Series_item.html#description","title":"Description","text":"<p>Return the element at the given index</p>"},{"location":"man/Series_item.html#usage","title":"Usage","text":"<pre><code>Series_item(index = NULL)\n</code></pre>"},{"location":"man/Series_item.html#arguments","title":"Arguments","text":"<code>index</code>  Index of the item to return."},{"location":"man/Series_item.html#value","title":"Value","text":"<p>A value of length 1</p>"},{"location":"man/Series_item.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns1 = pl$Series(values = 1)\n\ns1$item()\n</code></pre> <pre><code>#&gt; [1] 1\n</code></pre> <pre><code>s2 = pl$Series(values = 9:7)\n\ns2$cum_sum()$item(-1)\n</code></pre> <pre><code>#&gt; [1] 24\n</code></pre>"},{"location":"man/Series_len.html","title":"Length of a Series","text":"<p>Source code</p>"},{"location":"man/Series_len.html#description","title":"Description","text":"<p>Length of a Series</p>"},{"location":"man/Series_len.html#usage","title":"Usage","text":"<pre><code>Series_len()\n</code></pre>"},{"location":"man/Series_len.html#value","title":"Value","text":"<p>A numeric value</p>"},{"location":"man/Series_len.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:10)$len()\n</code></pre> <pre><code>#&gt; [1] 10\n</code></pre>"},{"location":"man/Series_map_elements.html","title":"Apply every value with an R fun","text":"<p>Source code</p>"},{"location":"man/Series_map_elements.html#description","title":"Description","text":"<p>About as slow as regular non-vectorized R. Similar to using R sapply on a vector.</p>"},{"location":"man/Series_map_elements.html#usage","title":"Usage","text":"<pre><code>Series_map_elements(\n  fun,\n  datatype = NULL,\n  strict_return_type = TRUE,\n  allow_fail_eval = FALSE\n)\n</code></pre>"},{"location":"man/Series_map_elements.html#arguments","title":"Arguments","text":"<code>fun</code>  r function, should take a single value as input and return one.  <code>datatype</code>  DataType of return value. Default NULL means same as input.  <code>strict_return_type</code>  bool, default TRUE: fail on wrong return type, FALSE: convert to polars Null  <code>allow_fail_eval</code>  bool, default FALSE: raise R fun error, TRUE: convert to polars Null"},{"location":"man/Series_map_elements.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_map_elements.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = as_polars_series(letters[1:5], \"ltrs\")\nf = \\(x) paste(x, \":\", as.integer(charToRaw(x)))\ns$map_elements(f, pl$String)\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: 'ltrs_apply' [str]\n#&gt; [\n#&gt;  \"a : 97\"\n#&gt;  \"b : 98\"\n#&gt;  \"c : 99\"\n#&gt;  \"d : 100\"\n#&gt;  \"e : 101\"\n#&gt; ]\n</code></pre> <pre><code># same as\nas_polars_series(sapply(s$to_r(), f), s$name)\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: 'ltrs' [str]\n#&gt; [\n#&gt;  \"a : 97\"\n#&gt;  \"b : 98\"\n#&gt;  \"c : 99\"\n#&gt;  \"d : 100\"\n#&gt;  \"e : 101\"\n#&gt; ]\n</code></pre>"},{"location":"man/Series_max.html","title":"Find the max of a Series","text":"<p>Source code</p>"},{"location":"man/Series_max.html#description","title":"Description","text":"<p>Find the max of a Series</p>"},{"location":"man/Series_max.html#usage","title":"Usage","text":"<pre><code>Series_max()\n</code></pre>"},{"location":"man/Series_max.html#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Series_max.html#value","title":"Value","text":"<p>A numeric value</p>"},{"location":"man/Series_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(c(1:2, NA, 3, 5))$max() # a NA is dropped always\n</code></pre> <pre><code>#&gt; [1] 5\n</code></pre> <pre><code>as_polars_series(c(1:2, NA, 3, NaN, 4, Inf))$max() # NaN carries / poisons\n</code></pre> <pre><code>#&gt; [1] Inf\n</code></pre> <pre><code>as_polars_series(c(1:2, 3, Inf, 4, -Inf, 5))$max() # Inf-Inf is NaN\n</code></pre> <pre><code>#&gt; [1] Inf\n</code></pre>"},{"location":"man/Series_mean.html","title":"Compute the mean of a Series","text":"<p>Source code</p>"},{"location":"man/Series_mean.html#description","title":"Description","text":"<p>Compute the mean of a Series</p>"},{"location":"man/Series_mean.html#usage","title":"Usage","text":"<pre><code>Series_mean()\n</code></pre>"},{"location":"man/Series_mean.html#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Series_mean.html#value","title":"Value","text":"<p>A numeric value</p>"},{"location":"man/Series_mean.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(c(1:2, NA, 3, 5))$mean() # a NA is dropped always\n</code></pre> <pre><code>#&gt; [1] 2.75\n</code></pre> <pre><code>as_polars_series(c(1:2, NA, 3, NaN, 4, Inf))$mean() # NaN carries / poisons\n</code></pre> <pre><code>#&gt; [1] NaN\n</code></pre> <pre><code>as_polars_series(c(1:2, 3, Inf, 4, -Inf, 5))$mean() # Inf-Inf is NaN\n</code></pre> <pre><code>#&gt; [1] NaN\n</code></pre>"},{"location":"man/Series_median.html","title":"Compute the median of a Series","text":"<p>Source code</p>"},{"location":"man/Series_median.html#description","title":"Description","text":"<p>Compute the median of a Series</p>"},{"location":"man/Series_median.html#usage","title":"Usage","text":"<pre><code>Series_median()\n</code></pre>"},{"location":"man/Series_median.html#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Series_median.html#value","title":"Value","text":"<p>A numeric value</p>"},{"location":"man/Series_median.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(c(1:2, NA, 3, 5))$median() # a NA is dropped always\n</code></pre> <pre><code>#&gt; [1] 2.5\n</code></pre> <pre><code>as_polars_series(c(1:2, NA, 3, NaN, 4, Inf))$median() # NaN carries / poisons\n</code></pre> <pre><code>#&gt; [1] 3.5\n</code></pre> <pre><code>as_polars_series(c(1:2, 3, Inf, 4, -Inf, 5))$median() # Inf-Inf is NaN\n</code></pre> <pre><code>#&gt; [1] 3\n</code></pre>"},{"location":"man/Series_min.html","title":"Find the min of a Series","text":"<p>Source code</p>"},{"location":"man/Series_min.html#description","title":"Description","text":"<p>Find the min of a Series</p>"},{"location":"man/Series_min.html#usage","title":"Usage","text":"<pre><code>Series_min()\n</code></pre>"},{"location":"man/Series_min.html#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Series_min.html#value","title":"Value","text":"<p>A numeric value</p>"},{"location":"man/Series_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(c(1:2, NA, 3, 5))$min() # a NA is dropped always\n</code></pre> <pre><code>#&gt; [1] 1\n</code></pre> <pre><code>as_polars_series(c(1:2, NA, 3, NaN, 4, Inf))$min() # NaN carries / poisons\n</code></pre> <pre><code>#&gt; [1] 1\n</code></pre> <pre><code>as_polars_series(c(1:2, 3, Inf, 4, -Inf, 5))$min() # Inf-Inf is NaN\n</code></pre> <pre><code>#&gt; [1] -Inf\n</code></pre>"},{"location":"man/Series_mod.html","title":"Modulo Series","text":"<p>Source code</p>"},{"location":"man/Series_mod.html#description","title":"Description","text":"<p>Method equivalent of modulo operator <code>series %% other</code>.</p>"},{"location":"man/Series_mod.html#usage","title":"Usage","text":"<pre><code>Series_mod(other)\n</code></pre>"},{"location":"man/Series_mod.html#arguments","title":"Arguments","text":"<code>other</code>  Series like object of numeric. Converted to Series by <code>as_polars_series()</code> in this method."},{"location":"man/Series_mod.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_mod.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> </ul>"},{"location":"man/Series_mod.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:4)$mod(2L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  0\n#&gt;  1\n#&gt;  0\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$mod(as_polars_series(11:13))\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$mod(1L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  0\n#&gt;  0\n#&gt; ]\n</code></pre>"},{"location":"man/Series_mul.html","title":"Multiply Series","text":"<p>Source code</p>"},{"location":"man/Series_mul.html#description","title":"Description","text":"<p>Method equivalent of multiplication operator <code>series * other</code>.</p>"},{"location":"man/Series_mul.html#usage","title":"Usage","text":"<pre><code>Series_mul(other)\n</code></pre>"},{"location":"man/Series_mul.html#arguments","title":"Arguments","text":"<code>other</code>  Series like object of numeric. Converted to Series by <code>as_polars_series()</code> in this method."},{"location":"man/Series_mul.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_mul.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> </ul>"},{"location":"man/Series_mul.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:3)$mul(11:13)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  11\n#&gt;  24\n#&gt;  39\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$mul(as_polars_series(11:13))\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  11\n#&gt;  24\n#&gt;  39\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$mul(1L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre>"},{"location":"man/Series_n_unique.html","title":"Count unique values in Series","text":"<p>Source code</p>"},{"location":"man/Series_n_unique.html#description","title":"Description","text":"<p>Count unique values in Series</p>"},{"location":"man/Series_n_unique.html#usage","title":"Usage","text":"<pre><code>Series_n_unique()\n</code></pre>"},{"location":"man/Series_n_unique.html#value","title":"Value","text":"<p>A numeric value</p>"},{"location":"man/Series_n_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(c(1, 2, 1, 4, 4, 1, 5))$n_unique()\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre>"},{"location":"man/Series_pow.html","title":"Power Series","text":"<p>Source code</p>"},{"location":"man/Series_pow.html#description","title":"Description","text":"<p>Method equivalent of power operator <code>series ^ other</code>.</p>"},{"location":"man/Series_pow.html#usage","title":"Usage","text":"<pre><code>Series_pow(exponent)\n</code></pre>"},{"location":"man/Series_pow.html#arguments","title":"Arguments","text":"<code>exponent</code>  Series like object of numeric. Converted to Series by <code>as_polars_series()</code> in this method."},{"location":"man/Series_pow.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_pow.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> </ul>"},{"location":"man/Series_pow.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = as_polars_series(1:4, name = \"foo\")\n\ns$pow(3L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: 'foo' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  8.0\n#&gt;  27.0\n#&gt;  64.0\n#&gt; ]\n</code></pre>"},{"location":"man/Series_print.html","title":"Print Series","text":"<p>Source code</p>"},{"location":"man/Series_print.html#description","title":"Description","text":"<p>Print Series</p>"},{"location":"man/Series_print.html#usage","title":"Usage","text":"<pre><code>Series_print()\n</code></pre>"},{"location":"man/Series_print.html#value","title":"Value","text":"<p>self</p>"},{"location":"man/Series_print.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:3)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre>"},{"location":"man/Series_rename.html","title":"Rename a series","text":"<p>Source code</p>"},{"location":"man/Series_rename.html#description","title":"Description","text":"<p>Rename a series</p>"},{"location":"man/Series_rename.html#usage","title":"Usage","text":"<pre><code>Series_rename(name, in_place = FALSE)\n</code></pre>"},{"location":"man/Series_rename.html#arguments","title":"Arguments","text":"<code>name</code>  New name.  <code>in_place</code>  Rename in-place, which breaks immutability. If <code>TRUE</code>, you need to run <code>options(polars.strictly_immutable = FALSE)</code> before, otherwise it will throw an error."},{"location":"man/Series_rename.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_rename.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:4, \"bob\")$rename(\"alice\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: 'alice' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre>"},{"location":"man/Series_rep.html","title":"Duplicate and concatenate a series","text":"<p>Source code</p>"},{"location":"man/Series_rep.html#description","title":"Description","text":"<p>Note that this function doesn\u2019t exist in Python Polars.</p>"},{"location":"man/Series_rep.html#usage","title":"Usage","text":"<pre><code>Series_rep(n, rechunk = TRUE)\n</code></pre>"},{"location":"man/Series_rep.html#arguments","title":"Arguments","text":"<code>n</code>  Number of times to repeat  <code>rechunk</code>  If <code>TRUE</code> (default), reallocate object in memory which can speed up some calculations. If <code>FALSE</code>, the Series will take less space in memory."},{"location":"man/Series_rep.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_rep.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:2, \"bob\")$rep(3)\n</code></pre> <pre><code>#&gt; polars Series: shape: (6,)\n#&gt; Series: 'bob' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  1\n#&gt;  2\n#&gt;  1\n#&gt;  2\n#&gt; ]\n</code></pre>"},{"location":"man/Series_set_sorted.html","title":"Set a sorted flag on a Series","text":"<p>Source code</p>"},{"location":"man/Series_set_sorted.html#description","title":"Description","text":"<p>Set a sorted flag on a Series</p>"},{"location":"man/Series_set_sorted.html#usage","title":"Usage","text":"<pre><code>Series_set_sorted(descending = FALSE, in_place = FALSE)\n</code></pre>"},{"location":"man/Series_set_sorted.html#arguments","title":"Arguments","text":"<code>descending</code>  Sort the columns in descending order.  <code>in_place</code>  If <code>TRUE</code>, this will set the flag mutably and return NULL. Remember to use <code>options(polars.strictly_immutable = FALSE)</code> before using this parameter, otherwise an error will occur. If <code>FALSE</code> (default), it will return a cloned Series with the flag."},{"location":"man/Series_set_sorted.html#details","title":"Details","text":"<p>Use <code>$flags</code> to see the values of the sorted flags.</p>"},{"location":"man/Series_set_sorted.html#value","title":"Value","text":"<p>A Series with a flag</p>"},{"location":"man/Series_set_sorted.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = as_polars_series(1:4)$set_sorted()\ns$flags\n</code></pre> <pre><code>#&gt; $SORTED_ASC\n#&gt; [1] TRUE\n#&gt; \n#&gt; $SORTED_DESC\n#&gt; [1] FALSE\n</code></pre>"},{"location":"man/Series_sort.html","title":"Sort a Series","text":"<p>Source code</p>"},{"location":"man/Series_sort.html#description","title":"Description","text":"<p>Sort a Series</p>"},{"location":"man/Series_sort.html#usage","title":"Usage","text":"<pre><code>Series_sort(descending = FALSE, nulls_last = FALSE, in_place = FALSE)\n</code></pre>"},{"location":"man/Series_sort.html#arguments","title":"Arguments","text":"<code>descending</code>  Sort in descending order.  <code>nulls_last</code>  If <code>TRUE</code>, place nulls values last.  <code>in_place</code>  If <code>TRUE</code>, this will set the flag mutably and return NULL. Remember to use <code>options(polars.strictly_immutable = FALSE)</code> before using this parameter, otherwise an error will occur. If <code>FALSE</code> (default), it will return a cloned Series with the flag."},{"location":"man/Series_sort.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_sort.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(c(1.5, NA, 1, NaN, Inf, -Inf))$sort()\n</code></pre> <pre><code>#&gt; polars Series: shape: (6,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  null\n#&gt;  -inf\n#&gt;  1.0\n#&gt;  1.5\n#&gt;  inf\n#&gt;  NaN\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(c(1.5, NA, 1, NaN, Inf, -Inf))$sort(nulls_last = TRUE)\n</code></pre> <pre><code>#&gt; polars Series: shape: (6,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  -inf\n#&gt;  1.0\n#&gt;  1.5\n#&gt;  inf\n#&gt;  NaN\n#&gt;  null\n#&gt; ]\n</code></pre>"},{"location":"man/Series_std.html","title":"Compute the standard deviation of a Series","text":"<p>Source code</p>"},{"location":"man/Series_std.html#description","title":"Description","text":"<p>Compute the standard deviation of a Series</p>"},{"location":"man/Series_std.html#usage","title":"Usage","text":"<pre><code>Series_std(ddof = 1)\n</code></pre>"},{"location":"man/Series_std.html#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/Series_std.html#value","title":"Value","text":"<p>A numeric value</p>"},{"location":"man/Series_std.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:10)$std()\n</code></pre> <pre><code>#&gt; [1] 3.02765\n</code></pre>"},{"location":"man/Series_sub.html","title":"Subtract Series","text":"<p>Source code</p>"},{"location":"man/Series_sub.html#description","title":"Description","text":"<p>Method equivalent of subtraction operator <code>series - other</code>.</p>"},{"location":"man/Series_sub.html#usage","title":"Usage","text":"<pre><code>Series_sub(other)\n</code></pre>"},{"location":"man/Series_sub.html#arguments","title":"Arguments","text":"<code>other</code>  Series like object of numeric. Converted to Series by <code>as_polars_series()</code> in this method."},{"location":"man/Series_sub.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_sub.html#see-also","title":"See Also","text":"<ul> <li>  Arithmetic operators  </li> </ul>"},{"location":"man/Series_sub.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:3)$sub(11:13)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  -10\n#&gt;  -10\n#&gt;  -10\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$sub(as_polars_series(11:13))\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  -10\n#&gt;  -10\n#&gt;  -10\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3)$sub(1L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  1\n#&gt;  2\n#&gt; ]\n</code></pre> <pre><code>1L - as_polars_series(1:3)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  -1\n#&gt;  -2\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(1:3) - 1L\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  1\n#&gt;  2\n#&gt; ]\n</code></pre>"},{"location":"man/Series_sum.html","title":"Compute the sum of a Series","text":"<p>Source code</p>"},{"location":"man/Series_sum.html#description","title":"Description","text":"<p>Compute the sum of a Series</p>"},{"location":"man/Series_sum.html#usage","title":"Usage","text":"<pre><code>Series_sum()\n</code></pre>"},{"location":"man/Series_sum.html#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Series_sum.html#value","title":"Value","text":"<p>A numeric value</p>"},{"location":"man/Series_sum.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(c(1:2, NA, 3, 5))$sum() # a NA is dropped always\n</code></pre> <pre><code>#&gt; [1] 11\n</code></pre> <pre><code>as_polars_series(c(1:2, NA, 3, NaN, 4, Inf))$sum() # NaN poisons the result\n</code></pre> <pre><code>#&gt; [1] NaN\n</code></pre> <pre><code>as_polars_series(c(1:2, 3, Inf, 4, -Inf, 5))$sum() # Inf-Inf is NaN\n</code></pre> <pre><code>#&gt; [1] NaN\n</code></pre>"},{"location":"man/Series_to_frame.html","title":"Convert Series to DataFrame","text":"<p>Source code</p>"},{"location":"man/Series_to_frame.html#description","title":"Description","text":"<p>Convert Series to DataFrame</p>"},{"location":"man/Series_to_frame.html#usage","title":"Usage","text":"<pre><code>Series_to_frame()\n</code></pre>"},{"location":"man/Series_to_frame.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/Series_to_frame.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# default will be a DataFrame with empty name\nas_polars_series(1:4)$to_frame()\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>as_polars_series(1:4, \"bob\")$to_frame()\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bob \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Series_to_lit.html","title":"Convert a Series to literal","text":"<p>Source code</p>"},{"location":"man/Series_to_lit.html#description","title":"Description","text":"<p>Convert a Series to literal</p>"},{"location":"man/Series_to_lit.html#usage","title":"Usage","text":"<pre><code>Series_to_lit()\n</code></pre>"},{"location":"man/Series_to_lit.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Series_to_lit.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(list(1:1, 1:2, 1:3, 1:4))$\n  print()$\n  to_lit()$\n  list$len()$\n  sum()$\n  cast(pl$dtypes$Int8)$\n  to_series()\n</code></pre> <pre><code>#&gt; shape: (4,)\n#&gt; Series: '' [list[i32]]\n#&gt; [\n#&gt;  [1]\n#&gt;  [1, 2]\n#&gt;  [1, 2, 3]\n#&gt;  [1, 2, \u2026 4]\n#&gt; ]\n\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i8]\n#&gt; [\n#&gt;  10\n#&gt; ]\n</code></pre>"},{"location":"man/Series_to_r.html","title":"Convert Series to R vector or list","text":"<p>Source code</p>"},{"location":"man/Series_to_r.html#description","title":"Description","text":"<p><code>$to_r()</code> automatically returns an R vector or list based on the Polars DataType. It is possible to force the output type by using <code>$to_vector()</code> or <code>$to_list()</code>.</p>"},{"location":"man/Series_to_r.html#usage","title":"Usage","text":"<pre><code>Series_to_r(int64_conversion = polars_options()\\$int64_conversion)\n\nSeries_to_vector(int64_conversion = polars_options()\\$int64_conversion)\n\nSeries_to_list(int64_conversion = polars_options()\\$int64_conversion)\n</code></pre>"},{"location":"man/Series_to_r.html#arguments","title":"Arguments","text":"<code>int64_conversion</code>   How should Int64 values be handled when converting a polars object to R?  <ul> <li> <code>\u201cdouble\u201d</code> (default) converts the integer values to double.  </li> <li> <code>\u201cbit64\u201d</code> uses <code>bit64::as.integer64()</code> to do the conversion (requires the package <code>bit64</code> to be attached).  </li> <li> <code>\u201cstring\u201d</code> converts Int64 values to character.  </li> </ul>"},{"location":"man/Series_to_r.html#value","title":"Value","text":"<p>R list or vector</p>"},{"location":"man/Series_to_r.html#conversion-to-r-data-types-considerations","title":"Conversion to R data types considerations","text":"<p>When converting Polars objects, such as DataFrames to R objects, for example via the <code>as.data.frame()</code> generic function, each type in the Polars object is converted to an R type. In some cases, an error may occur because the conversion is not appropriate. In particular, there is a high possibility of an error when converting a Datetime type without a time zone. A Datetime type without a time zone in Polars is converted to the POSIXct type in R, which takes into account the time zone in which the R session is running (which can be checked with the <code>Sys.timezone()</code> function). In this case, if ambiguous times are included, a conversion error will occur. In such cases, change the session time zone using <code>Sys.setenv(TZ = \"UTC\")</code> and then perform the conversion, or use the <code>$dt$replace_time_zone()</code> method on the Datetime type column to explicitly specify the time zone before conversion.</p> <pre># Due to daylight savings, clocks were turned forward 1 hour on Sunday, March 8, 2020, 2:00:00 am\n# so this particular date-time doesn't exist\nnon_existent_time = as_polars_series(\"2020-03-08 02:00:00\")\\$str\\$strptime(pl\\$Datetime(), \"%F %T\")\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    tryCatch(\n      # This causes an error due to the time zone (the `TZ` env var is affected).\n      as.vector(non_existent_time),\n      error = function(e) e\n    )\n  }\n)\n#&gt; &lt;error: in to_r: ComputeError(ErrString(\"datetime '2020-03-08 02:00:00' is non-existent in time zone 'America/New_York'. You may be able to use `non_existent='null'` to return `null` in this case.\")) When calling: devtools::document()&gt;\n\nwithr::with_envvar(\n  new = c(TZ = \"America/New_York\"),\n  {\n    # This is safe.\n    as.vector(non_existent_time\\$dt\\$replace_time_zone(\"UTC\"))\n  }\n)\n#&gt; [1] \"2020-03-08 02:00:00 UTC\"\n</pre>"},{"location":"man/Series_to_r.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Series with non-list type\nseries_vec = as_polars_series(letters[1:3])\n\nseries_vec$to_r() # as vector because Series DataType is not list (is String)\n</code></pre> <pre><code>#&gt; [1] \"a\" \"b\" \"c\"\n</code></pre> <pre><code>series_vec$to_list() # implicit call as.list(), convert to list\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] \"a\"\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"b\"\n#&gt; \n#&gt; [[3]]\n#&gt; [1] \"c\"\n</code></pre> <pre><code>series_vec$to_vector() # implicit call unlist(), same as to_r() as already vector\n</code></pre> <pre><code>#&gt; [1] \"a\" \"b\" \"c\"\n</code></pre> <pre><code># make a Series with nested lists\nseries_list = as_polars_series(\n  list(\n    list(c(1:5, NA_integer_)),\n    list(1:2, NA_integer_)\n  )\n)\nseries_list\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [list[list[i32]]]\n#&gt; [\n#&gt;  [[1, 2, \u2026 null]]\n#&gt;  [[1, 2], [null]]\n#&gt; ]\n</code></pre> <pre><code>series_list$to_r() # as list because Series DataType is list\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [[1]][[1]]\n#&gt; [1]  1  2  3  4  5 NA\n#&gt; \n#&gt; \n#&gt; [[2]]\n#&gt; [[2]][[1]]\n#&gt; [1] 1 2\n#&gt; \n#&gt; [[2]][[2]]\n#&gt; [1] NA\n</code></pre> <pre><code>series_list$to_list() # implicit call as.list(), same as to_r() as already list\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [[1]][[1]]\n#&gt; [1]  1  2  3  4  5 NA\n#&gt; \n#&gt; \n#&gt; [[2]]\n#&gt; [[2]][[1]]\n#&gt; [1] 1 2\n#&gt; \n#&gt; [[2]][[2]]\n#&gt; [1] NA\n</code></pre> <pre><code>series_list$to_vector() # implicit call unlist(), append into a vector\n</code></pre> <pre><code>#&gt; [1]  1  2  3  4  5 NA  1  2 NA\n</code></pre>"},{"location":"man/Series_value_counts.html","title":"Count the occurrences of unique values","text":"<p>Source code</p>"},{"location":"man/Series_value_counts.html#description","title":"Description","text":"<p>Count the occurrences of unique values</p>"},{"location":"man/Series_value_counts.html#usage","title":"Usage","text":"<pre><code>Series_value_counts(sort = TRUE, parallel = FALSE)\n</code></pre>"},{"location":"man/Series_value_counts.html#arguments","title":"Arguments","text":"<code>sort</code>  Ensure the output is sorted from most values to least.  <code>parallel</code>  Better to turn this off in the aggregation context, as it can lead to contention."},{"location":"man/Series_value_counts.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/Series_value_counts.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(iris$Species, name = \"flower species\")$value_counts()\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 flower species \u2506 count \u2502\n#&gt; \u2502 ---            \u2506 ---   \u2502\n#&gt; \u2502 cat            \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa         \u2506 50    \u2502\n#&gt; \u2502 versicolor     \u2506 50    \u2502\n#&gt; \u2502 virginica      \u2506 50    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Series_var.html","title":"Compute the variance of a Series","text":"<p>Source code</p>"},{"location":"man/Series_var.html#description","title":"Description","text":"<p>Compute the variance of a Series</p>"},{"location":"man/Series_var.html#usage","title":"Usage","text":"<pre><code>Series_var(ddof = 1)\n</code></pre>"},{"location":"man/Series_var.html#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/Series_var.html#value","title":"Value","text":"<p>A numeric value</p>"},{"location":"man/Series_var.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:10)$var()\n</code></pre> <pre><code>#&gt; [1] 9.166667\n</code></pre>"},{"location":"man/as_polars_df.html","title":"To polars DataFrame","text":"<p>Source code</p>"},{"location":"man/as_polars_df.html#description","title":"Description","text":"<p><code>as_polars_df()</code> is a generic function that converts an R object to a polars DataFrame.</p>"},{"location":"man/as_polars_df.html#usage","title":"Usage","text":"<pre><code>as_polars_df(x, ...)\n\n# Default S3 method:\nas_polars_df(x, ...)\n\n# S3 method for class 'data.frame'\nas_polars_df(\n  x,\n  ...,\n  rownames = NULL,\n  make_names_unique = TRUE,\n  schema = NULL,\n  schema_overrides = NULL\n)\n\n# S3 method for class 'RPolarsDataFrame'\nas_polars_df(x, ...)\n\n# S3 method for class 'RPolarsGroupBy'\nas_polars_df(x, ...)\n\n# S3 method for class 'RPolarsRollingGroupBy'\nas_polars_df(x, ...)\n\n# S3 method for class 'RPolarsDynamicGroupBy'\nas_polars_df(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nas_polars_df(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nas_polars_df(\n  x,\n  n_rows = Inf,\n  ...,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE,\n  collect_in_background = FALSE\n)\n\n# S3 method for class 'RPolarsLazyGroupBy'\nas_polars_df(x, ...)\n\n# S3 method for class 'ArrowTabular'\nas_polars_df(x, ..., rechunk = TRUE, schema = NULL, schema_overrides = NULL)\n\n# S3 method for class 'nanoarrow_array'\nas_polars_df(x, ...)\n\n# S3 method for class 'nanoarrow_array_stream'\nas_polars_df(x, ...)\n</code></pre>"},{"location":"man/as_polars_df.html#arguments","title":"Arguments","text":"<code>x</code>  Object to convert to a polars DataFrame.  <code>\u2026</code>  Additional arguments passed to methods.  <code>rownames</code>   How to treat existing row names of a data frame:  <ul> <li> <code>NULL</code>: Remove row names. This is the default.  </li> <li>  A string: The name of a new column, which will contain the row names. If <code>x</code> already has a column with that name, an error is thrown.  </li> </ul> <code>make_names_unique</code>  A logical flag to replace duplicated column names with unique names. If <code>FALSE</code> and there are duplicated column names, an error is thrown.  <code>schema</code>  named list of DataTypes, or character vector of column names. Should match the number of columns in <code>x</code> and correspond to each column in <code>x</code> by position. If a column in <code>x</code> does not match the name or type at the same position, it will be renamed/recast. If <code>NULL</code> (default), convert columns as is.  <code>schema_overrides</code>  named list of DataTypes. Cast some columns to the DataType.  <code>n_rows</code>  Number of rows to fetch. Defaults to <code>Inf</code>, meaning all rows.  <code>type_coercion</code>  Logical. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Logical. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Logical. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Logical. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Logical. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Logical. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Logical. Common subexpressions will be cached and reused.  <code>streaming</code>  Logical. Run parts of the query in a streaming fashion (this is in an alpha state).  <code>no_optimization</code>  Logical. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Logical. Use existing optimization settings regardless the settings specified in this function call.  <code>collect_in_background</code>  Logical. Detach this query from R session. Computation will start in background. Get a handle which later can be converted into the resulting DataFrame. Useful in interactive mode to not lock R session.  <code>rechunk</code>  A logical flag (default <code>TRUE</code>). Make sure that all data of each column is in contiguous memory."},{"location":"man/as_polars_df.html#details","title":"Details","text":"<p>For LazyFrame objects, this function is a shortcut for $collect() or $fetch(), depending on whether the number of rows to fetch is infinite or not.</p>"},{"location":"man/as_polars_df.html#value","title":"Value","text":"<p>a DataFrame</p>"},{"location":"man/as_polars_df.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# Convert the row names of a data frame to a column\nas_polars_df(mtcars, rownames = \"car\")\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 car               \u2506 mpg  \u2506 cyl \u2506 disp  \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---               \u2506 ---  \u2506 --- \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 str               \u2506 f64  \u2506 f64 \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Mazda RX4         \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 Mazda RX4 Wag     \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 Datsun 710        \u2506 22.8 \u2506 4.0 \u2506 108.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 Hornet 4 Drive    \u2506 21.4 \u2506 6.0 \u2506 258.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 Hornet Sportabout \u2506 18.7 \u2506 8.0 \u2506 360.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026                 \u2506 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 Lotus Europa      \u2506 30.4 \u2506 4.0 \u2506 95.1  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 Ford Pantera L    \u2506 15.8 \u2506 8.0 \u2506 351.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 Ferrari Dino      \u2506 19.7 \u2506 6.0 \u2506 145.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 Maserati Bora     \u2506 15.0 \u2506 8.0 \u2506 301.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 Volvo 142E        \u2506 21.4 \u2506 4.0 \u2506 121.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Convert an arrow Table to a polars DataFrame\nat = arrow::arrow_table(x = 1:5, y = 6:10)\nas_polars_df(at)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 6   \u2502\n#&gt; \u2502 2   \u2506 7   \u2502\n#&gt; \u2502 3   \u2506 8   \u2502\n#&gt; \u2502 4   \u2506 9   \u2502\n#&gt; \u2502 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Convert an arrow Table, with renaming all columns\nas_polars_df(\n  at,\n  schema = c(\"a\", \"b\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 6   \u2502\n#&gt; \u2502 2   \u2506 7   \u2502\n#&gt; \u2502 3   \u2506 8   \u2502\n#&gt; \u2502 4   \u2506 9   \u2502\n#&gt; \u2502 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Convert an arrow Table, with renaming and casting all columns\nas_polars_df(\n  at,\n  schema = list(b = pl$Int64, a = pl$String)\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2506 a   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i64 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 6   \u2502\n#&gt; \u2502 2   \u2506 7   \u2502\n#&gt; \u2502 3   \u2506 8   \u2502\n#&gt; \u2502 4   \u2506 9   \u2502\n#&gt; \u2502 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Convert an arrow Table, with casting some columns\nas_polars_df(\n  at,\n  schema_overrides = list(y = pl$String) # cast some columns\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 6   \u2502\n#&gt; \u2502 2   \u2506 7   \u2502\n#&gt; \u2502 3   \u2506 8   \u2502\n#&gt; \u2502 4   \u2506 9   \u2502\n#&gt; \u2502 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Create a polars DataFrame from a data.frame\nlf = as_polars_df(mtcars)$lazy()\n\n# Collect all rows from the LazyFrame\nas_polars_df(lf)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Fetch 5 rows from the LazyFrame\nas_polars_df(lf, 5)\n</code></pre> <pre><code>#&gt; shape: (5, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/as_polars_lf.html","title":"To polars LazyFrame","text":"<p>Source code</p>"},{"location":"man/as_polars_lf.html#description","title":"Description","text":"<p><code>as_polars_lf()</code> is a generic function that converts an R object to a polars LazyFrame. It is basically a shortcut for as_polars_df(x, \u2026) with the $lazy() method.</p>"},{"location":"man/as_polars_lf.html#usage","title":"Usage","text":"<pre><code>as_polars_lf(x, ...)\n\n# Default S3 method:\nas_polars_lf(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nas_polars_lf(x, ...)\n\n# S3 method for class 'RPolarsLazyGroupBy'\nas_polars_lf(x, ...)\n</code></pre>"},{"location":"man/as_polars_lf.html#arguments","title":"Arguments","text":"<code>x</code>  Object to convert to a polars DataFrame.  <code>\u2026</code>  Additional arguments passed to methods."},{"location":"man/as_polars_lf.html#value","title":"Value","text":"<p>a LazyFrame</p>"},{"location":"man/as_polars_lf.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_lf(mtcars)\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/as_polars_series.html","title":"To polars Series","text":"<p>Source code</p>"},{"location":"man/as_polars_series.html#description","title":"Description","text":"<p><code>as_polars_series()</code> is a generic function that converts an R object to a polars Series. It is basically a wrapper for pl$Series().</p>"},{"location":"man/as_polars_series.html#usage","title":"Usage","text":"<pre><code>as_polars_series(x, name = NULL, ...)\n\n# Default S3 method:\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'RPolarsSeries'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'RPolarsExpr'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'RPolarsThen'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'RPolarsChainedThen'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'POSIXlt'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'data.frame'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'vctrs_rcrd'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'Array'\nas_polars_series(x, name = NULL, ..., rechunk = TRUE)\n\n# S3 method for class 'ChunkedArray'\nas_polars_series(x, name = NULL, ..., rechunk = TRUE)\n\n# S3 method for class 'nanoarrow_array'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'nanoarrow_array_stream'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'clock_time_point'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'clock_sys_time'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'clock_zoned_time'\nas_polars_series(x, name = NULL, ...)\n</code></pre>"},{"location":"man/as_polars_series.html#arguments","title":"Arguments","text":"<code>x</code>  Object to convert into a polars Series  <code>name</code>  A string to use as the name of the Series. If <code>NULL</code> (default), the name of <code>x</code> is used or an unnamed Series is created.  <code>\u2026</code>  Additional arguments passed to methods.  <code>rechunk</code>  A logical flag (default <code>TRUE</code>). Make sure that all data is in contiguous memory."},{"location":"man/as_polars_series.html#value","title":"Value","text":"<p>a Series</p>"},{"location":"man/as_polars_series.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:4)\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(list(1:4))\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [list[i32]]\n#&gt; [\n#&gt;  [1, 2, \u2026 4]\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(data.frame(a = 1:4))\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [struct[1]]\n#&gt; [\n#&gt;  {1}\n#&gt;  {2}\n#&gt;  {3}\n#&gt;  {4}\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(pl$Series(1:4, name = \"foo\"))\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: 'foo' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(pl$lit(1:4))\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre>"},{"location":"man/docs_translations.html","title":"Translation definitions across python, R and polars.","text":""},{"location":"man/docs_translations.html#description","title":"Description","text":""},{"location":"man/docs_translations.html#comments-for-how-the-r-and-python-world-translates-into-polars","title":"Comments for how the R and python world translates into polars:","text":"<p>R and python are both high-level glue languages great for Data Science. Rust is a pedantic low-level language with similar use cases as C and C++. Polars is written in ~100k lines of rust and has a rust API. Py-polars the python API for polars, is implemented as an interface with the rust API. r-polars is very parallel to py-polars except it interfaces with R. The performance and behavior are unexpectedly quite similar as the \u2018engine\u2019 is the exact same rust code and data structures.</p>"},{"location":"man/docs_translations.html#format","title":"Format","text":"<p>info</p>"},{"location":"man/docs_translations.html#value","title":"Value","text":"<p>Not applicable</p>"},{"location":"man/docs_translations.html#translation-details","title":"Translation details","text":"R and the integerish  <p>R only has a native Int32 type, no Uint32, Int64, UInt64 , \u2026 types. These days Int32 is getting a bit small, to refer to more rows than ~ 2^31-1. There are packages which provide int64, but the most normal hack\u2019 is to just use floats as \u2018integerish\u2019. There is an unique float64 value for every integer up to about 2^52 which is plenty for all practical concerns. Some polars methods may accept or return a floats even though an integer ideally would be more accurate. Most R functions intermix Int32 (integer) and Float64 (double) seamlessly.</p>  Missingness  <p>R has allocated a value in every vector type to signal missingness, these are collectively called <code>NAs</code>. Polars uses a bool bitmask to signal <code>NA</code>-like missing value and it is called <code>Null</code> and <code>Nulls</code> in plural. Not to confuse with R <code>NULL</code> (see paragraph below). Polars supports missingness for any possible type as it kept separately in the bitmask. In python lists the symbol <code>None</code> can carry a similar meaning. R <code>NA</code> ~ polars <code>Null</code> ~ py-polars <code>[None]</code> (in a py list)</p>  Sorting and comparisons  <p>From writing a lot of tests for all implementations, it appears polars does not have a fully consistent nor well documented behavior, when it comes to comparisons and sorting of floats. Though some general thumb rules do apply: Polars have chosen to define in sorting that <code>Null</code> is a value lower than <code>-Inf</code> as in <code>Expr.arg_min()</code> However except when <code>Null</code> is ignored <code>Expr.min()</code>, there is a <code>Expr.nan_min()</code> but no <code>Expr.nan_min()</code>. <code>NaN</code> is sometimes a value higher than Inf and sometimes regarded as a <code>Null</code>. Polars conventions <code>NaN</code> &gt; <code>Inf</code> &gt; <code>99</code> &gt; <code>-99</code> &gt; <code>-Inf</code> &gt; <code>Null</code> <code>Null == Null</code> yields often times false, sometimes true, sometimes <code>Null</code>. The documentation or examples do not reveal this variations. The best to do, when in doubt, is to do test sort on a small Series/Column of all values.</p>"},{"location":"man/docs_translations.html#r-nan-polars-nan-python","title":"\u2019 R <code>NaN</code> ~ polars <code>NaN</code> ~ python","text":"<p><code>[float(\u201cNaN\u201d)]</code> #only floats have <code>NaN</code>s</p> <p>R <code>Inf</code> ~ polars <code>inf</code> ~ python <code>[float(\u201cinf\u201d)]</code> #only floats have <code>Inf</code></p>  NULL IS NOT Null is not NULL  <p>The R NULL does not exist inside polars frames and series and so on. It resembles the Option::None in the hidden rust code. It resembles the python <code>None</code>. In all three languages the <code>NULL</code>/<code>None</code>/<code>None</code> are used in this context as function argument to signal default behavior or perhaps a deactivated feature. R <code>NULL</code> does NOT translate into the polars bitmask <code>Null</code>, that is <code>NA</code>. R <code>NULL</code> ~ rust-polars <code>Option::None</code> ~ pypolars <code>None</code> #typically used for function arguments</p>  LISTS, FRAMES AND DICTS  <p>The following translations are relevant when loading data into polars. The R list appears similar to python dictionary (hashmap), but is implemented more similar to the python list (array of pointers). R list do support string naming elements via a string vector. In polars both lists (of vectors or series) and data.frames can be used to construct a polars DataFrame, just a as dictionaries would be used in python. In terms of loading in/out data the follow translation holds: R <code>data.frame</code>/<code>list</code> ~ polars <code>DataFrame</code> ~ python <code>dictonary</code></p>  Series and Vectors  <p>The R vector (Integer, Double, Character, \u2026) resembles the Series as both are external from any frame and can be of any length. The implementation is quite different. E.g. <code>for</code>-loop appending to an R vector is considered quite bad for performance. The vector will be fully rewritten in memory for every append. The polars Series has chunked memory allocation, which allows any append data to be written only. However fragmented memory is not great for fast computations and polars objects have a <code>rechunk</code>()-method, to reallocate chunks into one. Rechunk might be called implicitly by polars. In the context of constructing. Series and extracting data , the following translation holds: R <code>vector</code> ~ polars <code>Series</code>/<code>column</code> ~ python <code>list</code></p>  Expressions  <p>The polars Expr do not have any base R counterpart. Expr are analogous to how ggplot split plotting instructions from the rendering. Base R plot immediately pushes any instruction by adding e.g.\u00a0pixels to a .png canvas. <code>ggplot</code> collects instructions and in the end when executed the rendering can be performed with optimization across all instructions. Btw <code>ggplot</code> command-syntax is a monoid meaning the order does not matter, that is not the case for polars Expr. Polars Expr\u2019s can be understood as a DSL (domain specific language) that expresses syntax trees of instructions. R expressions evaluate to syntax trees also, but it difficult to optimize the execution order automatically, without rewriting the code. A great selling point of Polars is that any query will be optimized. Expr are very light-weight symbols chained together.</p>"},{"location":"man/global_rpool_cap.html","title":"Get/set global R session pool capacity (DEPRECATED)","text":""},{"location":"man/global_rpool_cap.html#description","title":"Description","text":"<p>Deprecated. Use polars_options() to get, and pl$set_options() to set.</p>"},{"location":"man/global_rpool_cap.html#usage","title":"Usage","text":"<pre><code>pl_get_global_rpool_cap()\n\npl_set_global_rpool_cap(n)\n</code></pre>"},{"location":"man/global_rpool_cap.html#arguments","title":"Arguments","text":"<code>n</code>  Integer, the capacity limit R sessions to process R code."},{"location":"man/global_rpool_cap.html#details","title":"Details","text":"<p>Background R sessions communicate via polars arrow IPC (series/vectors) or R serialize + shared memory buffers via the rust crate <code>ipc-channel</code>. Multi-process communication has overhead because all data must be serialized/de-serialized and sent via buffers. Using multiple R sessions will likely only give a speed-up in a <code>low io - high cpu</code> scenario. Native polars query syntax runs in threads and have no overhead. Polars has as default double as many thread workers as cores. If any worker are queuing for or using R sessions, other workers can still continue any native polars parts as much as possible.</p>"},{"location":"man/global_rpool_cap.html#value","title":"Value","text":"<p><code>polars_options()$rpool_cap</code> returns the capacity (\"limit\") of co-running external R sessions / processes. <code>polars_options()$rpool_active</code> is the number of R sessions are already spawned in the pool. <code>rpool_cap</code> is the limit of new R sessions to spawn. Anytime a polars thread worker needs a background R session specifically to run R code embedded in a query via <code>$map_batches(\u2026, in_background = TRUE)</code> or <code>$map_elements(\u2026, in_background = TRUE)</code>, it will obtain any R session idling in rpool, or spawn a new R session (process) if <code>capacity</code> is not already reached. If <code>capacity</code> is already reached, the thread worker will sleep and in a R job queue until an R session is idle.</p>"},{"location":"man/global_rpool_cap.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndefault = polars_options()$rpool_cap |&gt; print()\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre> <pre><code>options(polars.rpool_cap = 8)\npolars_options()$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 8\n</code></pre> <pre><code>options(polars.rpool_cap = default)\npolars_options()$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre>"},{"location":"man/is_polars_df.html","title":"Test if the object is a polars DataFrame","text":"<p>Source code</p>"},{"location":"man/is_polars_df.html#description","title":"Description","text":"<p>This function tests if the object is a polars DataFrame.</p>"},{"location":"man/is_polars_df.html#usage","title":"Usage","text":"<pre><code>is_polars_df(x)\n</code></pre>"},{"location":"man/is_polars_df.html#arguments","title":"Arguments","text":"<code>x</code>  An object"},{"location":"man/is_polars_df.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/is_polars_df.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nis_polars_df(mtcars)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>is_polars_df(as_polars_df(mtcars))\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/is_polars_dtype.html","title":"Test if the object a polars DataType","text":"<p>Source code</p>"},{"location":"man/is_polars_dtype.html#description","title":"Description","text":"<p>Test if the object a polars DataType</p>"},{"location":"man/is_polars_dtype.html#usage","title":"Usage","text":"<pre><code>is_polars_dtype(x, include_unknown = FALSE)\n</code></pre>"},{"location":"man/is_polars_dtype.html#arguments","title":"Arguments","text":"<code>x</code>  An object  <code>include_unknown</code>  If <code>FALSE</code> (default), <code>pl$Unknown</code> is considered as an invalid datatype."},{"location":"man/is_polars_dtype.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/is_polars_dtype.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nis_polars_dtype(pl$Int64)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>is_polars_dtype(mtcars)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>is_polars_dtype(pl$Unknown)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>is_polars_dtype(pl$Unknown, include_unknown = TRUE)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/is_polars_lf.html","title":"Test if the object is a polars LazyFrame","text":"<p>Source code</p>"},{"location":"man/is_polars_lf.html#description","title":"Description","text":"<p>This function tests if the object is a polars LazyFrame.</p>"},{"location":"man/is_polars_lf.html#usage","title":"Usage","text":"<pre><code>is_polars_lf(x)\n</code></pre>"},{"location":"man/is_polars_lf.html#arguments","title":"Arguments","text":"<code>x</code>  An object"},{"location":"man/is_polars_lf.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/is_polars_lf.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nis_polars_lf(mtcars)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>is_polars_lf(as_polars_lf(mtcars))\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/is_polars_series.html","title":"Test if the object is a polars Series","text":"<p>Source code</p>"},{"location":"man/is_polars_series.html#description","title":"Description","text":"<p>This function tests if the object is a polars Series.</p>"},{"location":"man/is_polars_series.html#usage","title":"Usage","text":"<pre><code>is_polars_series(x)\n</code></pre>"},{"location":"man/is_polars_series.html#arguments","title":"Arguments","text":"<code>x</code>  An object"},{"location":"man/is_polars_series.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/is_polars_series.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nis_polars_series(1:3)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>is_polars_series(as_polars_series(1:3))\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/pl_DataFrame.html","title":"Create new DataFrame","text":"<p>Source code</p>"},{"location":"man/pl_DataFrame.html#description","title":"Description","text":"<p>Create new DataFrame</p>"},{"location":"man/pl_DataFrame.html#usage","title":"Usage","text":"<pre><code>pl_DataFrame(..., make_names_unique = TRUE, schema = NULL)\n</code></pre>"},{"location":"man/pl_DataFrame.html#arguments","title":"Arguments","text":"<code>\u2026</code>   One of the following:  <ul> <li>  a data.frame or something that inherits data.frame or DataFrame  </li> <li>  a list of mixed vectors and Series of equal length  </li> <li>  mixed vectors and/or Series of equal length  </li> </ul> Columns will be named as of named arguments or alternatively by names of Series or given a placeholder name.  <code>make_names_unique</code>  If <code>TRUE</code> (default), any duplicated names will be prefixed a running number.  <code>schema</code>  A named list that will be used to convert a variable to a specific DataType. See Examples."},{"location":"man/pl_DataFrame.html#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/pl_DataFrame.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  a = list(c(1, 2, 3, 4, 5)), # NB if first column should be a list, wrap it in a Series\n  b = 1:5,\n  c = letters[1:5],\n  d = list(1:1, 1:2, 1:3, 1:4, 1:5)\n) # directly from vectors\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a                 \u2506 b   \u2506 c   \u2506 d           \u2502\n#&gt; \u2502 ---               \u2506 --- \u2506 --- \u2506 ---         \u2502\n#&gt; \u2502 list[f64]         \u2506 i32 \u2506 str \u2506 list[i32]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0, \u2026 5.0] \u2506 1   \u2506 a   \u2506 [1]         \u2502\n#&gt; \u2502 [1.0, 2.0, \u2026 5.0] \u2506 2   \u2506 b   \u2506 [1, 2]      \u2502\n#&gt; \u2502 [1.0, 2.0, \u2026 5.0] \u2506 3   \u2506 c   \u2506 [1, 2, 3]   \u2502\n#&gt; \u2502 [1.0, 2.0, \u2026 5.0] \u2506 4   \u2506 d   \u2506 [1, 2, \u2026 4] \u2502\n#&gt; \u2502 [1.0, 2.0, \u2026 5.0] \u2506 5   \u2506 e   \u2506 [1, 2, \u2026 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># from a list of vectors\npl$DataFrame(list(\n  a = c(1, 2, 3, 4, 5),\n  b = 1:5,\n  c = letters[1:5],\n  d = list(1L, 1:2, 1:3, 1:4, 1:5)\n))\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 d           \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---         \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2506 str \u2506 list[i32]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1   \u2506 a   \u2506 [1]         \u2502\n#&gt; \u2502 2.0 \u2506 2   \u2506 b   \u2506 [1, 2]      \u2502\n#&gt; \u2502 3.0 \u2506 3   \u2506 c   \u2506 [1, 2, 3]   \u2502\n#&gt; \u2502 4.0 \u2506 4   \u2506 d   \u2506 [1, 2, \u2026 4] \u2502\n#&gt; \u2502 5.0 \u2506 5   \u2506 e   \u2506 [1, 2, \u2026 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># from a data.frame\npl$DataFrame(mtcars)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># custom schema\npl$DataFrame(iris, schema = list(Sepal.Length = pl$Float32, Species = pl$String))\n</code></pre> <pre><code>#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f32          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_Field.html","title":"Create Field","text":"<p>Source code</p>"},{"location":"man/pl_Field.html#description","title":"Description","text":"<p>A Field is composed of a name and a data type. Fields are used in Structs-datatypes and Schemas to represent everything of the Series/Column except the raw values.</p>"},{"location":"man/pl_Field.html#usage","title":"Usage","text":"<pre><code>pl_Field(name, datatype)\n</code></pre>"},{"location":"man/pl_Field.html#arguments","title":"Arguments","text":"<code>name</code>  Field name  <code>datatype</code>  DataType"},{"location":"man/pl_Field.html#value","title":"Value","text":"<p>An RPolarsRField object containing its name and its data type.</p>"},{"location":"man/pl_Field.html#active-bindings","title":"Active Bindings","text":"datatype  <p><code>$datatype</code> returns the data type of the Field.</p> <p><code>$datatype = \\&lt;RPolarsDataType&gt;</code> sets the data type of the Field.</p>  name  <p><code>$name</code> returns the name of the Field.</p> <p><code>$name = \u201cnew_name\u201d</code> sets the name of the Field.</p>"},{"location":"man/pl_Field.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nfield = pl$Field(\"city_names\", pl$String)\n\nfield\n</code></pre> <pre><code>#&gt; Field {\n#&gt;     name: \"city_names\",\n#&gt;     dtype: String,\n#&gt; }\n</code></pre> <pre><code>field$datatype\n</code></pre> <pre><code>#&gt; DataType: String\n</code></pre> <pre><code>field$name\n</code></pre> <pre><code>#&gt; [1] \"city_names\"\n</code></pre> <pre><code># Set the new data type\nfield$datatype = pl$Categorical()\nfield$datatype\n</code></pre> <pre><code>#&gt; DataType: Categorical(\n#&gt;     None,\n#&gt;     Physical,\n#&gt; )\n</code></pre> <pre><code># Set the new name\nfield$name = \"CityPoPulations\"\nfield\n</code></pre> <pre><code>#&gt; Field {\n#&gt;     name: \"CityPoPulations\",\n#&gt;     dtype: Categorical(\n#&gt;         None,\n#&gt;         Physical,\n#&gt;     ),\n#&gt; }\n</code></pre>"},{"location":"man/pl_LazyFrame.html","title":"Create new LazyFrame","text":"<p>Source code</p>"},{"location":"man/pl_LazyFrame.html#description","title":"Description","text":"<p>This is simply a convenience function to create <code>LazyFrame</code>s in a quick way. It is a wrapper around <code>pl$DataFrame()$lazy()</code>. Note that this should only be used for making examples and quick demonstrations.</p>"},{"location":"man/pl_LazyFrame.html#usage","title":"Usage","text":"<pre><code>pl_LazyFrame(...)\n</code></pre>"},{"location":"man/pl_LazyFrame.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Anything that is accepted by <code>pl$DataFrame()</code>"},{"location":"man/pl_LazyFrame.html#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/pl_LazyFrame.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(\n  a = list(c(1, 2, 3, 4, 5)),\n  b = 1:5,\n  c = letters[1:5],\n  d = list(1:1, 1:2, 1:3, 1:4, 1:5)\n) # directly from vectors\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; DF [\"a\", \"b\", \"c\", \"d\"]; PROJECT */4 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># from a list of vectors or data.frame\npl$LazyFrame(list(\n  a = c(1, 2, 3, 4, 5),\n  b = 1:5,\n  c = letters[1:5],\n  d = list(1L, 1:2, 1:3, 1:4, 1:5)\n))\n</code></pre> <pre><code>#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; DF [\"a\", \"b\", \"c\", \"d\"]; PROJECT */4 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># custom schema\npl$LazyFrame(\n  iris,\n  schema = list(Sepal.Length = pl$Float32, Species = pl$String)\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f32          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_PTime.html","title":"Store Time in R","text":"<p>Source code</p>"},{"location":"man/pl_PTime.html#description","title":"Description","text":"<p>Store Time in R</p>"},{"location":"man/pl_PTime.html#usage","title":"Usage","text":"<pre><code>pl_PTime(x, tu = c(\"s\", \"ms\", \"us\", \"ns\"), format = \"%H:%M:%S\")\n</code></pre>"},{"location":"man/pl_PTime.html#arguments","title":"Arguments","text":"<code>x</code>  an integer or double vector of n epochs since midnight OR a char vector of char times passed to as.POSIXct converted to seconds.  <code>tu</code>  timeunit either \"s\",\"ms\",\"us\",\"ns\"  <code>format</code>  a format string passed to as.POSIXct format via \u2026"},{"location":"man/pl_PTime.html#details","title":"Details","text":"<p>PTime should probably be replaced with package nanotime or similar.</p> <p>base R is missing encoding of Time since midnight \"s\" \"ms\", \"us\" and \"ns\". The latter \"ns\" is the standard for the polars Time type.</p> <p>Use PTime to convert R doubles and integers and use as input to polars functions which needs a time.</p> <p>Loosely inspired by data.table::ITime which is i32 only. PTime must support polars native timeunit is nanoseconds. The R double(float64) can imitate a i64 ns with full precision within the full range of 24 hours.</p> <p>PTime does not have a time zone and always prints the time as is no matter local machine time zone.</p> <p>An essential difference between R and polars is R prints POSIXct/lt without a timezone in local time. Polars prints Datetime without a timezone label as is (GMT). For POSIXct/lt taged with a timexone(tzone) and Datetime with a timezone(tz) the behavior is the same conversion is intuitive.</p> <p>It appears behavior of R timezones is subject to change a bit in R 4.3.0, see polars unit test test-expr_datetime.R/\"pl$date_range Date lazy/eager\".</p>"},{"location":"man/pl_PTime.html#value","title":"Value","text":"<p>a PTime vector either double or integer, with class \"PTime\" and attribute \"tu\" being either \"s\",\"ms\",\"us\" or \"ns\"</p>"},{"location":"man/pl_PTime.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# make PTime in all time units\npl$PTime(runif(5) * 3600 * 24 * 1E0, tu = \"s\")\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ s ] since midnight\n#&gt; [1] \"04:18:49 val: 15529\" \"10:26:58 val: 37618\" \"00:16:58 val: 1018\" \n#&gt; [4] \"23:35:22 val: 84922\" \"04:07:02 val: 14822\"\n</code></pre> <pre><code>pl$PTime(runif(5) * 3600 * 24 * 1E3, tu = \"ms\")\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ ms ] since midnight\n#&gt; [1] \"20:39:36:855ms val: 74376855\" \"22:36:14:918ms val: 81374918\"\n#&gt; [3] \"20:14:01:534ms val: 72841534\" \"08:46:34:693ms val: 31594693\"\n#&gt; [5] \"12:10:03:179ms val: 43803179\"\n</code></pre> <pre><code>pl$PTime(runif(5) * 3600 * 24 * 1E6, tu = \"us\")\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ us ] since midnight\n#&gt; [1] \"01:13:47:555_626us val: 4427555626\"  \"01:40:13:824_149us val: 6013824149\" \n#&gt; [3] \"16:58:09:532_919us val: 61089532919\" \"01:48:44:771_891us val: 6524771891\" \n#&gt; [5] \"00:12:01:179_793us val: 721179793\"\n</code></pre> <pre><code>pl$PTime(runif(5) * 3600 * 24 * 1E9, tu = \"ns\")\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ ns ] since midnight\n#&gt; [1] \"08:06:20:152_206_122ns val: 29180152206122\"\n#&gt; [2] \"21:48:14:399_549_067ns val: 78494399549067\"\n#&gt; [3] \"00:30:05:950_393_527ns val: 1805950393527\" \n#&gt; [4] \"23:55:02:375_281_602ns val: 86102375281602\"\n#&gt; [5] \"10:40:36:156_396_567ns val: 38436156396567\"\n</code></pre> <pre><code>pl$PTime(\"23:59:59\")\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ s ] since midnight\n#&gt; [1] \"23:59:59 val: 86399\"\n</code></pre> <pre><code>as_polars_series(pl$PTime(runif(5) * 3600 * 24 * 1E0, tu = \"s\"))\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [time]\n#&gt; [\n#&gt;  18:08:33\n#&gt;  06:25:31\n#&gt;  12:04:38\n#&gt;  09:21:07\n#&gt;  11:06:37\n#&gt; ]\n</code></pre> <pre><code>pl$lit(pl$PTime(\"23:59:59\"))$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [time]\n#&gt; [\n#&gt;  23:59:59\n#&gt; ]\n</code></pre> <pre><code>pl$lit(pl$PTime(\"23:59:59\"))$to_r()\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ ns ] since midnight\n#&gt; [1] \"23:59:59:000_000_000ns val: 8.6399e+13\"\n</code></pre>"},{"location":"man/pl_SQLContext.html","title":"Initialise a new SQLContext","text":"<p>Source code</p>"},{"location":"man/pl_SQLContext.html#description","title":"Description","text":"<p>Create a new SQLContext and register the given LazyFrames.</p>"},{"location":"man/pl_SQLContext.html#usage","title":"Usage","text":"<pre><code>pl_SQLContext(...)\n</code></pre>"},{"location":"man/pl_SQLContext.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Name-value pairs of LazyFrame like objects to register."},{"location":"man/pl_SQLContext.html#value","title":"Value","text":"<p>RPolarsSQLContext</p>"},{"location":"man/pl_SQLContext.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nctx = pl$SQLContext(mtcars = mtcars)\nctx\n</code></pre> <pre><code>#&gt; RPolarsSQLContext\n#&gt;   tables: mtcars\n</code></pre>"},{"location":"man/pl_Series.html","title":"Create new Series","text":"<p>Source code</p>"},{"location":"man/pl_Series.html#description","title":"Description","text":"<p>This function is a simple way to convert basic types of vectors provided by base R to the Series class object. For converting more types properly, use the generic function <code>as_polars_series()</code>.</p>"},{"location":"man/pl_Series.html#usage","title":"Usage","text":"<pre><code>pl_Series(..., values = NULL, name = NULL, dtype = NULL, nan_to_null = FALSE)\n</code></pre>"},{"location":"man/pl_Series.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Treated as <code>values</code>, <code>name</code>, and <code>dtype</code> in order. In future versions, the order of the arguments will be changed to <code>pl$Series(name, values, dtype, \u2026, nan_to_null)</code> and <code>\u2026</code> will be ignored.  <code>values</code>  Vector of base R types, or <code>NULL</code> (default). If <code>NULL</code>, empty Series is created.  <code>name</code>  Name of the Series. If <code>NULL</code> (default), an empty string is used.  <code>dtype</code>  One of polars data type or <code>NULL</code>. If not <code>NULL</code>, that data type is used to cast the Series created from the vector to a specific data type internally.  <code>nan_to_null</code>  If <code>TRUE</code>, <code>NaN</code> values contained in the Series are replaced to <code>null</code>. Using the <code>$fill_nan()</code> method internally."},{"location":"man/pl_Series.html#value","title":"Value","text":"<p>Series</p>"},{"location":"man/pl_Series.html#see-also","title":"See Also","text":"<ul> <li> <code>as_polars_series()</code> </li> </ul>"},{"location":"man/pl_Series.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Constructing a Series by specifying name and values positionally (deprecated):\ns = suppressWarnings(pl$Series(1:3, \"a\"))\ns\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'a' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre> <pre><code># Notice that the dtype is automatically inferred as a polars Int32:\ns$dtype\n</code></pre> <pre><code>#&gt; DataType: Int32\n</code></pre> <pre><code># Constructing a Series with a specific dtype:\ns2 = pl$Series(values = 1:3, name = \"a\", dtype = pl$Float32)\ns2\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'a' [f32]\n#&gt; [\n#&gt;  1.0\n#&gt;  2.0\n#&gt;  3.0\n#&gt; ]\n</code></pre>"},{"location":"man/pl_all.html","title":"New Expr referring to all columns","text":"<p>Source code</p>"},{"location":"man/pl_all.html#description","title":"Description","text":"<p>Not to mix up with <code>Expr_object$all()</code> which is a \u2018reduce Boolean columns by AND\u2019 method.</p>"},{"location":"man/pl_all.html#usage","title":"Usage","text":"<pre><code>pl_all(name = NULL)\n</code></pre>"},{"location":"man/pl_all.html#arguments","title":"Arguments","text":"<code>name</code>  Character vector indicating on which columns the AND operation should be applied."},{"location":"man/pl_all.html#value","title":"Value","text":"<p>Boolean literal</p>"},{"location":"man/pl_all.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ntest = pl$DataFrame(col_1 = c(TRUE, TRUE), col_2 = c(TRUE, FALSE))\ntest\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col_1 \u2506 col_2 \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2506 true  \u2502\n#&gt; \u2502 true  \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># here, the first `$all()` selects all columns, and the second `$all()` checks\n# whether all values are true in each column\ntest$with_columns(pl$all()$all())\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col_1 \u2506 col_2 \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2506 false \u2502\n#&gt; \u2502 true  \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_all_horizontal.html","title":"Apply the AND logical rowwise","text":"<p>Source code</p>"},{"location":"man/pl_all_horizontal.html#description","title":"Description","text":"<p>Apply the AND logical rowwise</p>"},{"location":"man/pl_all_horizontal.html#usage","title":"Usage","text":"<pre><code>pl_all_horizontal(...)\n</code></pre>"},{"location":"man/pl_all_horizontal.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals."},{"location":"man/pl_all_horizontal.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_all_horizontal.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(TRUE, FALSE, NA, NA),\n  b = c(TRUE, FALSE, NA, NA),\n  c = c(TRUE, FALSE, NA, TRUE)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 null  \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(\n  pl$all_horizontal(\"a\", \"b\", \"c\")$alias(\"all\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2506 all   \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2506 true  \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2506 false \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 null  \u2506 null  \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 true  \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># drop rows that have at least one missing value\n# == keep rows that only have non-missing values\ndf$filter(\n  pl$all_horizontal(pl$all()$is_not_null())\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_any_horizontal.html","title":"Apply the OR logical rowwise","text":"<p>Source code</p>"},{"location":"man/pl_any_horizontal.html#description","title":"Description","text":"<p>Apply the OR logical rowwise</p>"},{"location":"man/pl_any_horizontal.html#usage","title":"Usage","text":"<pre><code>pl_any_horizontal(...)\n</code></pre>"},{"location":"man/pl_any_horizontal.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals."},{"location":"man/pl_any_horizontal.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_any_horizontal.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(FALSE, FALSE, NA, NA),\n  b = c(TRUE, FALSE, NA, NA),\n  c = c(TRUE, FALSE, NA, TRUE)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 null  \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(\n  pl$any_horizontal(\"a\", \"b\", \"c\")$alias(\"any\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2506 any   \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2506 true  \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2506 false \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 null  \u2506 null  \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 true  \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># drop rows that only have missing values == keep rows that have at least one\n# non-missing value\ndf$filter(\n  pl$any_horizontal(pl$all()$is_not_null())\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_approx_n_unique.html","title":"Approximate count of unique values","text":"<p>Source code</p>"},{"location":"man/pl_approx_n_unique.html#description","title":"Description","text":"<p>This function is syntactic sugar for <code>pl$col(\u2026)$approx_n_unique()</code>, and uses the HyperLogLog++ algorithm for cardinality estimation.</p>"},{"location":"man/pl_approx_n_unique.html#usage","title":"Usage","text":"<pre><code>pl_approx_n_unique(...)\n</code></pre>"},{"location":"man/pl_approx_n_unique.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details."},{"location":"man/pl_approx_n_unique.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_approx_n_unique.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$approx_n_unique()"},{"location":"man/pl_approx_n_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 1),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$approx_n_unique(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$approx_n_unique(\"b\", \"c\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 u32 \u2506 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_arg_sort_by.html","title":"Return the row indices that would sort the columns","text":"<p>Source code</p>"},{"location":"man/pl_arg_sort_by.html#description","title":"Description","text":"<p>Return the row indices that would sort the columns</p>"},{"location":"man/pl_arg_sort_by.html#usage","title":"Usage","text":"<pre><code>pl_arg_sort_by(..., descending = FALSE)\n</code></pre>"},{"location":"man/pl_arg_sort_by.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Column(s) to arg sort by. Can be Expr(s) or something coercible to Expr(s). Strings are parsed as column names.  <code>descending</code>  Sort in descending order. When sorting by multiple columns, can be specified per column by passing a vector of booleans."},{"location":"man/pl_arg_sort_by.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_arg_sort_by.html#see-also","title":"See Also","text":"<p>$arg_sort() to find the row indices that would sort an Expr.</p>"},{"location":"man/pl_arg_sort_by.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(0, 1, 1, 0),\n  b = c(3, 2, 3, 2)\n)\n\ndf$with_columns(\n  arg_sort_a = pl$arg_sort_by(\"a\"),\n  arg_sort_ab = pl$arg_sort_by(c(\"a\", \"b\"), descending = TRUE)\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 arg_sort_a \u2506 arg_sort_ab \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---        \u2506 ---         \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 u32        \u2506 u32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 3.0 \u2506 0          \u2506 2           \u2502\n#&gt; \u2502 1.0 \u2506 2.0 \u2506 3          \u2506 1           \u2502\n#&gt; \u2502 1.0 \u2506 3.0 \u2506 1          \u2506 0           \u2502\n#&gt; \u2502 0.0 \u2506 2.0 \u2506 2          \u2506 3           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># we can also pass Expr\ndf$with_columns(\n  arg_sort_a = pl$arg_sort_by(pl$col(\"a\") * -1)\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 arg_sort_a \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---        \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 u32        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 3.0 \u2506 1          \u2502\n#&gt; \u2502 1.0 \u2506 2.0 \u2506 2          \u2502\n#&gt; \u2502 1.0 \u2506 3.0 \u2506 0          \u2502\n#&gt; \u2502 0.0 \u2506 2.0 \u2506 3          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_arg_where.html","title":"Return indices that match a condition","text":"<p>Source code</p>"},{"location":"man/pl_arg_where.html#description","title":"Description","text":"<p>Return indices that match a condition</p>"},{"location":"man/pl_arg_where.html#usage","title":"Usage","text":"<pre><code>pl_arg_where(condition)\n</code></pre>"},{"location":"man/pl_arg_where.html#arguments","title":"Arguments","text":"<code>condition</code>  An Expr that gives a boolean."},{"location":"man/pl_arg_where.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_arg_where.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(1, 2, 3, 4, 5))\ndf$select(\n  pl$arg_where(pl$col(\"a\") %% 2 == 0)\n)\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_coalesce.html","title":"Coalesce","text":"<p>Source code</p>"},{"location":"man/pl_coalesce.html#description","title":"Description","text":"<p>Folds the expressions from left to right, keeping the first non-null value.</p>"},{"location":"man/pl_coalesce.html#usage","title":"Usage","text":"<pre><code>pl_coalesce(...)\n</code></pre>"},{"location":"man/pl_coalesce.html#arguments","title":"Arguments","text":"<code>\u2026</code>   is a: If one arg:  <ul> <li>  Series or Expr, same as <code>column$sum()</code> </li> <li>  string, same as <code>pl$col(column)$sum()</code> </li> <li>  numeric, same as <code>pl$lit(column)$sum()</code> </li> <li>  list of strings(column names) or expressions to add up as expr1 + expr2 + expr3 + \u2026  </li> </ul> If several args, then wrapped in a list and handled as above."},{"location":"man/pl_coalesce.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_coalesce.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = NA_real_,\n  b = c(1L, 4L, NA_real_, NA_real_),\n  c = c(2:4, NA_real_)\n)\n\n# use coalesce to get first non Null value for each row, otherwise insert 99.9\ndf$with_columns(\n  pl$coalesce(\"a\", \"b\", \"c\", 99.9)$alias(\"d\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c    \u2506 d    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 1.0  \u2506 2.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 4.0  \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 99.9 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_col.html","title":"Create an expression representing column(s) in a dataframe","text":"<p>Source code</p>"},{"location":"man/pl_col.html#description","title":"Description","text":"<p>Create an expression representing column(s) in a dataframe</p>"},{"location":"man/pl_col.html#usage","title":"Usage","text":"<pre><code>pl_col(...)\n</code></pre>"},{"location":"man/pl_col.html#arguments","title":"Arguments","text":"<code>\u2026</code>   One of the following:  <ul> <li>  character vectors  <ul> <li>  Single wildcard <code>\u201c\\*\u201c</code> has a special meaning: check the examples.  </li> </ul> </li> <li>  RPolarsDataTypes  </li> <li>  a list of RPolarsDataTypes  </li> </ul>"},{"location":"man/pl_col.html#value","title":"Value","text":"<p>Expr of a column or columns</p>"},{"location":"man/pl_col.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# a single column by a character\npl$col(\"foo\")\n</code></pre> <pre><code>#&gt; polars Expr: col(\"foo\")\n</code></pre> <pre><code># multiple columns by characters\npl$col(\"foo\", \"bar\")\n</code></pre> <pre><code>#&gt; polars Expr: cols([\"foo\", \"bar\"])\n</code></pre> <pre><code># multiple columns by RPolarsDataTypes\npl$col(pl$Float64, pl$String)\n</code></pre> <pre><code>#&gt; polars Expr: dtype_columns([Float64, String])\n</code></pre> <pre><code># Single `\"*\"` is converted to a wildcard expression\npl$col(\"*\")\n</code></pre> <pre><code>#&gt; polars Expr: *\n</code></pre> <pre><code># multiple character vectors and a list of RPolarsDataTypes are also allowed\npl$col(c(\"foo\", \"bar\"), \"baz\")\n</code></pre> <pre><code>#&gt; polars Expr: cols([\"foo\", \"bar\", \"baz\"])\n</code></pre> <pre><code>pl$col(\"foo\", c(\"bar\", \"baz\"))\n</code></pre> <pre><code>#&gt; polars Expr: cols([\"foo\", \"bar\", \"baz\"])\n</code></pre> <pre><code>pl$col(list(pl$Float64, pl$String))\n</code></pre> <pre><code>#&gt; polars Expr: dtype_columns([Float64, String])\n</code></pre> <pre><code># there are some special notations for selecting columns\ndf = pl$DataFrame(foo = 1:3, bar = 4:6, baz = 7:9)\n\n# select all columns with a wildcard `\"*\"`\ndf$select(pl$col(\"*\"))\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 baz \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 4   \u2506 7   \u2502\n#&gt; \u2502 2   \u2506 5   \u2506 8   \u2502\n#&gt; \u2502 3   \u2506 6   \u2506 9   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># select multiple columns by a regular expression\n# starts with `^` and ends with `$`\ndf$select(pl$col(c(\"^ba.*$\")))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bar \u2506 baz \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4   \u2506 7   \u2502\n#&gt; \u2502 5   \u2506 8   \u2502\n#&gt; \u2502 6   \u2506 9   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_concat.html","title":"Concat polars objects","text":"<p>Source code</p>"},{"location":"man/pl_concat.html#description","title":"Description","text":"<p>Concat polars objects</p>"},{"location":"man/pl_concat.html#usage","title":"Usage","text":"<pre><code>pl_concat(\n  ...,\n  how = c(\"vertical\", \"vertical_relaxed\", \"horizontal\", \"diagonal\", \"diagonal_relaxed\"),\n  rechunk = TRUE,\n  parallel = TRUE\n)\n</code></pre>"},{"location":"man/pl_concat.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Either individual unpacked args or args wrapped in list(). Args can be eager as DataFrame, Series and R vectors, or lazy as LazyFrame and Expr. The first element determines the output of <code>$concat()</code>: if the first element is lazy, a LazyFrame is returned; otherwise, a DataFrame is returned (note that if the first element is eager, all other elements have to be eager to avoid implicit collect).  <code>how</code>  Bind direction. Can be \"vertical\" (like <code>rbind()</code>), \"horizontal\" (like <code>cbind()</code>), or \"diagonal\". For <code>\u201cvertical\u201d</code> and <code>\u201cdiagonal\u201d</code>, adding the suffix <code>\u201c\\_relaxed\u201d</code> will cast columns to their shared supertypes. For example, if we try to vertically concatenate two columns of types <code>i32</code> and <code>f64</code>, using <code>how = \u201cvertical_relaxed\u201d</code> will cast the column of type <code>i32</code> to <code>f64</code> beforehand.  <code>rechunk</code>  Perform a rechunk at last.  <code>parallel</code>  Only used for LazyFrames. If <code>TRUE</code> (default), lazy computations may be executed in parallel."},{"location":"man/pl_concat.html#details","title":"Details","text":"<p>Categorical columns/Series must have been constructed while global string cache enabled. See <code>pl$enable_string_cache()</code>.</p>"},{"location":"man/pl_concat.html#value","title":"Value","text":"<p>DataFrame, Series, LazyFrame or Expr</p>"},{"location":"man/pl_concat.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# vertical\nl_ver = lapply(1:10, function(i) {\n  l_internal = list(\n    a = 1:5,\n    b = letters[1:5]\n  )\n  pl$DataFrame(l_internal)\n})\npl$concat(l_ver, how = \"vertical\")\n</code></pre> <pre><code>#&gt; shape: (50, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 e   \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026   \u2502\n#&gt; \u2502 1   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 e   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># horizontal\nl_hor = lapply(1:10, function(i) {\n  l_internal = list(\n    1:5,\n    letters[1:5]\n  )\n  names(l_internal) = paste0(c(\"a\", \"b\"), i)\n  pl$DataFrame(l_internal)\n})\npl$concat(l_hor, how = \"horizontal\")\n</code></pre> <pre><code>#&gt; shape: (5, 20)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a1  \u2506 b1  \u2506 a2  \u2506 b2  \u2506 \u2026 \u2506 a9  \u2506 b9  \u2506 a10 \u2506 b10 \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506   \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 str \u2506 i32 \u2506 str \u2506   \u2506 i32 \u2506 str \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 a   \u2506 1   \u2506 a   \u2506 \u2026 \u2506 1   \u2506 a   \u2506 1   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 b   \u2506 2   \u2506 b   \u2506 \u2026 \u2506 2   \u2506 b   \u2506 2   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 c   \u2506 3   \u2506 c   \u2506 \u2026 \u2506 3   \u2506 c   \u2506 3   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 d   \u2506 4   \u2506 d   \u2506 \u2026 \u2506 4   \u2506 d   \u2506 4   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 e   \u2506 5   \u2506 e   \u2506 \u2026 \u2506 5   \u2506 e   \u2506 5   \u2506 e   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># diagonal\npl$concat(l_hor, how = \"diagonal\")\n</code></pre> <pre><code>#&gt; shape: (50, 20)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a1   \u2506 b1   \u2506 a2   \u2506 b2   \u2506 \u2026 \u2506 a9   \u2506 b9   \u2506 a10  \u2506 b10  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2506   \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 i32  \u2506 str  \u2506 i32  \u2506 str  \u2506   \u2506 i32  \u2506 str  \u2506 i32  \u2506 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 a    \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 2    \u2506 b    \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 3    \u2506 c    \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 4    \u2506 d    \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 5    \u2506 e    \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 1    \u2506 a    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 2    \u2506 b    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 3    \u2506 c    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 4    \u2506 d    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 5    \u2506 e    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># if two columns don't share the same type, concat() will error unless we use\n# `how = \"vertical_relaxed\"`:\ntest = pl$DataFrame(x = 1L) # i32\ntest2 = pl$DataFrame(x = 1.0) # f64\n\npl$concat(test, test2, how = \"vertical_relaxed\")\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_concat_list.html","title":"Concat the arrays in a Series dtype List in linear time.","text":"<p>Source code</p>"},{"location":"man/pl_concat_list.html#description","title":"Description","text":"<p>Folds the expressions from left to right, keeping the first non-null value.</p>"},{"location":"man/pl_concat_list.html#usage","title":"Usage","text":"<pre><code>pl_concat_list(exprs)\n</code></pre>"},{"location":"man/pl_concat_list.html#arguments","title":"Arguments","text":"<code>exprs</code>  list of Into, strings interpreted as column names"},{"location":"man/pl_concat_list.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_concat_list.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Create lagged columns and collect them into a list. This mimics a rolling window.\ndf = pl$DataFrame(A = c(1, 2, 9, 2, 13))\ndf$with_columns(lapply(\n  0:2,\n  \\(i) pl$col(\"A\")$shift(i)$alias(paste0(\"A_lag_\", i))\n))$select(\n  pl$concat_list(lapply(2:0, \\(i) pl$col(paste0(\"A_lag_\", i))))$alias(\n    \"A_rolling\"\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A_rolling         \u2502\n#&gt; \u2502 ---               \u2502\n#&gt; \u2502 list[f64]         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [null, null, 1.0] \u2502\n#&gt; \u2502 [null, 1.0, 2.0]  \u2502\n#&gt; \u2502 [1.0, 2.0, 9.0]   \u2502\n#&gt; \u2502 [2.0, 9.0, 2.0]   \u2502\n#&gt; \u2502 [9.0, 2.0, 13.0]  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># concat Expr a Series and an R obejct\npl$concat_list(list(\n  pl$lit(1:5),\n  as_polars_series(5:1),\n  rep(0L, 5)\n))$alias(\"alice\")$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: 'alice' [list[i32]]\n#&gt; [\n#&gt;  [1, 5, 0]\n#&gt;  [2, 4, 0]\n#&gt;  [3, 3, 0]\n#&gt;  [4, 2, 0]\n#&gt;  [5, 1, 0]\n#&gt; ]\n</code></pre>"},{"location":"man/pl_concat_str.html","title":"Horizontally concatenate columns into a single string column","text":"<p>Source code</p>"},{"location":"man/pl_concat_str.html#description","title":"Description","text":"<p>Horizontally concatenate columns into a single string column</p>"},{"location":"man/pl_concat_str.html#usage","title":"Usage","text":"<pre><code>pl_concat_str(..., separator = \"\", ignore_nulls = FALSE)\n</code></pre>"},{"location":"man/pl_concat_str.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals. Non-String columns are cast to String  <code>separator</code>  String that will be used to separate the values of each column.  <code>ignore_nulls</code>  If <code>FALSE</code> (default), null values are propagated: if the row contains any null values, the output is null."},{"location":"man/pl_concat_str.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_concat_str.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = 1:3,\n  b = c(\"dogs\", \"cats\", NA),\n  c = c(\"play\", \"swim\", \"walk\")\n)\n\ndf$with_columns(\n  pl$concat_str(\n    pl$col(\"a\") * 2L, \"b\", \"c\", pl$lit(\"!\"),\n    separator = \" \"\n  )$alias(\"full_sentence\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b    \u2506 c    \u2506 full_sentence \u2502\n#&gt; \u2502 --- \u2506 ---  \u2506 ---  \u2506 ---           \u2502\n#&gt; \u2502 i32 \u2506 str  \u2506 str  \u2506 str           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 dogs \u2506 play \u2506 2 dogs play ! \u2502\n#&gt; \u2502 2   \u2506 cats \u2506 swim \u2506 4 cats swim ! \u2502\n#&gt; \u2502 3   \u2506 null \u2506 walk \u2506 null          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(\n  pl$concat_str(\n    pl$col(\"a\") * 2L, \"b\", \"c\", pl$lit(\"!\"),\n    separator = \" \",\n    ignore_nulls = TRUE\n  )$alias(\"full_sentence\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b    \u2506 c    \u2506 full_sentence \u2502\n#&gt; \u2502 --- \u2506 ---  \u2506 ---  \u2506 ---           \u2502\n#&gt; \u2502 i32 \u2506 str  \u2506 str  \u2506 str           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 dogs \u2506 play \u2506 2 dogs play ! \u2502\n#&gt; \u2502 2   \u2506 cats \u2506 swim \u2506 4 cats swim ! \u2502\n#&gt; \u2502 3   \u2506 null \u2506 walk \u2506 6 walk !      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_corr.html","title":"Correlation","text":"<p>Source code</p>"},{"location":"man/pl_corr.html#description","title":"Description","text":"<p>Calculates the correlation between two columns</p>"},{"location":"man/pl_corr.html#usage","title":"Usage","text":"<pre><code>pl_corr(a, b, method = \"pearson\", ddof = 1, propagate_nans = FALSE)\n</code></pre>"},{"location":"man/pl_corr.html#arguments","title":"Arguments","text":"<code>a</code>  One column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>b</code>  Another column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>method</code>  str One of \u2018pearson\u2019 or \u2018spearman\u2019  <code>ddof</code>  integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.  <code>propagate_nans</code>  bool Used only when calculating the spearman rank correlation. If <code>True</code> any <code>NaN</code> encountered will lead to <code>NaN</code> in the output. Defaults to <code>False</code> where <code>NaN</code> are regarded as larger than any finite number and thus lead to the highest rank."},{"location":"man/pl_corr.html#value","title":"Value","text":"<p>Expr for the computed correlation</p>"},{"location":"man/pl_corr.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(data.frame(a = c(1, 8, 3), b = c(4, 5, 2)))\nlf$select(pl$corr(\"a\", \"b\", method = \"spearman\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.5 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_count.html","title":"Return the number of non-null values in the column.","text":"<p>Source code</p>"},{"location":"man/pl_count.html#description","title":"Description","text":"<p>This function is syntactic sugar for <code>pl$col(\u2026)$count()</code>.</p>"},{"location":"man/pl_count.html#usage","title":"Usage","text":"<pre><code>pl_count(...)\n</code></pre>"},{"location":"man/pl_count.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details."},{"location":"man/pl_count.html#details","title":"Details","text":"<p>Calling this function without any arguments returns the number of rows in the context. This way of using the function is deprecated. Please use <code>pl$len()</code> instead.</p>"},{"location":"man/pl_count.html#value","title":"Value","text":"<p>Expression of data type UInt32</p>"},{"location":"man/pl_count.html#see-also","title":"See Also","text":"<ul> <li> <code>pl$len()</code> </li> <li> <code>\\$count()"},{"location":"man/pl_count.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, NA),\n  b = c(3, NA, NA),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$count(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$count(c(\"b\", \"c\")))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 u32 \u2506 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_cov.html","title":"Covariance","text":"<p>Source code</p>"},{"location":"man/pl_cov.html#description","title":"Description","text":"<p>Calculates the covariance between two columns / expressions.</p>"},{"location":"man/pl_cov.html#usage","title":"Usage","text":"<pre><code>pl_cov(a, b, ddof = 1)\n</code></pre>"},{"location":"man/pl_cov.html#arguments","title":"Arguments","text":"<code>a</code>  One column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>b</code>  Another column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>ddof</code>  integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/pl_cov.html#value","title":"Value","text":"<p>Expr for the computed covariance</p>"},{"location":"man/pl_cov.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(data.frame(a = c(1, 8, 3), b = c(4, 5, 2)))\nlf$select(pl$cov(\"a\", \"b\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$cov(c(1, 8, 3), c(4, 5, 2))$to_r()\n</code></pre> <pre><code>#&gt; [1] 3\n</code></pre>"},{"location":"man/pl_date.html","title":"Create a Date expression","text":"<p>Source code</p>"},{"location":"man/pl_date.html#description","title":"Description","text":"<p>Create a Date expression</p>"},{"location":"man/pl_date.html#usage","title":"Usage","text":"<pre><code>pl_date(year, month, day)\n</code></pre>"},{"location":"man/pl_date.html#arguments","title":"Arguments","text":"<code>year</code>  An Expr or something coercible to an Expr, that must return an integer. Strings are parsed as column names. Floats are cast to integers.  <code>month</code>  An Expr or something coercible to an Expr, that must return an integer between 1 and 12. Strings are parsed as column names. Floats are cast to integers.  <code>day</code>  An Expr or something coercible to an Expr, that must return an integer between 1 and 31. Strings are parsed as column names. Floats are cast to integers."},{"location":"man/pl_date.html#value","title":"Value","text":"<p>An Expr of type Date</p>"},{"location":"man/pl_date.html#see-also","title":"See Also","text":"<ul> <li> <code>pl$datetime()</code> </li> <li> <code>pl$time()</code> </li> </ul>"},{"location":"man/pl_date.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(year = 2019:2021, month = 9:11, day = 10:12)\n\ndf$with_columns(\n  date_from_cols = pl$date(\"year\", \"month\", \"day\"),\n  date_from_lit = pl$date(2020, 3, 5),\n  date_from_mix = pl$date(\"year\", 3, 5)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 year \u2506 month \u2506 day \u2506 date_from_cols \u2506 date_from_lit \u2506 date_from_mix \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2506 ---            \u2506 ---           \u2506 ---           \u2502\n#&gt; \u2502 i32  \u2506 i32   \u2506 i32 \u2506 date           \u2506 date          \u2506 date          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2019 \u2506 9     \u2506 10  \u2506 2019-09-10     \u2506 2020-03-05    \u2506 2019-03-05    \u2502\n#&gt; \u2502 2020 \u2506 10    \u2506 11  \u2506 2020-10-11     \u2506 2020-03-05    \u2506 2020-03-05    \u2502\n#&gt; \u2502 2021 \u2506 11    \u2506 12  \u2506 2021-11-12     \u2506 2020-03-05    \u2506 2021-03-05    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># floats are coerced to integers\ndf$with_columns(\n  date_floats = pl$date(2018.8, 5.3, 1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 year \u2506 month \u2506 day \u2506 date_floats \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2506 ---         \u2502\n#&gt; \u2502 i32  \u2506 i32   \u2506 i32 \u2506 date        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2019 \u2506 9     \u2506 10  \u2506 2018-05-01  \u2502\n#&gt; \u2502 2020 \u2506 10    \u2506 11  \u2506 2018-05-01  \u2502\n#&gt; \u2502 2021 \u2506 11    \u2506 12  \u2506 2018-05-01  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># if date can't be constructed, it returns null\ndf$with_columns(\n  date_floats = pl$date(pl$lit(\"abc\"), -2, 1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 year \u2506 month \u2506 day \u2506 date_floats \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2506 ---         \u2502\n#&gt; \u2502 i32  \u2506 i32   \u2506 i32 \u2506 date        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2019 \u2506 9     \u2506 10  \u2506 null        \u2502\n#&gt; \u2502 2020 \u2506 10    \u2506 11  \u2506 null        \u2502\n#&gt; \u2502 2021 \u2506 11    \u2506 12  \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_date_range.html","title":"Generate a date range","text":"<p>Source code</p>"},{"location":"man/pl_date_range.html#description","title":"Description","text":"<p>If both <code>start</code> and <code>end</code> are passed as the Date types (not Datetime), and the <code>interval</code> granularity is no finer than <code>\u201c1d\u201d</code>, the returned range is also of type Date. All other permutations return a Datetime. Note that in a future version of Polars, <code>pl$date_range()</code> will always return Date. Please use <code>pl$datetime_range()</code> if you want Datetime instead.</p>"},{"location":"man/pl_date_range.html#usage","title":"Usage","text":"<pre><code>pl_date_range(\n  start,\n  end,\n  interval = \"1d\",\n  ...,\n  closed = \"both\",\n  time_unit = NULL,\n  time_zone = NULL\n)\n</code></pre>"},{"location":"man/pl_date_range.html#arguments","title":"Arguments","text":"<code>start</code>  Lower bound of the date range. Something that can be coerced to a Date or a Datetime expression. See examples for details.  <code>end</code>  Upper bound of the date range. Something that can be coerced to a Date or a Datetime expression. See examples for details.  <code>interval</code>  Interval of the range periods, specified as a difftime object or using the Polars duration string language. See the <code>Polars duration string language</code> section for details.  <code>\u2026</code>  Ignored.  <code>closed</code>  Define which sides of the range are closed (inclusive). One of the followings: <code>\u201cboth\u201d</code> (default), <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cnone\u201d</code>.  <code>time_unit</code>  Time unit of the resulting the Datetime data type. One of <code>\u201cns\u201d</code>, <code>\u201cus\u201d</code>, <code>\u201cms\u201d</code> or <code>NULL</code>. Only takes effect if the output column is of type Datetime (deprecated usage).  <code>time_zone</code>  Time zone of the resulting Datetime data type. Only takes effect if the output column is of type Datetime (deprecated usage)."},{"location":"man/pl_date_range.html#value","title":"Value","text":"<p>An Expr of data type Date or Datetime</p>"},{"location":"man/pl_date_range.html#polars-duration-string-language","title":"Polars duration string language","text":"<p>Polars duration string language is a simple representation of durations. It is used in many Polars functions that accept durations.</p> <p>It has the following format:</p> <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 calendar day)  </li> <li>  1w (1 calendar week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1q (1 calendar quarter)  </li> <li>  1y (1 calendar year)  </li> </ul> <p>Or combine them: <code>\u201c3d12h4m25s\u201d</code> # 3 days, 12 hours, 4 minutes, and 25 seconds</p> <p>By \"calendar day\", we mean the corresponding time on the next day (which may not be 24 hours, due to daylight savings). Similarly for \"calendar week\", \"calendar month\", \"calendar quarter\", and \"calendar year\".</p>"},{"location":"man/pl_date_range.html#see-also","title":"See Also","text":"<p><code>pl$date_ranges()</code> to create a simple Series of data type list(Date) based on column values.</p>"},{"location":"man/pl_date_range.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Using Polars duration string to specify the interval:\npl$date_range(as.Date(\"2022-01-01\"), as.Date(\"2022-03-01\"), \"1mo\") |&gt;\n  as_polars_series(\"date\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'date' [date]\n#&gt; [\n#&gt;  2022-01-01\n#&gt;  2022-02-01\n#&gt;  2022-03-01\n#&gt; ]\n</code></pre> <pre><code># Using `difftime` object to specify the interval:\npl$date_range(\n  as.Date(\"1985-01-01\"),\n  as.Date(\"1985-01-10\"),\n  as.difftime(2, units = \"days\")\n) |&gt;\n  as_polars_series(\"date\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: 'date' [date]\n#&gt; [\n#&gt;  1985-01-01\n#&gt;  1985-01-03\n#&gt;  1985-01-05\n#&gt;  1985-01-07\n#&gt;  1985-01-09\n#&gt; ]\n</code></pre>"},{"location":"man/pl_date_ranges.html","title":"Generate a list containing a date range","text":"<p>Source code</p>"},{"location":"man/pl_date_ranges.html#description","title":"Description","text":"<p>If both <code>start</code> and <code>end</code> are passed as the Date types (not Datetime), and the <code>interval</code> granularity is no finer than <code>\u201c1d\u201d</code>, the returned range is also of type Date. All other permutations return a Datetime. Note that in a future version of Polars, <code>pl$date_ranges()</code> will always return Date. Please use <code>pl$datetime_ranges()</code> if you want Datetime instead.</p>"},{"location":"man/pl_date_ranges.html#usage","title":"Usage","text":"<pre><code>pl_date_ranges(\n  start,\n  end,\n  interval = \"1d\",\n  ...,\n  closed = \"both\",\n  time_unit = NULL,\n  time_zone = NULL\n)\n</code></pre>"},{"location":"man/pl_date_ranges.html#arguments","title":"Arguments","text":"<code>start</code>  Lower bound of the date range. Something that can be coerced to a Date or a Datetime expression. See examples for details.  <code>end</code>  Upper bound of the date range. Something that can be coerced to a Date or a Datetime expression. See examples for details.  <code>interval</code>  Interval of the range periods, specified as a difftime object or using the Polars duration string language. See the <code>Polars duration string language</code> section for details.  <code>\u2026</code>  Ignored.  <code>closed</code>  Define which sides of the range are closed (inclusive). One of the followings: <code>\u201cboth\u201d</code> (default), <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cnone\u201d</code>.  <code>time_unit</code>  Time unit of the resulting the Datetime data type. One of <code>\u201cns\u201d</code>, <code>\u201cus\u201d</code>, <code>\u201cms\u201d</code> or <code>NULL</code>. Only takes effect if the output column is of type Datetime (deprecated usage).  <code>time_zone</code>  Time zone of the resulting Datetime data type. Only takes effect if the output column is of type Datetime (deprecated usage)."},{"location":"man/pl_date_ranges.html#value","title":"Value","text":"<p>An Expr of data type List(Date) or List(Datetime)</p>"},{"location":"man/pl_date_ranges.html#polars-duration-string-language","title":"Polars duration string language","text":"<p>Polars duration string language is a simple representation of durations. It is used in many Polars functions that accept durations.</p> <p>It has the following format:</p> <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 calendar day)  </li> <li>  1w (1 calendar week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1q (1 calendar quarter)  </li> <li>  1y (1 calendar year)  </li> </ul> <p>Or combine them: <code>\u201c3d12h4m25s\u201d</code> # 3 days, 12 hours, 4 minutes, and 25 seconds</p> <p>By \"calendar day\", we mean the corresponding time on the next day (which may not be 24 hours, due to daylight savings). Similarly for \"calendar week\", \"calendar month\", \"calendar quarter\", and \"calendar year\".</p>"},{"location":"man/pl_date_ranges.html#see-also","title":"See Also","text":"<p><code>pl$date_range()</code> to create a simple Series of data type Date.</p>"},{"location":"man/pl_date_ranges.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  start = as.Date(c(\"2022-01-01\", \"2022-01-02\", NA)),\n  end = as.Date(\"2022-01-03\")\n)\n\ndf$with_columns(\n  date_range = pl$date_ranges(\"start\", \"end\"),\n  date_range_cr = pl$date_ranges(\"start\", \"end\", closed = \"right\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 start      \u2506 end        \u2506 date_range                        \u2506 date_range_cr            \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---                               \u2506 ---                      \u2502\n#&gt; \u2502 date       \u2506 date       \u2506 list[date]                        \u2506 list[date]               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2022-01-01 \u2506 2022-01-03 \u2506 [2022-01-01, 2022-01-02, 2022-01\u2026 \u2506 [2022-01-02, 2022-01-03] \u2502\n#&gt; \u2502 2022-01-02 \u2506 2022-01-03 \u2506 [2022-01-02, 2022-01-03]          \u2506 [2022-01-03]             \u2502\n#&gt; \u2502 null       \u2506 2022-01-03 \u2506 null                              \u2506 null                     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># provide a custom \"end\" value\ndf$with_columns(\n  date_range_lit = pl$date_ranges(\"start\", pl$lit(as.Date(\"2022-01-02\")))\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 start      \u2506 end        \u2506 date_range_lit           \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---                      \u2502\n#&gt; \u2502 date       \u2506 date       \u2506 list[date]               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2022-01-01 \u2506 2022-01-03 \u2506 [2022-01-01, 2022-01-02] \u2502\n#&gt; \u2502 2022-01-02 \u2506 2022-01-03 \u2506 [2022-01-02]             \u2502\n#&gt; \u2502 null       \u2506 2022-01-03 \u2506 null                     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_datetime.html","title":"Create a Datetime expression","text":"<p>Source code</p>"},{"location":"man/pl_datetime.html#description","title":"Description","text":"<p>Create a Datetime expression</p>"},{"location":"man/pl_datetime.html#usage","title":"Usage","text":"<pre><code>pl_datetime(\n  year,\n  month,\n  day,\n  hour = NULL,\n  minute = NULL,\n  second = NULL,\n  microsecond = NULL,\n  ...,\n  time_unit = \"us\",\n  time_zone = NULL,\n  ambiguous = \"raise\"\n)\n</code></pre>"},{"location":"man/pl_datetime.html#arguments","title":"Arguments","text":"<code>year</code>  An Expr or something coercible to an Expr, that must return an integer. Strings are parsed as column names. Floats are cast to integers.  <code>month</code>  An Expr or something coercible to an Expr, that must return an integer between 1 and 12. Strings are parsed as column names. Floats are cast to integers.  <code>day</code>  An Expr or something coercible to an Expr, that must return an integer between 1 and 31. Strings are parsed as column names. Floats are cast to integers.  <code>hour</code>  An Expr or something coercible to an Expr, that must return an integer between 0 and 23. Strings are parsed as column names. Floats are cast to integers.  <code>minute</code>  An Expr or something coercible to an Expr, that must return an integer between 0 and 59. Strings are parsed as column names. Floats are cast to integers.  <code>second</code>  An Expr or something coercible to an Expr, that must return an integer between 0 and 59. Strings are parsed as column names. Floats are cast to integers.  <code>microsecond</code>  An Expr or something coercible to an Expr, that must return an integer between 0 and 999,999. Strings are parsed as column names. Floats are cast to integers.  <code>\u2026</code>  Not used.  <code>time_unit</code>  Unit of time. One of <code>\u201cms\u201d</code>, <code>\u201cus\u201d</code> (default) or <code>\u201cns\u201d</code>.  <code>time_zone</code>  Time zone string, as defined in <code>OlsonNames()</code>. Setting <code>timezone = \u201c\\*\u201c</code> will match any timezone, which can be useful to select all Datetime columns containing a timezone.  <code>ambiguous</code>   Determine how to deal with ambiguous datetimes:  <ul> <li> <code>\u201craise\u201d</code> (default): throw an error  </li> <li> <code>\u201cearliest\u201d</code>: use the earliest datetime  </li> <li> <code>\u201clatest\u201d</code>: use the latest datetime  </li> <li> <code>\u201cnull\u201d</code>: return a null value  </li> </ul>"},{"location":"man/pl_datetime.html#value","title":"Value","text":"<p>An Expr of type Datetime</p>"},{"location":"man/pl_datetime.html#see-also","title":"See Also","text":"<ul> <li> <code>pl$date()</code> </li> <li> <code>pl$time()</code> </li> </ul>"},{"location":"man/pl_datetime.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  year = 2019:2021,\n  month = 9:11,\n  day = 10:12,\n  min = 55:57\n)\n\ndf$with_columns(\n  dt_from_cols = pl$datetime(\"year\", \"month\", \"day\", minute = \"min\"),\n  dt_from_lit = pl$datetime(2020, 3, 5, hour = 20:22),\n  dt_from_mix = pl$datetime(\"year\", 3, 5, second = 1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 year \u2506 month \u2506 day \u2506 min \u2506 dt_from_cols        \u2506 dt_from_lit         \u2506 dt_from_mix         \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2506 --- \u2506 ---                 \u2506 ---                 \u2506 ---                 \u2502\n#&gt; \u2502 i32  \u2506 i32   \u2506 i32 \u2506 i32 \u2506 datetime[\u03bcs]        \u2506 datetime[\u03bcs]        \u2506 datetime[\u03bcs]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2019 \u2506 9     \u2506 10  \u2506 55  \u2506 2019-09-10 00:55:00 \u2506 2020-03-05 20:00:00 \u2506 2019-03-05 00:00:01 \u2502\n#&gt; \u2502 2020 \u2506 10    \u2506 11  \u2506 56  \u2506 2020-10-11 00:56:00 \u2506 2020-03-05 21:00:00 \u2506 2020-03-05 00:00:01 \u2502\n#&gt; \u2502 2021 \u2506 11    \u2506 12  \u2506 57  \u2506 2021-11-12 00:57:00 \u2506 2020-03-05 22:00:00 \u2506 2021-03-05 00:00:01 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># floats are coerced to integers\ndf$with_columns(\n  dt_floats = pl$datetime(2018.8, 5.3, 1, second = 2.1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 year \u2506 month \u2506 day \u2506 min \u2506 dt_floats           \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2506 --- \u2506 ---                 \u2502\n#&gt; \u2502 i32  \u2506 i32   \u2506 i32 \u2506 i32 \u2506 datetime[\u03bcs]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2019 \u2506 9     \u2506 10  \u2506 55  \u2506 2018-05-01 00:00:02 \u2502\n#&gt; \u2502 2020 \u2506 10    \u2506 11  \u2506 56  \u2506 2018-05-01 00:00:02 \u2502\n#&gt; \u2502 2021 \u2506 11    \u2506 12  \u2506 57  \u2506 2018-05-01 00:00:02 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># if datetime can't be constructed, it returns null\ndf$with_columns(\n  dt_floats = pl$datetime(pl$lit(\"abc\"), -2, 1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 year \u2506 month \u2506 day \u2506 min \u2506 dt_floats    \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2506 --- \u2506 ---          \u2502\n#&gt; \u2502 i32  \u2506 i32   \u2506 i32 \u2506 i32 \u2506 datetime[\u03bcs] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2019 \u2506 9     \u2506 10  \u2506 55  \u2506 null         \u2502\n#&gt; \u2502 2020 \u2506 10    \u2506 11  \u2506 56  \u2506 null         \u2502\n#&gt; \u2502 2021 \u2506 11    \u2506 12  \u2506 57  \u2506 null         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># can control the time_unit\ndf$with_columns(\n  dt_from_cols = pl$datetime(\"year\", \"month\", \"day\", minute = \"min\", time_unit = \"ms\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 year \u2506 month \u2506 day \u2506 min \u2506 dt_from_cols        \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2506 --- \u2506 ---                 \u2502\n#&gt; \u2502 i32  \u2506 i32   \u2506 i32 \u2506 i32 \u2506 datetime[ms]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2019 \u2506 9     \u2506 10  \u2506 55  \u2506 2019-09-10 00:55:00 \u2502\n#&gt; \u2502 2020 \u2506 10    \u2506 11  \u2506 56  \u2506 2020-10-11 00:56:00 \u2502\n#&gt; \u2502 2021 \u2506 11    \u2506 12  \u2506 57  \u2506 2021-11-12 00:57:00 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_datetime_range.html","title":"Generate a datetime range","text":"<p>Source code</p>"},{"location":"man/pl_datetime_range.html#description","title":"Description","text":"<p>Generate a datetime range</p>"},{"location":"man/pl_datetime_range.html#usage","title":"Usage","text":"<pre><code>pl_datetime_range(\n  start,\n  end,\n  interval = \"1d\",\n  ...,\n  closed = \"both\",\n  time_unit = NULL,\n  time_zone = NULL\n)\n</code></pre>"},{"location":"man/pl_datetime_range.html#arguments","title":"Arguments","text":"<code>start</code>  Lower bound of the date range. Something that can be coerced to a Date or a Datetime expression. See examples for details.  <code>end</code>  Upper bound of the date range. Something that can be coerced to a Date or a Datetime expression. See examples for details.  <code>interval</code>  Interval of the range periods, specified as a difftime object or using the Polars duration string language. See the <code>Polars duration string language</code> section for details.  <code>\u2026</code>  Ignored.  <code>closed</code>  Define which sides of the range are closed (inclusive). One of the followings: <code>\u201cboth\u201d</code> (default), <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cnone\u201d</code>.  <code>time_unit</code>  Time unit of the resulting the Datetime data type. One of <code>\u201cns\u201d</code>, <code>\u201cus\u201d</code>, <code>\u201cms\u201d</code> or <code>NULL</code> <code>time_zone</code>  Time zone of the resulting Datetime data type."},{"location":"man/pl_datetime_range.html#value","title":"Value","text":"<p>An Expr of data type Datetime</p>"},{"location":"man/pl_datetime_range.html#polars-duration-string-language","title":"Polars duration string language","text":"<p>Polars duration string language is a simple representation of durations. It is used in many Polars functions that accept durations.</p> <p>It has the following format:</p> <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 calendar day)  </li> <li>  1w (1 calendar week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1q (1 calendar quarter)  </li> <li>  1y (1 calendar year)  </li> </ul> <p>Or combine them: <code>\u201c3d12h4m25s\u201d</code> # 3 days, 12 hours, 4 minutes, and 25 seconds</p> <p>By \"calendar day\", we mean the corresponding time on the next day (which may not be 24 hours, due to daylight savings). Similarly for \"calendar week\", \"calendar month\", \"calendar quarter\", and \"calendar year\".</p>"},{"location":"man/pl_datetime_range.html#see-also","title":"See Also","text":"<p><code>pl$datetime_ranges()</code> to create a simple Series of data type list(Datetime) based on column values.</p>"},{"location":"man/pl_datetime_range.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Using Polars duration string to specify the interval:\npl$datetime_range(as.Date(\"2022-01-01\"), as.Date(\"2022-03-01\"), \"1mo\") |&gt;\n  as_polars_series(\"datetime\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'datetime' [datetime[\u03bcs]]\n#&gt; [\n#&gt;  2022-01-01 00:00:00\n#&gt;  2022-02-01 00:00:00\n#&gt;  2022-03-01 00:00:00\n#&gt; ]\n</code></pre> <pre><code># Using `difftime` object to specify the interval:\npl$datetime_range(\n  as.Date(\"1985-01-01\"),\n  as.Date(\"1985-01-10\"),\n  as.difftime(1, units = \"days\") + as.difftime(12, units = \"hours\")\n) |&gt;\n  as_polars_series(\"datetime\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (7,)\n#&gt; Series: 'datetime' [datetime[\u03bcs]]\n#&gt; [\n#&gt;  1985-01-01 00:00:00\n#&gt;  1985-01-02 12:00:00\n#&gt;  1985-01-04 00:00:00\n#&gt;  1985-01-05 12:00:00\n#&gt;  1985-01-07 00:00:00\n#&gt;  1985-01-08 12:00:00\n#&gt;  1985-01-10 00:00:00\n#&gt; ]\n</code></pre> <pre><code># Specifying a time zone:\npl$datetime_range(\n  as.Date(\"2022-01-01\"),\n  as.Date(\"2022-03-01\"),\n  \"1mo\",\n  time_zone = \"America/New_York\"\n) |&gt;\n  as_polars_series(\"datetime\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'datetime' [datetime[\u03bcs, America/New_York]]\n#&gt; [\n#&gt;  2022-01-01 00:00:00 EST\n#&gt;  2022-02-01 00:00:00 EST\n#&gt;  2022-03-01 00:00:00 EST\n#&gt; ]\n</code></pre>"},{"location":"man/pl_datetime_ranges.html","title":"Generate a list containing a datetime range","text":"<p>Source code</p>"},{"location":"man/pl_datetime_ranges.html#description","title":"Description","text":"<p>Generate a list containing a datetime range</p>"},{"location":"man/pl_datetime_ranges.html#usage","title":"Usage","text":"<pre><code>pl_datetime_ranges(\n  start,\n  end,\n  interval = \"1d\",\n  ...,\n  closed = \"both\",\n  time_unit = NULL,\n  time_zone = NULL\n)\n</code></pre>"},{"location":"man/pl_datetime_ranges.html#arguments","title":"Arguments","text":"<code>start</code>  Lower bound of the date range. Something that can be coerced to a Date or a Datetime expression. See examples for details.  <code>end</code>  Upper bound of the date range. Something that can be coerced to a Date or a Datetime expression. See examples for details.  <code>interval</code>  Interval of the range periods, specified as a difftime object or using the Polars duration string language. See the <code>Polars duration string language</code> section for details.  <code>\u2026</code>  Ignored.  <code>closed</code>  Define which sides of the range are closed (inclusive). One of the followings: <code>\u201cboth\u201d</code> (default), <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cnone\u201d</code>.  <code>time_unit</code>  Time unit of the resulting the Datetime data type. One of <code>\u201cns\u201d</code>, <code>\u201cus\u201d</code>, <code>\u201cms\u201d</code> or <code>NULL</code> <code>time_zone</code>  Time zone of the resulting Datetime data type."},{"location":"man/pl_datetime_ranges.html#value","title":"Value","text":"<p>An Expr of data type list(Datetime)</p>"},{"location":"man/pl_datetime_ranges.html#polars-duration-string-language","title":"Polars duration string language","text":"<p>Polars duration string language is a simple representation of durations. It is used in many Polars functions that accept durations.</p> <p>It has the following format:</p> <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 calendar day)  </li> <li>  1w (1 calendar week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1q (1 calendar quarter)  </li> <li>  1y (1 calendar year)  </li> </ul> <p>Or combine them: <code>\u201c3d12h4m25s\u201d</code> # 3 days, 12 hours, 4 minutes, and 25 seconds</p> <p>By \"calendar day\", we mean the corresponding time on the next day (which may not be 24 hours, due to daylight savings). Similarly for \"calendar week\", \"calendar month\", \"calendar quarter\", and \"calendar year\".</p>"},{"location":"man/pl_datetime_ranges.html#see-also","title":"See Also","text":"<p><code>pl$datetime_range()</code> to create a simple Series of data type Datetime.</p>"},{"location":"man/pl_datetime_ranges.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  start = as.POSIXct(c(\"2022-01-01 10:00\", \"2022-01-01 11:00\", NA)),\n  end = as.POSIXct(\"2022-01-01 12:00\")\n)\n\ndf$with_columns(\n  dt_range = pl$datetime_ranges(\"start\", \"end\", interval = \"1h\"),\n  dt_range_cr = pl$datetime_ranges(\"start\", \"end\", closed = \"right\", interval = \"1h\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 start               \u2506 end                 \u2506 dt_range              \u2506 dt_range_cr           \u2502\n#&gt; \u2502 ---                 \u2506 ---                 \u2506 ---                   \u2506 ---                   \u2502\n#&gt; \u2502 datetime[ms]        \u2506 datetime[ms]        \u2506 list[datetime[ms]]    \u2506 list[datetime[ms]]    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2022-01-01 10:00:00 \u2506 2022-01-01 12:00:00 \u2506 [2022-01-01 10:00:00, \u2506 [2022-01-01 11:00:00, \u2502\n#&gt; \u2502                     \u2506                     \u2506 2022-01-01\u2026           \u2506 2022-01-01\u2026           \u2502\n#&gt; \u2502 2022-01-01 11:00:00 \u2506 2022-01-01 12:00:00 \u2506 [2022-01-01 11:00:00, \u2506 [2022-01-01 12:00:00] \u2502\n#&gt; \u2502                     \u2506                     \u2506 2022-01-01\u2026           \u2506                       \u2502\n#&gt; \u2502 null                \u2506 2022-01-01 12:00:00 \u2506 null                  \u2506 null                  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># provide a custom \"end\" value\ndf$with_columns(\n  dt_range_lit = pl$datetime_ranges(\n    \"start\", pl$lit(as.POSIXct(\"2022-01-01 11:00\")),\n    interval = \"1h\"\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 start               \u2506 end                 \u2506 dt_range_lit                      \u2502\n#&gt; \u2502 ---                 \u2506 ---                 \u2506 ---                               \u2502\n#&gt; \u2502 datetime[ms]        \u2506 datetime[ms]        \u2506 list[datetime[ms]]                \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2022-01-01 10:00:00 \u2506 2022-01-01 12:00:00 \u2506 [2022-01-01 10:00:00, 2022-01-01\u2026 \u2502\n#&gt; \u2502 2022-01-01 11:00:00 \u2506 2022-01-01 12:00:00 \u2506 [2022-01-01 11:00:00]             \u2502\n#&gt; \u2502 null                \u2506 2022-01-01 12:00:00 \u2506 null                              \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_disable_string_cache.html","title":"Disable the global string cache","text":"<p>Source code</p>"},{"location":"man/pl_disable_string_cache.html#description","title":"Description","text":"<p>Some functions (e.g joins) can be applied on Categorical series only allowed if using the global string cache is enabled. This function disables the string_cache. In general, you should use <code>pl$with_string_cache()</code> instead.</p>"},{"location":"man/pl_disable_string_cache.html#usage","title":"Usage","text":"<pre><code>pl_disable_string_cache()\n</code></pre>"},{"location":"man/pl_disable_string_cache.html#value","title":"Value","text":"<p>This doesn\u2019t return any value.</p>"},{"location":"man/pl_disable_string_cache.html#see-also","title":"See Also","text":"<p><code>pl$using_string_cache</code> <code>pl$enable_string_cache</code> <code>pl$with_string_cache</code></p>"},{"location":"man/pl_disable_string_cache.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$enable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$disable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/pl_dtypes.html","title":"DataTypes (RPolarsDataType)","text":""},{"location":"man/pl_dtypes.html#description","title":"Description","text":"<p><code>DataType</code> any polars type (ported so far)</p>"},{"location":"man/pl_dtypes.html#value","title":"Value","text":"<p>not applicable</p>"},{"location":"man/pl_dtypes.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nprint(ls(pl$dtypes))\n</code></pre> <pre><code>#&gt;  [1] \"Array\"       \"Binary\"      \"Boolean\"     \"Categorical\" \"Date\"       \n#&gt;  [6] \"Datetime\"    \"Duration\"    \"Float32\"     \"Float64\"     \"Int16\"      \n#&gt; [11] \"Int32\"       \"Int64\"       \"Int8\"        \"List\"        \"Null\"       \n#&gt; [16] \"String\"      \"Struct\"      \"Time\"        \"UInt16\"      \"UInt32\"     \n#&gt; [21] \"UInt64\"      \"UInt8\"       \"Unknown\"     \"Utf8\"\n</code></pre> <pre><code>pl$dtypes$Float64\n</code></pre> <pre><code>#&gt; DataType: Float64\n</code></pre> <pre><code>pl$dtypes$String\n</code></pre> <pre><code>#&gt; DataType: String\n</code></pre> <pre><code>pl$List(pl$List(pl$UInt64))\n</code></pre> <pre><code>#&gt; DataType: List(\n#&gt;     List(\n#&gt;         UInt64,\n#&gt;     ),\n#&gt; )\n</code></pre> <pre><code>pl$Struct(pl$Field(\"CityNames\", pl$String))\n</code></pre> <pre><code>#&gt; DataType: Struct(\n#&gt;     [\n#&gt;         Field {\n#&gt;             name: \"CityNames\",\n#&gt;             dtype: String,\n#&gt;         },\n#&gt;     ],\n#&gt; )\n</code></pre> <pre><code># The function changes type from Int32 to String\n# Specifying the output DataType: String solves the problem\nas_polars_series(1:4)$map_elements(\\(x) letters[x], datatype = pl$dtypes$String)\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '_apply' [str]\n#&gt; [\n#&gt;  \"a\"\n#&gt;  \"b\"\n#&gt;  \"c\"\n#&gt;  \"d\"\n#&gt; ]\n</code></pre>"},{"location":"man/pl_duration.html","title":"Create polars Duration from distinct time components","text":"<p>Source code</p>"},{"location":"man/pl_duration.html#description","title":"Description","text":"<p>Create polars Duration from distinct time components</p>"},{"location":"man/pl_duration.html#usage","title":"Usage","text":"<pre><code>pl_duration(\n  ...,\n  weeks = NULL,\n  days = NULL,\n  hours = NULL,\n  minutes = NULL,\n  seconds = NULL,\n  milliseconds = NULL,\n  microseconds = NULL,\n  nanoseconds = NULL,\n  time_unit = \"us\"\n)\n</code></pre>"},{"location":"man/pl_duration.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Not used.  <code>weeks</code>  Number of weeks to add. Expr or something coercible to an Expr. Strings are parsed as column names. Same thing for argument <code>days</code> to <code>nanoseconds</code>.  <code>days</code>  Number of days to add.  <code>hours</code>  Number of hours to add.  <code>minutes</code>  Number of minutes to add.  <code>seconds</code>  Number of seconds to add.  <code>milliseconds</code>  Number of milliseconds to add.  <code>microseconds</code>  Number of microseconds to add.  <code>nanoseconds</code>  Number of nanoseconds to add.  <code>time_unit</code>  Time unit of the resulting expression."},{"location":"man/pl_duration.html#details","title":"Details","text":"<p>A duration represents a fixed amount of time. For example, <code>pl$duration(days = 1)</code> means \"exactly 24 hours\". By contrast, <code>Expr$dt$offset_by(\u20181d\u2019)</code> means \"1 calendar day\", which could sometimes be 23 hours or 25 hours depending on Daylight Savings Time. For non-fixed durations such as \"calendar month\" or \"calendar day\", please use <code>Expr$dt$offset_by()</code> instead.</p>"},{"location":"man/pl_duration.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_duration.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ntest = pl$DataFrame(\n  dt = c(\n    \"2022-01-01 00:00:00\",\n    \"2022-01-02 00:00:00\"\n  ),\n  add = 1:2\n)$with_columns(\n  pl$col(\"dt\")$str$strptime(pl$Datetime(\"us\"), format = NULL)\n)\n\ntest$with_columns(\n  (pl$col(\"dt\") + pl$duration(weeks = \"add\"))$alias(\"add_weeks\"),\n  (pl$col(\"dt\") + pl$duration(days = \"add\"))$alias(\"add_days\"),\n  (pl$col(\"dt\") + pl$duration(seconds = \"add\"))$alias(\"add_seconds\"),\n  (pl$col(\"dt\") + pl$duration(milliseconds = \"add\"))$alias(\"add_millis\"),\n  (pl$col(\"dt\") + pl$duration(hours = \"add\"))$alias(\"add_hours\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dt            \u2506 add \u2506 add_weeks     \u2506 add_days      \u2506 add_seconds  \u2506 add_millis   \u2506 add_hours    \u2502\n#&gt; \u2502 ---           \u2506 --- \u2506 ---           \u2506 ---           \u2506 ---          \u2506 ---          \u2506 ---          \u2502\n#&gt; \u2502 datetime[\u03bcs]  \u2506 i32 \u2506 datetime[\u03bcs]  \u2506 datetime[\u03bcs]  \u2506 datetime[\u03bcs] \u2506 datetime[\u03bcs] \u2506 datetime[\u03bcs] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2022-01-01    \u2506 1   \u2506 2022-01-08    \u2506 2022-01-02    \u2506 2022-01-01   \u2506 2022-01-01   \u2506 2022-01-01   \u2502\n#&gt; \u2502 00:00:00      \u2506     \u2506 00:00:00      \u2506 00:00:00      \u2506 00:00:01     \u2506 00:00:00.001 \u2506 01:00:00     \u2502\n#&gt; \u2502 2022-01-02    \u2506 2   \u2506 2022-01-16    \u2506 2022-01-04    \u2506 2022-01-02   \u2506 2022-01-02   \u2506 2022-01-02   \u2502\n#&gt; \u2502 00:00:00      \u2506     \u2506 00:00:00      \u2506 00:00:00      \u2506 00:00:02     \u2506 00:00:00.002 \u2506 02:00:00     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># we can also pass an Expr\ntest$with_columns(\n  (pl$col(\"dt\") + pl$duration(weeks = pl$col(\"add\") + 1))$alias(\"add_weeks\"),\n  (pl$col(\"dt\") + pl$duration(days = pl$col(\"add\") + 1))$alias(\"add_days\"),\n  (pl$col(\"dt\") + pl$duration(seconds = pl$col(\"add\") + 1))$alias(\"add_seconds\"),\n  (pl$col(\"dt\") + pl$duration(milliseconds = pl$col(\"add\") + 1))$alias(\"add_millis\"),\n  (pl$col(\"dt\") + pl$duration(hours = pl$col(\"add\") + 1))$alias(\"add_hours\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dt            \u2506 add \u2506 add_weeks     \u2506 add_days      \u2506 add_seconds  \u2506 add_millis   \u2506 add_hours    \u2502\n#&gt; \u2502 ---           \u2506 --- \u2506 ---           \u2506 ---           \u2506 ---          \u2506 ---          \u2506 ---          \u2502\n#&gt; \u2502 datetime[\u03bcs]  \u2506 i32 \u2506 datetime[\u03bcs]  \u2506 datetime[\u03bcs]  \u2506 datetime[\u03bcs] \u2506 datetime[\u03bcs] \u2506 datetime[\u03bcs] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2022-01-01    \u2506 1   \u2506 2022-01-15    \u2506 2022-01-03    \u2506 2022-01-01   \u2506 2022-01-01   \u2506 2022-01-01   \u2502\n#&gt; \u2502 00:00:00      \u2506     \u2506 00:00:00      \u2506 00:00:00      \u2506 00:00:02     \u2506 00:00:00.002 \u2506 02:00:00     \u2502\n#&gt; \u2502 2022-01-02    \u2506 2   \u2506 2022-01-23    \u2506 2022-01-05    \u2506 2022-01-02   \u2506 2022-01-02   \u2506 2022-01-02   \u2502\n#&gt; \u2502 00:00:00      \u2506     \u2506 00:00:00      \u2506 00:00:00      \u2506 00:00:03     \u2506 00:00:00.003 \u2506 03:00:00     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_element.html","title":"an element in \u2018eval\u2019-expr","text":"<p>Source code</p>"},{"location":"man/pl_element.html#description","title":"Description","text":"<p>Alias for an element in evaluated in an <code>eval</code> expression.</p>"},{"location":"man/pl_element.html#usage","title":"Usage","text":"<pre><code>pl_element()\n</code></pre>"},{"location":"man/pl_element.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_element.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(1:5)$cumulative_eval(pl$element()$first() - pl$element()$last()**2)$to_r()\n</code></pre> <pre><code>#&gt; [1]   0  -3  -8 -15 -24\n</code></pre>"},{"location":"man/pl_enable_string_cache.html","title":"Enable the global string cache","text":"<p>Source code</p>"},{"location":"man/pl_enable_string_cache.html#description","title":"Description","text":"<p>Some functions (e.g joins) can be applied on Categorical series only allowed if using the global string cache is enabled. This function enables the string_cache. In general, you should use <code>pl$with_string_cache()</code> instead.</p>"},{"location":"man/pl_enable_string_cache.html#usage","title":"Usage","text":"<pre><code>pl_enable_string_cache()\n</code></pre>"},{"location":"man/pl_enable_string_cache.html#value","title":"Value","text":"<p>This doesn\u2019t return any value.</p>"},{"location":"man/pl_enable_string_cache.html#see-also","title":"See Also","text":"<p><code>pl$using_string_cache</code> <code>pl$disable_string_cache</code> <code>pl$with_string_cache</code></p>"},{"location":"man/pl_enable_string_cache.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$enable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$disable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/pl_first.html","title":"Get the first value.","text":"<p>Source code</p>"},{"location":"man/pl_first.html#description","title":"Description","text":"<p>This function has different behavior depending on arguments:</p> <ul> <li>  Missing -\\&gt; Takes first column of a context.  </li> <li>  Character vectors -\\&gt; Syntactic sugar for <code>pl$col(\u2026)$first()</code>.  </li> </ul>"},{"location":"man/pl_first.html#usage","title":"Usage","text":"<pre><code>pl_first(...)\n</code></pre>"},{"location":"man/pl_first.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names (passed to <code>pl$col()</code>, see <code>?pl_col</code> for details), or empty. If empty (default), returns an expression to take the first column of the context instead."},{"location":"man/pl_first.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_first.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$first()"},{"location":"man/pl_first.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$first())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 8.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$first(\"b\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$first(c(\"a\", \"c\")))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 foo \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_fold.html","title":"Accumulate over multiple columns horizontally with an R function","text":"<p>Source code</p>"},{"location":"man/pl_fold.html#description","title":"Description","text":"<p>This allows one to do rowwise operations, starting with an initial value (<code>acc</code>). See <code>pl$reduce()</code> to do rowwise operations without this initial value.</p>"},{"location":"man/pl_fold.html#usage","title":"Usage","text":"<pre><code>pl_fold(acc, lambda, exprs)\n</code></pre>"},{"location":"man/pl_fold.html#arguments","title":"Arguments","text":"<code>acc</code>  an Expr or Into of the initial accumulator.  <code>lambda</code>  R function which takes two polars Series as input and return one.  <code>exprs</code>  Expressions to aggregate over. May also be a wildcard expression."},{"location":"man/pl_fold.html#value","title":"Value","text":"<p>An expression that will be applied rowwise</p>"},{"location":"man/pl_fold.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(mtcars)\n\n# Make the row-wise sum of all columns\ndf$with_columns(\n  pl$fold(\n    acc = pl$lit(0),\n    lambda = \\(acc, x) acc + x,\n    exprs = pl$col(\"*\")\n  )$alias(\"mpg_drat_sum_folded\")\n)\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 am  \u2506 gear \u2506 carb \u2506 mpg_drat_sum_folded \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 ---  \u2506 ---  \u2506 ---                 \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64  \u2506 f64  \u2506 f64                 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 328.98              \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 329.795             \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2506 259.58              \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2506 426.135             \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2506 590.31              \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2506 \u2026                   \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2506 273.683             \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2506 670.69              \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2506 379.59              \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2506 694.71              \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2506 288.89              \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_from_epoch.html","title":"Convert a Unix timestamp to date(time)","text":"<p>Source code</p>"},{"location":"man/pl_from_epoch.html#description","title":"Description","text":"<p>Depending on the <code>time_unit</code> provided, this function will return a different dtype:</p> <ul> <li> <code>time_unit = \u201cd\u201d</code> returns <code>pl$Date</code> </li> <li> <code>time_unit = \u201cs\u201d</code> returns <code>pl$Datetime(\"us\")</code> (<code>pl$Datetime</code>\u2019s default)  </li> <li> <code>time_unit = \u201cms\u201d</code> returns <code>pl$Datetime(\"ms\")</code> </li> <li> <code>time_unit = \u201cus\u201d</code> returns <code>pl$Datetime(\"us\")</code> </li> <li> <code>time_unit = \u201cns\u201d</code> returns <code>pl$Datetime(\"ns\")</code> </li> </ul>"},{"location":"man/pl_from_epoch.html#usage","title":"Usage","text":"<pre><code>pl_from_epoch(column, time_unit = \"s\")\n</code></pre>"},{"location":"man/pl_from_epoch.html#arguments","title":"Arguments","text":"<code>column</code>  An Expr from which integers will be parsed. If this is a float column, then the decimal part of the float will be ignored. Character are parsed as column names, but other literal values must be passed to <code>pl$lit()</code>.  <code>time_unit</code>  One of <code>\u201cns\u201d</code>, <code>\u201cus\u201d</code>, <code>\u201cms\u201d</code>, <code>\u201cs\u201d</code>, <code>\u201cd\u201d</code>"},{"location":"man/pl_from_epoch.html#value","title":"Value","text":"<p>Expr as Date or Datetime depending on the <code>time_unit</code>.</p>"},{"location":"man/pl_from_epoch.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# pass an integer column\ndf = pl$DataFrame(timestamp = c(1666683077, 1666683099))\ndf$with_columns(\n  timestamp_to_datetime = pl$from_epoch(pl$col(\"timestamp\"), time_unit = \"s\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 timestamp \u2506 timestamp_to_datetime \u2502\n#&gt; \u2502 ---       \u2506 ---                   \u2502\n#&gt; \u2502 f64       \u2506 datetime[\u03bcs]          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.6667e9  \u2506 2022-10-25 07:31:17   \u2502\n#&gt; \u2502 1.6667e9  \u2506 2022-10-25 07:31:39   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># pass a literal\npl$from_epoch(pl$lit(c(1666683077, 1666683099)), time_unit = \"s\")$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [datetime[\u03bcs]]\n#&gt; [\n#&gt;  2022-10-25 07:31:17\n#&gt;  2022-10-25 07:31:39\n#&gt; ]\n</code></pre> <pre><code># use different time_unit\ndf = pl$DataFrame(timestamp = c(12345, 12346))\ndf$with_columns(\n  timestamp_to_date = pl$from_epoch(pl$col(\"timestamp\"), time_unit = \"d\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 timestamp \u2506 timestamp_to_date \u2502\n#&gt; \u2502 ---       \u2506 ---               \u2502\n#&gt; \u2502 f64       \u2506 date              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 12345.0   \u2506 2003-10-20        \u2502\n#&gt; \u2502 12346.0   \u2506 2003-10-21        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_head.html","title":"Get the first <code>n</code> rows.","text":"<p>Source code</p>"},{"location":"man/pl_head.html#description","title":"Description","text":"<p>This function is syntactic sugar for <code>pl$col(\u2026)$head(n)</code>.</p>"},{"location":"man/pl_head.html#usage","title":"Usage","text":"<pre><code>pl_head(..., n = 10)\n</code></pre>"},{"location":"man/pl_head.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details.  <code>n</code>  Number of rows to return."},{"location":"man/pl_head.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_head.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$head()"},{"location":"man/pl_head.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$head(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 8.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$head(\"a\", \"b\", n = 2))\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 4.0 \u2502\n#&gt; \u2502 8.0 \u2506 5.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_implode.html","title":"Aggregate all column values into a list.","text":"<p>Source code</p>"},{"location":"man/pl_implode.html#description","title":"Description","text":"<p>This function is syntactic sugar for <code>pl$col(\u2026)$implode()</code>.</p>"},{"location":"man/pl_implode.html#usage","title":"Usage","text":"<pre><code>pl_implode(...)\n</code></pre>"},{"location":"man/pl_implode.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details."},{"location":"man/pl_implode.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_implode.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$select(pl$implode(\"Species\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species                           \u2502\n#&gt; \u2502 ---                               \u2502\n#&gt; \u2502 list[cat]                         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"setosa\", \"setosa\", \u2026 \"virginic\u2026 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_int_range.html","title":"Generate a range of integers","text":"<p>Source code</p>"},{"location":"man/pl_int_range.html#description","title":"Description","text":"<p>Generate a range of integers</p>"},{"location":"man/pl_int_range.html#usage","title":"Usage","text":"<pre><code>pl_int_range(start = 0, end = NULL, step = 1, ..., dtype = pl\\$Int64)\n</code></pre>"},{"location":"man/pl_int_range.html#arguments","title":"Arguments","text":"<code>start</code>  Start of the range (inclusive). Defaults to 0.  <code>end</code>  End of the range (exclusive). If <code>NULL</code> (default), the value of <code>start</code> is used and <code>start</code> is set to 0.  <code>step</code>  Step size of the range.  <code>\u2026</code>  Not used.  <code>dtype</code>  Data type of the range."},{"location":"man/pl_int_range.html#value","title":"Value","text":"<p>An Expr with the data type specified in <code>dtype</code> (default is <code>Int64</code>).</p>"},{"location":"man/pl_int_range.html#see-also","title":"See Also","text":"<p><code>pl$int_ranges()</code> to generate a range of integers for each row of the input columns.</p>"},{"location":"man/pl_int_range.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$int_range(0, 3) |&gt;\n  as_polars_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'literal' [i64]\n#&gt; [\n#&gt;  0\n#&gt;  1\n#&gt;  2\n#&gt; ]\n</code></pre> <pre><code># \"end\" can be omitted for shorter syntax\npl$int_range(3) |&gt;\n  as_polars_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'literal' [i64]\n#&gt; [\n#&gt;  0\n#&gt;  1\n#&gt;  2\n#&gt; ]\n</code></pre> <pre><code># custom data type\npl$int_range(3, dtype = pl$Int16) |&gt;\n  as_polars_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'literal' [i16]\n#&gt; [\n#&gt;  0\n#&gt;  1\n#&gt;  2\n#&gt; ]\n</code></pre> <pre><code># one can use pl$int_range() and pl$len() to create an index column\ndf = pl$DataFrame(a = c(1, 3, 5), b = c(2, 4, 6))\ndf$select(\n  index = pl$int_range(pl$len(), dtype = pl$UInt32),\n  pl$all()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 index \u2506 a   \u2506 b   \u2502\n#&gt; \u2502 ---   \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 u32   \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0     \u2506 1.0 \u2506 2.0 \u2502\n#&gt; \u2502 1     \u2506 3.0 \u2506 4.0 \u2502\n#&gt; \u2502 2     \u2506 5.0 \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_int_ranges.html","title":"Generate a range of integers for each row of the input columns","text":"<p>Source code</p>"},{"location":"man/pl_int_ranges.html#description","title":"Description","text":"<p>Generate a range of integers for each row of the input columns</p>"},{"location":"man/pl_int_ranges.html#usage","title":"Usage","text":"<pre><code>pl_int_ranges(start = 0, end = NULL, step = 1, ..., dtype = pl\\$Int64)\n</code></pre>"},{"location":"man/pl_int_ranges.html#arguments","title":"Arguments","text":"<code>start</code>  Start of the range (inclusive). Defaults to 0.  <code>end</code>  End of the range (exclusive). If <code>NULL</code> (default), the value of <code>start</code> is used and <code>start</code> is set to 0.  <code>step</code>  Step size of the range.  <code>\u2026</code>  Not used.  <code>dtype</code>  Data type of the range."},{"location":"man/pl_int_ranges.html#value","title":"Value","text":"<p>An Expr with the data type List(<code>dtype</code>) (with <code>Int64</code> as default of <code>dtype</code>).</p>"},{"location":"man/pl_int_ranges.html#see-also","title":"See Also","text":"<p><code>pl$int_range()</code> to generate a single range of integers.</p>"},{"location":"man/pl_int_ranges.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(start = c(1, -1), end = c(3, 2))\n\ndf$with_columns(int_range = pl$int_ranges(\"start\", \"end\"))\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 start \u2506 end \u2506 int_range  \u2502\n#&gt; \u2502 ---   \u2506 --- \u2506 ---        \u2502\n#&gt; \u2502 f64   \u2506 f64 \u2506 list[i64]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0   \u2506 3.0 \u2506 [1, 2]     \u2502\n#&gt; \u2502 -1.0  \u2506 2.0 \u2506 [-1, 0, 1] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(int_range = pl$int_ranges(\"start\", \"end\", dtype = pl$Int16))\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 start \u2506 end \u2506 int_range  \u2502\n#&gt; \u2502 ---   \u2506 --- \u2506 ---        \u2502\n#&gt; \u2502 f64   \u2506 f64 \u2506 list[i16]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0   \u2506 3.0 \u2506 [1, 2]     \u2502\n#&gt; \u2502 -1.0  \u2506 2.0 \u2506 [-1, 0, 1] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_is_schema.html","title":"check if schema","text":"<p>Source code</p>"},{"location":"man/pl_is_schema.html#description","title":"Description","text":"<p>check if schema</p>"},{"location":"man/pl_is_schema.html#usage","title":"Usage","text":"<pre><code>pl_is_schema(x)\n</code></pre>"},{"location":"man/pl_is_schema.html#arguments","title":"Arguments","text":"<code>x</code>  object to test if schema"},{"location":"man/pl_is_schema.html#value","title":"Value","text":"<p>bool</p>"},{"location":"man/pl_is_schema.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$is_schema(pl$DataFrame(iris)$schema)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$is_schema(list(\"alice\", \"bob\"))\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/pl_last.html","title":"Get the last value.","text":"<p>Source code</p>"},{"location":"man/pl_last.html#description","title":"Description","text":"<p>This function has different behavior depending on the input type:</p> <ul> <li>  Missing -\\&gt; Takes last column of a context.  </li> <li>  Character vectors -\\&gt; Syntactic sugar for <code>pl$col(\u2026)$last()</code>.  </li> </ul>"},{"location":"man/pl_last.html#usage","title":"Usage","text":"<pre><code>pl_last(...)\n</code></pre>"},{"location":"man/pl_last.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names (passed to <code>pl$col()</code>, see <code>?pl_col</code> for details), or empty. If empty (default), returns an expression to take the last column of the context instead."},{"location":"man/pl_last.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_last.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$last()"},{"location":"man/pl_last.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"baz\")\n)\n\ndf$select(pl$last())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 c   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 bar \u2502\n#&gt; \u2502 baz \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$last(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$last(c(\"b\", \"c\")))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2.0 \u2506 baz \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_len.html","title":"Return the number of rows in the context.","text":"<p>Source code</p>"},{"location":"man/pl_len.html#description","title":"Description","text":"<p>This is similar to <code>COUNT(*)</code> in SQL.</p>"},{"location":"man/pl_len.html#usage","title":"Usage","text":"<pre><code>pl_len()\n</code></pre>"},{"location":"man/pl_len.html#value","title":"Value","text":"<p>Expression of data type UInt32</p>"},{"location":"man/pl_len.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$count()"},{"location":"man/pl_len.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, NA),\n  b = c(3, NA, NA),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$len())\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 len \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_lit.html","title":"Create a literal value","text":"<p>Source code</p>"},{"location":"man/pl_lit.html#description","title":"Description","text":"<p>Create a literal value</p>"},{"location":"man/pl_lit.html#usage","title":"Usage","text":"<pre><code>pl_lit(x)\n</code></pre>"},{"location":"man/pl_lit.html#arguments","title":"Arguments","text":"<code>x</code>  A vector of any length"},{"location":"man/pl_lit.html#details","title":"Details","text":"<p><code>pl$lit(NULL)</code> translates into a polars <code>null</code>.</p>"},{"location":"man/pl_lit.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_lit.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# values to literal, explicit `pl$lit(42)` implicit `+ 2`\npl$col(\"some_column\") / pl$lit(42) + 2\n</code></pre> <pre><code>#&gt; polars Expr: [([(col(\"some_column\")) // (42.0)]) + (2.0)]\n</code></pre> <pre><code># vector to literal explicitly via Series and back again\n# R vector to expression and back again\npl$select(pl$lit(as_polars_series(1:4)))$to_list()[[1L]]\n</code></pre> <pre><code>#&gt; [1] 1 2 3 4\n</code></pre> <pre><code># r vector to literal and back r vector\npl$lit(1:4)$to_r()\n</code></pre> <pre><code>#&gt; [1] 1 2 3 4\n</code></pre> <pre><code># r vector to literal to dataframe\npl$select(pl$lit(1:4))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># r vector to literal to Series\npl$lit(1:4)$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre> <pre><code># vectors to literal implicitly\n(pl$lit(2) + 1:4) / 4:1\n</code></pre> <pre><code>#&gt; polars Expr: [([(2.0) + (Series)]) // (Series)]\n</code></pre>"},{"location":"man/pl_max.html","title":"Get the maximum value.","text":"<p>Source code</p>"},{"location":"man/pl_max.html#description","title":"Description","text":"<p>Syntactic sugar for <code>pl$col(\u2026)$max()</code>.</p>"},{"location":"man/pl_max.html#usage","title":"Usage","text":"<pre><code>pl_max(...)\n</code></pre>"},{"location":"man/pl_max.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details."},{"location":"man/pl_max.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_max.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$max() <li> <code>pl$max_horizontal()</code> </li>"},{"location":"man/pl_max.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  num_1 = c(1, 8, 3),\n  num_2 = c(4, 5, 2),\n  chr_1 = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$max(\"num_1\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 num_1 \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Get the maximum value of multiple columns.\ndf$select(pl$max(r\"(^num_\\d+$)\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 num_1 \u2506 num_2 \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 f64   \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0   \u2506 5.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$max(\"num_1\", \"num_2\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 num_1 \u2506 num_2 \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 f64   \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0   \u2506 5.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_max_horizontal.html","title":"Get the maximum value rowwise","text":"<p>Source code</p>"},{"location":"man/pl_max_horizontal.html#description","title":"Description","text":"<p>Get the maximum value rowwise</p>"},{"location":"man/pl_max_horizontal.html#usage","title":"Usage","text":"<pre><code>pl_max_horizontal(...)\n</code></pre>"},{"location":"man/pl_max_horizontal.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals."},{"location":"man/pl_max_horizontal.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_max_horizontal.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = NA_real_,\n  b = c(2:1, NA_real_, NA_real_),\n  c = c(1:2, NA_real_, Inf)\n)\ndf$with_columns(\n  pl$max_horizontal(\"a\", \"b\", \"c\", 99.9)$alias(\"max\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c    \u2506 max  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 2.0  \u2506 1.0  \u2506 99.9 \u2502\n#&gt; \u2502 null \u2506 1.0  \u2506 2.0  \u2506 99.9 \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 99.9 \u2502\n#&gt; \u2502 null \u2506 null \u2506 inf  \u2506 inf  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_mean.html","title":"Get the mean value.","text":"<p>Source code</p>"},{"location":"man/pl_mean.html#description","title":"Description","text":"<p>This function is syntactic sugar for <code>pl$col(\u2026)$mean()</code>.</p>"},{"location":"man/pl_mean.html#usage","title":"Usage","text":"<pre><code>pl_mean(...)\n</code></pre>"},{"location":"man/pl_mean.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details."},{"location":"man/pl_mean.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_mean.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$mean() <li> <code>pl$mean_horizontal()</code> </li>"},{"location":"man/pl_mean.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$mean(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$mean(\"a\", \"b\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0 \u2506 3.666667 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_mean_horizontal.html","title":"Compute the mean rowwise","text":"<p>Source code</p>"},{"location":"man/pl_mean_horizontal.html#description","title":"Description","text":"<p>Compute the mean rowwise</p>"},{"location":"man/pl_mean_horizontal.html#usage","title":"Usage","text":"<pre><code>pl_mean_horizontal(...)\n</code></pre>"},{"location":"man/pl_mean_horizontal.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals."},{"location":"man/pl_mean_horizontal.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_mean_horizontal.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3, 6, 7),\n  b = c(4, 5, NA_real_, Inf, NaN)\n)\n\ndf$with_columns(\n  pl$mean_horizontal(\"a\", \"b\")$alias(\"mean\"),\n  pl$mean_horizontal(\"a\", \"b\", 5)$alias(\"mean_with_lit\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b    \u2506 mean \u2506 mean_with_lit \u2502\n#&gt; \u2502 --- \u2506 ---  \u2506 ---  \u2506 ---           \u2502\n#&gt; \u2502 f64 \u2506 f64  \u2506 f64  \u2506 f64           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 4.0  \u2506 2.5  \u2506 3.333333      \u2502\n#&gt; \u2502 8.0 \u2506 5.0  \u2506 6.5  \u2506 6.0           \u2502\n#&gt; \u2502 3.0 \u2506 null \u2506 3.0  \u2506 4.0           \u2502\n#&gt; \u2502 6.0 \u2506 inf  \u2506 inf  \u2506 inf           \u2502\n#&gt; \u2502 7.0 \u2506 NaN  \u2506 NaN  \u2506 NaN           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_median.html","title":"Get the median value.","text":"<p>Source code</p>"},{"location":"man/pl_median.html#description","title":"Description","text":"<p>This function is syntactic sugar for <code>pl$col(\u2026)$median()</code>.</p>"},{"location":"man/pl_median.html#usage","title":"Usage","text":"<pre><code>pl_median(...)\n</code></pre>"},{"location":"man/pl_median.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details."},{"location":"man/pl_median.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_median.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$median()"},{"location":"man/pl_median.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$median(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$median(\"a\", \"b\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2506 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_mem_address.html","title":"Get Memory Address","text":"<p>Source code</p>"},{"location":"man/pl_mem_address.html#description","title":"Description","text":"<p>Get underlying mem address a rust object (via ExtPtr). Expert use only.</p>"},{"location":"man/pl_mem_address.html#usage","title":"Usage","text":"<pre><code>pl_mem_address(robj)\n</code></pre>"},{"location":"man/pl_mem_address.html#arguments","title":"Arguments","text":"<code>robj</code>  an R object"},{"location":"man/pl_mem_address.html#details","title":"Details","text":"<p>Does not give meaningful answers for regular R objects.</p>"},{"location":"man/pl_mem_address.html#value","title":"Value","text":"<p>String of mem address</p>"},{"location":"man/pl_mem_address.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$mem_address(pl$Series(values = 1:3))\n</code></pre> <pre><code>#&gt; [1] \"0x7f3ffd094040\"\n</code></pre>"},{"location":"man/pl_min.html","title":"Get the minimum value.","text":"<p>Source code</p>"},{"location":"man/pl_min.html#description","title":"Description","text":"<p>Syntactic sugar for <code>pl$col(\u2026)$min()</code>.</p>"},{"location":"man/pl_min.html#usage","title":"Usage","text":"<pre><code>pl_min(...)\n</code></pre>"},{"location":"man/pl_min.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details."},{"location":"man/pl_min.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_min.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$min() <li> <code>pl$min_horizontal()</code> </li>"},{"location":"man/pl_min.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  num_1 = c(1, 8, 3),\n  num_2 = c(4, 5, 2),\n  chr_1 = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$min(\"num_1\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 num_1 \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Get the minimum value of multiple columns.\ndf$select(pl$min(r\"(^num_\\d+$)\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 num_1 \u2506 num_2 \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 f64   \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0   \u2506 2.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$min(\"num_1\", \"num_2\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 num_1 \u2506 num_2 \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 f64   \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0   \u2506 2.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_min_horizontal.html","title":"Get the minimum value rowwise","text":"<p>Source code</p>"},{"location":"man/pl_min_horizontal.html#description","title":"Description","text":"<p>Get the minimum value rowwise</p>"},{"location":"man/pl_min_horizontal.html#usage","title":"Usage","text":"<pre><code>pl_min_horizontal(...)\n</code></pre>"},{"location":"man/pl_min_horizontal.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals."},{"location":"man/pl_min_horizontal.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_min_horizontal.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = NA_real_,\n  b = c(2:1, NA_real_, NA_real_),\n  c = c(1:2, NA_real_, -Inf)\n)\ndf$with_columns(\n  pl$min_horizontal(\"a\", \"b\", \"c\", 99.9)$alias(\"min\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c    \u2506 min  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 2.0  \u2506 1.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 1.0  \u2506 2.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 99.9 \u2502\n#&gt; \u2502 null \u2506 null \u2506 -inf \u2506 -inf \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_n_unique.html","title":"Count unique values.","text":"<p>Source code</p>"},{"location":"man/pl_n_unique.html#description","title":"Description","text":"<p>This function is syntactic sugar for <code>pl$col(\u2026)$n_unique()</code>.</p>"},{"location":"man/pl_n_unique.html#usage","title":"Usage","text":"<pre><code>pl_n_unique(...)\n</code></pre>"},{"location":"man/pl_n_unique.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details."},{"location":"man/pl_n_unique.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_n_unique.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$n_unique()"},{"location":"man/pl_n_unique.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 1),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$n_unique(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$n_unique(\"b\", \"c\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 u32 \u2506 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_pl.html","title":"The complete polars public API.","text":""},{"location":"man/pl_pl.html#description","title":"Description","text":"<p><code>pl</code>-object is a environment of all public functions and class constructors. Public functions are not exported as a normal package as it would be huge namespace collision with base:: and other functions. All object-methods are accessed with object$method() via the new class functions.</p> <p>Having all functions in an namespace is similar to the rust- and python- polars api.</p>"},{"location":"man/pl_pl.html#usage","title":"Usage","text":"<pre><code>pl\n</code></pre>"},{"location":"man/pl_pl.html#format","title":"Format","text":"<p>An object of class <code>pl_polars_env</code> (inherits from <code>environment</code>) of length 105.</p>"},{"location":"man/pl_pl.html#details","title":"Details","text":"<p>If someone do not particularly like the letter combination <code>pl</code>, they are free to bind the environment to another variable name as <code>simon_says = pl</code> or even do <code>attach(pl)</code></p>"},{"location":"man/pl_pl.html#value","title":"Value","text":"<p>not applicable</p>"},{"location":"man/pl_pl.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# how to use polars via `pl`\npl$col(\"colname\")$sum() / pl$lit(42L) # expression ~ chain-method / literal-expression\n</code></pre> <pre><code>#&gt; polars Expr: [(col(\"colname\").sum()) // (42)]\n</code></pre> <pre><code># show all public functions, RPolarsDataTypes, classes and methods\npl$show_all_public_functions()\n</code></pre> <pre><code>#&gt; \n#&gt; \n#&gt;     polars public functions via pl$... ( pl_polars_env environment ):\n#&gt;        [ all ; function ]\n#&gt;        [ all_horizontal ; function ]\n#&gt;        [ any_horizontal ; function ]\n#&gt;        [ approx_n_unique ; function ]\n#&gt;        [ arg_sort_by ; function ]\n#&gt;        [ arg_where ; function ]\n#&gt;        [ Array ; function ]\n#&gt;        [ Binary ; RPolarsDataType ]\n#&gt;        [ Boolean ; RPolarsDataType ]\n#&gt;        [ Categorical ; function ]\n#&gt;        [ class_names ; character ]\n#&gt;        [ coalesce ; function ]\n#&gt;        [ col ; function ]\n#&gt;        [ concat ; function ]\n#&gt;        [ concat_list ; function ]\n#&gt;        [ concat_str ; function ]\n#&gt;        [ corr ; function ]\n#&gt;        [ count ; function ]\n#&gt;        [ cov ; function ]\n#&gt;        [ DataFrame ; function ]\n#&gt;        [ date ; function ]\n#&gt;        [ Date ; RPolarsDataType ]\n#&gt;        [ date_range ; function ]\n#&gt;        [ date_ranges ; function ]\n#&gt;        [ datetime ; function ]\n#&gt;        [ Datetime ; function ]\n#&gt;        [ datetime_range ; function ]\n#&gt;        [ datetime_ranges ; function ]\n#&gt;        [ disable_string_cache ; function ]\n#&gt; \n#&gt;        dtypes ( list ):\n#&gt;           [ Array ; function ]\n#&gt;           [ Binary ; RPolarsDataType ]\n#&gt;           [ Boolean ; RPolarsDataType ]\n#&gt;           [ Categorical ; function ]\n#&gt;           [ Date ; RPolarsDataType ]\n#&gt;           [ Datetime ; function ]\n#&gt;           [ Duration ; function ]\n#&gt;           [ Float32 ; RPolarsDataType ]\n#&gt;           [ Float64 ; RPolarsDataType ]\n#&gt;           [ Int16 ; RPolarsDataType ]\n#&gt;           [ Int32 ; RPolarsDataType ]\n#&gt;           [ Int64 ; RPolarsDataType ]\n#&gt;           [ Int8 ; RPolarsDataType ]\n#&gt;           [ List ; function ]\n#&gt;           [ Null ; RPolarsDataType ]\n#&gt;           [ String ; RPolarsDataType ]\n#&gt;           [ Struct ; function ]\n#&gt;           [ Time ; RPolarsDataType ]\n#&gt;           [ UInt16 ; RPolarsDataType ]\n#&gt;           [ UInt32 ; RPolarsDataType ]\n#&gt;           [ UInt64 ; RPolarsDataType ]\n#&gt;           [ UInt8 ; RPolarsDataType ]\n#&gt;           [ Unknown ; RPolarsDataType ]\n#&gt;           [ Utf8 ; RPolarsDataType ]\n#&gt; \n#&gt;        [ duration ; function ]\n#&gt;        [ Duration ; function ]\n#&gt;        [ element ; function ]\n#&gt;        [ enable_string_cache ; function ]\n#&gt;        [ Field ; function ]\n#&gt;        [ first ; function ]\n#&gt;        [ Float32 ; RPolarsDataType ]\n#&gt;        [ Float64 ; RPolarsDataType ]\n#&gt;        [ fold ; function ]\n#&gt;        [ from_epoch ; function ]\n#&gt;        [ get_global_rpool_cap ; function ]\n#&gt;        [ head ; function ]\n#&gt;        [ implode ; function ]\n#&gt;        [ int_range ; function ]\n#&gt;        [ int_ranges ; function ]\n#&gt;        [ Int16 ; RPolarsDataType ]\n#&gt;        [ Int32 ; RPolarsDataType ]\n#&gt;        [ Int64 ; RPolarsDataType ]\n#&gt;        [ Int8 ; RPolarsDataType ]\n#&gt;        [ is_schema ; function ]\n#&gt;        [ last ; function ]\n#&gt;        [ LazyFrame ; function ]\n#&gt;        [ len ; function ]\n#&gt;        [ List ; function ]\n#&gt;        [ lit ; function ]\n#&gt;        [ max ; function ]\n#&gt;        [ max_horizontal ; function ]\n#&gt;        [ mean ; function ]\n#&gt;        [ mean_horizontal ; function ]\n#&gt;        [ median ; function ]\n#&gt;        [ mem_address ; function ]\n#&gt;        [ min ; function ]\n#&gt;        [ min_horizontal ; function ]\n#&gt;        [ n_unique ; function ]\n#&gt;        [ Null ; RPolarsDataType ]\n#&gt; \n#&gt;        numeric_dtypes ( list ):\n#&gt;           [ Float32 ; RPolarsDataType ]\n#&gt;           [ Float64 ; RPolarsDataType ]\n#&gt;           [ Int16 ; RPolarsDataType ]\n#&gt;           [ Int32 ; RPolarsDataType ]\n#&gt;           [ Int64 ; RPolarsDataType ]\n#&gt;           [ Int8 ; RPolarsDataType ]\n#&gt; \n#&gt;        [ PTime ; function ]\n#&gt;        [ raw_list ; function ]\n#&gt;        [ read_csv ; function ]\n#&gt;        [ read_ndjson ; function ]\n#&gt;        [ read_parquet ; function ]\n#&gt;        [ reduce ; function ]\n#&gt;        [ rolling_corr ; function ]\n#&gt;        [ rolling_cov ; function ]\n#&gt;        [ same_outer_dt ; function ]\n#&gt;        [ scan_csv ; function ]\n#&gt;        [ scan_ipc ; function ]\n#&gt;        [ scan_ndjson ; function ]\n#&gt;        [ scan_parquet ; function ]\n#&gt;        [ select ; function ]\n#&gt;        [ Series ; function ]\n#&gt;        [ set_global_rpool_cap ; function ]\n#&gt;        [ show_all_public_functions ; function ]\n#&gt;        [ show_all_public_methods ; function ]\n#&gt;        [ SQLContext ; function ]\n#&gt;        [ std ; function ]\n#&gt;        [ String ; RPolarsDataType ]\n#&gt;        [ struct ; function ]\n#&gt;        [ Struct ; function ]\n#&gt;        [ sum ; function ]\n#&gt;        [ sum_horizontal ; function ]\n#&gt;        [ tail ; function ]\n#&gt;        [ thread_pool_size ; function ]\n#&gt;        [ time ; function ]\n#&gt;        [ Time ; RPolarsDataType ]\n#&gt;        [ UInt16 ; RPolarsDataType ]\n#&gt;        [ UInt32 ; RPolarsDataType ]\n#&gt;        [ UInt64 ; RPolarsDataType ]\n#&gt;        [ UInt8 ; RPolarsDataType ]\n#&gt;        [ Unknown ; RPolarsDataType ]\n#&gt;        [ using_string_cache ; function ]\n#&gt;        [ Utf8 ; RPolarsDataType ]\n#&gt;        [ var ; function ]\n#&gt;        [ when ; function ]\n#&gt;        [ with_string_cache ; function ]\n</code></pre> <pre><code>pl$show_all_public_methods()\n</code></pre> <pre><code>#&gt; \n#&gt; \n#&gt;      class methods, access via object$method() ( environment ):\n#&gt; \n#&gt;        RPolarsChainedThen ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ agg_groups ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ approx_n_unique ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ arr ; property function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ bottom_k ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cum_count ; function ]\n#&gt;           [ cum_max ; function ]\n#&gt;           [ cum_min ; function ]\n#&gt;           [ cum_prod ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ eq_missing ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ floor_div ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gather ; function ]\n#&gt;           [ gather_every ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ implode ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first_distinct ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_last_distinct ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map_batches ; function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ meta ; property function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mod ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ neq_missing ; function ]\n#&gt;           [ not ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ otherwise ; function ]\n#&gt;           [ over ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ peak_max ; function ]\n#&gt;           [ peak_min ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ replace ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rle ; function ]\n#&gt;           [ rle_id ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ when ; function ]\n#&gt;           [ xor ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsChainedWhen ( environment ):\n#&gt;           [ then ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsDataFrame ( environment ):\n#&gt;           [ clone ; function ]\n#&gt;           [ columns ; setter property function ]\n#&gt;           [ describe ; function ]\n#&gt;           [ drop ; function ]\n#&gt;           [ drop_in_place ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dtype_strings ; function ]\n#&gt;           [ dtypes ; property function ]\n#&gt;           [ equals ; function ]\n#&gt;           [ estimated_size ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flags ; property function ]\n#&gt;           [ get_column ; function ]\n#&gt;           [ get_columns ; function ]\n#&gt;           [ glimpse ; function ]\n#&gt;           [ group_by ; function ]\n#&gt;           [ group_by_dynamic ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ height ; property function ]\n#&gt;           [ item ; function ]\n#&gt;           [ join ; function ]\n#&gt;           [ join_asof ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ lazy ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ melt ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ n_chunks ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ partition_by ; function ]\n#&gt;           [ pivot ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ schema ; property function ]\n#&gt;           [ select ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ to_data_frame ; function ]\n#&gt;           [ to_list ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ transpose ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unnest ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ width ; property function ]\n#&gt;           [ with_columns ; function ]\n#&gt;           [ with_row_index ; function ]\n#&gt;           [ write_csv ; function ]\n#&gt;           [ write_json ; function ]\n#&gt;           [ write_ndjson ; function ]\n#&gt;           [ write_parquet ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsDataType ( environment ):\n#&gt;           [ eq ; function ]\n#&gt;           [ get_all_simple_type_names ; function ]\n#&gt;           [ get_insides ; function ]\n#&gt;           [ is_temporal ; function ]\n#&gt;           [ ne ; function ]\n#&gt;           [ new ; function ]\n#&gt;           [ new_array ; function ]\n#&gt;           [ new_categorical ; function ]\n#&gt;           [ new_datetime ; function ]\n#&gt;           [ new_duration ; function ]\n#&gt;           [ new_list ; function ]\n#&gt;           [ new_object ; function ]\n#&gt;           [ new_struct ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ same_outer_datatype ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsExpr ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ agg_groups ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ approx_n_unique ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ arr ; property function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ bottom_k ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cum_count ; function ]\n#&gt;           [ cum_max ; function ]\n#&gt;           [ cum_min ; function ]\n#&gt;           [ cum_prod ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ eq_missing ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ floor_div ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gather ; function ]\n#&gt;           [ gather_every ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ implode ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first_distinct ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_last_distinct ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map_batches ; function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ meta ; property function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mod ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ neq_missing ; function ]\n#&gt;           [ not ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ over ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ peak_max ; function ]\n#&gt;           [ peak_min ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ replace ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rle ; function ]\n#&gt;           [ rle_id ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ xor ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsLazyFrame ( environment ):\n#&gt;           [ clone ; function ]\n#&gt;           [ collect ; function ]\n#&gt;           [ collect_in_background ; function ]\n#&gt;           [ columns ; property function ]\n#&gt;           [ describe_optimized_plan ; function ]\n#&gt;           [ describe_plan ; function ]\n#&gt;           [ drop ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dtypes ; property function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ fetch ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ get_optimization_toggle ; function ]\n#&gt;           [ group_by ; function ]\n#&gt;           [ group_by_dynamic ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ join ; function ]\n#&gt;           [ join_asof ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ melt ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ profile ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ schema ; property function ]\n#&gt;           [ select ; function ]\n#&gt;           [ set_optimization_toggle ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ sink_csv ; function ]\n#&gt;           [ sink_ipc ; function ]\n#&gt;           [ sink_ndjson ; function ]\n#&gt;           [ sink_parquet ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ to_dot ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unnest ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ width ; property function ]\n#&gt;           [ with_columns ; function ]\n#&gt;           [ with_context ; function ]\n#&gt;           [ with_row_index ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsLazyGroupBy ( environment ):\n#&gt;           [ agg ; function ]\n#&gt;           [ columns ; property function ]\n#&gt;           [ head ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ ungroup ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsSeries ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ approx_n_unique ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ arr ; property function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ bottom_k ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ chunk_lengths ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ clone ; function ]\n#&gt;           [ compare ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cum_count ; function ]\n#&gt;           [ cum_max ; function ]\n#&gt;           [ cum_min ; function ]\n#&gt;           [ cum_prod ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ dtype ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ eq_missing ; function ]\n#&gt;           [ equals ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flags ; property function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ floor_div ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gather ; function ]\n#&gt;           [ gather_every ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ implode ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first_distinct ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_last_distinct ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_numeric ; function ]\n#&gt;           [ is_sorted ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ item ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map_batches ; function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mod ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ neq_missing ; function ]\n#&gt;           [ not ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ peak_max ; function ]\n#&gt;           [ peak_min ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ replace ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rle ; function ]\n#&gt;           [ rle_id ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_frame ; function ]\n#&gt;           [ to_list ; function ]\n#&gt;           [ to_lit ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ to_vector ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ xor ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsSQLContext ( environment ):\n#&gt;           [ execute ; function ]\n#&gt;           [ register ; function ]\n#&gt;           [ register_many ; function ]\n#&gt;           [ tables ; function ]\n#&gt;           [ unregister ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsThen ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ agg_groups ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ approx_n_unique ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ arr ; property function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ bottom_k ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cum_count ; function ]\n#&gt;           [ cum_max ; function ]\n#&gt;           [ cum_min ; function ]\n#&gt;           [ cum_prod ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ eq_missing ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ floor_div ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gather ; function ]\n#&gt;           [ gather_every ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ implode ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first_distinct ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_last_distinct ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map_batches ; function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ meta ; property function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mod ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ neq_missing ; function ]\n#&gt;           [ not ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ otherwise ; function ]\n#&gt;           [ over ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ peak_max ; function ]\n#&gt;           [ peak_min ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ replace ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rle ; function ]\n#&gt;           [ rle_id ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ when ; function ]\n#&gt;           [ xor ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsWhen ( environment ):\n#&gt;           [ then ; function ]\n</code></pre>"},{"location":"man/pl_raw_list.html","title":"Polars raw list","text":"<p>Source code</p>"},{"location":"man/pl_raw_list.html#description","title":"Description","text":"<p>Create an \"rpolars_raw_list\", which is an R list where all elements must be an R raw or <code>NULL</code>.</p>"},{"location":"man/pl_raw_list.html#usage","title":"Usage","text":"<pre><code>pl_raw_list(...)\n\n# S3 method for class 'rpolars_raw_list'\nx[index]\n\n# S3 method for class 'rpolars_raw_list'\nas.list(x, ...)\n</code></pre>"},{"location":"man/pl_raw_list.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Elements  <code>x</code>  A <code>rpolars_raw_list</code> object created with <code>pl$raw_list()</code> <code>index</code>  Elements to select"},{"location":"man/pl_raw_list.html#details","title":"Details","text":"<p>In R, raw can contain a binary sequence of bytes, and the length is the number of bytes. In polars a Series of DataType Binary is more like a vector of vectors of bytes where missing values are allowed, similar to how <code>NA</code>s can be present in vectors.</p> <p>To ensure correct round-trip conversion, r-polars uses an R list where any elements must be raw or <code>NULL</code> (encoded as missing), and the S3 class is <code>c(\u201crpolars_raw_list\u201d,\u201clist\u201d)</code>.</p>"},{"location":"man/pl_raw_list.html#value","title":"Value","text":"<p>An R list where any elements must be raw, and the S3 class is <code>c(\u201crpolars_raw_list\u201d,\u201clist\u201d)</code>.</p>"},{"location":"man/pl_raw_list.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create a rpolars_raw_list\nraw_list = pl$raw_list(raw(1), raw(3), charToRaw(\"alice\"), NULL)\n\n# pass it to Series or lit\npl$Series(values = raw_list)\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [binary]\n#&gt; [\n#&gt;  b\"\\x00\"\n#&gt;  b\"\\x00\\x00\\x00\"\n#&gt;  b\"alice\"\n#&gt;  null\n#&gt; ]\n</code></pre> <pre><code>pl$lit(raw_list)\n</code></pre> <pre><code>#&gt; polars Expr: Series\n</code></pre> <pre><code># convert polars bianry Series to rpolars_raw_list\npl$Series(values = raw_list)$to_r()\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] 00\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 00 00 00\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 61 6c 69 63 65\n#&gt; \n#&gt; [[4]]\n#&gt; NULL\n#&gt; \n#&gt; attr(,\"class\")\n#&gt; [1] \"rpolars_raw_list\" \"list\"\n</code></pre> <pre><code># NB: a plain list of raws yield a polars Series of DateType [list[Binary]]\n# which is not the same\npl$Series(values = list(raw(1), raw(2)))\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [list[binary]]\n#&gt; [\n#&gt;  [b\"\\x00\"]\n#&gt;  [b\"\\x00\\x00\"]\n#&gt; ]\n</code></pre> <pre><code># to regular list, use as.list or unclass\nas.list(raw_list)\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] 00\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 00 00 00\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 61 6c 69 63 65\n#&gt; \n#&gt; [[4]]\n#&gt; NULL\n</code></pre> <pre><code># subsetting preserves class\npl$raw_list(NULL, raw(2), raw(3))[1:2]\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; NULL\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 00 00\n#&gt; \n#&gt; attr(,\"class\")\n#&gt; [1] \"rpolars_raw_list\" \"list\"\n</code></pre> <pre><code># to regular list, use as.list or unclass\npl$raw_list(NULL, raw(2), raw(3)) |&gt; as.list()\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; NULL\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 00 00\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 00 00 00\n</code></pre>"},{"location":"man/pl_reduce.html","title":"Accumulate over multiple columns horizontally with an R function","text":"<p>Source code</p>"},{"location":"man/pl_reduce.html#description","title":"Description","text":"<p>This allows one to do rowwise operations. See <code>pl$fold()</code> to do rowwise operations with an initial value.</p>"},{"location":"man/pl_reduce.html#usage","title":"Usage","text":"<pre><code>pl_reduce(lambda, exprs)\n</code></pre>"},{"location":"man/pl_reduce.html#arguments","title":"Arguments","text":"<code>lambda</code>  R function which takes two polars Series as input and return one.  <code>exprs</code>  Expressions to aggregate over. May also be a wildcard expression."},{"location":"man/pl_reduce.html#value","title":"Value","text":"<p>An expression that will be applied rowwise</p>"},{"location":"man/pl_reduce.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(mtcars)\n\n# Make the row-wise sum of all columns\ndf$with_columns(\n  pl$reduce(\n    lambda = \\(acc, x) acc + x,\n    exprs = pl$col(\"*\")\n  )$alias(\"mpg_drat_sum_reduced\")\n)\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 am  \u2506 gear \u2506 carb \u2506 mpg_drat_sum_reduced \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 ---  \u2506 ---  \u2506 ---                  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64  \u2506 f64  \u2506 f64                  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 328.98               \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 329.795              \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2506 259.58               \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2506 426.135              \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2506 590.31               \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2506 \u2026                    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2506 273.683              \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2506 670.69               \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2506 379.59               \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2506 694.71               \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2506 288.89               \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_rolling_corr.html","title":"Rolling correlation","text":"<p>Source code</p>"},{"location":"man/pl_rolling_corr.html#description","title":"Description","text":"<p>Calculates the rolling correlation between two columns</p>"},{"location":"man/pl_rolling_corr.html#usage","title":"Usage","text":"<pre><code>pl_rolling_corr(a, b, window_size, min_periods = NULL, ddof = 1)\n</code></pre>"},{"location":"man/pl_rolling_corr.html#arguments","title":"Arguments","text":"<code>a</code>  One column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>b</code>  Another column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>window_size</code>  int The length of the window  <code>min_periods</code>  NULL or int The number of values in the window that should be non-null before computing a result. If NULL, it will be set equal to window size.  <code>ddof</code>  integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/pl_rolling_corr.html#value","title":"Value","text":"<p>Expr for the computed rolling correlation</p>"},{"location":"man/pl_rolling_corr.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(data.frame(a = c(1, 8, 3), b = c(4, 5, 2)))\nlf$select(pl$rolling_corr(\"a\", \"b\", window_size = 2))$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_rolling_cov.html","title":"Rolling covariance","text":"<p>Source code</p>"},{"location":"man/pl_rolling_cov.html#description","title":"Description","text":"<p>Calculates the rolling covariance between two columns</p>"},{"location":"man/pl_rolling_cov.html#usage","title":"Usage","text":"<pre><code>pl_rolling_cov(a, b, window_size, min_periods = NULL, ddof = 1)\n</code></pre>"},{"location":"man/pl_rolling_cov.html#arguments","title":"Arguments","text":"<code>a</code>  One column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>b</code>  Another column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>window_size</code>  int The length of the window  <code>min_periods</code>  NULL or int The number of values in the window that should be non-null before computing a result. If NULL, it will be set equal to window size.  <code>ddof</code>  integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/pl_rolling_cov.html#value","title":"Value","text":"<p>Expr for the computed rolling covariance</p>"},{"location":"man/pl_rolling_cov.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(data.frame(a = c(1, 8, 3), b = c(4, 5, 2)))\nlf$select(pl$rolling_cov(\"a\", \"b\", window_size = 2))$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 3.5  \u2502\n#&gt; \u2502 7.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_select.html","title":"Select from an empty DataFrame","text":"<p>Source code</p>"},{"location":"man/pl_select.html#description","title":"Description","text":"<p><code>pl$select(\u2026)</code> is a shorthand for <code>pl$DataFrame(list())$select(\u2026)</code></p>"},{"location":"man/pl_select.html#usage","title":"Usage","text":"<pre><code>pl_select(...)\n</code></pre>"},{"location":"man/pl_select.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Expressions"},{"location":"man/pl_select.html#value","title":"Value","text":"<p>a DataFrame</p>"},{"location":"man/pl_select.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(\n  pl$lit(1:4)$alias(\"ints\"),\n  pl$lit(letters[1:4])$alias(\"letters\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 ints \u2506 letters \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 i32  \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 a       \u2502\n#&gt; \u2502 2    \u2506 b       \u2502\n#&gt; \u2502 3    \u2506 c       \u2502\n#&gt; \u2502 4    \u2506 d       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_std.html","title":"Get the standard deviation.","text":"<p>Source code</p>"},{"location":"man/pl_std.html#description","title":"Description","text":"<p>This function is syntactic sugar for <code>pl$col(\u2026)$std(ddof)</code>.</p>"},{"location":"man/pl_std.html#usage","title":"Usage","text":"<pre><code>pl_std(..., ddof = 1)\n</code></pre>"},{"location":"man/pl_std.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details.  <code>ddof</code>  An integer representing \"Delta Degrees of Freedom\": the divisor used in the calculation is <code>N - ddof</code>, where <code>N</code> represents the number of elements. By default ddof is <code>1</code>."},{"location":"man/pl_std.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_std.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$std()"},{"location":"man/pl_std.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$std(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.605551 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$std(c(\"a\", \"b\")))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 b        \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.605551 \u2506 1.527525 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_struct.html","title":"Collect columns into a struct column","text":"<p>Source code</p>"},{"location":"man/pl_struct.html#description","title":"Description","text":"<p>Collect columns into a struct column</p>"},{"location":"man/pl_struct.html#usage","title":"Usage","text":"<pre><code>pl_struct(exprs, schema = NULL)\n</code></pre>"},{"location":"man/pl_struct.html#arguments","title":"Arguments","text":"<code>exprs</code>  Columns/Expressions to collect into a Struct.  <code>schema</code>  Optional schema named list that explicitly defines the struct field dtypes. Each name must match a column name wrapped in the struct. Can only be used to cast some or all dtypes, not to change the names. If <code>NULL</code> (default), columns datatype are not modified. Columns that do not exist are silently ignored and not included in the final struct."},{"location":"man/pl_struct.html#details","title":"Details","text":"<p><code>pl$struct()</code> creates an Expr of DataType <code>Struct()</code>.</p> <p>Compared to the Python implementation, <code>pl$struct()</code> doesn\u2019t have the argument <code>eager</code> and always returns an Expr. Use <code>$to_series()</code> to return a Series.</p>"},{"location":"man/pl_struct.html#value","title":"Value","text":"<p>Expr with dtype Struct</p>"},{"location":"man/pl_struct.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# isolated expression to wrap all columns in a struct aliased 'my_struct'\npl$struct(pl$all())$alias(\"my_struct\")\n</code></pre> <pre><code>#&gt; polars Expr: *.as_struct().alias(\"my_struct\")\n</code></pre> <pre><code># wrap all column into on column/Series\ndf = pl$DataFrame(\n  int = 1:2,\n  str = c(\"a\", \"b\"),\n  bool = c(TRUE, NA),\n  list = list(1:2, 3L)\n)$select(\n  pl$struct(pl$all())$alias(\"my_struct\")\n)\n\nprint(df)\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 my_struct           \u2502\n#&gt; \u2502 ---                 \u2502\n#&gt; \u2502 struct[4]           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,\"a\",true,[1, 2]} \u2502\n#&gt; \u2502 {2,\"b\",null,[3]}    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>print(df$schema) # returns a schema, a named list containing one element a Struct named my_struct\n</code></pre> <pre><code>#&gt; $my_struct\n#&gt; DataType: Struct(\n#&gt;     [\n#&gt;         Field {\n#&gt;             name: \"int\",\n#&gt;             dtype: Int32,\n#&gt;         },\n#&gt;         Field {\n#&gt;             name: \"str\",\n#&gt;             dtype: String,\n#&gt;         },\n#&gt;         Field {\n#&gt;             name: \"bool\",\n#&gt;             dtype: Boolean,\n#&gt;         },\n#&gt;         Field {\n#&gt;             name: \"list\",\n#&gt;             dtype: List(\n#&gt;                 Int32,\n#&gt;             ),\n#&gt;         },\n#&gt;     ],\n#&gt; )\n</code></pre> <pre><code># wrap two columns in a struct and provide a schema to set all or some DataTypes by name\ne1 = pl$struct(\n  pl$col(c(\"int\", \"str\")),\n  schema = list(int = pl$Int64, str = pl$String)\n)$alias(\"my_struct\")\n# same result as e.g. wrapping the columns in a struct and casting afterwards\ne2 = pl$struct(\n  list(pl$col(\"int\"), pl$col(\"str\"))\n)$cast(\n  pl$Struct(int = pl$Int64, str = pl$String)\n)$alias(\"my_struct\")\n\ndf = pl$DataFrame(\n  int = 1:2,\n  str = c(\"a\", \"b\"),\n  bool = c(TRUE, NA),\n  list = list(1:2, 3L)\n)\n\n# verify equality in R\nidentical(df$select(e1)$to_list(), df$select(e2)$to_list())\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>df$select(e2)\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 my_struct \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 struct[2] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,\"a\"}   \u2502\n#&gt; \u2502 {2,\"b\"}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(e2)$to_data_frame()\n</code></pre> <pre><code>#&gt;   my_struct\n#&gt; 1      1, a\n#&gt; 2      2, b\n</code></pre>"},{"location":"man/pl_sum.html","title":"Sum all values.","text":"<p>Source code</p>"},{"location":"man/pl_sum.html#description","title":"Description","text":"<p>Syntactic sugar for <code>pl$col(\u2026)$sum()</code>.</p>"},{"location":"man/pl_sum.html#usage","title":"Usage","text":"<pre><code>pl_sum(...)\n</code></pre>"},{"location":"man/pl_sum.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details."},{"location":"man/pl_sum.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_sum.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$sum() <li> <code>pl$sum_horizontal()</code> </li>"},{"location":"man/pl_sum.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(col_a = 1:2, col_b = 3:4, c = 5:6)\n\ndf$select(pl$sum(\"col_a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col_a \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Sum multiple columns\ndf$select(pl$sum(\"col_a\", \"col_b\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col_a \u2506 col_b \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 i32   \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3     \u2506 7     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$sum(\"^col_.*$\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col_a \u2506 col_b \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 i32   \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3     \u2506 7     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_sum_horizontal.html","title":"Compute the sum rowwise","text":"<p>Source code</p>"},{"location":"man/pl_sum_horizontal.html#description","title":"Description","text":"<p>Compute the sum rowwise</p>"},{"location":"man/pl_sum_horizontal.html#usage","title":"Usage","text":"<pre><code>pl_sum_horizontal(...)\n</code></pre>"},{"location":"man/pl_sum_horizontal.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals."},{"location":"man/pl_sum_horizontal.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_sum_horizontal.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = NA_real_,\n  b = c(3:4, NA_real_, NA_real_),\n  c = c(1:2, NA_real_, -Inf)\n)\ndf$with_columns(\n  pl$sum_horizontal(\"a\", \"b\", \"c\", 2)$alias(\"sum\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c    \u2506 sum  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 3.0  \u2506 1.0  \u2506 6.0  \u2502\n#&gt; \u2502 null \u2506 4.0  \u2506 2.0  \u2506 8.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 2.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 -inf \u2506 -inf \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_tail.html","title":"Get the last <code>n</code> rows.","text":"<p>Source code</p>"},{"location":"man/pl_tail.html#description","title":"Description","text":"<p>This function is syntactic sugar for <code>pl$col(\u2026)$tail(n)</code>.</p>"},{"location":"man/pl_tail.html#usage","title":"Usage","text":"<pre><code>pl_tail(..., n = 10)\n</code></pre>"},{"location":"man/pl_tail.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details.  <code>n</code>  Number of rows to return."},{"location":"man/pl_tail.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_tail.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$tail()"},{"location":"man/pl_tail.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$tail(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 8.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$tail(\"a\", \"b\", n = 2))\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0 \u2506 5.0 \u2502\n#&gt; \u2502 3.0 \u2506 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_thread_pool_size.html","title":"Get the number of threads in the Polars thread pool.","text":"<p>Source code</p>"},{"location":"man/pl_thread_pool_size.html#description","title":"Description","text":"<p>The threadpool size can be overridden by setting the <code>POLARS_MAX_THREADS</code> environment variable before process start. It cannot be modified once <code>polars</code> is loaded. It is strongly recommended not to override this value as it will be set automatically by the engine.</p>"},{"location":"man/pl_thread_pool_size.html#usage","title":"Usage","text":"<pre><code>pl_thread_pool_size()\n</code></pre>"},{"location":"man/pl_thread_pool_size.html#details","title":"Details","text":"<p>For compatibility with CRAN, the threadpool size is set to 2 by default. To disable this behavior and let the engine determine the threadpool size, one of the following ways can be used:</p> <ul> <li>  Enable the <code>disable_limit_max_threads</code> feature of the library. This can be done by setting the feature flag when installing the package. See the installation vignette (<code>vignette(\u201cinstall\u201d, \u201cpolars\u201d)</code>) for details.  </li> <li>  Set the <code>polars.limit_max_threads</code> option to <code>FALSE</code> with the <code>options()</code> function. Same as setting the <code>POLARS_MAX_THREADS</code> environment variable, this option must be set before loading the package.  </li> </ul>"},{"location":"man/pl_thread_pool_size.html#value","title":"Value","text":"<p>The number of threads</p>"},{"location":"man/pl_thread_pool_size.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$thread_pool_size()\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre>"},{"location":"man/pl_time.html","title":"Create a Time expression","text":"<p>Source code</p>"},{"location":"man/pl_time.html#description","title":"Description","text":"<p>Create a Time expression</p>"},{"location":"man/pl_time.html#usage","title":"Usage","text":"<pre><code>pl_time(hour = NULL, minute = NULL, second = NULL, microsecond = NULL)\n</code></pre>"},{"location":"man/pl_time.html#arguments","title":"Arguments","text":"<code>hour</code>  An Expr or something coercible to an Expr, that must return an integer between 0 and 23. Strings are parsed as column names. Floats are cast to integers.  <code>minute</code>  An Expr or something coercible to an Expr, that must return an integer between 0 and 59. Strings are parsed as column names. Floats are cast to integers.  <code>second</code>  An Expr or something coercible to an Expr, that must return an integer between 0 and 59. Strings are parsed as column names. Floats are cast to integers.  <code>microsecond</code>  An Expr or something coercible to an Expr, that must return an integer between 0 and 999,999. Strings are parsed as column names. Floats are cast to integers."},{"location":"man/pl_time.html#value","title":"Value","text":"<p>An Expr of type Time</p>"},{"location":"man/pl_time.html#see-also","title":"See Also","text":"<ul> <li> <code>pl$datetime()</code> </li> <li> <code>pl$date()</code> </li> </ul>"},{"location":"man/pl_time.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(hour = 19:21, min = 9:11, sec = 10:12, micro = 1)\n\ndf$with_columns(\n  time_from_cols = pl$time(\"hour\", \"min\", \"sec\", \"micro\"),\n  time_from_lit = pl$time(12, 3, 5),\n  time_from_mix = pl$time(\"hour\", 3, 5)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 hour \u2506 min \u2506 sec \u2506 micro \u2506 time_from_cols  \u2506 time_from_lit \u2506 time_from_mix \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 --- \u2506 ---   \u2506 ---             \u2506 ---           \u2506 ---           \u2502\n#&gt; \u2502 i32  \u2506 i32 \u2506 i32 \u2506 f64   \u2506 time            \u2506 time          \u2506 time          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19   \u2506 9   \u2506 10  \u2506 1.0   \u2506 19:09:10.000001 \u2506 12:03:05      \u2506 19:03:05      \u2502\n#&gt; \u2502 20   \u2506 10  \u2506 11  \u2506 1.0   \u2506 20:10:11.000001 \u2506 12:03:05      \u2506 20:03:05      \u2502\n#&gt; \u2502 21   \u2506 11  \u2506 12  \u2506 1.0   \u2506 21:11:12.000001 \u2506 12:03:05      \u2506 21:03:05      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># floats are coerced to integers\ndf$with_columns(\n  time_floats = pl$time(12.5, 5.3, 1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 hour \u2506 min \u2506 sec \u2506 micro \u2506 time_floats \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 --- \u2506 ---   \u2506 ---         \u2502\n#&gt; \u2502 i32  \u2506 i32 \u2506 i32 \u2506 f64   \u2506 time        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19   \u2506 9   \u2506 10  \u2506 1.0   \u2506 12:05:01    \u2502\n#&gt; \u2502 20   \u2506 10  \u2506 11  \u2506 1.0   \u2506 12:05:01    \u2502\n#&gt; \u2502 21   \u2506 11  \u2506 12  \u2506 1.0   \u2506 12:05:01    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># if time can't be constructed, it returns null\ndf$with_columns(\n  time_floats = pl$time(pl$lit(\"abc\"), -2, 1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 hour \u2506 min \u2506 sec \u2506 micro \u2506 time_floats \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 --- \u2506 ---   \u2506 ---         \u2502\n#&gt; \u2502 i32  \u2506 i32 \u2506 i32 \u2506 f64   \u2506 time        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19   \u2506 9   \u2506 10  \u2506 1.0   \u2506 null        \u2502\n#&gt; \u2502 20   \u2506 10  \u2506 11  \u2506 1.0   \u2506 null        \u2502\n#&gt; \u2502 21   \u2506 11  \u2506 12  \u2506 1.0   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_using_string_cache.html","title":"Check if the global string cache is enabled","text":"<p>Source code</p>"},{"location":"man/pl_using_string_cache.html#description","title":"Description","text":"<p>This function simply checks if the global string cache is active.</p>"},{"location":"man/pl_using_string_cache.html#usage","title":"Usage","text":"<pre><code>pl_using_string_cache()\n</code></pre>"},{"location":"man/pl_using_string_cache.html#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/pl_using_string_cache.html#see-also","title":"See Also","text":"<p><code>pl$with_string_cache</code> <code>pl$enable_enable_cache</code></p>"},{"location":"man/pl_using_string_cache.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$enable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$disable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/pl_var.html","title":"Get the variance.","text":"<p>Source code</p>"},{"location":"man/pl_var.html#description","title":"Description","text":"<p>This function is syntactic sugar for <code>pl$col(\u2026)$var(ddof)</code>.</p>"},{"location":"man/pl_var.html#usage","title":"Usage","text":"<pre><code>pl_var(..., ddof = 1)\n</code></pre>"},{"location":"man/pl_var.html#arguments","title":"Arguments","text":"<code>\u2026</code>  Characters indicating the column names, passed to <code>pl$col()</code>. See <code>?pl_col</code> for details.  <code>ddof</code>  An integer representing \"Delta Degrees of Freedom\": the divisor used in the calculation is <code>N - ddof</code>, where <code>N</code> represents the number of elements. By default ddof is <code>1</code>."},{"location":"man/pl_var.html#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_var.html#see-also","title":"See Also","text":"<ul> <li> <code>\\$var()"},{"location":"man/pl_var.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\ndf$select(pl$var(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 13.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$var(\"a\", \"b\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b        \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 13.0 \u2506 2.333333 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_with_string_cache.html","title":"Evaluate one or several expressions with global string cache","text":"<p>Source code</p>"},{"location":"man/pl_with_string_cache.html#description","title":"Description","text":"<p>This function only temporarily enables the global string cache.</p>"},{"location":"man/pl_with_string_cache.html#usage","title":"Usage","text":"<pre><code>pl_with_string_cache(expr)\n</code></pre>"},{"location":"man/pl_with_string_cache.html#arguments","title":"Arguments","text":"<code>expr</code>  An Expr to evaluate while the string cache is enabled."},{"location":"man/pl_with_string_cache.html#value","title":"Value","text":"<p>return value of expression</p>"},{"location":"man/pl_with_string_cache.html#see-also","title":"See Also","text":"<p><code>pl$using_string_cache</code> <code>pl$enable_enable_cache</code></p>"},{"location":"man/pl_with_string_cache.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# activate string cache temporarily when constructing two DataFrame's\npl$with_string_cache({\n  df1 = pl$DataFrame(head(iris, 2))\n  df2 = pl$DataFrame(tail(iris, 2))\n})\n</code></pre> <pre><code>#&gt; shape: (2, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$concat(list(df1, df2))\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/polars_class_object.html","title":"Any polars class object is made of this","text":""},{"location":"man/polars_class_object.html#description","title":"Description","text":"<p>One SEXP of Rtype: \"externalptr\" + a class attribute</p>"},{"location":"man/polars_class_object.html#details","title":"Details","text":"<ul> <li> <code>object$method()</code> calls are facilitated by a <code>$.ClassName</code>- s3method see \u2018R/after-wrappers.R\u2019  </li> <li>  Code completion is facilitated by <code>.DollarNames.ClassName</code>-s3method see e.g.\u00a0\u2019R/dataframe\\_\\_frame.R\u2019  </li> <li>  Implementation of property-methods as DataFrame_columns() and syntax checking is an extension to <code>$.ClassName</code> See function macro_add_syntax_check_to_class().  </li> </ul>"},{"location":"man/polars_class_object.html#value","title":"Value","text":"<p>not applicable</p>"},{"location":"man/polars_class_object.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# all a polars object is only made of:\nsome_polars_object = pl$DataFrame(iris)\nstr(some_polars_object) # External Pointer tagged with a class attribute.\n</code></pre> <pre><code>#&gt; Class 'RPolarsDataFrame' &lt;externalptr&gt;\n</code></pre> <pre><code># All state is stored on rust side.\n\n# The single exception from the rule is class \"GroupBy\", where objects also have\n# two private attributes \"groupby_input\" and \"maintain_order\".\nstr(pl$DataFrame(iris)$group_by(\"Species\"))\n</code></pre> <pre><code>#&gt;  'RPolarsGroupBy' Named chr \" \"\n#&gt;  - attr(*, \"private\")=List of 3\n#&gt;   ..$ dat           :Class 'RPolarsDataFrame' &lt;externalptr&gt; \n#&gt;   ..$ groupby_input :List of 1\n#&gt;   .. ..$ : chr \"Species\"\n#&gt;   ..$ maintain_order: logi FALSE\n</code></pre>"},{"location":"man/polars_code_completion_activate.html","title":"Polars code completion","text":"<p>Source code</p>"},{"location":"man/polars_code_completion_activate.html#description","title":"Description","text":"<p>Polars code completion</p>"},{"location":"man/polars_code_completion_activate.html#usage","title":"Usage","text":"<pre><code>polars_code_completion_activate(\n  mode = c(\"auto\", \"rstudio\", \"native\"),\n  verbose = TRUE\n)\n\npolars_code_completion_deactivate()\n</code></pre>"},{"location":"man/polars_code_completion_activate.html#arguments","title":"Arguments","text":"<code>mode</code>  One of <code>\u201cauto\u201d</code>, <code>\u201crstudio\u201d</code>, or <code>\u201cnative\u201d</code>. Automatic mode picks <code>\u201crstudio\u201d</code> if <code>.Platform$GUI</code> is <code>\u201cRStudio\u201d</code>. <code>\u201cnative\u201d</code> registers a custom line buffer completer with <code>utils:::rc.getOption(\u201ccustom.completer\u201d)</code>. <code>\u201crstudio\u201d</code> modifies RStudio code internal <code>.DollarNames</code> and function args completion, as the IDE does not behave well with <code>utils:::rc.getOption(\u201ccustom.completer\u201d)</code>.  <code>verbose</code>  Print message of what mode is started."},{"location":"man/polars_code_completion_activate.html#details","title":"Details","text":"<p>Polars code completion has one implementation for a native terminal via <code>utils:::rc.getOption(\u201ccustom.completer\u201d)</code> and one for Rstudio by intercepting Rstudio internal functions <code>.rs.getCompletionsFunction</code> &amp; <code>.rs.getCompletionsDollar</code> in the loaded session environment <code>tools:rstudio</code>. Therefore, any error or slowness in the completion is likely to come from r-polars implementation.</p> <p>Either completers will evaluate the full line-buffer to decide what methods are available. Pressing tab will literally evaluate left-hand-side with any following side. This works swiftly for the polars lazy API, but it can take some time for the eager API depending on the size of the data and of the query.</p>"},{"location":"man/polars_code_completion_activate.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\nif (interactive()) {\n  # activate completion\n  polars_code_completion_activate()\n\n  # method / property completion for chained expressions\n  # add a $ and press tab to see methods of LazyFrame\n  pl$LazyFrame(iris)\n\n  # Arg + column-name completion\n  # press tab inside group_by() to see args and/or column names.\n  pl$LazyFrame(iris)$group_by()\n\n  # deactivate like this or restart R session\n  polars_code_completion_deactivate()\n}\n</code></pre>"},{"location":"man/polars_duration_string.html","title":"The Polars duration string language","text":""},{"location":"man/polars_duration_string.html#description","title":"Description","text":"<p>The Polars duration string language</p>"},{"location":"man/polars_duration_string.html#polars-duration-string-language","title":"Polars duration string language","text":"<p>Polars duration string language is a simple representation of durations. It is used in many Polars functions that accept durations.</p> <p>It has the following format:</p> <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 calendar day)  </li> <li>  1w (1 calendar week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1q (1 calendar quarter)  </li> <li>  1y (1 calendar year)  </li> </ul> <p>Or combine them: <code>\u201c3d12h4m25s\u201d</code> # 3 days, 12 hours, 4 minutes, and 25 seconds</p> <p>By \"calendar day\", we mean the corresponding time on the next day (which may not be 24 hours, due to daylight savings). Similarly for \"calendar week\", \"calendar month\", \"calendar quarter\", and \"calendar year\".</p>"},{"location":"man/polars_envvars.html","title":"Get polars environment variables","text":"<p>Source code</p>"},{"location":"man/polars_envvars.html#description","title":"Description","text":"<p>Get polars environment variables</p>"},{"location":"man/polars_envvars.html#usage","title":"Usage","text":"<pre><code>polars_envvars()\n</code></pre>"},{"location":"man/polars_envvars.html#details","title":"Details","text":"<p>The following envvars are available (in alphabetical order, with the default value in parenthesis):</p> <ul> <li> <code>POLARS_FMT_MAX_COLS</code> (<code>5</code>): Set the number of columns that are visible when displaying tables. If negative, all columns are displayed.  </li> <li> <code>POLARS_FMT_MAX_ROWS</code> (<code>8</code>): Set the number of rows that are visible when displaying tables. If negative, all rows are displayed. This applies to both <code>DataFrame</code> and <code>Series</code>.  </li> <li> <code>POLARS_FMT_STR_LEN</code> (<code>32</code>): Maximum number of characters to display;  </li> <li> <code>POLARS_FMT_TABLE_CELL_ALIGNMENT</code> (<code>\u201cLEFT\u201d</code>): set the table cell alignment. Can be <code>\u201cLEFT\u201d</code>, <code>\u201cCENTER\u201d</code>, <code>\u201cRIGHT\u201d</code>;  </li> <li> <code>POLARS_FMT_TABLE_CELL_LIST_LEN</code> (<code>3</code>): Maximum number of elements of list variables to display;  </li> <li> <code>POLARS_FMT_TABLE_CELL_NUMERIC_ALIGNMENT</code> (<code>\u201cLEFT\u201d</code>): Set the table cell alignment for numeric columns. Can be <code>\u201cLEFT\u201d</code>, <code>\u201cCENTER\u201d</code>, <code>\u201cRIGHT\u201d</code>;  </li> <li> <code>POLARS_FMT_TABLE_DATAFRAME_SHAPE_BELOW</code> (<code>\u201c0\u201d</code>): print the DataFrame shape information below the data when displaying tables. Can be <code>\u201c0\u201d</code> or <code>\u201c1\u201d</code>.  </li> <li> <code>POLARS_FMT_TABLE_FORMATTING</code> (<code>\u201cUTF8_FULL_CONDENSED\u201d</code>): Set table formatting style. Possible values:  <ul> <li> <code>\u201cASCII_FULL\u201d</code>: ASCII, with all borders and lines, including row dividers.  </li> <li> <code>\u201cASCII_FULL_CONDENSED\u201d</code>: Same as ASCII_FULL, but with dense row spacing.  </li> <li> <code>\u201cASCII_NO_BORDERS\u201d</code>: ASCII, no borders.  </li> <li> <code>\u201cASCII_BORDERS_ONLY\u201d</code>: ASCII, borders only.  </li> <li> <code>\u201cASCII_BORDERS_ONLY_CONDENSED\u201d</code>: ASCII, borders only, dense row spacing.  </li> <li> <code>\u201cASCII_HORIZONTAL_ONLY\u201d</code>: ASCII, horizontal lines only.  </li> <li> <code>\u201cASCII_MARKDOWN\u201d</code>: ASCII, Markdown compatible.  </li> <li> <code>\u201cUTF8_FULL\u201d</code>: UTF8, with all borders and lines, including row dividers.  </li> <li> <code>\u201cUTF8_FULL_CONDENSED\u201d</code>: Same as UTF8_FULL, but with dense row spacing.  </li> <li> <code>\u201cUTF8_NO_BORDERS\u201d</code>: UTF8, no borders.  </li> <li> <code>\u201cUTF8_BORDERS_ONLY\u201d</code>: UTF8, borders only.  </li> <li> <code>\u201cUTF8_HORIZONTAL_ONLY\u201d</code>: UTF8, horizontal lines only.  </li> <li> <code>\u201cNOTHING\u201d</code>: No borders or other lines.  </li> </ul> </li> <li> <code>POLARS_FMT_TABLE_HIDE_COLUMN_DATA_TYPES</code> (<code>\u201c0\u201d</code>): Hide table column data types (i64, f64, str etc.). Can be <code>\u201c0\u201d</code> or <code>\u201c1\u201d</code>.  </li> <li> <code>POLARS_FMT_TABLE_HIDE_COLUMN_NAMES</code> (<code>\u201c0\u201d</code>): Hide table column names. Can be <code>\u201c0\u201d</code> or <code>\u201c1\u201d</code>.  </li> <li> <code>POLARS_FMT_TABLE_HIDE_COLUMN_SEPARATOR</code> (<code>\u201c0\u201d</code>): Hide the <code>\u201c\u2014\u201d</code> separator between the column names and column types. Can be <code>\u201c0\u201d</code> or <code>\u201c1\u201d</code>.  </li> <li> <code>POLARS_FMT_TABLE_HIDE_DATAFRAME_SHAPE_INFORMATION</code> (<code>\u201c0\u201d</code>): Hide the DataFrame shape information when displaying tables. Can be <code>\u201c0\u201d</code> or <code>\u201c1\u201d</code>.  </li> <li> <code>POLARS_FMT_TABLE_INLINE_COLUMN_DATA_TYPE</code> (<code>\u201c0\u201d</code>): Moves the data type inline with the column name (to the right, in parentheses). Can be <code>\u201c0\u201d</code> or <code>\u201c1\u201d</code>.  </li> <li> <code>POLARS_FMT_TABLE_ROUNDED_CORNERS</code> (<code>\u201c0\u201d</code>): Apply rounded corners to UTF8-styled tables (only applies to UTF8 formats).  </li> <li> <code>POLARS_MAX_THREADS</code> (<code>\\): Maximum number of threads used to initialize the thread pool. The thread pool is locked once polars is loaded, so this envvar must be set before loading the package.   <li> <code>POLARS_STREAMING_CHUNK_SIZE</code> (<code>\\): Chunk size used in the streaming engine. Integer larger than 1. By default, the chunk size is determined by the schema and size of the thread pool. For some datasets (esp.\u00a0when you have large string elements) this can be too optimistic and lead to Out of Memory errors.   <li> <code>POLARS_TABLE_WIDTH</code> (<code>\\): Set the maximum width of a table in characters.   <li> <code>POLARS_VERBOSE</code> (<code>\u201c0\u201d</code>): Enable additional verbose/debug logging.  </li> <li> <code>POLARS_WARN_UNSTABLE</code> (<code>\u201c0\u201d</code>): Issue a warning when unstable functionality is used. Enabling this setting may help avoid functionality that is still evolving, potentially reducing maintenance burden from API changes and bugs. Can be <code>\u201c0\u201d</code> or <code>\u201c1\u201d</code>.  </li> <p>The following configuration options are present in the Python API but currently cannot be changed in R: decimal separator, thousands separator, float precision, float formatting, trimming decimal zeros.</p>"},{"location":"man/polars_envvars.html#value","title":"Value","text":"<p><code>polars_envvars()</code> returns a named list where the names are the names of environment variables and values are their values.</p>"},{"location":"man/polars_envvars.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npolars_envvars()\n</code></pre> <pre><code>#&gt; Environment variables:\n#&gt; ========                                                                     \n#&gt; POLARS_FMT_MAX_COLS                                                 5\n#&gt; POLARS_FMT_MAX_ROWS                                                 8\n#&gt; POLARS_FMT_STR_LEN                                                 32\n#&gt; POLARS_FMT_TABLE_CELL_ALIGNMENT                                  LEFT\n#&gt; POLARS_FMT_TABLE_CELL_LIST_LEN                                      3\n#&gt; POLARS_FMT_TABLE_CELL_NUMERIC_ALIGNMENT                          LEFT\n#&gt; POLARS_FMT_TABLE_DATAFRAME_SHAPE_BELOW                              0\n#&gt; POLARS_FMT_TABLE_FORMATTING                       UTF8_FULL_CONDENSED\n#&gt; POLARS_FMT_TABLE_HIDE_COLUMN_DATA_TYPES                             0\n#&gt; POLARS_FMT_TABLE_HIDE_COLUMN_NAMES                                  0\n#&gt; POLARS_FMT_TABLE_HIDE_COLUMN_SEPARATOR                              0\n#&gt; POLARS_FMT_TABLE_HIDE_DATAFRAME_SHAPE_INFORMATION                   0\n#&gt; POLARS_FMT_TABLE_INLINE_COLUMN_DATA_TYPE                            0\n#&gt; POLARS_FMT_TABLE_ROUNDED_CORNERS                                    0\n#&gt; POLARS_MAX_THREADS                                                  4\n#&gt; POLARS_STREAMING_CHUNK_SIZE                                  variable\n#&gt; POLARS_TABLE_WIDTH                                           variable\n#&gt; POLARS_VERBOSE                                                      0\n#&gt; POLARS_WARN_UNSTABLE                                                0\n#&gt; \n#&gt; See `?polars::polars_envvars` for the definition of all envvars.\n</code></pre> <pre><code>pl$DataFrame(x = \"This is a very very very long sentence.\")\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x                                 \u2502\n#&gt; \u2502 ---                               \u2502\n#&gt; \u2502 str                               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 This is a very very very long se\u2026 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>Sys.setenv(POLARS_FMT_STR_LEN = 50)\npl$DataFrame(x = \"This is a very very very long sentence.\")\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x                                       \u2502\n#&gt; \u2502 ---                                     \u2502\n#&gt; \u2502 str                                     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 This is a very very very long sentence. \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># back to default\nSys.setenv(POLARS_FMT_STR_LEN = 32)\n</code></pre>"},{"location":"man/polars_info.html","title":"Report information of the package","text":"<p>Source code</p>"},{"location":"man/polars_info.html#description","title":"Description","text":"<p>This function reports the following information:</p> <ul> <li>  Package versions (the Polars R package version and the dependent Rust Polars crate version)  </li> <li>  Number of threads used by Polars  </li> <li>  Rust feature flags (See <code>vignette(\u201cinstall\u201d, \u201cpolars\u201d)</code> for details)  </li> <li>  Code completion mode: either <code>\u201cdeactivated\u201d</code>, <code>\u201crstudio\u201d</code>, or <code>\u201cnative\u201d</code>. See <code>polars_code_completion_activate()</code>.  </li> </ul>"},{"location":"man/polars_info.html#usage","title":"Usage","text":"<pre><code>polars_info()\n</code></pre>"},{"location":"man/polars_info.html#value","title":"Value","text":"<p>A list with information of the package</p>"},{"location":"man/polars_info.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npolars_info()\n</code></pre> <pre><code>#&gt; Polars R package version : 0.15.1.9000\n#&gt; Rust Polars crate version: 0.38.3\n#&gt; \n#&gt; Thread pool size: 4 \n#&gt; \n#&gt; Features:                               \n#&gt; default                    TRUE\n#&gt; full_features              TRUE\n#&gt; disable_limit_max_threads  TRUE\n#&gt; nightly                    TRUE\n#&gt; sql                        TRUE\n#&gt; rpolars_debug_print       FALSE\n#&gt; \n#&gt; Code completion: deactivated\n</code></pre> <pre><code>polars_info()$versions\n</code></pre> <pre><code>#&gt; $r_package\n#&gt; [1] \"0.15.1.9000\"\n#&gt; \n#&gt; $rust_crate\n#&gt; [1] \"0.38.3\"\n</code></pre> <pre><code>polars_info()$features$nightly\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/polars_options.html","title":"Get and reset polars options","text":"<p>Source code</p>"},{"location":"man/polars_options.html#description","title":"Description","text":"<p><code>polars_options()</code> returns a list of options for polars. Options can be set with <code>options()</code>. Note that options must be prefixed with \"polars.\", e.g to modify the option <code>strictly_immutable</code> you need to pass <code>options(polars.strictly_immutable =)</code>. See below for a description of all options.</p> <p><code>polars_options_reset()</code> brings all polars options back to their default value.</p>"},{"location":"man/polars_options.html#usage","title":"Usage","text":"<pre><code>polars_options()\n\npolars_options_reset()\n</code></pre>"},{"location":"man/polars_options.html#details","title":"Details","text":"<p>The following options are available (in alphabetical order, with the default value in parenthesis):</p> <ul> <li> <code>debug_polars</code> (<code>FALSE</code>): Print additional information to debug Polars.  </li> <li> <code>do_not_repeat_call</code> (<code>FALSE</code>): Do not print the call causing the error in error messages. The default is to show them.  </li> <li> <code>int64_conversion</code> (<code>\u201cdouble\u201d</code>): How should Int64 values be handled when converting a polars object to R?  <ul> <li> <code>\u201cdouble\u201d</code> converts the integer values to double.  </li> <li> <code>\u201cbit64\u201d</code> uses <code>bit64::as.integer64()</code> to do the conversion (requires the package <code>bit64</code> to be attached).  </li> <li> <code>\u201cstring\u201d</code> converts Int64 values to character.  </li> </ul> </li> <li> <code>limit_max_threads</code> (<code>!polars_info()$features$disable_limit_max_threads</code>): See <code>?pl_thread_pool_size</code> for details. This option should be set before the package is loaded.  </li> <li> <code>maintain_order</code> (<code>FALSE</code>): Default for the <code>maintain_order</code> argument in <code>\\$group_by() and <code>\\$group_by().   <li> <code>no_messages</code> (<code>FALSE</code>): Hide messages.  </li> <li> <code>rpool_cap</code>: The maximum number of R sessions that can be used to process R code in the background. See the section \"About pool options\" below.  </li> <li> <code>strictly_immutable</code> (<code>TRUE</code>): Keep polars strictly immutable. Polars/arrow is in general pro \"immutable objects\". Immutability is also classic in R. To mimic the Python-polars API, set this to <code>FALSE.</code> </li>"},{"location":"man/polars_options.html#value","title":"Value","text":"<p><code>polars_options()</code> returns a named list where the names are option names and values are option values.</p> <p><code>polars_options_reset()</code> doesn\u2019t return anything.</p>"},{"location":"man/polars_options.html#about-pool-options","title":"About pool options","text":"<p><code>polars_options()$rpool_active</code> indicates the number of R sessions already spawned in pool. <code>polars_options()$rpool_cap</code> indicates the maximum number of new R sessions that can be spawned. Anytime a polars thread worker needs a background R session specifically to run R code embedded in a query via <code>$map_batches(\u2026, in_background = TRUE)</code> or <code>$map_elements(\u2026, in_background = TRUE)</code>, it will obtain any R session idling in rpool, or spawn a new R session (process) and add it to the rpool if <code>rpool_cap</code> is not already reached. If <code>rpool_cap</code> is already reached, the thread worker will sleep until an R session is idling.</p> <p>Background R sessions communicate via polars arrow IPC (series/vectors) or R serialize + shared memory buffers via the rust crate <code>ipc-channel</code>. Multi-process communication has overhead because all data must be serialized/de-serialized and sent via buffers. Using multiple R sessions will likely only give a speed-up in a <code>low io - high cpu</code> scenario. Native polars query syntax runs in threads and have no overhead.</p>"},{"location":"man/polars_options.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\noptions(polars.maintain_order = TRUE, polars.strictly_immutable = FALSE)\npolars_options()\n</code></pre> <pre><code>#&gt; Options:\n#&gt; ========                         \n#&gt; debug_polars        FALSE\n#&gt; df_knitr_print       auto\n#&gt; do_not_repeat_call  FALSE\n#&gt; int64_conversion   double\n#&gt; limit_max_threads   FALSE\n#&gt; maintain_order       TRUE\n#&gt; no_messages         FALSE\n#&gt; rpool_active            0\n#&gt; rpool_cap               4\n#&gt; strictly_immutable  FALSE\n#&gt; \n#&gt; See `?polars_options` for the definition of all options.\n</code></pre> <pre><code># option checks are run when calling polars_options(), not when setting\n# options\noptions(polars.maintain_order = 42, polars.int64_conversion = \"foobar\")\ntryCatch(\n  polars_options(),\n  error = function(e) print(e)\n)\n</code></pre> <pre><code>#&gt; &lt;simpleError: Some polars options have an unexpected value:\n#&gt; - maintain_order: input must be TRUE or FALSE.\n#&gt; - int64_conversion: input must be one of \"float\", \"string\", \"bit64\".\n#&gt; \n#&gt; More info at `?polars::polars_options`.&gt;\n</code></pre> <pre><code># reset options to their default value\npolars_options_reset()\n</code></pre>"},{"location":"man/show_all_public_functions.html","title":"show all public functions / objects","text":""},{"location":"man/show_all_public_functions.html#description","title":"Description","text":"<p>print any object(function, RPolarsDataType) available via <code>pl$</code>.</p>"},{"location":"man/show_all_public_functions.html#usage","title":"Usage","text":"<pre><code>pl_show_all_public_functions()\n</code></pre>"},{"location":"man/show_all_public_functions.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$show_all_public_functions()\n</code></pre> <pre><code>#&gt; \n#&gt; \n#&gt;     polars public functions via pl$... ( pl_polars_env environment ):\n#&gt;        [ all ; function ]\n#&gt;        [ all_horizontal ; function ]\n#&gt;        [ any_horizontal ; function ]\n#&gt;        [ approx_n_unique ; function ]\n#&gt;        [ arg_sort_by ; function ]\n#&gt;        [ arg_where ; function ]\n#&gt;        [ Array ; function ]\n#&gt;        [ Binary ; RPolarsDataType ]\n#&gt;        [ Boolean ; RPolarsDataType ]\n#&gt;        [ Categorical ; function ]\n#&gt;        [ class_names ; character ]\n#&gt;        [ coalesce ; function ]\n#&gt;        [ col ; function ]\n#&gt;        [ concat ; function ]\n#&gt;        [ concat_list ; function ]\n#&gt;        [ concat_str ; function ]\n#&gt;        [ corr ; function ]\n#&gt;        [ count ; function ]\n#&gt;        [ cov ; function ]\n#&gt;        [ DataFrame ; function ]\n#&gt;        [ date ; function ]\n#&gt;        [ Date ; RPolarsDataType ]\n#&gt;        [ date_range ; function ]\n#&gt;        [ date_ranges ; function ]\n#&gt;        [ datetime ; function ]\n#&gt;        [ Datetime ; function ]\n#&gt;        [ datetime_range ; function ]\n#&gt;        [ datetime_ranges ; function ]\n#&gt;        [ disable_string_cache ; function ]\n#&gt; \n#&gt;        dtypes ( list ):\n#&gt;           [ Array ; function ]\n#&gt;           [ Binary ; RPolarsDataType ]\n#&gt;           [ Boolean ; RPolarsDataType ]\n#&gt;           [ Categorical ; function ]\n#&gt;           [ Date ; RPolarsDataType ]\n#&gt;           [ Datetime ; function ]\n#&gt;           [ Duration ; function ]\n#&gt;           [ Float32 ; RPolarsDataType ]\n#&gt;           [ Float64 ; RPolarsDataType ]\n#&gt;           [ Int16 ; RPolarsDataType ]\n#&gt;           [ Int32 ; RPolarsDataType ]\n#&gt;           [ Int64 ; RPolarsDataType ]\n#&gt;           [ Int8 ; RPolarsDataType ]\n#&gt;           [ List ; function ]\n#&gt;           [ Null ; RPolarsDataType ]\n#&gt;           [ String ; RPolarsDataType ]\n#&gt;           [ Struct ; function ]\n#&gt;           [ Time ; RPolarsDataType ]\n#&gt;           [ UInt16 ; RPolarsDataType ]\n#&gt;           [ UInt32 ; RPolarsDataType ]\n#&gt;           [ UInt64 ; RPolarsDataType ]\n#&gt;           [ UInt8 ; RPolarsDataType ]\n#&gt;           [ Unknown ; RPolarsDataType ]\n#&gt;           [ Utf8 ; RPolarsDataType ]\n#&gt; \n#&gt;        [ duration ; function ]\n#&gt;        [ Duration ; function ]\n#&gt;        [ element ; function ]\n#&gt;        [ enable_string_cache ; function ]\n#&gt;        [ Field ; function ]\n#&gt;        [ first ; function ]\n#&gt;        [ Float32 ; RPolarsDataType ]\n#&gt;        [ Float64 ; RPolarsDataType ]\n#&gt;        [ fold ; function ]\n#&gt;        [ from_epoch ; function ]\n#&gt;        [ get_global_rpool_cap ; function ]\n#&gt;        [ head ; function ]\n#&gt;        [ implode ; function ]\n#&gt;        [ int_range ; function ]\n#&gt;        [ int_ranges ; function ]\n#&gt;        [ Int16 ; RPolarsDataType ]\n#&gt;        [ Int32 ; RPolarsDataType ]\n#&gt;        [ Int64 ; RPolarsDataType ]\n#&gt;        [ Int8 ; RPolarsDataType ]\n#&gt;        [ is_schema ; function ]\n#&gt;        [ last ; function ]\n#&gt;        [ LazyFrame ; function ]\n#&gt;        [ len ; function ]\n#&gt;        [ List ; function ]\n#&gt;        [ lit ; function ]\n#&gt;        [ max ; function ]\n#&gt;        [ max_horizontal ; function ]\n#&gt;        [ mean ; function ]\n#&gt;        [ mean_horizontal ; function ]\n#&gt;        [ median ; function ]\n#&gt;        [ mem_address ; function ]\n#&gt;        [ min ; function ]\n#&gt;        [ min_horizontal ; function ]\n#&gt;        [ n_unique ; function ]\n#&gt;        [ Null ; RPolarsDataType ]\n#&gt; \n#&gt;        numeric_dtypes ( list ):\n#&gt;           [ Float32 ; RPolarsDataType ]\n#&gt;           [ Float64 ; RPolarsDataType ]\n#&gt;           [ Int16 ; RPolarsDataType ]\n#&gt;           [ Int32 ; RPolarsDataType ]\n#&gt;           [ Int64 ; RPolarsDataType ]\n#&gt;           [ Int8 ; RPolarsDataType ]\n#&gt; \n#&gt;        [ PTime ; function ]\n#&gt;        [ raw_list ; function ]\n#&gt;        [ read_csv ; function ]\n#&gt;        [ read_ndjson ; function ]\n#&gt;        [ read_parquet ; function ]\n#&gt;        [ reduce ; function ]\n#&gt;        [ rolling_corr ; function ]\n#&gt;        [ rolling_cov ; function ]\n#&gt;        [ same_outer_dt ; function ]\n#&gt;        [ scan_csv ; function ]\n#&gt;        [ scan_ipc ; function ]\n#&gt;        [ scan_ndjson ; function ]\n#&gt;        [ scan_parquet ; function ]\n#&gt;        [ select ; function ]\n#&gt;        [ Series ; function ]\n#&gt;        [ set_global_rpool_cap ; function ]\n#&gt;        [ show_all_public_functions ; function ]\n#&gt;        [ show_all_public_methods ; function ]\n#&gt;        [ SQLContext ; function ]\n#&gt;        [ std ; function ]\n#&gt;        [ String ; RPolarsDataType ]\n#&gt;        [ struct ; function ]\n#&gt;        [ Struct ; function ]\n#&gt;        [ sum ; function ]\n#&gt;        [ sum_horizontal ; function ]\n#&gt;        [ tail ; function ]\n#&gt;        [ thread_pool_size ; function ]\n#&gt;        [ time ; function ]\n#&gt;        [ Time ; RPolarsDataType ]\n#&gt;        [ UInt16 ; RPolarsDataType ]\n#&gt;        [ UInt32 ; RPolarsDataType ]\n#&gt;        [ UInt64 ; RPolarsDataType ]\n#&gt;        [ UInt8 ; RPolarsDataType ]\n#&gt;        [ Unknown ; RPolarsDataType ]\n#&gt;        [ using_string_cache ; function ]\n#&gt;        [ Utf8 ; RPolarsDataType ]\n#&gt;        [ var ; function ]\n#&gt;        [ when ; function ]\n#&gt;        [ with_string_cache ; function ]\n</code></pre>"},{"location":"man/show_all_public_methods.html","title":"show all public methods","text":""},{"location":"man/show_all_public_methods.html#description","title":"Description","text":"<p>methods are listed by their Class</p>"},{"location":"man/show_all_public_methods.html#usage","title":"Usage","text":"<pre><code>pl_show_all_public_methods(class_names = NULL)\n</code></pre>"},{"location":"man/show_all_public_methods.html#arguments","title":"Arguments","text":"<code>class_names</code>  character vector of polars class names to show, Default NULL is all."},{"location":"man/show_all_public_methods.html#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$show_all_public_methods()\n</code></pre> <pre><code>#&gt; \n#&gt; \n#&gt;      class methods, access via object$method() ( environment ):\n#&gt; \n#&gt;        RPolarsChainedThen ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ agg_groups ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ approx_n_unique ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ arr ; property function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ bottom_k ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cum_count ; function ]\n#&gt;           [ cum_max ; function ]\n#&gt;           [ cum_min ; function ]\n#&gt;           [ cum_prod ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ eq_missing ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ floor_div ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gather ; function ]\n#&gt;           [ gather_every ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ implode ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first_distinct ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_last_distinct ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map_batches ; function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ meta ; property function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mod ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ neq_missing ; function ]\n#&gt;           [ not ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ otherwise ; function ]\n#&gt;           [ over ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ peak_max ; function ]\n#&gt;           [ peak_min ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ replace ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rle ; function ]\n#&gt;           [ rle_id ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ when ; function ]\n#&gt;           [ xor ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsChainedWhen ( environment ):\n#&gt;           [ then ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsDataFrame ( environment ):\n#&gt;           [ clone ; function ]\n#&gt;           [ columns ; setter property function ]\n#&gt;           [ describe ; function ]\n#&gt;           [ drop ; function ]\n#&gt;           [ drop_in_place ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dtype_strings ; function ]\n#&gt;           [ dtypes ; property function ]\n#&gt;           [ equals ; function ]\n#&gt;           [ estimated_size ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flags ; property function ]\n#&gt;           [ get_column ; function ]\n#&gt;           [ get_columns ; function ]\n#&gt;           [ glimpse ; function ]\n#&gt;           [ group_by ; function ]\n#&gt;           [ group_by_dynamic ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ height ; property function ]\n#&gt;           [ item ; function ]\n#&gt;           [ join ; function ]\n#&gt;           [ join_asof ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ lazy ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ melt ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ n_chunks ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ partition_by ; function ]\n#&gt;           [ pivot ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ schema ; property function ]\n#&gt;           [ select ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ to_data_frame ; function ]\n#&gt;           [ to_list ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ transpose ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unnest ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ width ; property function ]\n#&gt;           [ with_columns ; function ]\n#&gt;           [ with_row_index ; function ]\n#&gt;           [ write_csv ; function ]\n#&gt;           [ write_json ; function ]\n#&gt;           [ write_ndjson ; function ]\n#&gt;           [ write_parquet ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsDataType ( environment ):\n#&gt;           [ eq ; function ]\n#&gt;           [ get_all_simple_type_names ; function ]\n#&gt;           [ get_insides ; function ]\n#&gt;           [ is_temporal ; function ]\n#&gt;           [ ne ; function ]\n#&gt;           [ new ; function ]\n#&gt;           [ new_array ; function ]\n#&gt;           [ new_categorical ; function ]\n#&gt;           [ new_datetime ; function ]\n#&gt;           [ new_duration ; function ]\n#&gt;           [ new_list ; function ]\n#&gt;           [ new_object ; function ]\n#&gt;           [ new_struct ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ same_outer_datatype ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsExpr ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ agg_groups ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ approx_n_unique ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ arr ; property function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ bottom_k ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cum_count ; function ]\n#&gt;           [ cum_max ; function ]\n#&gt;           [ cum_min ; function ]\n#&gt;           [ cum_prod ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ eq_missing ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ floor_div ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gather ; function ]\n#&gt;           [ gather_every ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ implode ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first_distinct ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_last_distinct ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map_batches ; function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ meta ; property function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mod ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ neq_missing ; function ]\n#&gt;           [ not ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ over ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ peak_max ; function ]\n#&gt;           [ peak_min ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ replace ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rle ; function ]\n#&gt;           [ rle_id ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ xor ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsLazyFrame ( environment ):\n#&gt;           [ clone ; function ]\n#&gt;           [ collect ; function ]\n#&gt;           [ collect_in_background ; function ]\n#&gt;           [ columns ; property function ]\n#&gt;           [ describe_optimized_plan ; function ]\n#&gt;           [ describe_plan ; function ]\n#&gt;           [ drop ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dtypes ; property function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ fetch ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ get_optimization_toggle ; function ]\n#&gt;           [ group_by ; function ]\n#&gt;           [ group_by_dynamic ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ join ; function ]\n#&gt;           [ join_asof ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ melt ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ profile ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ schema ; property function ]\n#&gt;           [ select ; function ]\n#&gt;           [ set_optimization_toggle ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ sink_csv ; function ]\n#&gt;           [ sink_ipc ; function ]\n#&gt;           [ sink_ndjson ; function ]\n#&gt;           [ sink_parquet ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ to_dot ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unnest ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ width ; property function ]\n#&gt;           [ with_columns ; function ]\n#&gt;           [ with_context ; function ]\n#&gt;           [ with_row_index ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsLazyGroupBy ( environment ):\n#&gt;           [ agg ; function ]\n#&gt;           [ columns ; property function ]\n#&gt;           [ head ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ ungroup ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsSeries ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ approx_n_unique ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ arr ; property function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ bottom_k ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ chunk_lengths ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ clone ; function ]\n#&gt;           [ compare ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cum_count ; function ]\n#&gt;           [ cum_max ; function ]\n#&gt;           [ cum_min ; function ]\n#&gt;           [ cum_prod ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ dtype ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ eq_missing ; function ]\n#&gt;           [ equals ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flags ; property function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ floor_div ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gather ; function ]\n#&gt;           [ gather_every ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ implode ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first_distinct ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_last_distinct ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_numeric ; function ]\n#&gt;           [ is_sorted ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ item ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map_batches ; function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mod ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ neq_missing ; function ]\n#&gt;           [ not ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ peak_max ; function ]\n#&gt;           [ peak_min ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ replace ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rle ; function ]\n#&gt;           [ rle_id ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_frame ; function ]\n#&gt;           [ to_list ; function ]\n#&gt;           [ to_lit ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ to_vector ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ xor ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsSQLContext ( environment ):\n#&gt;           [ execute ; function ]\n#&gt;           [ register ; function ]\n#&gt;           [ register_many ; function ]\n#&gt;           [ tables ; function ]\n#&gt;           [ unregister ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsThen ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ agg_groups ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ approx_n_unique ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ arr ; property function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ bottom_k ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cum_count ; function ]\n#&gt;           [ cum_max ; function ]\n#&gt;           [ cum_min ; function ]\n#&gt;           [ cum_prod ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ eq_missing ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ floor_div ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gather ; function ]\n#&gt;           [ gather_every ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ implode ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first_distinct ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_last_distinct ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map_batches ; function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ meta ; property function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mod ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ neq_missing ; function ]\n#&gt;           [ not ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ otherwise ; function ]\n#&gt;           [ over ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ peak_max ; function ]\n#&gt;           [ peak_min ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ replace ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rle ; function ]\n#&gt;           [ rle_id ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ when ; function ]\n#&gt;           [ xor ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsWhen ( environment ):\n#&gt;           [ then ; function ]\n</code></pre>"},{"location":"vignettes/install.html","title":"Installation details","text":"<p>The <code>polars</code> package can be installed from R-universe or GitHub.</p> <p>Some platforms can install pre-compiled binaries, and others will need to build from source.</p>"},{"location":"vignettes/install.html#how-to-install","title":"How to install","text":""},{"location":"vignettes/install.html#from-r-universe-recommended","title":"From R-universe (recommended)","text":"<p>Installing the latest release version.</p> <pre><code>Sys.setenv(NOT_CRAN = \"true\") # Enable installation with pre-built Rust library binary, or enable Rust caching\ninstall.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\")\n</code></pre> <ul> <li>On supported platforms, binary R package will be installed.</li> <li>On the other platforms, the pre-built Rust library binary will be     downloaded while building the R source package.</li> <li>If the pre-built Rust library binary is not available, the Rust     library will be built from source (provided that Rust is installed).</li> </ul>"},{"location":"vignettes/install.html#from-github-releases","title":"From GitHub releases","text":"<p>Binary packages for the amd64 architecture are available.</p>"},{"location":"vignettes/install.html#linux-x86_64","title":"Linux (x86_64)","text":"<pre><code>install.packages(\n  \"https://github.com/pola-rs/r-polars/releases/latest/download/polars__x86_64-pc-linux-gnu.gz\",\n  repos = NULL\n)\n</code></pre>"},{"location":"vignettes/install.html#windows-x86_64","title":"Windows (x86_64)","text":"<pre><code>install.packages(\n  \"https://github.com/pola-rs/r-polars/releases/latest/download/polars.zip\",\n  repos = NULL\n)\n</code></pre>"},{"location":"vignettes/install.html#macos-x86_64-aka-intel","title":"macOS (x86_64, a.k.a. Intel)","text":"<pre><code>install.packages(\n  \"https://github.com/pola-rs/r-polars/releases/latest/download/polars__x86_64-apple-darwin20.tgz\",\n  repos = NULL\n)\n</code></pre>"},{"location":"vignettes/install.html#macos-aarch64-aka-apple-silicon","title":"macOS (aarch64, a.k.a. Apple Silicon)","text":"<pre><code>install.packages(\n  \"https://github.com/pola-rs/r-polars/releases/latest/download/polars__aarch64-apple-darwin20.tgz\",\n  repos = NULL\n)\n</code></pre>"},{"location":"vignettes/install.html#from-github-commits","title":"From GitHub commits","text":"<p>Installing from GitHub commits or GitHub releases can be done using the <code>{remotes}</code> package\u2019s functions.</p> <p>For example, installing the version 0.9.0 from the GitHub release.</p> <pre><code>Sys.setenv(NOT_CRAN = \"true\") # Enable installation with pre-built Rust library binary, or enable Rust caching\nremotes::install_github(\"pola-rs/r-polars@v0.9.0\")\n</code></pre>"},{"location":"vignettes/install.html#details-of-installation","title":"Details of installation","text":""},{"location":"vignettes/install.html#pre-built-rust-library-binaries","title":"Pre-built Rust library binaries","text":"<p>If one of the following environment variables is set, a pre-built Rust library binary will be tried to be used before building the Rust source.</p> <ul> <li><code>NOT_CRAN=\"true\"</code></li> <li><code>MY_UNIVERSE</code> is not empty (This environment variable is set by     R-universe)</li> <li><code>LIBR_POLARS_BUILD=\"false\"</code> (This is prioritized, so if you want to     force a source build, set <code>LIBR_POLARS_BUILD=\"true\"</code>)</li> </ul> <p>By default, the pre-built Rust library binary is downloaded from the URL recorded in <code>tools/lib-sums.tsv</code>. If <code>tools/lib-sums.tsv</code> does not exist, or the corresponding URL does not exist, or the hash of the downloaded file does not match the recorded one, it falls back to building from source.</p> <p>If you want to use a pre-built Rust library binary that exists locally, set the <code>LIBR_POLARS_PATH</code> environment variable to the path to the binary. For example (on Bash):</p> <pre><code>export LIBR_POLARS_BUILD=\"false\"\nexport LIBR_POLARS_PATH=\"/tmp/libr_polars.a\"\nRscript -e 'install.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\", type = \"source\")'\n</code></pre>"},{"location":"vignettes/install.html#rust-build-time-options","title":"Rust build time options","text":"<p>r-polars Rust library has some feature flags that affect the R package features. These flags are set at compile time, and cannot be changed at runtime.</p> <p>The features enabled in the compiled Rust library are shown by the <code>polars_info()</code> function.</p> <pre><code>library(polars)\npolars_info()\n#&gt; Polars R package version : 0.15.1.9000\n#&gt; Rust Polars crate version: 0.38.3\n#&gt; \n#&gt; Thread pool size: 4 \n#&gt; \n#&gt; Features:                               \n#&gt; default                    TRUE\n#&gt; full_features              TRUE\n#&gt; disable_limit_max_threads  TRUE\n#&gt; nightly                    TRUE\n#&gt; sql                        TRUE\n#&gt; rpolars_debug_print       FALSE\n#&gt; \n#&gt; Code completion: deactivated\n</code></pre> <p>At this time, the following environment variables can be used to change the Rust library build time options.</p>"},{"location":"vignettes/install.html#features","title":"Features","text":"<p>The feature flags can be set by the <code>LIBR_POLARS_FEATURES</code> environment variable. For example, to enable the <code>full_features</code> feature, set the environment variable as like <code>LIBR_POLARS_FEATURES=\"full_features\"</code>.</p> <p>Currently <code>full_features</code> would work as a combination of the following features.</p> <ul> <li>The <code>default</code> feature     -   <code>sql</code> for enable <code>pl$SQLContext()</code>.</li> <li>Features for CRAN compatibility     -   <code>disable_limit_max_threads</code>, this feature disables the automatic         limit of the maximum number of threads to 2 for CRAN         compatibility, and the maximum number of threads is used by         default. See <code>?pl_thread_pool_size</code> for details.</li> <li>Features for nightly toolchain     -   <code>nightly</code> for nightly toolchain features and SIMD.</li> </ul> <p>Note that nightly features requires the Rust nightly toolchain nightly-2024-02-23.</p>"},{"location":"vignettes/install.html#profile","title":"Profile","text":"<p>The profile can be set by the <code>LIBR_POLARS_PROFILE</code> environment variable. For example, to build with more optimization, set the environment variable as like <code>LIBR_POLARS_PROFILE=\"release-optimized\"</code>.</p>"},{"location":"vignettes/install.html#minimum-supported-rust-version-msrv","title":"Minimum Supported Rust Version (MSRV)","text":"<p>The minimum supported Rust version (MSRV) is declared in the <code>src/rust/Cargo.toml</code> file\u2019s <code>package.rust-version</code> field.</p> <p>This MSRV is for the default features. For other features, the nightly Rust toolchain is required.</p>"},{"location":"vignettes/performance.html","title":"Optimize <code>polars</code> performance","text":"<p>As highlighted by the DuckDB benchmarks, <code>polars</code> is very efficient to deal with large datasets. Still, one can make <code>polars</code> even faster by following some good practices.</p>"},{"location":"vignettes/performance.html#lazy-vs-eager-execution","title":"Lazy vs eager execution","text":""},{"location":"vignettes/performance.html#order-of-operations","title":"Order of operations","text":"<p>In the \u201cGet Started\u201d vignette, we mostly used eager execution. This is the classic type of execution in R: write some code, link functions with pipes, run the code and it is executed line by line.</p> <p>Most of the time, this kind of execution is perfectly fine. With datasets of a reasonable size (let\u2019s say up to a few hundreds of thousands of observations and a few dozens columns), we don\u2019t really have to worry about whether our code is optimized to save memory and time.</p> <p>However, when we start dealing with much larger datasets, the order in which functions are applied is extremely important. Indeed, some functions are much more memory intensive than others.</p> <p>For instance, let\u2019s say we have a dataset with 1M observations containing country names and a few numeric columns. We would like to keep just a few of these countries and sort them alphabetically. Here, we have two operations: filtering and sorting. Sorting is much harder to do than filtering. To filter data, we simply check whether each row fills some conditions, but to sort data we have to compare rows between them and rearrange them as we go. If we don\u2019t take this into account, sorting data before filtering it can slow down our pipeline significantly.</p> <pre><code>countries = c(\n  \"France\", \"Germany\", \"United Kingdom\", \"Japan\", \"Columbia\",\n  \"South Korea\", \"Vietnam\", \"South Africa\", \"Senegal\", \"Iran\"\n)\n\nset.seed(123)\ntest = data.frame(\n  country = sample(countries, 1e6, TRUE),\n  x = sample(1:100, 1e6, TRUE),\n  y = sample(1:1000, 1e6, TRUE)\n)\n</code></pre> <pre><code>bench::mark(\n  sort_filter = {\n    tmp = test[order(test$country), ]\n    subset(tmp, country %in% c(\"United Kingdom\", \"Japan\", \"Vietnam\"))\n  },\n  filter_sort = {\n    tmp = subset(test, country %in% c(\"United Kingdom\", \"Japan\", \"Vietnam\"))\n    tmp[order(tmp$country), ]\n  }\n)\n\n#&gt; Warning: Some expressions had a GC in every iteration; so filtering is\n#&gt; disabled.\n#&gt; # A tibble: 2 \u00d7 6\n#&gt;   expression       min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt;  &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 sort_filter    10.4s    10.4s    0.0964    87.2MB    0.193\n#&gt; 2 filter_sort     2.4s     2.4s    0.417     67.1MB    0.835\n</code></pre>"},{"location":"vignettes/performance.html#how-does-polars-help","title":"How does <code>polars</code> help?","text":"<p>We have seen that the order in which functions are applied matters a lot. But it already takes a long time to deal with large data, we\u2019re not going to spend even more time trying to optimize our pipeline, right?</p> <p>This is where lazy execution comes into play. The idea is that we write our code as usual, but this time, we won\u2019t apply it directly on a dataset but on a lazy dataset, i.e a dataset that is not loaded in memory yet (in <code>polars</code> terms, these are <code>DataFrame</code>s and <code>LazyFrame</code>s). Once our code is ready, we call <code>collect()</code> at the end of the pipeline. Before executing our code, <code>polars</code> will internally check whether it can be optimized, for example by reordering some operations.</p> <p>Let\u2019s re-use the example above but this time with <code>polars</code> syntax and 10M observations. For the purpose of this vignette, we can create a <code>LazyFrame</code> directly in our session, but if the data was stored in a CSV file for instance, we would have to scan it first with <code>pl$scan_csv()</code>:</p> <pre><code>library(polars)\n\nset.seed(123)\ndf_test = pl$DataFrame(\n  country = sample(countries, 1e7, TRUE),\n  x = sample(1:100, 1e7, TRUE),\n  y = sample(1:1000, 1e7, TRUE)\n)\n\nlf_test = df_test$lazy()\n</code></pre> <p>Now, we can convert the base R code above to a <code>polars</code> query:</p> <pre><code>df_test$\n  sort(pl$col(\"country\"))$\n  filter(\n  pl$col(\"country\")$is_in(pl$lit(c(\"United Kingdom\", \"Japan\", \"Vietnam\")))\n)\n#&gt; shape: (3_000_835, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 country \u2506 x   \u2506 y   \u2502\n#&gt; \u2502 ---     \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str     \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Japan   \u2506 97  \u2506 7   \u2502\n#&gt; \u2502 Japan   \u2506 96  \u2506 672 \u2502\n#&gt; \u2502 Japan   \u2506 17  \u2506 710 \u2502\n#&gt; \u2502 Japan   \u2506 68  \u2506 41  \u2502\n#&gt; \u2502 Japan   \u2506 100 \u2506 109 \u2502\n#&gt; \u2502 \u2026       \u2506 \u2026   \u2506 \u2026   \u2502\n#&gt; \u2502 Vietnam \u2506 89  \u2506 352 \u2502\n#&gt; \u2502 Vietnam \u2506 62  \u2506 8   \u2502\n#&gt; \u2502 Vietnam \u2506 52  \u2506 988 \u2502\n#&gt; \u2502 Vietnam \u2506 85  \u2506 982 \u2502\n#&gt; \u2502 Vietnam \u2506 74  \u2506 692 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>This works for the <code>DataFrame</code>, that uses eager execution. For the <code>LazyFrame</code>, we can write the same query:</p> <pre><code>lazy_query = lf_test$\n  sort(pl$col(\"country\"))$\n  filter(\n  pl$col(\"country\")$is_in(pl$lit(c(\"United Kingdom\", \"Japan\", \"Vietnam\")))\n)\n\nlazy_query\n#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; FILTER col(\"country\").is_in([Series]) FROM\n#&gt; SORT BY [col(\"country\")]\n#&gt;   DF [\"country\", \"x\", \"y\"]; PROJECT */3 COLUMNS; SELECTION: \"None\"\n</code></pre> <p>However, this doesn\u2019t do anything to the data until we call <code>collect()</code> at the end. We can now compare the two approaches (in the <code>lazy</code> timing, calling <code>collect()</code> both reads the data and process it, so we include the data loading part in the <code>eager</code> timing as well):</p> <pre><code>bench::mark(\n  eager = df_test$\n    sort(pl$col(\"country\"))$\n    filter(\n      pl$col(\"country\")$is_in(pl$lit(c(\"United Kingdom\", \"Japan\", \"Vietnam\")))\n    ),\n  lazy = lazy_query$collect(),\n  iterations = 10\n)\n\n#&gt; # A tibble: 2 \u00d7 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 eager         1.18s    1.28s     0.754    9.95KB        0\n#&gt; 2 lazy       526.98ms 577.35ms     1.72       864B        0\n</code></pre> <p>On this very simple query, using lazy execution instead of eager execution lead to a 1.7-2.2x decrease in time.</p> <p>So what happened? Under the hood, <code>polars</code> reorganized the query so that it filters rows while reading the csv into memory, and then sorts the remaining data. This can be seen by comparing the original query (<code>describe_plan()</code>) and the optimized query (<code>describe_optimized_plan()</code>):</p> <pre><code>lazy_query$describe_plan()\n#&gt; FILTER col(\"country\").is_in([Series]) FROM\n#&gt; SORT BY [col(\"country\")]\n#&gt;   DF [\"country\", \"x\", \"y\"]; PROJECT */3 COLUMNS; SELECTION: \"None\"\n\nlazy_query$describe_optimized_plan()\n#&gt; SORT BY [col(\"country\")]\n#&gt;   DF [\"country\", \"x\", \"y\"]; PROJECT */3 COLUMNS; SELECTION: \"col(\\\"country\\\").is_in([Series])\"\n</code></pre> <p>Note that the queries must be read from bottom to top, i.e the optimized query is \u201cselect the dataset where the column \u2018country\u2019 matches these values, then sort the data by the values of \u2018country\u2019\u201d.</p>"},{"location":"vignettes/performance.html#use-polars-functions","title":"Use <code>polars</code> functions","text":"<p><code>polars</code> comes with a large number of built-in, optimized, basic functions that should cover most aspects of data wrangling. These functions are designed to be very memory efficient. Therefore, using R functions or converting data back and forth between <code>polars</code> and R is discouraged as it can lead to a large decrease in efficiency.</p> <p>Let\u2019s use the test data from the previous section and let\u2019s say that we only want to check whether each country contains \u201cna\u201d. This can be done in (at least) two ways: with the built-in function <code>contains()</code> and with the base R function <code>grepl()</code>. However, using the built-in function is much faster:</p> <pre><code>bench::mark(\n  contains = df_test$with_columns(\n    pl$col(\"country\")$str$contains(\"na\")\n  ),\n  grepl = df_test$with_columns(\n    pl$col(\"country\")$map_batches(\\(s) { # map with a R function\n      grepl(\"na\", s)\n    })\n  ),\n  grepl_nv = df_test$limit(1e6)$with_columns(\n    pl$col(\"country\")$apply(\\(str) {\n      grepl(\"na\", str)\n    }, return_type = pl$Boolean)\n  ),\n  iterations = 10\n)\n\n\n#&gt; Warning: Some expressions had a GC in every iteration; so filtering is\n#&gt; disabled.\n#&gt; # A tibble: 3 \u00d7 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 contains   387.02ms 432.12ms     2.27   401.86KB    0\n#&gt; 2 grepl         2.06s    2.11s     0.466  114.79MB    0.512\n#&gt; 3 grepl_nv      6.42s    6.52s     0.153    7.65MB   10.3\n</code></pre> <p>Using custom R functions can be useful, but when possible, you should use the functions provided by <code>polars</code>. See the Reference tab for a complete list of functions.</p>"},{"location":"vignettes/performance.html#streaming-data","title":"Streaming data","text":"<p>Finally, quoting Polars User Guide:</p> <p>One additional benefit of the lazy API is that it allows queries to be executed in a streaming manner. Instead of processing the data all-at-once Polars can execute the query in batches allowing you to process datasets that are larger-than-memory.</p> <p>To use streaming mode, we can just add <code>streaming = TRUE</code> in <code>collect()</code> (note that this is still an alpha feature):</p> <pre><code>bench::mark(\n  lazy = lazy_query$collect(),\n  lazy_streaming = lazy_query$collect(streaming = TRUE),\n  iterations = 20\n)\n\n#&gt; # A tibble: 2 \u00d7 6\n#&gt;   expression          min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt;     &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 lazy              482ms    546ms      1.85      864B        0\n#&gt; 2 lazy_streaming    292ms    346ms      2.90      864B        0\n</code></pre>"},{"location":"vignettes/polars.html","title":"An Introduction to Polars from R","text":""},{"location":"vignettes/polars.html#what-is-polars","title":"What is Polars?","text":"<p>Polars is a lightning fast Data Frame library. Its embarrassingly parallel execution, cache efficient algorithms and expressive API makes it perfect for efficient data wrangling, data pipelines, snappy APIs, and much more besides. Polars also supports \u201cstreaming mode\u201d for out-of-memory operations. This allows users to analyze datasets many times larger than RAM.</p> <p>The underlying computation engine is written in Rust and is built on the Apache Arrow columnar memory format. It can be used in Rust or via Python bindings. The polars R-package provides equivalent bindings from R. To help distinguish the different language implementations, we typically use a convention of referring to them with prefixes: rust-polars, py-polars, r-polars, nodejs-polars, etc. But within each language, the relevant library is always just called polars.</p> <p>polars users can expect orders of magnitude(s) improvement compared to dplyr for simple transformations on datasets &gt;500Mb. The automatic Polars optimization framework means that that this speed boost can be even greater for complex queries that chain together many operations. Performance is similar to that of data.table, although polars supports additional functionality via its relationship to the Apache Arrow memory model. For example, it can scan multiple Parquet files and datasets and selectively import random subsets without having to read all of the data.</p> <p>Polars syntax is similar to that of Spark, but the workflow is column-oriented rather than row-oriented. Since R is itself a column-oriented language, this should immediately feel familiar to most R users. Like Spark and modern SQL variants, Polars optimizes queries for memory consumption and speed, so you don\u2019t have to. However, unlike Spark, Polars is natively multithreaded instead of multinoded. This makes (r)polars much simpler to install and can be used as one would any other R package.</p> <p>This R port relies on the excellent extendr package, which is the R equivalent to pyo3+maturin. extendr is very convenient for calling Rust from R, and vice versa, and is what we use to build the polars package. Once built, however, polars has no other dependencies other than R itself. This makes it very fast and lightweight to install, and so polars can immediately be used to tackle your big (or small!) data wrangling tasks.</p>"},{"location":"vignettes/polars.html#documentation-and-tutorials","title":"Documentation and tutorials","text":"<p>Users can find detailed documentation for all objects, functions, and methods on the Reference page of this website. This documentation can also be accessed from the R console using the typical <code>?</code> syntax. For example, we will later use the <code>DataFrame()</code> constructor function and apply the <code>group_by()</code> method to a <code>DataFrame</code> object. The documentation for these can be accessed by typing these commands:</p> <pre><code>?DataFrame_class\n?DataFrame_group_by\n</code></pre> <p>The Polars book offers a great introduction to the Polars data frame library, with a very large number of examples in Python and Rust. The syntax and expressions in the <code>polars</code> package for R are (deliberately) as close to the Python implementation as possible, so you can always refer to the polars book for more ideas. Just remember to switch out any \u201c.\u201d (Python) for a \u201c$\u201d (R) when chaining methods. For example, here are two equivalent lines of code for some hypothetical dataset.</p> <pre><code># Python\ndf.group_by(\"id\").mean()\n</code></pre> <pre><code># R\ndf$group_by(\"id\")$mean()\n</code></pre>"},{"location":"vignettes/polars.html#series-and-dataframes","title":"<code>Series</code> and <code>DataFrames</code>","text":"<p>In <code>polars</code>, objects of class <code>Series</code> are analogous to R vectors. Objects of class <code>DataFrame</code> are analogous to R data frames. Notice that to avoid collision with classes provided by other packages, the class name of all objects created by <code>polars</code> starts with \u201cRPolars\u201d. For example, a <code>polars</code> <code>DataFrame</code> has the class \u201cRPolarsDataFrame\u201d.</p> <p>To create Polars <code>Series</code> and <code>DataFrames</code> objects, we load the library and use constructor functions with the <code>pl$</code> prefix. This prefix is very important, as most of the <code>polars</code> functions are made available via <code>pl$</code>:</p> <pre><code>library(polars)\n\npl$Series(name = \"a\", values = (1:5) * 5)\n#&gt; polars Series: shape: (5,)\n#&gt; Series: 'a' [f64]\n#&gt; [\n#&gt;  5.0\n#&gt;  10.0\n#&gt;  15.0\n#&gt;  20.0\n#&gt;  25.0\n#&gt; ]\n\npl$DataFrame(a = 1:5, b = letters[1:5])\n#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 e   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Or, to convert existing R objects to Polars objects, we can use the <code>as_polars_series()</code> and <code>as_polars_df()</code> generic functions.</p> <pre><code>ser = as_polars_series((1:5) * 5)\nser\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  5.0\n#&gt;  10.0\n#&gt;  15.0\n#&gt;  20.0\n#&gt;  25.0\n#&gt; ]\n\ndat = as_polars_df(mtcars)\ndat\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>pl$DataFrame()</code> is similar to <code>data.frame()</code>, and <code>as_polars_df()</code> is similar to <code>as.data.frame()</code>.</p> <p>Both Polars and R are column-orientated. So you can think of <code>DataFrames</code> (data.frames) as being made up of a collection of <code>Series</code> (vectors). In fact, you can create a new Polars <code>DataFrame</code> as a mix of <code>Series</code> and/or regular R vectors.</p> <pre><code>pl$DataFrame(\n  a = as_polars_series((1:5) * 5),\n  b = as_polars_series(letters[1:5]),\n  c = as_polars_series(c(1, 2, 3, 4, 5)),\n  d = c(15, 14, 13, 12, 11),\n  c(5, 4, 3, 2, 1),\n  1:5\n)\n#&gt; shape: (5, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b   \u2506 c   \u2506 d    \u2506 new_column \u2506 new_column_1 \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 --- \u2506 ---  \u2506 ---        \u2506 ---          \u2502\n#&gt; \u2502 f64  \u2506 str \u2506 f64 \u2506 f64  \u2506 f64        \u2506 i32          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.0  \u2506 a   \u2506 1.0 \u2506 15.0 \u2506 5.0        \u2506 1            \u2502\n#&gt; \u2502 10.0 \u2506 b   \u2506 2.0 \u2506 14.0 \u2506 4.0        \u2506 2            \u2502\n#&gt; \u2502 15.0 \u2506 c   \u2506 3.0 \u2506 13.0 \u2506 3.0        \u2506 3            \u2502\n#&gt; \u2502 20.0 \u2506 d   \u2506 4.0 \u2506 12.0 \u2506 2.0        \u2506 4            \u2502\n#&gt; \u2502 25.0 \u2506 e   \u2506 5.0 \u2506 11.0 \u2506 1.0        \u2506 5            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>Series</code> and <code>DataFrame</code> can be operated on using many standard R functions. For example:</p> <pre><code># Series\nlength(ser)\n#&gt; [1] 5\n\nmax(ser)\n#&gt; [1] 25\n\n# DataFrame\ndat[c(1:3, 12), c(\"mpg\", \"hp\")]\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 22.8 \u2506 93.0  \u2502\n#&gt; \u2502 16.4 \u2506 180.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nnames(dat)\n#&gt;  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n#&gt; [11] \"carb\"\n\ndim(dat)\n#&gt; [1] 32 11\n\nhead(dat, n = 2)\n#&gt; shape: (2, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/polars.html#methods-and-pipelines","title":"Methods and pipelines","text":"<p>Although some simple R functions work out of the box on polars objects, the full power of Polars is realized via methods. Polars methods are accessed using the <code>$</code> syntax. For example, to sort a <code>Series</code> object, we use the <code>$sort()</code> method:</p> <pre><code>ser$sort()\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  5.0\n#&gt;  10.0\n#&gt;  15.0\n#&gt;  20.0\n#&gt;  25.0\n#&gt; ]\n</code></pre> <p>There are numerous methods designed to accomplish various tasks:</p> <pre><code>ser$max()\n#&gt; [1] 25\n\ndat$slice(offset = 2, length = 3)\n#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>One advantage of using methods is that many more operations are possible on Polars objects using methods than through base R functions.</p> <p>A second advantage is Methods Chaining, a core part of the Polars workflow. If you are coming from one of the other popular data wrangling libraries in R, then you probably already have an innate sense of what this means. For instance,</p> <ul> <li>In dplyr we use a pipe operator,     e.g.\u00a0<code>dat |&gt; filter(...) |&gt; select(...)</code></li> <li>In data.table we use its indexing syntax,     e.g.\u00a0<code>DT[i, j, by][...]</code></li> <li>Etc.</li> </ul> <p>In polars our method chaining syntax takes the form <code>object$m1()$m2()</code>, where <code>object</code> is our data object, and <code>$m1()</code> and <code>$m2()</code> are appropriate methods, like subsetting or aggregation expressions.</p> <p>This might all seem a little abstract, so let\u2019s walk through some quick examples to help make things concrete. We continue with the <code>mtcars</code> dataset that we coerced to a <code>DataFrame</code> in the introduction.[1]</p> <p>To start, say we compute the maximum value in each column. We can use the <code>$max()</code> method:</p> <pre><code>dat$max()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 33.9 \u2506 8.0 \u2506 472.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Now, we first use the <code>$tail()</code> method to select the last 10 rows of the dataset, and then use the <code>$max()</code> method to compute the maximums in those 10 rows:</p> <pre><code>dat$tail(10)$max()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 30.4 \u2506 8.0 \u2506 400.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Finally, we convert the result to a standard R data frame:</p> <pre><code>dat$tail(10)$max() |&gt;\n  as.data.frame()\n#&gt;    mpg cyl disp  hp drat    wt qsec vs am gear carb\n#&gt; 1 30.4   8  400 335 4.43 3.845 18.9  1  1    5    8\n</code></pre> <p>Below, we will introduce several other methods, including <code>$select()</code>, <code>$filter()</code>, and <code>$group_by()</code> which allow us to do powerful data manipulations easily. To give you a small taste, we now take group-wise means:</p> <pre><code>dat$group_by(\"cyl\")$mean()\n#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg       \u2506 disp       \u2506 hp         \u2506 \u2026 \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb     \u2502\n#&gt; \u2502 --- \u2506 ---       \u2506 ---        \u2506 ---        \u2506   \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64       \u2506 f64        \u2506 f64        \u2506   \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0 \u2506 26.663636 \u2506 105.136364 \u2506 82.636364  \u2506 \u2026 \u2506 0.909091 \u2506 0.727273 \u2506 4.090909 \u2506 1.545455 \u2502\n#&gt; \u2502 8.0 \u2506 15.1      \u2506 353.1      \u2506 209.214286 \u2506 \u2026 \u2506 0.0      \u2506 0.142857 \u2506 3.285714 \u2506 3.5      \u2502\n#&gt; \u2502 6.0 \u2506 19.742857 \u2506 183.314286 \u2506 122.285714 \u2506 \u2026 \u2506 0.571429 \u2506 0.428571 \u2506 3.857143 \u2506 3.428571 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/polars.html#subset","title":"Subset","text":"<p>We can now start chaining together various methods (expressions) to manipulate it in different ways. For example, we can subset the data by rows (<code>$filter()</code>) and also columns (<code>$select()</code>):</p> <pre><code>dat$filter(pl$col(\"cyl\") == 6)\n#&gt; shape: (7, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 225.0 \u2506 105.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 19.2 \u2506 6.0 \u2506 167.6 \u2506 123.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 167.6 \u2506 123.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndat$filter(pl$col(\"cyl\") == 6 &amp; pl$col(\"am\") == 1)\n#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndat$select(pl$col(c(\"mpg\", \"hp\")))\n#&gt; shape: (32, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 22.8 \u2506 93.0  \u2502\n#&gt; \u2502 21.4 \u2506 110.0 \u2502\n#&gt; \u2502 18.7 \u2506 175.0 \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026     \u2502\n#&gt; \u2502 30.4 \u2506 113.0 \u2502\n#&gt; \u2502 15.8 \u2506 264.0 \u2502\n#&gt; \u2502 19.7 \u2506 175.0 \u2502\n#&gt; \u2502 15.0 \u2506 335.0 \u2502\n#&gt; \u2502 21.4 \u2506 109.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Of course, we can chain those methods to create a pipeline:</p> <pre><code>dat$filter(\n  pl$col(\"cyl\") == 6\n)$select(\n  pl$col(c(\"mpg\", \"hp\", \"cyl\"))\n)\n#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2506 cyl \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.4 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 18.1 \u2506 105.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.2 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 17.8 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.7 \u2506 175.0 \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/polars.html#aggregate-and-modify","title":"Aggregate and modify","text":"<p>The <code>$select()</code> method that we introduced above also supports data modification, so you can simultaneously transform it while you are subsetting. However, the result will exclude any columns that weren\u2019t specified as part of the expression. To modify or add some columns\u2014whilst preserving all others in the dataset\u2014it is therefore better to use the <code>$with_columns()</code> method. This next code chunk is equivalent to <code>mtcars |&gt; dplyr::mutate(sum_mpg = sum(mpg), sum_hp = sum(hp), .by = cyl)</code>.</p> <pre><code># Add the grouped sums of some selected columns.\ndat$with_columns(\n  pl$col(\"mpg\")$sum()$over(\"cyl\")$alias(\"sum_mpg\"),\n  pl$col(\"hp\")$sum()$over(\"cyl\")$alias(\"sum_hp\")\n)\n#&gt; shape: (32, 13)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 gear \u2506 carb \u2506 sum_mpg \u2506 sum_hp \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 ---  \u2506 ---  \u2506 ---     \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64  \u2506 f64  \u2506 f64     \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 4.0  \u2506 1.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 3.0  \u2506 1.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 3.0  \u2506 2.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026       \u2506 \u2026      \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 5.0  \u2506 2.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 5.0  \u2506 4.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 5.0  \u2506 6.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 5.0  \u2506 8.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 4.0  \u2506 2.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>For what it\u2019s worth, the previous query could have been written more concisely as:</p> <pre><code>dat$with_columns(\n  pl$col(c(\"mpg\", \"hp\"))$sum()$over(\"cyl\")$name$prefix(\"sum_\")\n)\n#&gt; shape: (32, 13)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 gear \u2506 carb \u2506 sum_mpg \u2506 sum_hp \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 ---  \u2506 ---  \u2506 ---     \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64  \u2506 f64  \u2506 f64     \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 4.0  \u2506 1.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 3.0  \u2506 1.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 3.0  \u2506 2.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026       \u2506 \u2026      \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 5.0  \u2506 2.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 5.0  \u2506 4.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 5.0  \u2506 6.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 5.0  \u2506 8.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 4.0  \u2506 2.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Similarly, here\u2019s how we could have aggregated (i.e., collapsed) the dataset by groups instead of modifying them. We need simply invoke the <code>$group_by()</code> and <code>$agg()</code> methods.</p> <pre><code>dat$group_by(\n  \"cyl\",\n  maintain_order = TRUE\n)$agg(\n  pl$col(c(\"mpg\", \"hp\"))$sum()\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg   \u2506 hp     \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 f64   \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 138.2 \u2506 856.0  \u2502\n#&gt; \u2502 4.0 \u2506 293.3 \u2506 909.0  \u2502\n#&gt; \u2502 8.0 \u2506 211.4 \u2506 2929.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>(arg <code>maintain_order = TRUE</code> is optional, since polars doesn\u2019t sort the results of grouped operations by default. This is similar to what data.table does and is also true for newer versions of dplyr.)</p> <p>The same principles of method chaining can be combined very flexibly to group by multiple variables and aggregation types.</p> <pre><code>dat$group_by(\n  \"cyl\",\n  manual = pl$col(\"am\")$cast(pl$Boolean)\n)$agg(\n  mean_mpg = pl$col(\"mpg\")$mean(),\n  med_hp = pl$col(\"hp\")$median()\n)\n#&gt; shape: (6, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 manual \u2506 mean_mpg  \u2506 med_hp \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 ---       \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 bool   \u2506 f64       \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0 \u2506 true   \u2506 28.075    \u2506 78.5   \u2502\n#&gt; \u2502 8.0 \u2506 true   \u2506 15.4      \u2506 299.5  \u2502\n#&gt; \u2502 8.0 \u2506 false  \u2506 15.05     \u2506 180.0  \u2502\n#&gt; \u2502 4.0 \u2506 false  \u2506 22.9      \u2506 95.0   \u2502\n#&gt; \u2502 6.0 \u2506 true   \u2506 20.566667 \u2506 110.0  \u2502\n#&gt; \u2502 6.0 \u2506 false  \u2506 19.125    \u2506 116.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Note that we used the <code>$cast()</code> method to convert the data type of the <code>am</code> column. See the section below for more details on data types.</p>"},{"location":"vignettes/polars.html#reshape","title":"Reshape","text":"<p>Polars supports data reshaping, going from both long to wide (a.k.a. \u201cpivotting\u201d, or <code>pivot_wider()</code> in <code>tidyr</code>), and from wide to long (a.k.a. \u201cunpivotting\u201d, \u201cmelting\u201d, or <code>pivot_longer()</code> in <code>tidyr</code>). Let\u2019s switch to the <code>Indometh</code> dataset to demonstrate some basic examples. Note that the data are currently in long format.</p> <pre><code>indo = as_polars_df(Indometh)\nindo\n#&gt; shape: (66, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Subject \u2506 time \u2506 conc \u2502\n#&gt; \u2502 ---     \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 cat     \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1       \u2506 0.25 \u2506 1.5  \u2502\n#&gt; \u2502 1       \u2506 0.5  \u2506 0.94 \u2502\n#&gt; \u2502 1       \u2506 0.75 \u2506 0.78 \u2502\n#&gt; \u2502 1       \u2506 1.0  \u2506 0.48 \u2502\n#&gt; \u2502 1       \u2506 1.25 \u2506 0.37 \u2502\n#&gt; \u2502 \u2026       \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 6       \u2506 3.0  \u2506 0.24 \u2502\n#&gt; \u2502 6       \u2506 4.0  \u2506 0.17 \u2502\n#&gt; \u2502 6       \u2506 5.0  \u2506 0.13 \u2502\n#&gt; \u2502 6       \u2506 6.0  \u2506 0.1  \u2502\n#&gt; \u2502 6       \u2506 8.0  \u2506 0.09 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>To go from long to wide, we use the <code>$pivot()</code> method. Here we pivot the data so that every subject takes its own column.</p> <pre><code>indo_wide = indo$pivot(values = \"conc\", index = \"time\", columns = \"Subject\")\nindo_wide\n#&gt; shape: (11, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time \u2506 1    \u2506 2    \u2506 3    \u2506 4    \u2506 5    \u2506 6    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.25 \u2506 1.5  \u2506 2.03 \u2506 2.72 \u2506 1.85 \u2506 2.05 \u2506 2.31 \u2502\n#&gt; \u2502 0.5  \u2506 0.94 \u2506 1.63 \u2506 1.49 \u2506 1.39 \u2506 1.04 \u2506 1.44 \u2502\n#&gt; \u2502 0.75 \u2506 0.78 \u2506 0.71 \u2506 1.16 \u2506 1.02 \u2506 0.81 \u2506 1.03 \u2502\n#&gt; \u2502 1.0  \u2506 0.48 \u2506 0.7  \u2506 0.8  \u2506 0.89 \u2506 0.39 \u2506 0.84 \u2502\n#&gt; \u2502 1.25 \u2506 0.37 \u2506 0.64 \u2506 0.8  \u2506 0.59 \u2506 0.3  \u2506 0.64 \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 3.0  \u2506 0.12 \u2506 0.32 \u2506 0.22 \u2506 0.16 \u2506 0.13 \u2506 0.24 \u2502\n#&gt; \u2502 4.0  \u2506 0.11 \u2506 0.2  \u2506 0.12 \u2506 0.11 \u2506 0.11 \u2506 0.17 \u2502\n#&gt; \u2502 5.0  \u2506 0.08 \u2506 0.25 \u2506 0.11 \u2506 0.1  \u2506 0.08 \u2506 0.13 \u2502\n#&gt; \u2502 6.0  \u2506 0.07 \u2506 0.12 \u2506 0.08 \u2506 0.07 \u2506 0.1  \u2506 0.1  \u2502\n#&gt; \u2502 8.0  \u2506 0.05 \u2506 0.08 \u2506 0.08 \u2506 0.07 \u2506 0.06 \u2506 0.09 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>To go from wide to long, we use the <code>$melt()</code> method.</p> <pre><code># indo_wide$melt(id_vars = \"time\") # default column names are \"variable\" and \"value\"\nindo_wide$melt(id_vars = \"time\", variable_name = \"subject\", value_name = \"conc\")\n#&gt; shape: (66, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time \u2506 subject \u2506 conc \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 str     \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.25 \u2506 1       \u2506 1.5  \u2502\n#&gt; \u2502 0.5  \u2506 1       \u2506 0.94 \u2502\n#&gt; \u2502 0.75 \u2506 1       \u2506 0.78 \u2502\n#&gt; \u2502 1.0  \u2506 1       \u2506 0.48 \u2502\n#&gt; \u2502 1.25 \u2506 1       \u2506 0.37 \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026       \u2506 \u2026    \u2502\n#&gt; \u2502 3.0  \u2506 6       \u2506 0.24 \u2502\n#&gt; \u2502 4.0  \u2506 6       \u2506 0.17 \u2502\n#&gt; \u2502 5.0  \u2506 6       \u2506 0.13 \u2502\n#&gt; \u2502 6.0  \u2506 6       \u2506 0.1  \u2502\n#&gt; \u2502 8.0  \u2506 6       \u2506 0.09 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Basic functionality aside, it should be noted that <code>$pivot()</code> can perform aggregations as part of the reshaping operation. This is useful when you have multiple observations per ID variable that need to be collapsed into unique values. The aggregating functions can be arbitrarily complex, but let\u2019s consider a relatively simple example using our <code>dat</code> (\u201cmtcars\u201d) DataFrame from earlier: what is the median MPG value (<code>mpg</code>) across cylinders (<code>cyl</code>), cut by different combinations of transmission type (<code>am</code>) and engine shape (<code>vs</code>)?</p> <pre><code>dat$pivot(\n  values = \"mpg\",\n  index = c(\"am\", \"vs\"),\n  columns = \"cyl\",\n  aggregate_function = \"median\" # aggregating function\n)\n#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 am  \u2506 vs  \u2506 6.0   \u2506 4.0  \u2506 8.0  \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---   \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64   \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 0.0 \u2506 21.0  \u2506 26.0 \u2506 15.4 \u2502\n#&gt; \u2502 1.0 \u2506 1.0 \u2506 null  \u2506 30.4 \u2506 null \u2502\n#&gt; \u2502 0.0 \u2506 1.0 \u2506 18.65 \u2506 22.8 \u2506 null \u2502\n#&gt; \u2502 0.0 \u2506 0.0 \u2506 null  \u2506 null \u2506 15.2 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Here, <code>\"median\"</code> is a convenience string that is equivalent to the more verbose <code>pl$element()$median()</code>. Other convenience strings include <code>\"first\"</code>, <code>\"last\"</code>, <code>\"min\"</code>, <code>\"max\"</code>, <code>\"mean\"</code>, <code>\"sum\"</code>, and <code>\"count\"</code>.</p>"},{"location":"vignettes/polars.html#join","title":"Join","text":"<p>As a final example of how polars can be used for standard data wrangling tasks, let\u2019s implement a (left) join. For this example, we\u2019ll borrow some datasets from the nycflights13 package.</p> <pre><code>data(\"flights\", \"planes\", package = \"nycflights13\")\nflights = as_polars_df(flights)\nplanes = as_polars_df(planes)\n\nflights$join(\n  planes,\n  on = \"tailnum\",\n  how = \"left\"\n)\n#&gt; shape: (336_776, 27)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 year \u2506 month \u2506 day \u2506 dep_time \u2506 \u2026 \u2506 engines \u2506 seats \u2506 speed \u2506 engine    \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2506 ---      \u2506   \u2506 ---     \u2506 ---   \u2506 ---   \u2506 ---       \u2502\n#&gt; \u2502 i32  \u2506 i32   \u2506 i32 \u2506 i32      \u2506   \u2506 i32     \u2506 i32   \u2506 i32   \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 517      \u2506 \u2026 \u2506 2       \u2506 149   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 533      \u2506 \u2026 \u2506 2       \u2506 149   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 542      \u2506 \u2026 \u2506 2       \u2506 178   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 544      \u2506 \u2026 \u2506 2       \u2506 200   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 554      \u2506 \u2026 \u2506 2       \u2506 178   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026     \u2506 \u2026   \u2506 \u2026        \u2506 \u2026 \u2506 \u2026       \u2506 \u2026     \u2506 \u2026     \u2506 \u2026         \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 \u2026 \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 \u2026 \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 \u2026 \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 \u2026 \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 \u2026 \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>More information on the polars joining method can be found in the reference manual.</p> <p>The package supports many other data manipulation operations, which we won\u2019t cover here. Hopefully, you will already have a sense of the key syntax features. We now turn to another core idea of the Polars ecosystem: lazy execution.</p>"},{"location":"vignettes/polars.html#lazy-execution","title":"Lazy execution","text":"<p>While the \u201ceager\u201d execution engine of polars works perfectly well\u2014as evidenced by all of the previous examples\u2014to get the most out of the package you need to go lazy. Lazy execution enables several benefits, but the most important is that it improves performance. Delaying execution until the last possible moment allows Polars to apply automatic optimization to every query. Let\u2019s take a quick look.</p> <p>To create a so-called \u201cLazyFrame\u201d from an existing object in memory, we can invoke the <code>$lazy()</code> method.</p> <pre><code>ldat = dat$lazy()\nldat\n#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <p>Or, use the <code>as_polars_lf()</code> generic function.</p> <pre><code>as_polars_lf(dat)\n#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <p>Now consider what happens when we run our subsetting query from earlier on this LazyFrame.</p> <pre><code>subset_query = ldat$filter(\n  pl$col(\"cyl\") == 6\n)$select(\n  pl$col(c(\"mpg\", \"hp\", \"cyl\"))\n)\n\nsubset_query\n#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt;  SELECT [col(\"mpg\"), col(\"hp\"), col(\"cyl\")] FROM\n#&gt;   FILTER [(col(\"cyl\")) == (6.0)] FROM\n#&gt; \n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <p>Right now we only have a tree of instructions. But underneath the hood, Polars has already worked out a more optimized version of the query. We can view this optimized plan this by requesting it.</p> <pre><code>subset_query$describe_optimized_plan()\n#&gt; FAST_PROJECT: [mpg, hp, cyl]\n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT 3/11 COLUMNS; SELECTION: \"[(col(\\\"cyl\\\")) == (6.0)]\"\n</code></pre> <p>Here we see a simple, but surprisingly effective component in query optimization: projection. Changing the order in which our subsetting operations occurs\u2014in this case, subsetting on columns first\u2014reduces the memory overhead of the overall query and leads to a downstream speedup. Of course, you would hardly notice a difference for this small dataset. But the same principles carry over to much bigger datasets and more complex queries.</p> <p>To actually execute the plan, we just need to invoke the <code>$collect()</code> method. This should feel very familiar if you have previously used other lazy execution engines like those provided by arrow or dbplyr.</p> <pre><code>subset_query$collect()\n#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2506 cyl \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.4 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 18.1 \u2506 105.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.2 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 17.8 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.7 \u2506 175.0 \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/polars.html#data-import","title":"Data import","text":"<p>polars supports data import of both CSV and Parquet files formats. Here we demonstrate using the <code>airquality</code> dataset that also comes bundled with base R.</p> <pre><code>write.csv(airquality, \"airquality.csv\", row.names = FALSE)\n\npl$read_csv(\"airquality.csv\")\n#&gt; shape: (153, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Ozone \u2506 Solar.R \u2506 Wind \u2506 Temp \u2506 Month \u2506 Day \u2502\n#&gt; \u2502 ---   \u2506 ---     \u2506 ---  \u2506 ---  \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 str   \u2506 str     \u2506 f64  \u2506 i64  \u2506 i64   \u2506 i64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 41    \u2506 190     \u2506 7.4  \u2506 67   \u2506 5     \u2506 1   \u2502\n#&gt; \u2502 36    \u2506 118     \u2506 8.0  \u2506 72   \u2506 5     \u2506 2   \u2502\n#&gt; \u2502 12    \u2506 149     \u2506 12.6 \u2506 74   \u2506 5     \u2506 3   \u2502\n#&gt; \u2502 18    \u2506 313     \u2506 11.5 \u2506 62   \u2506 5     \u2506 4   \u2502\n#&gt; \u2502 NA    \u2506 NA      \u2506 14.3 \u2506 56   \u2506 5     \u2506 5   \u2502\n#&gt; \u2502 \u2026     \u2506 \u2026       \u2506 \u2026    \u2506 \u2026    \u2506 \u2026     \u2506 \u2026   \u2502\n#&gt; \u2502 30    \u2506 193     \u2506 6.9  \u2506 70   \u2506 9     \u2506 26  \u2502\n#&gt; \u2502 NA    \u2506 145     \u2506 13.2 \u2506 77   \u2506 9     \u2506 27  \u2502\n#&gt; \u2502 14    \u2506 191     \u2506 14.3 \u2506 75   \u2506 9     \u2506 28  \u2502\n#&gt; \u2502 18    \u2506 131     \u2506 8.0  \u2506 76   \u2506 9     \u2506 29  \u2502\n#&gt; \u2502 20    \u2506 223     \u2506 11.5 \u2506 68   \u2506 9     \u2506 30  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Again, however, the package works best if we take the lazy approach.</p> <pre><code>pl$scan_csv(\"airquality.csv\")\n#&gt; polars LazyFrame\n#&gt;  $describe_optimized_plan() : Show the optimized query plan.\n#&gt; \n#&gt; Naive plan:\n#&gt; \n#&gt;   Csv SCAN airquality.csv\n#&gt;   PROJECT */6 COLUMNS\n</code></pre> <p>We could obviously append a set of query operators to the above LazyFrame and then collect the results. However, this workflow is even better suited to Parquet files, since we can leverage their efficient storage format on disk. Let\u2019s see an example.</p> <pre><code>as_polars_df(airquality)$write_parquet(\"airquality.parquet\")\n\n# eager version (okay)\naq_collected = pl$read_parquet(\"airquality.parquet\")\n\n# lazy version (better)\naq = pl$scan_parquet(\"airquality.parquet\")\n\naq$filter(\n  pl$col(\"Month\") &lt;= 6\n)$group_by(\n  \"Month\"\n)$agg(\n  pl$col(c(\"Ozone\", \"Temp\"))$mean()\n)$collect()\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Month \u2506 Ozone     \u2506 Temp      \u2502\n#&gt; \u2502 ---   \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 i32   \u2506 f64       \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5     \u2506 23.615385 \u2506 65.548387 \u2502\n#&gt; \u2502 6     \u2506 29.444444 \u2506 79.1      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Finally, we can read/scan multiple files in the same directory through pattern globbing.</p> <pre><code>dir.create(\"airquality-ds\")\n\n# Create a hive-partitioned dataset with the function from the arrow package\narrow::write_dataset(airquality, \"airquality-ds\", partitioning = \"Month\")\n\n# Use pattern globbing to scan all parquet files in the folder\naq2 = pl$scan_parquet(\"airquality-ds/**/*.parquet\")\n\n# Scan the first two rows\naq2$fetch(2)\n#&gt; shape: (2, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Ozone \u2506 Solar.R \u2506 Wind \u2506 Temp \u2506 Day \u2506 Month \u2502\n#&gt; \u2502 ---   \u2506 ---     \u2506 ---  \u2506 ---  \u2506 --- \u2506 ---   \u2502\n#&gt; \u2502 i32   \u2506 i32     \u2506 f64  \u2506 i32  \u2506 i32 \u2506 i64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 41    \u2506 190     \u2506 7.4  \u2506 67   \u2506 1   \u2506 5     \u2502\n#&gt; \u2502 36    \u2506 118     \u2506 8.0  \u2506 72   \u2506 2   \u2506 5     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Before continuing, don\u2019t forget to clean up by removing the newly created temp files and directory on disk.</p> <pre><code>file.remove(c(\"airquality.csv\", \"airquality.parquet\"))\n#&gt; [1] TRUE TRUE\nunlink(\"airquality-ds\", recursive = TRUE)\n</code></pre>"},{"location":"vignettes/polars.html#execute-r-functions-within-a-polars-query","title":"Execute R functions within a Polars query","text":"<p>It is possible to mix R code with Polars by passing R functions to polars. This can unlock a lot of flexibility, but note that it can inhibit performance. R functions are typically slower, so we recommend using native Polars functions and expressions wherever possible.</p> <pre><code>as_polars_df(iris)$select(\n  pl$col(\"Sepal.Length\")$map_batches(\\(s) { # map with a R function\n    x = as.vector(s) # convert from Polars Series to a native R vector\n    x[x &gt;= 5] = 10\n    x[1:10] # if return is R vector, it will automatically be converted to Polars Series again\n  })\n) |&gt;\n  as.data.frame()\n#&gt;    Sepal.Length\n#&gt; 1          10.0\n#&gt; 2           4.9\n#&gt; 3           4.7\n#&gt; 4           4.6\n#&gt; 5          10.0\n#&gt; 6          10.0\n#&gt; 7           4.6\n#&gt; 8          10.0\n#&gt; 9           4.4\n#&gt; 10          4.9\n</code></pre>"},{"location":"vignettes/polars.html#data-types","title":"Data types","text":"<p>Polars is strongly typed and new types can be created with the <code>dtypes</code> constructor. For example:</p> <pre><code>pl$dtypes$Float64\n#&gt; DataType: Float64\n</code></pre> <p>The full list of valid Polars types can be found by typing <code>pl$dtypes</code> into your R console. These include Boolean, Float32(64), Int32(64), Utf8, Categorical, Date, etc. Note that some type names differ from what they are called in R (e.g., Boolean in Polars is equivalent to <code>logical()</code> in R). This might occasionally require you to look up a specific type. But the good news is that polars generally does a good job of inferring types automatically.</p> <p>[1] Similar to how (most) data.table operations are limited to objects of class <code>data.table</code>, we can only perform polars operations on objects that have been converted to an appropriate polars class. Later on, we\u2019ll see how to read data from disk directly in Polars format.</p>"},{"location":"vignettes/userguide.html","title":"Polars - User Guide for R","text":"<p>The Polars User Guide is a detailed tutorial about the Polars DataFrame library. Its goal is to introduce you to Polars by going through examples and comparing it to other solutions. Some design choices are introduced there. The guide also introduces you to optimal usage of Polars. The Polars User Guide is available at this link:</p> <p>https://pola-rs.github.io/polars-book/user-guide/</p> <p>Currently, the User Guide includes code examples in Python and Rust. This page complements the guide with examples in R. The R examples are not complete yet; when they are complete, our goal is to merge them into the main User Guide. If you want to help, please submit a pull request to the R polars Github repository.</p> <p>The current page works as a reference document, for side-by-side comparisons with the Python and Rust examples in the main User Guide.</p>"},{"location":"vignettes/userguide.html#introduction","title":"Introduction","text":"<pre><code>library(polars)\n</code></pre>"},{"location":"vignettes/userguide.html#getting-started","title":"Getting started","text":"<pre><code>df = pl$read_csv(\"https://j.mp/iriscsv\")\n</code></pre> <pre><code>df$filter(pl$col(\"sepal_length\") &gt; 5)$\n  group_by(\"species\", maintain_order = TRUE)$\n  agg(pl$all()$sum())\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 species    \u2506 sepal_length \u2506 sepal_width \u2506 petal_length \u2506 petal_width \u2502\n#&gt; \u2502 ---        \u2506 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 str        \u2506 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2506 116.9        \u2506 81.7        \u2506 33.2         \u2506 6.1         \u2502\n#&gt; \u2502 versicolor \u2506 281.9        \u2506 131.8       \u2506 202.9        \u2506 63.3        \u2502\n#&gt; \u2502 virginica  \u2506 324.5        \u2506 146.2       \u2506 273.1        \u2506 99.6        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$\n  lazy()$\n  filter(pl$col(\"sepal_length\") &gt; 5)$\n  group_by(\"species\", maintain_order = TRUE)$\n  agg(pl$all()$sum())$\n  collect()\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 species    \u2506 sepal_length \u2506 sepal_width \u2506 petal_length \u2506 petal_width \u2502\n#&gt; \u2502 ---        \u2506 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 str        \u2506 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2506 116.9        \u2506 81.7        \u2506 33.2         \u2506 6.1         \u2502\n#&gt; \u2502 versicolor \u2506 281.9        \u2506 131.8       \u2506 202.9        \u2506 63.3        \u2502\n#&gt; \u2502 virginica  \u2506 324.5        \u2506 146.2       \u2506 273.1        \u2506 99.6        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide.html#polars-quick-exploration-guide","title":"Polars quick exploration guide","text":"<pre><code>series = as_polars_series(c(1, 2, 3, 4, 5))\nseries\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  2.0\n#&gt;  3.0\n#&gt;  4.0\n#&gt;  5.0\n#&gt; ]\n\ndf = pl$DataFrame(\n  \"integer\" = c(1, 2, 3),\n  \"date\" = as.Date(c(\"2022-1-1\", \"2022-1-2\", \"2022-1-3\")),\n  \"float\" = c(4.0, 5.0, 6.0)\n)\ndf\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 integer \u2506 date       \u2506 float \u2502\n#&gt; \u2502 ---     \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 f64     \u2506 date       \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0     \u2506 2022-01-01 \u2506 4.0   \u2502\n#&gt; \u2502 2.0     \u2506 2022-01-02 \u2506 5.0   \u2502\n#&gt; \u2502 3.0     \u2506 2022-01-03 \u2506 6.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# df$write_csv('output.csv')\n# df_csv_with_dates = pl$read_csv(\"output.csv\", parse_dates=True)\n# print(df_csv_with_dates)\n\n# dataframe$write_json('output.json')\n# df_json = pl$read_json(\"output.json\")\n# print(df_json)\n\n# dataframe$write_parquet('output.parquet')\n# df_parquet = pl$read_parquet(\"output.parquet\")\n# print(df_parquet)\n\ndf = pl$DataFrame(\n  \"a\" = as.numeric(0:7),\n  \"b\" = runif(8),\n  \"c\" = as.Date(sprintf(\"2022-12-%s\", 1:8)),\n  \"d\" = c(1, 2.0, NaN, NaN, 0, -5, -42, NA)\n)\ndf$head(5)\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d   \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.062037 \u2506 2022-12-01 \u2506 1.0 \u2502\n#&gt; \u2502 1.0 \u2506 0.697502 \u2506 2022-12-02 \u2506 2.0 \u2502\n#&gt; \u2502 2.0 \u2506 0.678019 \u2506 2022-12-03 \u2506 NaN \u2502\n#&gt; \u2502 3.0 \u2506 0.253302 \u2506 2022-12-04 \u2506 NaN \u2502\n#&gt; \u2502 4.0 \u2506 0.998246 \u2506 2022-12-05 \u2506 0.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$tail(5)\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d     \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2506 0.253302 \u2506 2022-12-04 \u2506 NaN   \u2502\n#&gt; \u2502 4.0 \u2506 0.998246 \u2506 2022-12-05 \u2506 0.0   \u2502\n#&gt; \u2502 5.0 \u2506 0.347071 \u2506 2022-12-06 \u2506 -5.0  \u2502\n#&gt; \u2502 6.0 \u2506 0.782467 \u2506 2022-12-07 \u2506 -42.0 \u2502\n#&gt; \u2502 7.0 \u2506 0.338363 \u2506 2022-12-08 \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n## not implemented yet\n# df$sample(3)\n\n## not implemented yet\n# df$describe()\n\ndf$select(pl$col(\"*\"))\n#&gt; shape: (8, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d     \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.062037 \u2506 2022-12-01 \u2506 1.0   \u2502\n#&gt; \u2502 1.0 \u2506 0.697502 \u2506 2022-12-02 \u2506 2.0   \u2502\n#&gt; \u2502 2.0 \u2506 0.678019 \u2506 2022-12-03 \u2506 NaN   \u2502\n#&gt; \u2502 3.0 \u2506 0.253302 \u2506 2022-12-04 \u2506 NaN   \u2502\n#&gt; \u2502 4.0 \u2506 0.998246 \u2506 2022-12-05 \u2506 0.0   \u2502\n#&gt; \u2502 5.0 \u2506 0.347071 \u2506 2022-12-06 \u2506 -5.0  \u2502\n#&gt; \u2502 6.0 \u2506 0.782467 \u2506 2022-12-07 \u2506 -42.0 \u2502\n#&gt; \u2502 7.0 \u2506 0.338363 \u2506 2022-12-08 \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(pl$col(c(\"a\", \"b\")))\n#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.062037 \u2502\n#&gt; \u2502 1.0 \u2506 0.697502 \u2502\n#&gt; \u2502 2.0 \u2506 0.678019 \u2502\n#&gt; \u2502 3.0 \u2506 0.253302 \u2502\n#&gt; \u2502 4.0 \u2506 0.998246 \u2502\n#&gt; \u2502 5.0 \u2506 0.347071 \u2502\n#&gt; \u2502 6.0 \u2506 0.782467 \u2502\n#&gt; \u2502 7.0 \u2506 0.338363 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(pl$col(c(\"a\", \"b\")))\n#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.062037 \u2502\n#&gt; \u2502 1.0 \u2506 0.697502 \u2502\n#&gt; \u2502 2.0 \u2506 0.678019 \u2502\n#&gt; \u2502 3.0 \u2506 0.253302 \u2502\n#&gt; \u2502 4.0 \u2506 0.998246 \u2502\n#&gt; \u2502 5.0 \u2506 0.347071 \u2502\n#&gt; \u2502 6.0 \u2506 0.782467 \u2502\n#&gt; \u2502 7.0 \u2506 0.338363 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(pl$col(\"a\"), pl$col(\"b\"))$limit(3)\n#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.062037 \u2502\n#&gt; \u2502 1.0 \u2506 0.697502 \u2502\n#&gt; \u2502 2.0 \u2506 0.678019 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(pl$all()$exclude(\"a\"))\n#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b        \u2506 c          \u2506 d     \u2502\n#&gt; \u2502 ---      \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 f64      \u2506 date       \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.062037 \u2506 2022-12-01 \u2506 1.0   \u2502\n#&gt; \u2502 0.697502 \u2506 2022-12-02 \u2506 2.0   \u2502\n#&gt; \u2502 0.678019 \u2506 2022-12-03 \u2506 NaN   \u2502\n#&gt; \u2502 0.253302 \u2506 2022-12-04 \u2506 NaN   \u2502\n#&gt; \u2502 0.998246 \u2506 2022-12-05 \u2506 0.0   \u2502\n#&gt; \u2502 0.347071 \u2506 2022-12-06 \u2506 -5.0  \u2502\n#&gt; \u2502 0.782467 \u2506 2022-12-07 \u2506 -42.0 \u2502\n#&gt; \u2502 0.338363 \u2506 2022-12-08 \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$filter(\n  pl$col(\"c\")$is_between(as.Date(\"2022-12-2\"), as.Date(\"2022-12-8\"))\n)\n#&gt; shape: (7, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d     \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 0.697502 \u2506 2022-12-02 \u2506 2.0   \u2502\n#&gt; \u2502 2.0 \u2506 0.678019 \u2506 2022-12-03 \u2506 NaN   \u2502\n#&gt; \u2502 3.0 \u2506 0.253302 \u2506 2022-12-04 \u2506 NaN   \u2502\n#&gt; \u2502 4.0 \u2506 0.998246 \u2506 2022-12-05 \u2506 0.0   \u2502\n#&gt; \u2502 5.0 \u2506 0.347071 \u2506 2022-12-06 \u2506 -5.0  \u2502\n#&gt; \u2502 6.0 \u2506 0.782467 \u2506 2022-12-07 \u2506 -42.0 \u2502\n#&gt; \u2502 7.0 \u2506 0.338363 \u2506 2022-12-08 \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$filter((pl$col(\"a\") &lt;= 3) &amp; (pl$col(\"d\")$is_not_nan()))\n#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d   \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.062037 \u2506 2022-12-01 \u2506 1.0 \u2502\n#&gt; \u2502 1.0 \u2506 0.697502 \u2506 2022-12-02 \u2506 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$with_columns(pl$col(\"b\")$sum()$alias(\"e\"), (pl$col(\"b\") + 42)$alias(\"b+42\"))\n#&gt; shape: (8, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d     \u2506 e        \u2506 b+42      \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 ---   \u2506 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64   \u2506 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.062037 \u2506 2022-12-01 \u2506 1.0   \u2506 4.157007 \u2506 42.062037 \u2502\n#&gt; \u2502 1.0 \u2506 0.697502 \u2506 2022-12-02 \u2506 2.0   \u2506 4.157007 \u2506 42.697502 \u2502\n#&gt; \u2502 2.0 \u2506 0.678019 \u2506 2022-12-03 \u2506 NaN   \u2506 4.157007 \u2506 42.678019 \u2502\n#&gt; \u2502 3.0 \u2506 0.253302 \u2506 2022-12-04 \u2506 NaN   \u2506 4.157007 \u2506 42.253302 \u2502\n#&gt; \u2502 4.0 \u2506 0.998246 \u2506 2022-12-05 \u2506 0.0   \u2506 4.157007 \u2506 42.998246 \u2502\n#&gt; \u2502 5.0 \u2506 0.347071 \u2506 2022-12-06 \u2506 -5.0  \u2506 4.157007 \u2506 42.347071 \u2502\n#&gt; \u2502 6.0 \u2506 0.782467 \u2506 2022-12-07 \u2506 -42.0 \u2506 4.157007 \u2506 42.782467 \u2502\n#&gt; \u2502 7.0 \u2506 0.338363 \u2506 2022-12-08 \u2506 null  \u2506 4.157007 \u2506 42.338363 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$with_columns((pl$col(\"a\") * pl$col(\"b\"))$alias(\"a * b\"))$select(pl$all()$exclude(c(\"c\", \"d\")))\n#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 a * b    \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.062037 \u2506 0.0      \u2502\n#&gt; \u2502 1.0 \u2506 0.697502 \u2506 0.697502 \u2502\n#&gt; \u2502 2.0 \u2506 0.678019 \u2506 1.356039 \u2502\n#&gt; \u2502 3.0 \u2506 0.253302 \u2506 0.759906 \u2502\n#&gt; \u2502 4.0 \u2506 0.998246 \u2506 3.992985 \u2502\n#&gt; \u2502 5.0 \u2506 0.347071 \u2506 1.735355 \u2502\n#&gt; \u2502 6.0 \u2506 0.782467 \u2506 4.694799 \u2502\n#&gt; \u2502 7.0 \u2506 0.338363 \u2506 2.36854  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf = pl$DataFrame(\"x\" = 0:7, \"y\" = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"X\", \"X\"))\n\ndf$\n  group_by(\"y\", maintain_order = FALSE)$\n  agg(\n  pl$col(\"*\")$count()$alias(\"count\"),\n  pl$col(\"*\")$sum()$alias(\"sum\")\n)\n#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 y   \u2506 count \u2506 sum \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 str \u2506 u32   \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 C   \u2506 1     \u2506 5   \u2502\n#&gt; \u2502 X   \u2506 2     \u2506 13  \u2502\n#&gt; \u2502 B   \u2506 2     \u2506 7   \u2502\n#&gt; \u2502 A   \u2506 3     \u2506 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf1 = pl$DataFrame(\n  \"a\" = 0:7,\n  \"b\" = runif(8),\n  \"c\" = as.Date(sprintf(\"2022-12-%s\", 1:8)),\n  \"d\" = c(1, 2.0, NaN, NaN, 0, -5, -42, NA)\n)\ndf2 = pl$DataFrame(\"x\" = 0:7, \"y\" = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"X\", \"X\"))\n\npl$concat(c(df1, df2), how = \"horizontal\")\n#&gt; shape: (8, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d     \u2506 x   \u2506 y   \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 ---   \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 f64      \u2506 date       \u2506 f64   \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 0.054346 \u2506 2022-12-01 \u2506 1.0   \u2506 0   \u2506 A   \u2502\n#&gt; \u2502 1   \u2506 0.495103 \u2506 2022-12-02 \u2506 2.0   \u2506 1   \u2506 A   \u2502\n#&gt; \u2502 2   \u2506 0.400233 \u2506 2022-12-03 \u2506 NaN   \u2506 2   \u2506 A   \u2502\n#&gt; \u2502 3   \u2506 0.105412 \u2506 2022-12-04 \u2506 NaN   \u2506 3   \u2506 B   \u2502\n#&gt; \u2502 4   \u2506 0.975849 \u2506 2022-12-05 \u2506 0.0   \u2506 4   \u2506 B   \u2502\n#&gt; \u2502 5   \u2506 0.05231  \u2506 2022-12-06 \u2506 -5.0  \u2506 5   \u2506 C   \u2502\n#&gt; \u2502 6   \u2506 0.23439  \u2506 2022-12-07 \u2506 -42.0 \u2506 6   \u2506 X   \u2502\n#&gt; \u2502 7   \u2506 0.012385 \u2506 2022-12-08 \u2506 null  \u2506 7   \u2506 X   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide.html#polars-expressions","title":"Polars expressions","text":""},{"location":"vignettes/userguide.html#expressions","title":"Expressions","text":"<pre><code>df = pl$DataFrame(\n  \"nrs\" = c(1, 2, 3, NA, 5),\n  \"names\" = c(\"foo\", \"ham\", \"spam\", \"egg\", NA),\n  \"random\" = runif(5),\n  \"groups\" = c(\"A\", \"A\", \"B\", \"C\", \"B\")\n)\ndf\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 nrs  \u2506 names \u2506 random   \u2506 groups \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 str   \u2506 f64      \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 foo   \u2506 0.733013 \u2506 A      \u2502\n#&gt; \u2502 2.0  \u2506 ham   \u2506 0.402237 \u2506 A      \u2502\n#&gt; \u2502 3.0  \u2506 spam  \u2506 0.750079 \u2506 B      \u2502\n#&gt; \u2502 null \u2506 egg   \u2506 0.464098 \u2506 C      \u2502\n#&gt; \u2502 5.0  \u2506 null  \u2506 0.912178 \u2506 B      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$col(\"names\")$n_unique()$alias(\"unique_names_1\"),\n  pl$col(\"names\")$unique()$count()$alias(\"unique_names_2\")\n)\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 unique_names_1 \u2506 unique_names_2 \u2502\n#&gt; \u2502 ---            \u2506 ---            \u2502\n#&gt; \u2502 u32            \u2506 u32            \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5              \u2506 4              \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$sum(\"random\")$alias(\"sum\"),\n  pl$min(\"random\")$alias(\"min\"),\n  pl$max(\"random\")$alias(\"max\"),\n  pl$col(\"random\")$max()$alias(\"other_max\"),\n  pl$std(\"random\")$alias(\"std dev\"),\n  pl$var(\"random\")$alias(\"variance\")\n)\n#&gt; shape: (1, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 sum      \u2506 min      \u2506 max      \u2506 other_max \u2506 std dev  \u2506 variance \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2506 ---      \u2506 ---       \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2506 f64      \u2506 f64       \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.261604 \u2506 0.402237 \u2506 0.912178 \u2506 0.912178  \u2506 0.213051 \u2506 0.045391 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$col(\"names\")$filter(pl$col(\"names\")$str$contains(\"am$\"))$count()\n)\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 names \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$when(pl$col(\"random\") &gt; 0.5)$then(0)$otherwise(pl$col(\"random\")) * pl$sum(\"nrs\")\n)\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal  \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2502 4.424606 \u2502\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2502 5.105073 \u2502\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$when(pl$col(\"groups\") == \"A\")$then(1)$when(pl$col(\"random\") &gt; 0.5)$then(0)$otherwise(pl$col(\"random\"))\n)\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal  \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0      \u2502\n#&gt; \u2502 1.0      \u2502\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2502 0.464098 \u2502\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$col(\"*\"), # select all\n  pl$col(\"random\")$sum()$over(\"groups\")$alias(\"sumc(random)/groups\"),\n  pl$col(\"random\")$implode()$over(\"names\")$alias(\"random/name\")\n)\n#&gt; shape: (5, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 nrs  \u2506 names \u2506 random   \u2506 groups \u2506 sumc(random)/groups \u2506 random/name \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---    \u2506 ---                 \u2506 ---         \u2502\n#&gt; \u2502 f64  \u2506 str   \u2506 f64      \u2506 str    \u2506 f64                 \u2506 list[f64]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 foo   \u2506 0.733013 \u2506 A      \u2506 1.13525             \u2506 [0.733013]  \u2502\n#&gt; \u2502 2.0  \u2506 ham   \u2506 0.402237 \u2506 A      \u2506 1.13525             \u2506 [0.402237]  \u2502\n#&gt; \u2502 3.0  \u2506 spam  \u2506 0.750079 \u2506 B      \u2506 1.662257            \u2506 [0.750079]  \u2502\n#&gt; \u2502 null \u2506 egg   \u2506 0.464098 \u2506 C      \u2506 0.464098            \u2506 [0.464098]  \u2502\n#&gt; \u2502 5.0  \u2506 null  \u2506 0.912178 \u2506 B      \u2506 1.662257            \u2506 [0.912178]  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide.html#contexts","title":"Contexts","text":"<pre><code>df$select(\n  pl$sum(\"nrs\"),\n  pl$col(\"names\")$sort(),\n  pl$col(\"names\")$first()$alias(\"first name\"),\n  (pl$mean(\"nrs\") * 10)$alias(\"10xnrs\")\n)\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 nrs  \u2506 names \u2506 first name \u2506 10xnrs \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---        \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 str   \u2506 str        \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 11.0 \u2506 null  \u2506 foo        \u2506 27.5   \u2502\n#&gt; \u2502 11.0 \u2506 egg   \u2506 foo        \u2506 27.5   \u2502\n#&gt; \u2502 11.0 \u2506 foo   \u2506 foo        \u2506 27.5   \u2502\n#&gt; \u2502 11.0 \u2506 ham   \u2506 foo        \u2506 27.5   \u2502\n#&gt; \u2502 11.0 \u2506 spam  \u2506 foo        \u2506 27.5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$with_columns(\n  pl$sum(\"nrs\")$alias(\"nrs_sum\"),\n  pl$col(\"random\")$count()$alias(\"count\")\n)\n#&gt; shape: (5, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 nrs  \u2506 names \u2506 random   \u2506 groups \u2506 nrs_sum \u2506 count \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---    \u2506 ---     \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 str   \u2506 f64      \u2506 str    \u2506 f64     \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 foo   \u2506 0.733013 \u2506 A      \u2506 11.0    \u2506 5     \u2502\n#&gt; \u2502 2.0  \u2506 ham   \u2506 0.402237 \u2506 A      \u2506 11.0    \u2506 5     \u2502\n#&gt; \u2502 3.0  \u2506 spam  \u2506 0.750079 \u2506 B      \u2506 11.0    \u2506 5     \u2502\n#&gt; \u2502 null \u2506 egg   \u2506 0.464098 \u2506 C      \u2506 11.0    \u2506 5     \u2502\n#&gt; \u2502 5.0  \u2506 null  \u2506 0.912178 \u2506 B      \u2506 11.0    \u2506 5     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$group_by(\"groups\")$agg(\n  pl$sum(\"nrs\"), # sum nrs by groups\n  pl$col(\"random\")$count()$alias(\"count\"), # count group members\n  # sum random where name != null\n  pl$col(\"random\")$filter(pl$col(\"names\")$is_not_null())$sum()$name$suffix(\"_sum\"),\n  pl$col(\"names\")$reverse()$alias((\"reversed names\"))\n)\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 groups \u2506 nrs \u2506 count \u2506 random_sum \u2506 reversed names \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---   \u2506 ---        \u2506 ---            \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 u32   \u2506 f64        \u2506 list[str]      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 A      \u2506 3.0 \u2506 2     \u2506 1.13525    \u2506 [\"ham\", \"foo\"] \u2502\n#&gt; \u2502 C      \u2506 0.0 \u2506 1     \u2506 0.464098   \u2506 [\"egg\"]        \u2502\n#&gt; \u2502 B      \u2506 8.0 \u2506 2     \u2506 0.750079   \u2506 [null, \"spam\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide.html#groupby","title":"GroupBy","text":"<pre><code>url = \"https://theunitedstates.io/congress-legislators/legislators-historical.csv\"\n\ndtypes = list(\n  \"first_name\" = pl$Categorical(),\n  \"gender\" = pl$Categorical(),\n  \"type\" = pl$Categorical(),\n  \"state\" = pl$Categorical(),\n  \"party\" = pl$Categorical()\n)\n\n# dtypes argument\ndataset = pl$read_csv(url)$with_columns(pl$col(\"birthday\")$str$strptime(pl$Date, \"%Y-%m-%d\"))\n#&gt; tmp file placed in \n#&gt;  /tmp/RtmpuWodyz/https...theunitedstates.io.congress.legislators.legislators.historical.csv\n\ndataset$\n  lazy()$\n  group_by(\"first_name\")$\n  agg(\n  pl$len(),\n  pl$col(\"gender\"),\n  pl$first(\"last_name\")\n)$\n  sort(\"len\", descending = TRUE)$\n  limit(5)$\n  collect()\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 first_name \u2506 len  \u2506 gender            \u2506 last_name \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2506 ---               \u2506 ---       \u2502\n#&gt; \u2502 str        \u2506 u32  \u2506 list[str]         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 John       \u2506 1256 \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Walker    \u2502\n#&gt; \u2502 William    \u2506 1022 \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Few       \u2502\n#&gt; \u2502 James      \u2506 714  \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Armstrong \u2502\n#&gt; \u2502 Thomas     \u2506 453  \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Tucker    \u2502\n#&gt; \u2502 Charles    \u2506 439  \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Carroll   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndataset$lazy()$\n  group_by(\"state\")$\n  agg(\n  (pl$col(\"party\") == \"Anti-Administration\")$sum()$alias(\"anti\"),\n  (pl$col(\"party\") == \"Pro-Administration\")$sum()$alias(\"pro\")\n)$\n  sort(\"pro\", descending = TRUE)$\n  limit(5)$\n  collect()\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 state \u2506 anti \u2506 pro \u2502\n#&gt; \u2502 ---   \u2506 ---  \u2506 --- \u2502\n#&gt; \u2502 str   \u2506 u32  \u2506 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 NJ    \u2506 0    \u2506 3   \u2502\n#&gt; \u2502 CT    \u2506 0    \u2506 3   \u2502\n#&gt; \u2502 NC    \u2506 1    \u2506 2   \u2502\n#&gt; \u2502 MA    \u2506 0    \u2506 1   \u2502\n#&gt; \u2502 SC    \u2506 0    \u2506 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\ndataset$\n  lazy()$\n  group_by(c(\"state\", \"party\"))$\n  agg(pl$count(\"party\")$alias(\"count\"))$\n  filter((pl$col(\"party\") == \"Anti-Administration\") | (pl$col(\"party\") == \"Pro-Administration\"))$\n  sort(\"count\", descending = TRUE)$\n  head(5)$\n  collect()\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 state \u2506 party               \u2506 count \u2502\n#&gt; \u2502 ---   \u2506 ---                 \u2506 ---   \u2502\n#&gt; \u2502 str   \u2506 str                 \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 CT    \u2506 Pro-Administration  \u2506 3     \u2502\n#&gt; \u2502 VA    \u2506 Anti-Administration \u2506 3     \u2502\n#&gt; \u2502 NJ    \u2506 Pro-Administration  \u2506 3     \u2502\n#&gt; \u2502 NC    \u2506 Pro-Administration  \u2506 2     \u2502\n#&gt; \u2502 DE    \u2506 Anti-Administration \u2506 1     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide.html#folds","title":"Folds","text":""},{"location":"vignettes/userguide.html#window-functions","title":"Window functions","text":"<pre><code>df = pl$read_csv(\n  \"https://gist.githubusercontent.com/ritchie46/cac6b337ea52281aa23c049250a4ff03/raw/89a957ff3919d90e6ef2d34235e6bf22304f3366/pokemon.csv\"\n)\n</code></pre> <pre><code>filtered = df$\n  filter(pl$col(\"Type 2\") == \"Psychic\")$\n  select(c(\"Name\", \"Type 1\", \"Speed\"))\nfiltered\n#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Name                \u2506 Type 1 \u2506 Speed \u2502\n#&gt; \u2502 ---                 \u2506 ---    \u2506 ---   \u2502\n#&gt; \u2502 str                 \u2506 str    \u2506 i64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Slowpoke            \u2506 Water  \u2506 15    \u2502\n#&gt; \u2502 Slowbro             \u2506 Water  \u2506 30    \u2502\n#&gt; \u2502 SlowbroMega Slowbro \u2506 Water  \u2506 30    \u2502\n#&gt; \u2502 Exeggcute           \u2506 Grass  \u2506 40    \u2502\n#&gt; \u2502 Exeggutor           \u2506 Grass  \u2506 55    \u2502\n#&gt; \u2502 Starmie             \u2506 Water  \u2506 115   \u2502\n#&gt; \u2502 Jynx                \u2506 Ice    \u2506 95    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nfiltered$with_columns(\n  pl$col(c(\"Name\", \"Speed\"))$sort()$over(\"Type 1\")\n)\n#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Name                \u2506 Type 1 \u2506 Speed \u2502\n#&gt; \u2502 ---                 \u2506 ---    \u2506 ---   \u2502\n#&gt; \u2502 str                 \u2506 str    \u2506 i64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Slowbro             \u2506 Water  \u2506 15    \u2502\n#&gt; \u2502 SlowbroMega Slowbro \u2506 Water  \u2506 30    \u2502\n#&gt; \u2502 Slowpoke            \u2506 Water  \u2506 30    \u2502\n#&gt; \u2502 Exeggcute           \u2506 Grass  \u2506 40    \u2502\n#&gt; \u2502 Exeggutor           \u2506 Grass  \u2506 55    \u2502\n#&gt; \u2502 Starmie             \u2506 Water  \u2506 115   \u2502\n#&gt; \u2502 Jynx                \u2506 Ice    \u2506 95    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# aggregate and broadcast within a group\n# output type: -&gt; Int32\npl$sum(\"foo\")$over(\"groups\")\n#&gt; polars Expr: col(\"foo\").sum().over([col(\"groups\")])\n\n# sum within a group and multiply with group elements\n# output type: -&gt; Int32\n(pl$col(\"x\")$sum() * pl$col(\"y\"))$over(\"groups\")\n#&gt; polars Expr: [(col(\"x\").sum()) * (col(\"y\"))].over([col(\"groups\")])\n\n# sum within a group and multiply with group elements\n# and aggregate/implode the group to a list\n# output type: -&gt; List(Int32)\n(pl$col(\"x\")$sum() * pl$col(\"y\"))$implode()$over(\"groups\")\n#&gt; polars Expr: [(col(\"x\").sum()) * (col(\"y\"))].list().over([col(\"groups\")])\n\n# note that it will require an explicit `implode()` call\n# sum within a group and multiply with group elements\n# and aggregate/implode the group to a list\n# the explode call unpack the list and combine inner elements to one column\n\n# This is the fastest method to do things over groups when the groups are sorted\n(pl$col(\"x\")$sum() * pl$col(\"y\"))$implode()$over(\"groups\")$explode()\n#&gt; polars Expr: [(col(\"x\").sum()) * (col(\"y\"))].list().over([col(\"groups\")]).explode()\n\ndf$sort(\"Type 1\")$select(\n  pl$col(\"Type 1\")$head(3)$implode()$over(\"Type 1\")$explode(),\n  pl$col(\"Name\")$sort_by(pl$col(\"Speed\"))$head(3)$implode()$over(\"Type 1\")$explode()$alias(\"fastest/group\"),\n  pl$col(\"Name\")$sort_by(pl$col(\"Attack\"))$head(3)$implode()$over(\"Type 1\")$explode()$alias(\"strongest/group\"),\n  pl$col(\"Name\")$sort()$head(3)$implode()$over(\"Type 1\")$explode()$alias(\"sorted_by_alphabet\")\n)\n#&gt; shape: (43, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Type 1 \u2506 fastest/group       \u2506 strongest/group \u2506 sorted_by_alphabet        \u2502\n#&gt; \u2502 ---    \u2506 ---                 \u2506 ---             \u2506 ---                       \u2502\n#&gt; \u2502 str    \u2506 str                 \u2506 str             \u2506 str                       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Bug    \u2506 Paras               \u2506 Metapod         \u2506 Beedrill                  \u2502\n#&gt; \u2502 Bug    \u2506 Metapod             \u2506 Kakuna          \u2506 BeedrillMega Beedrill     \u2502\n#&gt; \u2502 Bug    \u2506 Parasect            \u2506 Caterpie        \u2506 Butterfree                \u2502\n#&gt; \u2502 Dragon \u2506 Dratini             \u2506 Dratini         \u2506 Dragonair                 \u2502\n#&gt; \u2502 Dragon \u2506 Dragonair           \u2506 Dragonair       \u2506 Dragonite                 \u2502\n#&gt; \u2502 \u2026      \u2506 \u2026                   \u2506 \u2026               \u2506 \u2026                         \u2502\n#&gt; \u2502 Rock   \u2506 Graveler            \u2506 Onix            \u2506 AerodactylMega Aerodactyl \u2502\n#&gt; \u2502 Rock   \u2506 Omanyte             \u2506 Omastar         \u2506 Geodude                   \u2502\n#&gt; \u2502 Water  \u2506 Slowpoke            \u2506 Magikarp        \u2506 Blastoise                 \u2502\n#&gt; \u2502 Water  \u2506 Slowbro             \u2506 Tentacool       \u2506 BlastoiseMega Blastoise   \u2502\n#&gt; \u2502 Water  \u2506 SlowbroMega Slowbro \u2506 Horsea          \u2506 Cloyster                  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide.html#list-context-and-row-wise-computations","title":"List context and row wise computations","text":""},{"location":"vignettes/userguide.html#r-examples","title":"R examples","text":"<pre><code>df = pl$DataFrame(\n  \"A\" = c(1, 2, 3, 4, 5),\n  \"fruits\" = c(\"banana\", \"banana\", \"apple\", \"apple\", \"banana\"),\n  \"B\" = c(5, 4, 3, 2, 1),\n  \"cars\" = c(\"beetle\", \"audi\", \"beetle\", \"beetle\", \"beetle\"),\n  \"optional\" = c(28, 300, NA, 2, -30)\n)\ndf\n#&gt; shape: (5, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2506 fruits \u2506 B   \u2506 cars   \u2506 optional \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 --- \u2506 ---    \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 str    \u2506 f64 \u2506 str    \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 banana \u2506 5.0 \u2506 beetle \u2506 28.0     \u2502\n#&gt; \u2502 2.0 \u2506 banana \u2506 4.0 \u2506 audi   \u2506 300.0    \u2502\n#&gt; \u2502 3.0 \u2506 apple  \u2506 3.0 \u2506 beetle \u2506 null     \u2502\n#&gt; \u2502 4.0 \u2506 apple  \u2506 2.0 \u2506 beetle \u2506 2.0      \u2502\n#&gt; \u2502 5.0 \u2506 banana \u2506 1.0 \u2506 beetle \u2506 -30.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# Within select, we can use the col function to refer to columns$\n# If we are not applying any function to the column, we can also use the column name as a string$\ndf$select(\n  pl$col(\"A\"),\n  \"B\", # the col part is inferred\n  pl$lit(\"B\") # the pl$lit functions tell polars we mean the literal \"B\"\n)\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2506 B   \u2506 literal \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---     \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 5.0 \u2506 B       \u2502\n#&gt; \u2502 2.0 \u2506 4.0 \u2506 B       \u2502\n#&gt; \u2502 3.0 \u2506 3.0 \u2506 B       \u2502\n#&gt; \u2502 4.0 \u2506 2.0 \u2506 B       \u2502\n#&gt; \u2502 5.0 \u2506 1.0 \u2506 B       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can use a list within select (example above) or a comma-separated list of expressions (this example)$\ndf$select(\n  pl$col(\"A\"),\n  \"B\",\n  pl$lit(\"B\")\n)\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2506 B   \u2506 literal \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---     \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 5.0 \u2506 B       \u2502\n#&gt; \u2502 2.0 \u2506 4.0 \u2506 B       \u2502\n#&gt; \u2502 3.0 \u2506 3.0 \u2506 B       \u2502\n#&gt; \u2502 4.0 \u2506 2.0 \u2506 B       \u2502\n#&gt; \u2502 5.0 \u2506 1.0 \u2506 B       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can select columns with a regex if the regex starts with '^' and ends with '$'\ndf$select(\n  pl$col(\"^A|B$\")$sum()\n)\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A    \u2506 B    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.0 \u2506 15.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can select multiple columns by name\ndf$select(\n  pl$col(c(\"A\", \"B\"))$sum()\n)\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A    \u2506 B    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.0 \u2506 15.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We select everything in normal order\n# Then we select everything in reversed order\ndf$select(\n  pl$all(),\n  pl$all()$reverse()$name$suffix(\"_reverse\")\n)\n#&gt; shape: (5, 10)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2506 fruits \u2506 B   \u2506 cars   \u2506 \u2026 \u2506 fruits_reverse \u2506 B_reverse \u2506 cars_reverse \u2506 optional_reverse \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 --- \u2506 ---    \u2506   \u2506 ---            \u2506 ---       \u2506 ---          \u2506 ---              \u2502\n#&gt; \u2502 f64 \u2506 str    \u2506 f64 \u2506 str    \u2506   \u2506 str            \u2506 f64       \u2506 str          \u2506 f64              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 banana \u2506 5.0 \u2506 beetle \u2506 \u2026 \u2506 banana         \u2506 1.0       \u2506 beetle       \u2506 -30.0            \u2502\n#&gt; \u2502 2.0 \u2506 banana \u2506 4.0 \u2506 audi   \u2506 \u2026 \u2506 apple          \u2506 2.0       \u2506 beetle       \u2506 2.0              \u2502\n#&gt; \u2502 3.0 \u2506 apple  \u2506 3.0 \u2506 beetle \u2506 \u2026 \u2506 apple          \u2506 3.0       \u2506 beetle       \u2506 null             \u2502\n#&gt; \u2502 4.0 \u2506 apple  \u2506 2.0 \u2506 beetle \u2506 \u2026 \u2506 banana         \u2506 4.0       \u2506 audi         \u2506 300.0            \u2502\n#&gt; \u2502 5.0 \u2506 banana \u2506 1.0 \u2506 beetle \u2506 \u2026 \u2506 banana         \u2506 5.0       \u2506 beetle       \u2506 28.0             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# All expressions run in parallel\n# Single valued `Series` are broadcasted to the shape of the `DataFrame`\ndf$select(\n  pl$all(),\n  pl$all()$sum()$name$suffix(\"_sum\") # This is a single valued Series broadcasted to the shape of the DataFrame\n)\n#&gt; shape: (5, 10)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2506 fruits \u2506 B   \u2506 cars   \u2506 \u2026 \u2506 fruits_sum \u2506 B_sum \u2506 cars_sum \u2506 optional_sum \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 --- \u2506 ---    \u2506   \u2506 ---        \u2506 ---   \u2506 ---      \u2506 ---          \u2502\n#&gt; \u2502 f64 \u2506 str    \u2506 f64 \u2506 str    \u2506   \u2506 str        \u2506 f64   \u2506 str      \u2506 f64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 banana \u2506 5.0 \u2506 beetle \u2506 \u2026 \u2506 null       \u2506 15.0  \u2506 null     \u2506 300.0        \u2502\n#&gt; \u2502 2.0 \u2506 banana \u2506 4.0 \u2506 audi   \u2506 \u2026 \u2506 null       \u2506 15.0  \u2506 null     \u2506 300.0        \u2502\n#&gt; \u2502 3.0 \u2506 apple  \u2506 3.0 \u2506 beetle \u2506 \u2026 \u2506 null       \u2506 15.0  \u2506 null     \u2506 300.0        \u2502\n#&gt; \u2502 4.0 \u2506 apple  \u2506 2.0 \u2506 beetle \u2506 \u2026 \u2506 null       \u2506 15.0  \u2506 null     \u2506 300.0        \u2502\n#&gt; \u2502 5.0 \u2506 banana \u2506 1.0 \u2506 beetle \u2506 \u2026 \u2506 null       \u2506 15.0  \u2506 null     \u2506 300.0        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# Filters can also be applied within an expression\ndf$select(\n  # Sum the values of A where the fruits column starts with 'b'\n  pl$col(\"A\")$filter(pl$col(\"fruits\")$str$contains(\"^b$*\"))$sum()\n)\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can do arithmetic on columns\ndf$select(\n  ((pl$col(\"A\") / 124.0 * pl$col(\"B\")) / pl$sum(\"B\"))$alias(\"computed\")\n)\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 computed \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.002688 \u2502\n#&gt; \u2502 0.004301 \u2502\n#&gt; \u2502 0.004839 \u2502\n#&gt; \u2502 0.004301 \u2502\n#&gt; \u2502 0.002688 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can combine columns by a predicate\n# For example when the `fruits` column is 'banana' we set the value equal to the\n# value in `B` column for that row, otherwise we set the value to be -1\ndf$select(\n  \"fruits\",\n  \"B\",\n  pl$when(pl$col(\"fruits\") == \"banana\")$then(pl$col(\"B\"))$otherwise(-1)$alias(\"b\")\n)\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 B   \u2506 b    \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 5.0 \u2506 5.0  \u2502\n#&gt; \u2502 banana \u2506 4.0 \u2506 4.0  \u2502\n#&gt; \u2502 apple  \u2506 3.0 \u2506 -1.0 \u2502\n#&gt; \u2502 apple  \u2506 2.0 \u2506 -1.0 \u2502\n#&gt; \u2502 banana \u2506 1.0 \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can combine columns by a fold operation on column level$\n# For example we do a horizontal sum where we:\n# - start with 0\n# - add the value in the `A` column\n# - add the value in the `B` column\n# - add the value in the `B` column squared\n# df$select(\n#   \"A\",\n#   \"B\",\n#   pl$fold(0, function(a, b) a + b, c( pl$col(\"A\"), \"B\", pl$col(\"B\")**2,))$alias(\"fold\")\n# )\n\ndf$group_by(\"fruits\")$\n  agg(\n  pl$col(\"B\")$count()$alias(\"B_count\"),\n  pl$col(\"B\")$sum()$alias(\"B_sum\")\n)\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 B_count \u2506 B_sum \u2502\n#&gt; \u2502 ---    \u2506 ---     \u2506 ---   \u2502\n#&gt; \u2502 str    \u2506 u32     \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 3       \u2506 10.0  \u2502\n#&gt; \u2502 apple  \u2506 2       \u2506 5.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can aggregate many expressions at once\ndf$group_by(\"fruits\")$\n  agg(\n  pl$col(\"B\")$sum()$alias(\"B_sum\"), # Sum of B\n  # pl$first(\"fruits\")$alias(\"fruits_first\"),# First value of fruits\n  # pl$count(\"A\")$alias(\"count\"),# Count of A\n  pl$col(\"cars\")$reverse() # Reverse the cars column - not an aggregation\n  # so the output is a pl$List\n)\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 B_sum \u2506 cars                         \u2502\n#&gt; \u2502 ---    \u2506 ---   \u2506 ---                          \u2502\n#&gt; \u2502 str    \u2506 f64   \u2506 list[str]                    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 5.0   \u2506 [\"beetle\", \"beetle\"]         \u2502\n#&gt; \u2502 banana \u2506 10.0  \u2506 [\"beetle\", \"audi\", \"beetle\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># We can also get a list of the row indices for each group with `agg_groups()`\ndf$\n  group_by(\"fruits\")$\n  agg(pl$col(\"B\")$agg_groups()$alias(\"group_row_indices\"))\n#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 group_row_indices \u2502\n#&gt; \u2502 ---    \u2506 ---               \u2502\n#&gt; \u2502 str    \u2506 list[u32]         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 [0, 1, 4]         \u2502\n#&gt; \u2502 apple  \u2506 [2, 3]            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can also do filter predicates in group_by\n# In this example we do not include values of B that are smaller than 1\n# in the sum\ndf$\n  group_by(\"fruits\")$\n  agg(pl$col(\"B\")$filter(pl$col(\"B\") &gt; 1)$sum())\n#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 B   \u2502\n#&gt; \u2502 ---    \u2506 --- \u2502\n#&gt; \u2502 str    \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 5.0 \u2502\n#&gt; \u2502 banana \u2506 9.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n# Here we add a new column with the sum of B grouped by fruits\ndf$\n  select(\n  \"fruits\",\n  \"cars\",\n  \"B\",\n  pl$col(\"B\")$sum()$over(\"fruits\")$alias(\"B_sum_by_fruits\")\n)\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 cars   \u2506 B   \u2506 B_sum_by_fruits \u2502\n#&gt; \u2502 ---    \u2506 ---    \u2506 --- \u2506 ---             \u2502\n#&gt; \u2502 str    \u2506 str    \u2506 f64 \u2506 f64             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 beetle \u2506 5.0 \u2506 10.0            \u2502\n#&gt; \u2502 banana \u2506 audi   \u2506 4.0 \u2506 10.0            \u2502\n#&gt; \u2502 apple  \u2506 beetle \u2506 3.0 \u2506 5.0             \u2502\n#&gt; \u2502 apple  \u2506 beetle \u2506 2.0 \u2506 5.0             \u2502\n#&gt; \u2502 banana \u2506 beetle \u2506 1.0 \u2506 10.0            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can also use window functions to do group_by over multiple columns\ndf$\n  select(\n  \"fruits\",\n  \"cars\",\n  \"B\",\n  pl$col(\"B\")$sum()$over(\"fruits\")$alias(\"B_sum_by_fruits\"),\n  pl$col(\"B\")$sum()$over(\"cars\")$alias(\"B_sum_by_cars\")\n)\n#&gt; shape: (5, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 cars   \u2506 B   \u2506 B_sum_by_fruits \u2506 B_sum_by_cars \u2502\n#&gt; \u2502 ---    \u2506 ---    \u2506 --- \u2506 ---             \u2506 ---           \u2502\n#&gt; \u2502 str    \u2506 str    \u2506 f64 \u2506 f64             \u2506 f64           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 beetle \u2506 5.0 \u2506 10.0            \u2506 11.0          \u2502\n#&gt; \u2502 banana \u2506 audi   \u2506 4.0 \u2506 10.0            \u2506 4.0           \u2502\n#&gt; \u2502 apple  \u2506 beetle \u2506 3.0 \u2506 5.0             \u2506 11.0          \u2502\n#&gt; \u2502 apple  \u2506 beetle \u2506 2.0 \u2506 5.0             \u2506 11.0          \u2502\n#&gt; \u2502 banana \u2506 beetle \u2506 1.0 \u2506 10.0            \u2506 11.0          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# Here we use a window function to lag column B within \"fruits\"\ndf$\n  select(\n  \"fruits\",\n  \"B\",\n  pl$col(\"B\")$shift()$over(\"fruits\")$alias(\"lag_B_by_fruits\")\n)\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 B   \u2506 lag_B_by_fruits \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---             \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 5.0 \u2506 null            \u2502\n#&gt; \u2502 banana \u2506 4.0 \u2506 5.0             \u2502\n#&gt; \u2502 apple  \u2506 3.0 \u2506 null            \u2502\n#&gt; \u2502 apple  \u2506 2.0 \u2506 3.0             \u2502\n#&gt; \u2502 banana \u2506 1.0 \u2506 4.0             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"}]}