{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#polars","title":"polars","text":"<p>The polars package for R gives users access to a lightning fast Data Frame library written in Rust. Polars\u2019 embarrassingly parallel execution, cache efficient algorithms and expressive API makes it perfect for efficient data wrangling, data pipelines, snappy APIs, and much more besides. Polars also supports \u201cstreaming mode\u201d for out-of-memory operations. This allows users to analyze datasets many times larger than RAM.</p> <p>Examples of common operations:</p> <ul> <li>read CSV, JSON, Parquet, and other file formats;</li> <li>filter rows and select columns;</li> <li>modify and create new columns;</li> <li>group by and aggregate;</li> <li>reshape data;</li> <li>join and concatenate different datasets;</li> <li>sort data;</li> <li>work with dates and times;</li> <li>handle missing values;</li> <li>use the lazy execution engine for maximum performance and     memory-efficient operations</li> </ul>"},{"location":"#install","title":"Install","text":"<p>The recommended way to install this package is via R-universe:</p> <pre><code>Sys.setenv(NOT_CRAN = \"true\")\ninstall.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\")\n</code></pre> <p>The \u201cInstall\u201d vignette (<code>vignette(\"install\", \"polars\")</code>) gives more details on how to install this package and other ways to install it.</p>"},{"location":"#quickstart-example","title":"Quickstart example","text":"<p>To avoid conflicts with other packages and base R function names, polars\u2019s top level functions are hosted in the <code>pl</code> namespace, and accessible via the <code>pl$</code> prefix. This means that <code>polars</code> queries written in Python and in R are very similar.</p> <p>For example, rewriting the Python example from https://github.com/pola-rs/polars in R:</p> <pre><code>library(polars)\n\ndf = pl$DataFrame(\n  A = 1:5,\n  fruits = c(\"banana\", \"banana\", \"apple\", \"apple\", \"banana\"),\n  B = 5:1,\n  cars = c(\"beetle\", \"audi\", \"beetle\", \"beetle\", \"beetle\")\n)\n\n# embarrassingly parallel execution &amp; very expressive query language\ndf$sort(\"fruits\")$select(\n  \"fruits\",\n  \"cars\",\n  pl$lit(\"fruits\")$alias(\"literal_string_fruits\"),\n  pl$col(\"B\")$filter(pl$col(\"cars\") == \"beetle\")$sum(),\n  pl$col(\"A\")$filter(pl$col(\"B\") &gt; 2)$sum()$over(\"cars\")$alias(\"sum_A_by_cars\"),\n  pl$col(\"A\")$sum()$over(\"fruits\")$alias(\"sum_A_by_fruits\"),\n  pl$col(\"A\")$reverse()$over(\"fruits\")$alias(\"rev_A_by_fruits\"),\n  pl$col(\"A\")$sort_by(\"B\")$over(\"fruits\")$alias(\"sort_A_by_B_by_fruits\")\n)\n#&gt; shape: (5, 8)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 cars   \u2506 literal_stri \u2506 B   \u2506 sum_A_by_car \u2506 sum_A_by_fru \u2506 rev_A_by_fru \u2506 sort_A_by_B_ \u2502\n#&gt; \u2502 ---    \u2506 ---    \u2506 ng_fruits    \u2506 --- \u2506 s            \u2506 its          \u2506 its          \u2506 by_fruits    \u2502\n#&gt; \u2502 str    \u2506 str    \u2506 ---          \u2506 i32 \u2506 ---          \u2506 ---          \u2506 ---          \u2506 ---          \u2502\n#&gt; \u2502        \u2506        \u2506 str          \u2506     \u2506 i32          \u2506 i32          \u2506 i32          \u2506 i32          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 beetle \u2506 fruits       \u2506 11  \u2506 4            \u2506 7            \u2506 4            \u2506 4            \u2502\n#&gt; \u2502 apple  \u2506 beetle \u2506 fruits       \u2506 11  \u2506 4            \u2506 7            \u2506 3            \u2506 3            \u2502\n#&gt; \u2502 banana \u2506 beetle \u2506 fruits       \u2506 11  \u2506 4            \u2506 8            \u2506 5            \u2506 5            \u2502\n#&gt; \u2502 banana \u2506 audi   \u2506 fruits       \u2506 11  \u2506 2            \u2506 8            \u2506 2            \u2506 2            \u2502\n#&gt; \u2502 banana \u2506 beetle \u2506 fruits       \u2506 11  \u2506 4            \u2506 8            \u2506 1            \u2506 1            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The Get Started vignette (<code>vignette(\"polars\")</code>) provides a more detailed introduction to polars.</p>"},{"location":"#extensions","title":"Extensions","text":"<p>While one can use polars as-is, other packages build on it to provide different syntaxes:</p> <ul> <li><code>polarssql</code> provides a     polars backend for <code>DBI</code> and <code>dbplyr</code>.</li> <li><code>tidypolars</code> allows one to     use the <code>tidyverse</code> syntax while using the power of polars.</li> </ul>"},{"location":"#getting-help","title":"Getting help","text":"<p>The online documentation can be found at https://rpolars.github.io/.</p> <p>If you encounter a bug, please file an issue with a minimal reproducible example on GitHub.</p> <p>Consider joining our Discord subchannel for additional help and discussion.</p>"},{"location":"LICENSE/","title":"MIT License","text":"<p>Copyright (c) 2022 S\u00f8ren Havelund Welling</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"NEWS/","title":"NEWS","text":""},{"location":"NEWS/#polars-0121","title":"polars 0.12.1","text":"<p>This version includes a few additional features and a large amount of documentation improvements.</p>"},{"location":"NEWS/#deprecations","title":"Deprecations","text":"<ul> <li><code>pl$polars_info()</code> is moved to <code>polars_info()</code>. <code>pl$polars_info()</code> is deprecated     and will be removed in 0.13.0 (#662).</li> </ul>"},{"location":"NEWS/#rust-polars-update","title":"Rust-polars update","text":"<ul> <li>rust-polars is updated to 0.36.2 (#659). Most of the changes from 0.35.x to 0.36.2     were covered in R polars 0.12.0.     The main change is that <code>pl$Utf8</code> is replaced by <code>pl$String</code>.     <code>pl$Utf8</code> is an alias and will keep working, but <code>pl$String</code> is now preferred     in the documentation and in new code.</li> </ul>"},{"location":"NEWS/#whats-changed","title":"What's changed","text":"<ul> <li>New methods <code>$str$reverse()</code>, <code>$str$contains_any()</code>, and <code>$str$replace_many()</code>     (#641).</li> <li>New methods <code>$rle()</code> and <code>$rle_id()</code> (#648).</li> <li>New functions <code>is_polars_df()</code>, <code>is_polars_lf()</code>, <code>is_polars_series()</code> (#658).</li> <li><code>$gather()</code> now accepts negative indexing (#659).</li> </ul>"},{"location":"NEWS/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Remove the <code>Makefile</code> in favor of <code>Taskfile.yml</code>.     Please use <code>task</code> instead of <code>make</code> as a task runner in the development (#654).</li> </ul>"},{"location":"NEWS/#polars-0120","title":"polars 0.12.0","text":""},{"location":"NEWS/#breaking-changes-due-to-rust-polars-update","title":"BREAKING CHANGES DUE TO RUST-POLARS UPDATE","text":"<ul> <li>rust-polars is updated to 2023-12-25 unreleased version (#601, #622).     This is the same version of Python Polars package 0.20.2, so please check     the upgrade guide for details too.<ul> <li><code>pl$scan_csv()</code> and <code>pl$read_csv()</code>'s <code>comment_char</code> argument is renamed <code>comment_prefix</code>.</li> <li><code>&lt;DataFrame&gt;$frame_equal()</code> and <code>&lt;Series&gt;$series_equal()</code> are renamed     to <code>&lt;DataFrame&gt;$equals()</code> and <code>&lt;Series&gt;$equals()</code>.</li> <li><code>&lt;Expr&gt;$rolling_*</code> functions gained an argument <code>warn_if_unsorted</code>.</li> <li><code>&lt;Expr&gt;$str$json_extract()</code> is renamed to <code>&lt;Expr&gt;$str$json_decode()</code>.</li> <li>Change default join behavior with regard to <code>null</code> values.</li> <li>Preserve left and right join keys in outer joins.</li> <li><code>count</code> now ignores null values.</li> <li><code>NaN</code> values are now considered equal.</li> <li><code>$gather_every()</code> gained an argument <code>offset</code>.</li> </ul> </li> </ul>"},{"location":"NEWS/#breaking-changes-and-deprecations","title":"Breaking changes and deprecations","text":"<ul> <li><code>$apply()</code> on an Expr or a Series is renamed <code>$map_elements()</code>, and <code>$map()</code>     is renamed <code>$map_batches()</code>. <code>$map()</code> and <code>$apply()</code> will be removed in 0.13.0 (#534).</li> <li>Removed <code>$days()</code>, <code>$hours()</code>, <code>$minutes()</code>, <code>$seconds()</code>, <code>$milliseconds()</code>,     <code>$microseconds()</code>, <code>$nanoseconds()</code>. Those were deprecated in 0.11.0 (#550).</li> <li><code>pl$concat_list()</code>: elements being strings are now interpreted as column names.     Use <code>pl$lit</code> to concat with a string.</li> <li><code>&lt;RPolarsExpr&gt;$lit_to_s()</code> is renamed to <code>&lt;RPolarsExpr&gt;$to_series()</code> (#582).</li> <li><code>&lt;RPolarsExpr&gt;$lit_to_df()</code> is removed (#582).</li> <li>Change class names and function names associated with class names.<ul> <li>The class name of all objects created by polars (<code>DataFrame</code>, <code>LazyFrame</code>,     <code>Expr</code>, <code>Series</code>, etc.) has changed. They now start with <code>RPolars</code>, for example     <code>RPolarsDataFrame</code>. This will only break your code if you directly use those     class names, such as in S3 methods (#554, #585).</li> <li>Private methods have been unified so that they do not have the <code>RPolars</code> prefix (#584).</li> </ul> </li> </ul>"},{"location":"NEWS/#whats-changed_1","title":"What's changed","text":"<ul> <li>The Extract function (<code>[</code>) for DataFrame can use columns not included in the     result for filtering (#547).</li> <li>The Extract function (<code>[</code>) for LazyFrame can filter rows with Expressions (#547).</li> <li><code>as_polars_df()</code> for <code>data.frame</code> has a new argument <code>rownames</code> for to convert     the row.names attribute to a column.     This option is inspired by the <code>tibble::as_tibble()</code> function (#561).</li> <li><code>as_polars_df()</code> for <code>data.frame</code> has a new argument <code>make_names_unique</code> (#561).</li> <li>New methods <code>$str$to_date()</code>, <code>$str$to_time()</code>, <code>$str$to_datetime()</code> as     alternatives to <code>$str$strptime()</code> (#558).</li> <li>The <code>dim()</code> function for DataFrame and LazyFrame correctly returns integer instead of     double (#577).</li> <li>The conversion of R's <code>POSIXct</code> class to Polars datetime now works correctly with millisecond     precision (#589).</li> <li><code>&lt;LazyFrame&gt;$filter()</code>, <code>&lt;DataFrame&gt;$filter()</code>, and <code>pl$when()</code> now allow multiple conditions     to be separated by commas, like <code>lf$filter(pl$col(\"foo\") == 1, pl$col(\"bar\") != 2)</code> (#598).</li> <li>New method <code>$replace()</code> for expressions (#601).</li> <li>Better error messages for trailing argument commas such as <code>pl$DataFrame()$select(\"a\",)</code> (#607).</li> <li>New function <code>pl$threadpool_size()</code> to get the number of threads used by Polars (#620).     Thread pool size is also included in the output of <code>pl$polars_info()</code>.</li> </ul>"},{"location":"NEWS/#polars-0110","title":"polars 0.11.0","text":""},{"location":"NEWS/#breaking-changes-due-to-rust-polars-update_1","title":"BREAKING CHANGES DUE TO RUST-POLARS UPDATE","text":"<ul> <li>rust-polars is updated to 0.35.0 (2023-11-17) (#515)<ul> <li>changes in <code>$write_csv()</code> and <code>sink_csv()</code>: <code>has_header</code> is renamed     <code>include_header</code> and there's a new argument <code>include_bom</code>.</li> <li><code>pl$cov()</code> gains a <code>ddof</code> argument.</li> <li><code>$cumsum()</code>, <code>$cumprod()</code>, <code>$cummin()</code>, <code>$cummax()</code>, <code>$cumcount()</code> are     renamed <code>$cum_sum()</code>, <code>$cum_prod()</code>, <code>$cum_min()</code>, <code>$cum_max()</code>,     <code>$cum_count()</code>.</li> <li><code>take()</code> and <code>take_every()</code> are renamed <code>$gather()</code> and <code>gather_every()</code>.</li> <li><code>$shift()</code> and <code>$shift_and_fill()</code> now accept Expr as input.</li> <li>when <code>reverse = TRUE</code>, <code>$arg_sort()</code> now places null values in the first     positions.</li> <li>Removed argument <code>ambiguous</code> in <code>$dt$truncate()</code> and <code>$dt$round()</code>.</li> <li><code>$str$concat()</code> gains an argument <code>ignore_nulls</code>.</li> </ul> </li> </ul>"},{"location":"NEWS/#breaking-changes-and-deprecations_1","title":"Breaking changes and deprecations","text":"<ul> <li>The rowwise computation when several columns are passed to <code>pl$min()</code>, <code>pl$max()</code>,     and <code>pl$sum()</code> is deprecated and will be removed in 0.12.0. Passing several     columns to these functions will now compute the min/max/sum in each column     separately. Use <code>pl$min_horizontal()</code> <code>pl$max_horizontal()</code>, and     <code>pl$sum_horizontal()</code> instead for rowwise computation (#508).</li> <li><code>$is_not()</code> is deprecated and will be removed in 0.12.0. Use <code>$not()</code> instead     (#511, #531).</li> <li><code>$is_first()</code> is deprecated and will be removed in 0.12.0. Use <code>$is_first_distinct()</code>     instead (#531).</li> <li>In <code>pl$concat()</code>, the argument <code>to_supertypes</code> is removed. Use the suffix     <code>\"_relaxed\"</code> in the <code>how</code> argument to cast columns to their shared supertypes     (#523).</li> <li>All duration methods (<code>days()</code>, <code>hours()</code>, <code>minutes()</code>, <code>seconds()</code>,     <code>milliseconds()</code>, <code>microseconds()</code>, <code>nanoseconds()</code>) are renamed, for example     from <code>$dt$days()</code> to <code>$dt$total_days()</code>. The old usage is deprecated and will     be removed in 0.12.0 (#530).</li> <li>DataFrame methods <code>$as_data_frame()</code> is removed in favor of <code>$to_data_frame()</code> (#533).</li> <li>GroupBy methods <code>$as_data_frame()</code> and <code>$to_data_frame()</code> which were used to     convert GroupBy objects to R data frames are removed.     Use <code>$ungroup()</code> method and the <code>as.data.frame()</code> function instead (#533).</li> </ul>"},{"location":"NEWS/#whats-changed_2","title":"What's changed","text":"<ul> <li>Fix the installation issue on Ubuntu 20.04 (#528, thanks @brownag).</li> <li>New methods <code>$write_json()</code> and <code>$write_ndjson()</code> for DataFrame (#502).</li> <li>Removed argument <code>name</code> in <code>pl$date_range()</code>, which was deprecated for a while     (#503).</li> <li>New private method <code>.pr$DataFrame$drop_all_in_place(df)</code> to drop <code>DataFrame</code>     in-place, to release memory without invoking gc(). However, if there are other     strong references to any of the underlying Series or arrow arrays, that memory     will specifically not be released. This method is aimed for r-polars extensions,     and will be kept stable as much as possible (#504).</li> <li>New functions <code>pl$min_horizontal()</code>, <code>pl$max_horizontal()</code>, <code>pl$sum_horizontal()</code>,     <code>pl$all_horizontal()</code>, <code>pl$any_horizontal()</code> (#508).</li> <li>New generic functions <code>as_polars_df()</code> and <code>as_polars_lf()</code> to create polars     DataFrames and LazyFrames (#519).</li> <li>New method <code>$ungroup()</code> for <code>GroupBy</code> and <code>LazyGroupBy</code> (#522).</li> <li>New method <code>$rolling()</code> to apply an Expr over a rolling window based on     date/datetime/numeric indices (#470).</li> <li>New methods <code>$name$to_lowercase()</code> and <code>$name$to_uppercase()</code> to transform     variable names (#529).</li> <li>New method <code>$is_last_distinct()</code> (#531).</li> <li>New methods of the Expressions class, <code>$floor_div()</code>, <code>$mod()</code>, <code>$eq_missing()</code>     and <code>$neq_missing()</code>. The base R operators <code>%/%</code> and <code>%%</code> for Expressions are     now translated to <code>$floor_div()</code> and <code>$mod()</code> (#523).<ul> <li>Note that <code>$mod()</code> of Polars is different from the R operator <code>%%</code>, which is     not guaranteed <code>x == (x %% y) + y * (x %/% y)</code>.     Please check the upstream issue pola-rs/polars#10570.</li> </ul> </li> <li>The extract function (<code>[</code>) for polars objects now behave more like for base R objects (#543).</li> </ul>"},{"location":"NEWS/#polars-0101","title":"polars 0.10.1","text":""},{"location":"NEWS/#whats-changed_3","title":"What's changed","text":"<ul> <li>The argument <code>quote_style</code> in <code>$write_csv()</code> and <code>$sink_csv()</code> can now take     the value <code>\"never\"</code> (#483).</li> <li><code>pl$DataFrame()</code> now errors if the variables specified in <code>schema</code> do not exist     in the data (#486).</li> <li>S3 methods for base R functions are well documented (#494).</li> <li>A bug that failing <code>pl$SQLContext()$register()</code> without load the package was fixed (#496).</li> </ul>"},{"location":"NEWS/#polars-0100","title":"polars 0.10.0","text":""},{"location":"NEWS/#breaking-changes-due-to-rust-polars-update_2","title":"BREAKING CHANGES DUE TO RUST-POLARS UPDATE","text":"<ul> <li>rust-polars is updated to 2023-10-25 unreleased version (#442)<ul> <li>New subnamespace <code>\"name\"</code> that contains methods <code>$prefix()</code>, <code>$suffix()</code> <code>keep()</code> (renamed from <code>keep_name()</code>) and <code>map()</code> (renamed from <code>map_alias()</code>).</li> <li><code>$dt$round()</code> gains an argument <code>ambiguous</code>.</li> <li>The following methods now accept an <code>Expr</code> as input: <code>$top_k()</code>, <code>$bottom_k()</code>,     <code>$list$join()</code>, <code>$str$strip_chars()</code>, <code>$str$strip_chars_start()</code>,     <code>$str$strip_chars_end()</code>, <code>$str$split_exact()</code>.</li> <li>The following methods were renamed:<ul> <li><code>$str$n_chars()</code> -&gt; <code>$str$len_chars()</code></li> <li><code>$str$lengths()</code> -&gt; <code>$str$len_bytes()</code></li> <li><code>$str$ljust()</code> -&gt; <code>$str$pad_end()</code></li> <li><code>$str$rjust()</code> -&gt; <code>$str$pad_start()</code></li> </ul> </li> <li><code>$concat()</code> with <code>how = \"diagonal\"</code> now accepts an argument <code>to_supertypes</code>     to automatically convert concatenated columns to the same type.</li> <li><code>pl$enable_string_cache()</code> doesn't take any argument anymore. The string cache     can now be disabled with <code>pl$disable_string_cache()</code>.</li> <li><code>$scan_parquet()</code> gains an argument <code>hive_partitioning</code>.</li> <li><code>$meta$tree_format()</code> has a better formatted output.</li> </ul> </li> </ul>"},{"location":"NEWS/#breaking-changes","title":"Breaking changes","text":"<ul> <li><code>$scan_csv()</code> and <code>$read_csv()</code> now match more closely the Python-Polars API (#455):<ul> <li><code>sep</code> is renamed <code>separator</code>, <code>overwrite_dtypes</code> is renamed <code>dtypes</code>,     <code>parse_dates</code> is renamed <code>try_parse_dates</code>.</li> <li>new arguments <code>rechunk</code>, <code>eol_char</code>, <code>raise_if_empty</code>, <code>truncate_ragged_lines</code></li> <li><code>path</code> can now be a vector of characters indicating several paths to CSV files.     This only works if all CSV files have the same schema.</li> </ul> </li> </ul>"},{"location":"NEWS/#whats-changed_4","title":"What's changed","text":"<ul> <li>New class <code>RPolarsSQLContext</code> and its methods to perform SQL queries on DataFrame-     like objects. To use this feature, needs to build Rust library with full features     (#457).</li> <li>New methods <code>$peak_min()</code> and <code>$peak_max()</code> to find local minima and maxima in     an Expr (#462).</li> <li>New methods <code>$read_ndjson()</code> and <code>$scan_ndjson()</code> (#471).</li> <li>New method <code>$with_context()</code> for <code>LazyFrame</code> to have access to columns from     other Data/LazyFrames during the computation (#475).</li> </ul>"},{"location":"NEWS/#polars-090","title":"polars 0.9.0","text":""},{"location":"NEWS/#breaking-changes-due-to-rust-polars-update_3","title":"BREAKING CHANGES DUE TO RUST-POLARS UPDATE","text":"<ul> <li>rust-polars is updated to 0.33.2 (#417)<ul> <li>In all date-time related methods, the argument <code>use_earliest</code> is replaced by <code>ambiguous</code>.</li> <li>In <code>$sample()</code> and <code>$shuffle()</code>, the argument <code>fixed_seed</code> is removed.</li> <li>In <code>$value_counts()</code>, the arguments <code>multithreaded</code> and <code>sort</code>     (sometimes called <code>sorted</code>) have been swapped and renamed <code>sort</code> and <code>parallel</code>.</li> <li><code>$str$count_match()</code> gains a <code>literal</code> argument.</li> <li><code>$arg_min()</code> doesn't consider <code>NA</code> as the minimum anymore (this was already the behavior of <code>$min()</code>).</li> <li>Using <code>$is_in()</code> with <code>NA</code> on both sides now returns <code>NA</code> and not <code>TRUE</code> anymore.</li> <li>Argument <code>pattern</code> of <code>$str$count_matches()</code> can now use expressions.</li> <li>Needs Rust toolchain <code>nightly-2023-08-26</code> for to build with full features.</li> </ul> </li> <li>Rename R functions to match rust-polars<ul> <li><code>$str$count_match()</code> -&gt; <code>$str$count_matches()</code> (#417)</li> <li><code>$str$strip()</code> -&gt; <code>$str$strip_chars()</code> (#417)</li> <li><code>$str$lstrip()</code> -&gt; <code>$str$strip_chars_start()</code> (#417)</li> <li><code>$str$rstrip()</code> -&gt; <code>$str$strip_chars_end()</code> (#417)</li> <li><code>$groupby()</code> is renamed <code>$group_by()</code>. (#427)</li> </ul> </li> </ul>"},{"location":"NEWS/#breaking-changes_1","title":"Breaking changes","text":"<ul> <li>Remove some deprecated methods.<ul> <li>Method <code>$with_column()</code> has been removed (it was deprecated since 0.8.0).     Use <code>$with_columns()</code> instead (#402).</li> <li>Subnamespace <code>$arr</code> has been removed (it was deprecated since 0.8.1).     Use <code>$list</code> instead (#402).</li> </ul> </li> <li>Setting and getting polars options is now made with <code>pl$options</code>,     <code>pl$set_options()</code> and <code>pl$reset_options()</code> (#384).</li> </ul>"},{"location":"NEWS/#whats-changed_5","title":"What's changed","text":"<ul> <li>Bump supported R version to 4.2 or later (#435).</li> <li><code>pl$concat()</code> now also supports <code>Series</code>, <code>Expr</code> and <code>LazyFrame</code> (#407).</li> <li>New method <code>$unnest()</code> for <code>LazyFrame</code> (#397).</li> <li>New method <code>$sample()</code> for <code>DataFrame</code> (#399).</li> <li>New method <code>$meta$tree_format()</code> to display an <code>Expr</code> as a tree (#401).</li> <li>New argument <code>schema</code> in <code>pl$DataFrame()</code> and <code>pl$LazyFrame()</code> to override the     automatic type detection (#385).</li> <li>Fix bug when calling R from polars via e.g. <code>$map()</code> where query would not     complete in one edge case (#409).</li> <li>New method <code>$cat$get_categories()</code> to list unique values of categorical     variables (#412).</li> <li>New methods <code>$fold()</code> and <code>$reduce()</code> to apply an R function rowwise (#403).</li> <li>New function <code>pl$raw_list</code> and class <code>rpolars_raw_list</code> a list of R Raw's, where missing is     encoded as <code>NULL</code> to aid conversion to polars binary Series. Support back and forth conversion     from polars binary literal and Series to R raw (#417).</li> <li>New method <code>$write_csv()</code> for <code>DataFrame</code> (#414).</li> <li>New method <code>$sink_csv()</code> for <code>LazyFrame</code> (#432).</li> <li>New method <code>$dt$time()</code> to extract the time from a <code>datetime</code> variable (#428).</li> <li>Method <code>$profile()</code> gains optimization arguments and plot-related arguments (#429).</li> <li>New method <code>pl$read_parquet()</code> that is a shortcut for <code>pl$scan_parquet()$collect()</code> (#434).</li> <li>Rename <code>$str$str_explode()</code> to <code>$str$explode()</code> (#436).</li> <li>New method <code>$transpose()</code> for <code>DataFrame</code> (#440).</li> <li>New argument <code>eager</code> of <code>LazyFrame$set_optimization_toggle()</code> (#439).</li> <li> <p><code>{polars}</code> can now be installed with \"R source package with Rust library binary\",     by a mechanism copied from the prqlr package.</p> <pre><code>Sys.setenv(NOT_CRAN = \"true\")\ninstall.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\")\n</code></pre> <p>The URL and SHA256 hash of the available binaries are recorded in <code>tools/lib-sums.tsv</code>. (#435, #448, #450, #451)</p> </li> </ul>"},{"location":"NEWS/#polars-081","title":"polars 0.8.1","text":""},{"location":"NEWS/#whats-changed_6","title":"What's changed","text":"<ul> <li>New string method <code>to_titlecase()</code> (#371).</li> <li>Although stated in news for PR (#334) <code>strip = true</code> was not actually set for the     \"release-optimized\" compilation profile. Now it is, but the binary sizes seems unchanged (#377).</li> <li>New vignette on best practices to improve <code>polars</code> performance (#188).</li> <li>Subnamespace name \"arr\" as in <code>&lt;Expr&gt;$arr$</code> &amp; <code>&lt;Series&gt;$arr$</code> is deprecated     in favor of \"list\". The subnamespace \"arr\" will be removed in polars 0.9.0 (#375).</li> </ul>"},{"location":"NEWS/#polars-080","title":"polars 0.8.0","text":""},{"location":"NEWS/#breaking-changes-due-to-rust-polars-update_4","title":"BREAKING CHANGES DUE TO RUST-POLARS UPDATE","text":"<p>rust-polars was updated to 0.32.0, which comes with many breaking changes and new features. Unrelated breaking changes and new features are put in separate sections (#334):</p> <ul> <li>update of rust toolchain: nightly bumped to nightly-2023-07-27 and MSRV is     now &gt;=1.70.</li> <li>param <code>common_subplan_elimination = TRUE</code> in <code>&lt;LazyFrame&gt;</code> methods <code>$collect()</code>,     <code>$sink_ipc()</code> and <code>$sink_parquet()</code> is renamed and split into     <code>comm_subplan_elim = TRUE</code> and <code>comm_subexpr_elim = TRUE</code>.</li> <li>Series_is_sorted: nulls_last argument is dropped.</li> <li><code>when-then-otherwise</code> classes are renamed to <code>When</code>, <code>Then</code>, <code>ChainedWhen</code>     and <code>ChainedThen</code>. The syntactically illegal methods have been removed, e.g.     chaining <code>$when()</code> twice.</li> <li>Github release + R-universe is compiled with <code>profile=release-optimized</code>,     which now includes <code>strip=false</code>, <code>lto=fat</code> &amp; <code>codegen-units=1</code>. This should     make the binary a bit smaller and faster. See also FULL_FEATURES=<code>true</code> env     flag to enable simd with nightly rust. For development or faster compilation,     use instead <code>profile=release</code>.</li> <li><code>fmt</code> arg is renamed <code>format</code> in <code>pl$Ptimes</code> and <code>&lt;Expr&gt;$str$strptime</code>.</li> <li><code>&lt;Expr&gt;$approx_unique()</code> changed name to <code>&lt;Expr&gt;$approx_n_unique()</code>.</li> <li><code>&lt;Expr&gt;$str$json_extract</code> arg <code>pat</code> changed to <code>dtype</code> and has a new argument     <code>infer_schema_length = 100</code>.</li> <li>Some arguments in <code>pl$date_range()</code> have changed: <code>low</code> -&gt; <code>start</code>, <code>high</code> -&gt; <code>end</code>, <code>lazy = TRUE</code> -&gt; <code>eager = FALSE</code>. Args <code>time_zone</code> and <code>time_unit</code>     can no longer be used to implicitly cast time types. These two args can only     be used to annotate a naive time unit. Mixing <code>time_zone</code> and <code>time_unit</code> for     <code>start</code> and <code>end</code> is not allowed anymore.</li> <li><code>&lt;Expr&gt;$is_in()</code> operation no longer supported for dtype <code>null</code>.</li> <li>Various subtle changes:<ul> <li><code>(pl$lit(NA_real_) == pl$lit(NA_real_))$lit_to_s()</code> renders now to <code>null</code>     not <code>true</code>.</li> <li><code>pl$lit(NA_real_)$is_in(pl$lit(NULL))$lit_to_s()</code> renders now to <code>false</code>     and before <code>true</code></li> <li><code>pl$lit(numeric(0))$sum()$lit_to_s()</code> now yields <code>0f64</code> and not <code>null</code>.</li> </ul> </li> <li><code>&lt;Expr&gt;$all()</code> and <code>&lt;Expr&gt;$any()</code> have a new arg <code>drop_nulls = TRUE</code>.</li> <li><code>&lt;Expr&gt;$sample()</code> and <code>&lt;Expr&gt;$shuffle()</code> have a new arg <code>fix_seed</code>.</li> <li><code>&lt;DataFrame&gt;$sort()</code> and <code>&lt;LazyFrame&gt;$sort()</code> have a new arg     <code>maintain_order = FALSE</code>.</li> </ul>"},{"location":"NEWS/#other-breaking-changes","title":"OTHER BREAKING CHANGES","text":"<ul> <li><code>$rpow()</code> is removed. It should never have been translated. Use <code>^</code> and <code>$pow()</code>     instead (#346).</li> <li><code>&lt;LazyFrame&gt;$collect_background()</code> renamed <code>&lt;LazyFrame&gt;$collect_in_background()</code>     and reworked. Likewise <code>PolarsBackgroundHandle</code> reworked and renamed to     <code>RThreadHandle</code> (#311).</li> <li><code>pl$scan_arrow_ipc</code> is now called <code>pl$scan_ipc</code> (#343).</li> </ul>"},{"location":"NEWS/#other-changes","title":"Other changes","text":"<ul> <li>Stream query to file with <code>pl$sink_ipc()</code> and <code>pl$sink_parquet()</code> (#343)</li> <li>New method <code>$explode()</code> for <code>DataFrame</code> and <code>LazyFrame</code> (#314).</li> <li>New method <code>$clone()</code> for <code>LazyFrame</code> (#347).</li> <li>New method <code>$fetch()</code> for <code>LazyFrame</code> (#319).</li> <li>New methods <code>$optimization_toggle()</code> and <code>$profile()</code> for <code>LazyFrame</code> (#323).</li> <li><code>$with_column()</code> is now deprecated (following upstream <code>polars</code>). It will be     removed in 0.9.0. It should be replaced with <code>$with_columns()</code> (#313).</li> <li>New lazy function translated: <code>concat_str()</code> to concatenate several columns     into one (#349).</li> <li>New stat functions <code>pl$cov()</code>, <code>pl$rolling_cov()</code> <code>pl$corr()</code>, <code>pl$rolling_corr()</code> (#351).</li> <li>Add functions <code>pl$set_global_rpool_cap()</code>, <code>pl$get_global_rpool_cap()</code>, class <code>RThreadHandle</code> and     <code>in_background = FALSE</code> param to <code>&lt;Expr&gt;$map()</code> and <code>$apply()</code>. It is now possible to run R code     with <code>&lt;LazyFrame&gt;collect_in_background()</code> and/or let polars parallize R code in an R processes     pool. See <code>RThreadHandle-class</code> in reference docs for more info. (#311)</li> <li>Internal IPC/shared-mem channel to serialize and send R objects / polars DataFrame across     R processes. (#311)</li> <li>Compile environment flag RPOLARS_ALL_FEATURES changes name to RPOLARS_FULL_FEATURES. If 'true'     will trigger something like <code>Cargo build --features \"full_features\"</code> which is not exactly the same     as <code>Cargo build --all-features</code>. Some dev features are not included in \"full_features\" (#311).</li> <li>Fix bug to allow using polars without library(polars) (#355).</li> <li>New methods <code>&lt;LazyFrame&gt;$optimization_toggle()</code> + <code>$profile()</code> and enable rust-polars feature     CSE: \"Activate common subplan elimination optimization\" (#323)</li> <li>Named expression e.g. <code>pl$select(newname = pl$lit(2))</code> are no longer experimental     and allowed as default (#357).</li> <li>Added methods <code>pl$enable_string_cache()</code>, <code>pl$with_string_cache()</code> and <code>pl$using_string_cache()</code>     for joining/comparing Categorical series/columns (#361).</li> <li>Added an S3 generic <code>as_polars_series()</code> where users or developers of extensions     can define a custom way to convert their format to Polars format. This generic     must return a Polars series. See #368 for an example (#369).</li> <li>Private API Support for Arrow Stream import/export of DataFrame between two R packages that uses     rust-polars. See R package example here     (#326).</li> </ul>"},{"location":"NEWS/#polars-070","title":"polars 0.7.0","text":""},{"location":"NEWS/#breaking-changes_2","title":"BREAKING CHANGES","text":"<ul> <li>Replace the argument <code>reverse</code> by <code>descending</code> in all sorting functions. This     is for consistency with the upstream Polars (#291, #293).</li> <li>Bump rust-polars from 2023-04-20 unreleased version to version 0.30.0 released in 2023-05-30 (#289).<ul> <li>Rename <code>concat_lst</code> to <code>concat_list</code>.</li> <li>Rename <code>$str$explode</code> to <code>$str$str_explode</code>.</li> <li>Remove <code>tz_aware</code> and <code>utc</code> arguments from <code>str_parse</code>.</li> <li>in <code>$date_range</code>'s the <code>lazy</code> argument is now <code>TRUE</code> by default.</li> </ul> </li> <li>The functions to read CSV have been renamed <code>scan_csv</code> and <code>read_csv</code> for     consistency with the upstream Polars. <code>scan_xxx</code> and <code>read_xxx</code> functions are now accessed via <code>pl</code>,     e.g. <code>pl$scan_csv()</code> (#305).</li> </ul>"},{"location":"NEWS/#whats-changed_7","title":"What's changed","text":"<ul> <li>New method <code>$rename()</code> for <code>LazyFrame</code> and <code>DataFrame</code> (#239)</li> <li><code>&lt;DataFrame&gt;$unique()</code> and <code>&lt;LazyFrame&gt;$unique()</code> gain a <code>maintain_order</code> argument (#238).</li> <li>New <code>pl$LazyFrame()</code> to quickly create a <code>LazyFrame</code>, mostly in examples or     for demonstration purposes (#240).</li> <li>Polars is internally moving away from string errors to a new error-type called <code>RPolarsErr</code> both on rust- and R-side. Final error messages should look very similar (#233).</li> <li><code>$columns()</code>, <code>$schema()</code>, <code>$dtypes()</code> for <code>LazyFrame</code> implemented (#250).</li> <li>Improvements to internal <code>RPolarsErr</code>. Also <code>RPolarsErr</code> will now print each context of the error on a separate line (#250).</li> <li>Fix memory leak on error bug. Fix printing of <code>%</code> bug. Prepare for renaming of polars classes (#252).</li> <li>Add helpful reference landing page at <code>polars.github.io/reference_home</code> (#223, #264).</li> <li>Supports Rust 1.65 (#262, #280)<ul> <li>rust-polars' <code>simd</code> feature is now disabled by default. To enable it, set the environment variable     <code>RPOLARS_ALL_FEATURES</code> to <code>true</code> when build r-polars (#262).</li> <li><code>opt-level</code> of <code>argminmax</code> is now set to <code>1</code> in the <code>release</code> profile to support Rust &lt; 1.66.     The profile can be changed by setting the environment variable <code>RPOLARS_PROFILE</code> (when set to <code>release-optimized</code>,     <code>opt-level</code> of <code>argminmax</code> is set to <code>3</code>).</li> </ul> </li> <li>A new function <code>pl$polars_info()</code> will tell which features enabled (#271, #285, #305).</li> <li><code>select()</code> now accepts lists of expressions. For example, <code>&lt;DataFrame&gt;$select(l_expr)</code>     works with <code>l_expr = list(pl$col(\"a\"))</code> (#265).</li> <li>LazyFrame gets some new S3 methods: <code>[</code>, <code>dim()</code>, <code>dimnames()</code>, <code>length()</code>, <code>names()</code> (#301)</li> <li><code>&lt;DataFrame&gt;$glimpse()</code> is a fast <code>str()</code>-like view of a <code>DataFrame</code> (#277).</li> <li><code>$over()</code> now accepts a vector of column names (#287).</li> <li>New method <code>&lt;DataFrame&gt;$describe()</code> (#268).</li> <li>Cross joining is now possible with <code>how = \"cross\"</code> in <code>$join()</code> (#310).</li> <li>Add license info of all rust crates to <code>LICENSE.note</code> (#309).</li> <li>With CRAN 0.7.0 release candidate (#308).<ul> <li>New author accredited, SHIMA Tatsuya  @eitsupi).</li> <li>DESCRIPTION revised.</li> </ul> </li> </ul>"},{"location":"NEWS/#polars-061","title":"polars 0.6.1","text":""},{"location":"NEWS/#whats-changed_8","title":"What's changed","text":"<ul> <li>use <code>pl$set_polars_options(debug_polars = TRUE)</code> to profile/debug method-calls of a polars query (#193)</li> <li>add <code>&lt;DataFrame&gt;$melt(), &lt;DataFrame&gt;$pivot() + &lt;LazyFrame&gt;$melt()</code> methods (#232)</li> <li>lazy functions translated: <code>pl$implode</code>, <code>pl$explode</code>, <code>pl$unique</code>, <code>pl$approx_unique</code>, <code>pl$head</code>, <code>pl$tail</code> (#196)</li> <li><code>pl$list</code> is deprecated, use <code>pl$implode</code> instead. (#196)</li> <li>Docs improvements. (#210, #213)</li> <li>Update nix flake. (#227)</li> </ul>"},{"location":"NEWS/#polars-060","title":"polars 0.6.0","text":""},{"location":"NEWS/#breaking-changes_3","title":"BREAKING CHANGES","text":"<ul> <li>Bump rust-polars from 2023-02-17 unreleased version to 2023-04-20 unreleased version. (#183)<ul> <li><code>top_k</code>'s <code>reverse</code> option is removed. Use the new <code>bottom_k</code> method instead.</li> <li>The name of the <code>fmt</code> argument of some methods (e.g. <code>parse_date</code>) has been changed to <code>format</code>.</li> </ul> </li> </ul>"},{"location":"NEWS/#whats-changed_9","title":"What's changed","text":"<ul> <li><code>DataFrame</code> objects can be subsetted using brackets like standard R data frames: <code>pl$DataFrame(mtcars)[2:4, c(\"mpg\", \"hp\")]</code> (#140 @vincentarelbundock)</li> <li>An experimental <code>knit_print()</code> method has been added to DataFrame that outputs HTML tables     (similar to py-polars' HTML output) (#125 @eitsupi)</li> <li><code>Series</code> gains new methods: <code>$mean</code>, <code>$median</code>, <code>$std</code>, <code>$var</code> (#170 @vincentarelbundock)</li> <li>A new option <code>use_earliest</code> of <code>replace_time_zone</code>. (#183)</li> <li>A new option <code>strict</code> of <code>parse_int</code>. (#183)</li> <li>Perform joins on nearest keys with method <code>join_asof</code>. (#172)</li> </ul>"},{"location":"NEWS/#polars-v050","title":"polars v0.5.0","text":""},{"location":"NEWS/#breaking-change","title":"BREAKING CHANGE","text":"<ul> <li>The package name was changed from <code>rpolars</code> to <code>polars</code>. (#84)</li> </ul>"},{"location":"NEWS/#whats-changed_10","title":"What's changed","text":"<ul> <li>Several new methods for DataFrame, LazyFrame &amp; GroupBy translated (#103, #105 @vincentarelbundock)</li> <li>Doc fixes (#102, #109 @etiennebacher)</li> <li>Experimental opt-in auto completion (#96 @sorhawell)</li> <li>Base R functions work on DataFrame and LazyFrame objects via S3 methods: as.data.frame, as.matrix, dim, head, length, max, mean, median, min, na.omit, names, sum, tail, unique, ncol, nrow (#107 @vincentarelbundock).</li> </ul>"},{"location":"NEWS/#new-contributors","title":"New Contributors","text":"<ul> <li>@etiennebacher made their first contribution in #102</li> <li>@vincentarelbundock made their first contribution in #103</li> </ul> <p>Release date: 2023-04-16. Full changelog: v0.4.6...v0.5.0</p>"},{"location":"NEWS/#rpolars-v047","title":"rpolars v0.4.7","text":""},{"location":"NEWS/#whats-changed_11","title":"What's changed","text":"<ul> <li>Revamped docs that includes a new introductory vignette (#81 @grantmcdermott)</li> <li>Misc documentation improvements</li> </ul>"},{"location":"NEWS/#rpolars-v046","title":"rpolars v0.4.6","text":"<p>Release date: 2023-03-13. Full changelog: v0.4.5...v0.4.6</p>"},{"location":"NEWS/#whats-new","title":"What's new","text":"<ul> <li>Almost all Expr translated, only missing 'binary'-expr now. #52 #53</li> <li>Run polars queries in detached background threads, no need for any parallel libraries or cluster config #56 #59</li> <li>Full support for when-then-otherwise-syntax #65</li> <li>rpolars now uses bit64 integer64 vectors as input/output for i64 vectors: #68 #69</li> <li>use <code>pl$from_arrow</code> to zero-copy(almost) import <code>Table</code>/<code>Array</code> from r-arrow. #67</li> <li>Support inter process connections with <code>scan_ipc</code></li> <li>Implement <code>scan_ipc</code> by @Sicheng-Pan in #63</li> <li>'Backend' improvements<ul> <li>(prepare support for aarch64-linux) Touch libgcc_eh.a by @yutannihilation in #49</li> <li>Use py-polars rust file structure (to help devs) by @sorhawell in #55</li> <li>Refactor Makefiles by @eitsupi in #58</li> <li>Build rpolars from Nix by @Sicheng-Pan in #54</li> <li><code>extendr_api</code> 0.4 by @sorhawell in #6</li> <li>Add r-universe URL by @jeroen in #71</li> <li>chore: install nanoarrow from cran by @eitsupi in #72</li> <li>chore: install nanoarrow from cran (#72) by @sorhawell in #73</li> <li>Fix pdf latex errors by @sorhawell in #74</li> <li>re-enable devel test, pak R-devel issue went away by @sorhawell in #75</li> <li>DO NOT MERGE: tracking hello_r_universe branch by @eitsupi in #38</li> <li>revert to nightly by @sorhawell in #78</li> </ul> </li> </ul>"},{"location":"NEWS/#new-contributors_1","title":"New Contributors","text":"<ul> <li>@Sicheng-Pan made their first contribution in #54</li> <li>@jeroen made their first contribution in #71</li> </ul>"},{"location":"NEWS/#rpolars-v045","title":"rpolars v0.4.5","text":"<p>Release date: 2023-02-21. Full Changelog: v0.4.3...v0.4.5</p>"},{"location":"NEWS/#whats-changed_12","title":"What's Changed","text":"<ul> <li>bump rust polars to latest rust-polars and fix all errors by @sorhawell in #42</li> <li>Customize extendr to better support cross Rust-R/R-Rust error handling<ul> <li>bump extendr_api by @sorhawell in #44</li> <li>Str even more by @sorhawell in #47</li> </ul> </li> <li>rpolars is now available for install from rpolars.r-universe.dev @eitsupi<ul> <li>advertise R-universe by @sorhawell in #39</li> <li>Includes reasonably easy pre-compiled installation for arm64-MacBooks</li> </ul> </li> <li>All string Expressions available<ul> <li>Expr str strptime by @sorhawell in #40</li> <li>rust_result tests + fixes by @sorhawell in #41</li> <li>Str continued by @sorhawell in #43</li> <li>Str even more by @sorhawell in #47</li> </ul> </li> <li> <p>Starting to roll out new error-handling and type-conversions between R and rust.</p> <ul> <li>Precise source of error should be very clear even in a long method-chain e.g.</li> </ul> <pre><code>pl$lit(\"hey-you-there\")$str$splitn(\"-\",-3)$alias(\"struct_of_words\")$to_r()\n&gt; Error: in str$splitn the arg [n] the value -3 cannot be less than zero\nwhen calling :\npl$lit(\"hey-you-there\")$str$splitn(\"-\", -3)\n</code></pre> </li> <li> <p>Misc</p> <ul> <li>Clippy + tiny optimization by @sorhawell in #45</li> <li>Tidying by @sorhawell in #37</li> </ul> </li> </ul>"},{"location":"NEWS/#rpolars-v043","title":"rpolars v0.4.3","text":"<p>Release date: 2023-02-01. Full Changelog: v0.4.2...v0.4.3</p>"},{"location":"NEWS/#whats-changed_13","title":"What's Changed","text":"<ul> <li>All DateTime expresssions implemented + update rust-polars to latest commit.<ul> <li>Arr str by @sorhawell in #32</li> <li>Datetime continued by @sorhawell in #33</li> <li>Datatime remaining tests + tidy util functions by @sorhawell in #36</li> </ul> </li> </ul>"},{"location":"NEWS/#developer-changes","title":"Developer changes","text":"<ul> <li>Refactoring GitHub Actions workflows by @eitsupi in #24</li> <li>Fix cache and check scan by @sorhawell in #30</li> </ul>"},{"location":"NEWS/#rpolars-v042","title":"rpolars v0.4.2","text":"<p>Release date: 2023-01-17. Full Changelog: V0.4.1...v0.4.2</p>"},{"location":"NEWS/#whats-changed_14","title":"What's Changed","text":"<ul> <li>fix minor Series syntax issue #8 @sorhawell in #22</li> <li>nanoarrow followup: docs + adjust test by @sorhawell in #21</li> <li>Add R CMD check workflow by @eitsupi in #23</li> <li><code>usethis::use_mit_license()</code> by @yutannihilation in #27</li> <li>Fix check errors by @sorhawell in #26</li> </ul>"},{"location":"NEWS/#new-contributors_2","title":"New Contributors","text":"<ul> <li>@eitsupi made their first contribution in #23</li> <li>@yutannihilation made their first contribution in #27</li> </ul>"},{"location":"NEWS/#rpolars-v041","title":"rpolars v0.4.1","text":"<p>Release date: 2023-01-12. Full Changelog: v0.4.0...V0.4.1</p>"},{"location":"NEWS/#whats-changed_15","title":"What's Changed","text":"<ul> <li>Export ArrowArrayStream from polars data frame by @paleolimbot in #5</li> <li>Minor arithmetics syntax improvement @sorhawell in #20</li> </ul>"},{"location":"NEWS/#dev-env","title":"Dev env","text":"<ul> <li>Renv is deactivated as default. Renv.lock still defines package stack on build server @sorhawell in #19</li> </ul>"},{"location":"NEWS/#minor-stuff","title":"Minor stuff","text":"<ul> <li>Improve docs by @sorhawell in #16</li> <li>Update rust polars to +26.1 by @sorhawell in #18</li> </ul>"},{"location":"NEWS/#new-contributors_3","title":"New Contributors","text":"<ul> <li>@paleolimbot made their first contribution in #5</li> </ul>"},{"location":"NEWS/#rpolars-v040","title":"rpolars v0.4.0","text":"<p>Release date: 2023-01-11. Full Changelog: v0.3.1...v0.4.0</p>"},{"location":"NEWS/#breaking-changes_4","title":"Breaking changes","text":"<ul> <li>Class label \"DataType\" is now called \"RPolarsDataType\". Syntax wise 'DataType' can still be used, e.g. <code>.pr$DataType$</code></li> <li>try fix name space collision with arrow by @sorhawell in #15</li> </ul>"},{"location":"NEWS/#new-features","title":"New features","text":"<ul> <li>all list Expr$arr$list functions have been translated:</li> <li>Expr list 2.0 by @sorhawell in #10</li> <li>Expr list 3.0 by @sorhawell in #12</li> </ul>"},{"location":"NEWS/#dev-environment","title":"Dev environment","text":"<ul> <li>update rextendr by @sorhawell in #13</li> </ul>"},{"location":"NEWS/#rpolars-v031","title":"rpolars v0.3.1","text":"<p>Release date: 2023-01-07. Full Changelog: v0.3.0...v0.3.1</p>"},{"location":"NEWS/#whats-changed_16","title":"What's Changed","text":"<ul> <li>drop github action upload pre-release of PR's by @sorhawell in #7</li> <li>Fix readme typo by @erjanmx in #6</li> <li>Expr arr list functions + rework r_to_series by @sorhawell in #2</li> </ul>"},{"location":"NEWS/#new-contributors_4","title":"New Contributors","text":"<ul> <li>@erjanmx made their first contribution in #6</li> </ul>"},{"location":"NEWS/#rpolars-v030","title":"rpolars v0.3.0","text":"<p>Release date: 2022-12-31. Full Changelog: v0.2.1...v0.3.0</p>"},{"location":"NEWS/#whats-changed_17","title":"What's Changed","text":"<ul> <li>use jemalloc(linux) else mimallac as py-polars by @sorhawell in #1</li> <li>Bump rust polars 26.1 by @sorhawell in #3</li> <li>Expr_interpolate now has two methods, linear, nearest</li> <li>Expr_quantile also takes quantile value as an expression</li> <li>map_alias improved error handling</li> </ul>"},{"location":"NEWS/#rpolars-v021","title":"rpolars v0.2.1","text":"<p>Release date: 2022-12-27</p> <ul> <li>rpolars is now hosted at https://github.com/pola-rs/r-polars. Happy to be here.</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#developers","title":"Developers","text":"<p>The primary developer of the upstream Polars project is Ritchie Vink (@ritchie46). This R port is maintained by S\u00f8ren Welling (@sorhawell) and contributors.</p> <p>Development occurs on Github: https://github.com/pola-rs/r-polars</p> <p>Consider joining our Discord (subchannel) for additional help and discussion.</p> <p>'Polars' is a query engine/syntax for multiple languages. The R specific implementation can be referred to as r-polars and is derived from rust-polars.</p> <p>The polars package for R is published under the MIT license.</p>"},{"location":"about/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2023 polars authors (polars the R package)</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference_home/","title":"Reference","text":"<p><code>polars</code> provides a large number of functions for numerous data types and this can sometimes be a bit overwhelming. Overall, you should be able to do anything you want with <code>polars</code> by specifying the data structure you want to use and then by applying expressions in a particular context.</p>"},{"location":"reference_home/#data-structure","title":"Data structure","text":"<p>As explained in some vignettes, one of <code>polars</code> biggest strengths is the ability to choose between eager and lazy evaluation, that require respectively a <code>DataFrame</code> and a <code>LazyFrame</code> (with their counterparts <code>GroupBy</code> and <code>LazyGroupBy</code> for grouped data).</p> <p>We can apply functions directly on a <code>DataFrame</code> or <code>LazyFrame</code>, such as <code>rename()</code> or <code>drop()</code>. Most (but not all!) functions that can be applied to <code>DataFrame</code>s can also be used on <code>LazyFrame</code>s. Calling <code>&lt;DataFrame&gt;$lazy()</code> yields a <code>LazyFrame</code>. While calling <code>&lt;LazyFrame&gt;$collect()</code> starts a computation and yields a <code>DataFrame</code> as result.</p> <p>Another common data structure is the <code>Series</code>, which can be considered as the equivalent of R vectors in <code>polars</code>\u2019 world. Therefore, a <code>DataFrame</code> is a list of <code>Series</code>.</p> <p>Operations on <code>DataFrame</code> or <code>LazyFrame</code> are useful, but many more operations can be applied on columns themselves by using various expressions in different contexts.</p>"},{"location":"reference_home/#contexts","title":"Contexts","text":"<p>A context simply is the type of data modification that is done. There are 3 types of contexts:</p> <ul> <li>select and modify columns with <code>select()</code> and <code>with_columns()</code>;</li> <li>filter rows with <code>filter()</code>;</li> <li>group and aggregate rows with <code>group_by()</code> and <code>agg()</code></li> </ul> <p>Inside each context, you can use various expressions (aka. <code>Expr</code>). Some expressions cannot be used in some contexts. For example, in <code>with_columns()</code>, you can only apply expressions that return either the same number of values or a single value that will be duplicated on all rows:</p> <pre><code>test = pl$DataFrame(mtcars)\n</code></pre> <pre><code># this works\ntest$with_columns(\n  pl$col(\"mpg\") + 1\n)\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 23.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 16.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 20.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 16.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 22.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># this doesn't work because it returns only 2 values, while mtcars has 32 rows.\ntest$with_columns(\n  pl$col(\"mpg\")$slice(0, 2)\n)\n</code></pre> <p>By contrast, in an <code>agg</code> context, any number of return values are possible, as they are returned in a list, and only the new columns or the grouping columns are returned.</p> <pre><code>test$group_by(pl$col(\"cyl\"))$agg(\n  pl$col(\"mpg\"), # varying number of values\n  pl$col(\"mpg\")$slice(0, 2)$name$suffix(\"_sliced\"), # two values\n  # aggregated to one value and implicitly unpacks list\n  pl$col(\"mpg\")$sum()$name$suffix(\"_summed\")\n)\n#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg                  \u2506 mpg_sliced   \u2506 mpg_summed \u2502\n#&gt; \u2502 --- \u2506 ---                  \u2506 ---          \u2506 ---        \u2502\n#&gt; \u2502 f64 \u2506 list[f64]            \u2506 list[f64]    \u2506 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 [21.0, 21.0, \u2026 19.7] \u2506 [21.0, 21.0] \u2506 138.2      \u2502\n#&gt; \u2502 8.0 \u2506 [18.7, 14.3, \u2026 15.0] \u2506 [18.7, 14.3] \u2506 211.4      \u2502\n#&gt; \u2502 4.0 \u2506 [22.8, 24.4, \u2026 21.4] \u2506 [22.8, 24.4] \u2506 293.3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference_home/#expressions","title":"Expressions","text":"<p><code>polars</code> is quite verbose and requires you to be very explicit on the operations you want to perform. This can be seen in the way expressions work. All polars public functions (excluding methods) are accessed via the namespace handle <code>pl</code>.</p> <p>Two important expressions starters are <code>pl$col()</code> (names a column in the context) and <code>pl$lit()</code> (wraps a literal value or vector/series in an Expr). Most other expression starters are syntactic sugar derived from thereof, e.g.\u00a0<code>pl$sum(_)</code> is actually <code>pl$col(_)$sum()</code>.</p> <p>Expressions can be chained with about 170 expression methods such as <code>$sum()</code> which aggregates e.g.\u00a0the column with summing.</p> <pre><code># two examples of starting, chaining and combining expressions\npl$DataFrame(a = 1:4)$with_columns(\n  # take col mpg, slice it, sum it, then cast it\n  pl$col(\"a\")$slice(0, 2)$sum()$cast(pl$Float32)$alias(\"a_slice_sum_cast\"),\n  # take 1:3, name it, then sum, then multiply with two\n  pl$lit(1:3)$alias(\"lit_sum_add_two\")$sum() * 2L,\n  # similar to above, but with `mul()`-method instead of `*`.\n  pl$lit(1:3)$sum()$mul(pl$col(\"a\"))$alias(\"lit_sum_add_mpg\")\n)\n#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 a_slice_sum_cast \u2506 lit_sum_add_two \u2506 lit_sum_add_mpg \u2502\n#&gt; \u2502 --- \u2506 ---              \u2506 ---             \u2506 ---             \u2502\n#&gt; \u2502 i32 \u2506 f32              \u2506 i32             \u2506 i32             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 3.0              \u2506 12              \u2506 6               \u2502\n#&gt; \u2502 2   \u2506 3.0              \u2506 12              \u2506 12              \u2502\n#&gt; \u2502 3   \u2506 3.0              \u2506 12              \u2506 18              \u2502\n#&gt; \u2502 4   \u2506 3.0              \u2506 12              \u2506 24              \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Moreover there are subnamespaces with special methods only applicable for a specific type <code>dt</code>(datetime), <code>arr</code>(list), <code>str</code>(strings), <code>struct</code>(structs), <code>cat</code>(categoricals) and <code>bin</code>(binary). As a sidenote, there is also an exotic subnamespace called <code>meta</code> which is rarely used to manipulate the expressions themselves. Each subsection in the \u201cExpressions\u201d section lists all operations available for a specific subnamespace.</p> <p>For a concrete example for <code>dt</code>, suppose we have a column containing dates and that we want to extract the year from these dates:</p> <pre><code># Create the DataFrame\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-01-01\"),\n    as.Date(\"2023-01-02\"),\n    interval = \"1y\",\n    eager = TRUE\n  )\n)\ndf\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 date       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 \u2502\n#&gt; \u2502 2021-01-01 \u2502\n#&gt; \u2502 2022-01-01 \u2502\n#&gt; \u2502 2023-01-01 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The function <code>year()</code> only makes sense for date-time data, so the type of input that can receive this function is <code>dt</code> (for date-time):</p> <pre><code>df$with_columns(\n  pl$col(\"date\")$dt$year()$alias(\"year\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 year \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2502\n#&gt; \u2502 date       \u2506 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 \u2506 2020 \u2502\n#&gt; \u2502 2021-01-01 \u2506 2021 \u2502\n#&gt; \u2502 2022-01-01 \u2506 2022 \u2502\n#&gt; \u2502 2023-01-01 \u2506 2023 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Similarly, if we have text data that we want to convert text to uppercase, we use the <code>str</code> prefix before using <code>to_uppercase()</code>:</p> <pre><code># Create the DataFrame\ndf = pl$DataFrame(foo = c(\"jake\", \"mary\", \"john peter\"))\n\ndf$select(pl$col(\"foo\")$str$to_uppercase())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo        \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 str        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 JAKE       \u2502\n#&gt; \u2502 MARY       \u2502\n#&gt; \u2502 JOHN PETER \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_class/","title":"Inner workings of the DataFrame-class","text":""},{"location":"man/DataFrame_class/#description","title":"Description","text":"<p>The <code>DataFrame</code>-class is simply two environments of respectively the public and private methods/function calls to the polars Rust side. The instantiated <code>DataFrame</code>-object is an <code>externalptr</code> to a low-level Rust polars DataFrame object.</p> <p>The S3 method <code>.DollarNames.RPolarsDataFrame</code> exposes all public <code>$foobar()</code>-methods which are callable onto the object. Most methods return another <code>DataFrame</code>- class instance or similar which allows for method chaining. This class system could be called \"environment classes\" (in lack of a better name) and is the same class system <code>extendr</code> provides, except here there are both a public and private set of methods. For implementation reasons, the private methods are external and must be called from <code>.pr$DataFrame$methodname()</code>. Also, all private methods must take any <code>self</code> as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications.</p>"},{"location":"man/DataFrame_class/#details","title":"Details","text":"<p>Check out the source code in R/dataframe_frame.R to see how public methods are derived from private methods. Check out extendr-wrappers.R to see the <code>extendr</code>-auto-generated methods. These are moved to <code>.pr</code> and converted into pure external functions in after-wrappers.R. In zzz.R (named <code>zzz</code> to be last file sourced) the <code>extendr</code>-methods are removed and replaced by any function prefixed <code>DataFrame_</code>.</p>"},{"location":"man/DataFrame_class/#value","title":"Value","text":"<p>Not applicable</p>"},{"location":"man/DataFrame_class/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# see all public exported method names (normally accessed via a class\n# instance with $)\nls(.pr$env$RPolarsDataFrame)\n</code></pre> <pre><code>#&gt;  [1] \"clone\"          \"columns\"        \"describe\"       \"drop\"          \n#&gt;  [5] \"drop_in_place\"  \"drop_nulls\"     \"dtype_strings\"  \"dtypes\"        \n#&gt;  [9] \"equals\"         \"estimated_size\" \"explode\"        \"fill_nan\"      \n#&gt; [13] \"fill_null\"      \"filter\"         \"first\"          \"get_column\"    \n#&gt; [17] \"get_columns\"    \"glimpse\"        \"group_by\"       \"head\"          \n#&gt; [21] \"height\"         \"join\"           \"join_asof\"      \"last\"          \n#&gt; [25] \"lazy\"           \"limit\"          \"max\"            \"mean\"          \n#&gt; [29] \"median\"         \"melt\"           \"min\"            \"n_chunks\"      \n#&gt; [33] \"null_count\"     \"pivot\"          \"print\"          \"quantile\"      \n#&gt; [37] \"rechunk\"        \"rename\"         \"reverse\"        \"sample\"        \n#&gt; [41] \"schema\"         \"select\"         \"shape\"          \"shift\"         \n#&gt; [45] \"shift_and_fill\" \"slice\"          \"sort\"           \"std\"           \n#&gt; [49] \"sum\"            \"tail\"           \"to_data_frame\"  \"to_list\"       \n#&gt; [53] \"to_series\"      \"to_struct\"      \"transpose\"      \"unique\"        \n#&gt; [57] \"unnest\"         \"var\"            \"width\"          \"with_columns\"  \n#&gt; [61] \"with_row_count\" \"write_csv\"      \"write_json\"     \"write_ndjson\"\n</code></pre> <pre><code># see all private methods (not intended for regular use)\nls(.pr$DataFrame)\n</code></pre> <pre><code>#&gt;  [1] \"by_agg\"                    \"clone_in_rust\"            \n#&gt;  [3] \"columns\"                   \"default\"                  \n#&gt;  [5] \"drop_all_in_place\"         \"drop_in_place\"            \n#&gt;  [7] \"dtype_strings\"             \"dtypes\"                   \n#&gt;  [9] \"equals\"                    \"estimated_size\"           \n#&gt; [11] \"export_stream\"             \"from_arrow_record_batches\"\n#&gt; [13] \"get_column\"                \"get_columns\"              \n#&gt; [15] \"lazy\"                      \"melt\"                     \n#&gt; [17] \"n_chunks\"                  \"new_with_capacity\"        \n#&gt; [19] \"null_count\"                \"pivot_expr\"               \n#&gt; [21] \"print\"                     \"rechunk\"                  \n#&gt; [23] \"sample_frac\"               \"sample_n\"                 \n#&gt; [25] \"schema\"                    \"select\"                   \n#&gt; [27] \"select_at_idx\"             \"set_column_from_robj\"     \n#&gt; [29] \"set_column_from_series\"    \"set_column_names_mut\"     \n#&gt; [31] \"shape\"                     \"to_list\"                  \n#&gt; [33] \"to_list_tag_structs\"       \"to_list_unwind\"           \n#&gt; [35] \"to_struct\"                 \"transpose\"                \n#&gt; [37] \"unnest\"                    \"with_columns\"             \n#&gt; [39] \"with_row_count\"            \"write_csv\"                \n#&gt; [41] \"write_json\"                \"write_ndjson\"\n</code></pre> <pre><code># make an object\ndf = pl$DataFrame(iris)\n\n\n# use a public method/property\ndf$shape\n</code></pre> <pre><code>#&gt; [1] 150   5\n</code></pre> <pre><code>df2 = df\n\n# use a private method, which has mutability\nresult = .pr$DataFrame$set_column_from_robj(df, 150:1, \"some_ints\")\n\n# Column exists in both dataframes-objects now, as they are just pointers to\n# the same object\n# There are no public methods with mutability.\ndf$columns\n</code></pre> <pre><code>#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n#&gt; [6] \"some_ints\"\n</code></pre> <pre><code>df2$columns\n</code></pre> <pre><code>#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n#&gt; [6] \"some_ints\"\n</code></pre> <pre><code># set_column_from_robj-method is fallible and returned a result which could\n# be \"ok\" or an error.\n# No public method or function will ever return a result.\n# The `result` is very close to the same as output from functions decorated\n# with purrr::safely.\n# To use results on the R side, these must be unwrapped first such that\n# potentially errors can be thrown. `unwrap(result)` is a way to communicate\n# errors happening on the Rust side to the R side. `Extendr` default behavior\n# is to use `panic!`(s) which would cause some unnecessarily confusing and\n# some very verbose error messages on the inner workings of rust.\n# `unwrap(result)` in this case no error, just a NULL because this mutable\n# method does not return any ok-value.\n\n# Try unwrapping an error from polars due to unmatching column lengths\nerr_result = .pr$DataFrame$set_column_from_robj(df, 1:10000, \"wrong_length\")\ntryCatch(unwrap(err_result, call = NULL), error = \\(e) cat(as.character(e)))\n</code></pre> <pre><code>#&gt; Error in unwrap(err_result, call = NULL): could not find function \"unwrap\"\n</code></pre>"},{"location":"man/DataFrame_clone/","title":"Clone a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_clone/#description","title":"Description","text":"<p>This is rarely useful as a DataFrame is nearly 100% immutable. Any modification of a DataFrame would lead to a clone anyway.</p>"},{"location":"man/DataFrame_clone/#usage","title":"Usage","text":"<pre><code>DataFrame_clone()\n</code></pre>"},{"location":"man/DataFrame_clone/#value","title":"Value","text":"<p>A DataFrame</p>"},{"location":"man/DataFrame_clone/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf1 = pl$DataFrame(iris)\ndf2 = df1$clone()\ndf3 = df1\n\n# the clone and the original don't have the same address...\npl$mem_address(df1) != pl$mem_address(df2)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># ... but simply assigning df1 to df3 change the address anyway\npl$mem_address(df1) == pl$mem_address(df3)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/DataFrame_columns/","title":"Get and set column names of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_columns/#description","title":"Description","text":"<p>Get and set column names of a DataFrame</p>"},{"location":"man/DataFrame_columns/#usage","title":"Usage","text":"<pre><code>DataFrame_columns()\n</code></pre>"},{"location":"man/DataFrame_columns/#value","title":"Value","text":"<p>A character vector with the column names.</p>"},{"location":"man/DataFrame_columns/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris)\n\n# get values\ndf$columns\n</code></pre> <pre><code>#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"\n</code></pre> <pre><code># set + get values\ndf$columns = letters[1:5] # &lt;- is fine too\ndf$columns\n</code></pre> <pre><code>#&gt; [1] \"a\" \"b\" \"c\" \"d\" \"e\"\n</code></pre>"},{"location":"man/DataFrame_describe/","title":"Summary statistics for a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_describe/#description","title":"Description","text":"<p>This returns the total number of rows, the number of missing values, the mean, standard deviation, min, max, median and the percentiles specified in the argument <code>percentiles</code>.</p>"},{"location":"man/DataFrame_describe/#usage","title":"Usage","text":"<pre><code>DataFrame_describe(percentiles = c(0.25, 0.75))\n</code></pre>"},{"location":"man/DataFrame_describe/#arguments","title":"Arguments","text":"<code>percentiles</code>  One or more percentiles to include in the summary statistics. All values must be in the range <code>\\[0; 1\\]</code>."},{"location":"man/DataFrame_describe/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_describe/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$describe()\n</code></pre> <pre><code>#&gt; shape: (9, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 describe   \u2506 mpg       \u2506 cyl      \u2506 disp       \u2506 \u2026 \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb   \u2502\n#&gt; \u2502 ---        \u2506 ---       \u2506 ---      \u2506 ---        \u2506   \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---    \u2502\n#&gt; \u2502 str        \u2506 f64       \u2506 f64      \u2506 f64        \u2506   \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 count      \u2506 32.0      \u2506 32.0     \u2506 32.0       \u2506 \u2026 \u2506 32.0     \u2506 32.0     \u2506 32.0     \u2506 32.0   \u2502\n#&gt; \u2502 null_count \u2506 0.0       \u2506 0.0      \u2506 0.0        \u2506 \u2026 \u2506 0.0      \u2506 0.0      \u2506 0.0      \u2506 0.0    \u2502\n#&gt; \u2502 mean       \u2506 20.090625 \u2506 6.1875   \u2506 230.721875 \u2506 \u2026 \u2506 0.4375   \u2506 0.40625  \u2506 3.6875   \u2506 2.8125 \u2502\n#&gt; \u2502 std        \u2506 6.026948  \u2506 1.785922 \u2506 123.938694 \u2506 \u2026 \u2506 0.504016 \u2506 0.498991 \u2506 0.737804 \u2506 1.6152 \u2502\n#&gt; \u2502 min        \u2506 10.4      \u2506 4.0      \u2506 71.1       \u2506 \u2026 \u2506 0.0      \u2506 0.0      \u2506 3.0      \u2506 1.0    \u2502\n#&gt; \u2502 max        \u2506 33.9      \u2506 8.0      \u2506 472.0      \u2506 \u2026 \u2506 1.0      \u2506 1.0      \u2506 5.0      \u2506 8.0    \u2502\n#&gt; \u2502 median     \u2506 19.2      \u2506 6.0      \u2506 196.3      \u2506 \u2026 \u2506 0.0      \u2506 0.0      \u2506 4.0      \u2506 2.0    \u2502\n#&gt; \u2502 25pct      \u2506 15.5      \u2506 4.0      \u2506 121.0      \u2506 \u2026 \u2506 0.0      \u2506 0.0      \u2506 3.0      \u2506 2.0    \u2502\n#&gt; \u2502 75pct      \u2506 22.8      \u2506 8.0      \u2506 318.0      \u2506 \u2026 \u2506 1.0      \u2506 1.0      \u2506 4.0      \u2506 4.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_drop/","title":"Drop columns of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_drop/#description","title":"Description","text":"<p>Drop columns of a DataFrame</p>"},{"location":"man/DataFrame_drop/#usage","title":"Usage","text":"<pre><code>DataFrame_drop(columns)\n</code></pre>"},{"location":"man/DataFrame_drop/#arguments","title":"Arguments","text":"<code>columns</code>  A character vector with the names of the column(s) to remove."},{"location":"man/DataFrame_drop/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_drop/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$drop(c(\"mpg\", \"hp\"))\n</code></pre> <pre><code>#&gt; shape: (32, 9)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 disp  \u2506 drat \u2506 wt    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---  \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64   \u2506 f64  \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.62  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.875 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 4.0 \u2506 108.0 \u2506 3.85 \u2506 2.32  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 6.0 \u2506 258.0 \u2506 3.08 \u2506 3.215 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026     \u2506 \u2026    \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 8.0 \u2506 351.0 \u2506 4.22 \u2506 3.17  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 145.0 \u2506 3.62 \u2506 2.77  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 8.0 \u2506 301.0 \u2506 3.54 \u2506 3.57  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 4.0 \u2506 121.0 \u2506 4.11 \u2506 2.78  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_drop_in_place/","title":"Drop in place","text":"<p>Source code</p>"},{"location":"man/DataFrame_drop_in_place/#description","title":"Description","text":"<p>Drop a single column in-place and return the dropped column.</p>"},{"location":"man/DataFrame_drop_in_place/#usage","title":"Usage","text":"<pre><code>DataFrame_drop_in_place(name)\n</code></pre>"},{"location":"man/DataFrame_drop_in_place/#arguments","title":"Arguments","text":"<code>name</code>  string Name of the column to drop."},{"location":"man/DataFrame_drop_in_place/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/DataFrame_drop_in_place/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat = pl$DataFrame(iris)\nx = dat$drop_in_place(\"Species\")\nx\n</code></pre> <pre><code>#&gt; polars Series: shape: (150,)\n#&gt; Series: 'Species' [cat]\n#&gt; [\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \u2026\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt; ]\n</code></pre> <pre><code>dat$columns\n</code></pre> <pre><code>#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"\n</code></pre>"},{"location":"man/DataFrame_drop_nulls/","title":"Drop nulls (missing values)","text":"<p>Source code</p>"},{"location":"man/DataFrame_drop_nulls/#description","title":"Description","text":"<p>Drop all rows that contain nulls (which correspond to <code>NA</code> in R).</p>"},{"location":"man/DataFrame_drop_nulls/#usage","title":"Usage","text":"<pre><code>DataFrame_drop_nulls(subset = NULL)\n</code></pre>"},{"location":"man/DataFrame_drop_nulls/#arguments","title":"Arguments","text":"<code>subset</code>  A character vector with the names of the column(s) for which nulls are considered. If <code>NULL</code> (default), use all columns."},{"location":"man/DataFrame_drop_nulls/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_drop_nulls/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ntmp = mtcars\ntmp[1:3, \"mpg\"] = NA\ntmp[4, \"hp\"] = NA\ntmp = pl$DataFrame(tmp)\n\n# number of rows in `tmp` before dropping nulls\ntmp$height\n</code></pre> <pre><code>#&gt; [1] 32\n</code></pre> <pre><code>tmp$drop_nulls()$height\n</code></pre> <pre><code>#&gt; [1] 28\n</code></pre> <pre><code>tmp$drop_nulls(\"mpg\")$height\n</code></pre> <pre><code>#&gt; [1] 29\n</code></pre> <pre><code>tmp$drop_nulls(c(\"mpg\", \"hp\"))$height\n</code></pre> <pre><code>#&gt; [1] 28\n</code></pre>"},{"location":"man/DataFrame_dtype_strings/","title":"Data types information","text":"<p>Source code</p>"},{"location":"man/DataFrame_dtype_strings/#description","title":"Description","text":"<p>Get the data type of all columns as strings. You can see all available types with <code>names(pl$dtypes)</code>. The data type of each column is also shown when printing the DataFrame.</p>"},{"location":"man/DataFrame_dtype_strings/#usage","title":"Usage","text":"<pre><code>DataFrame_dtype_strings\n</code></pre>"},{"location":"man/DataFrame_dtype_strings/#value","title":"Value","text":"<p>A character vector with the data type of each column</p>"},{"location":"man/DataFrame_dtype_strings/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$dtype_strings()\n</code></pre> <pre><code>#&gt; [1] \"f64\" \"f64\" \"f64\" \"f64\" \"cat\"\n</code></pre>"},{"location":"man/DataFrame_dtypes/","title":"Data types information","text":"<p>Source code</p>"},{"location":"man/DataFrame_dtypes/#description","title":"Description","text":"<p>Get the data type of all columns. You can see all available types with <code>names(pl$dtypes)</code>. The data type of each column is also shown when printing the DataFrame.</p>"},{"location":"man/DataFrame_dtypes/#usage","title":"Usage","text":"<pre><code>DataFrame_dtypes()\n\nDataFrame_schema()\n</code></pre>"},{"location":"man/DataFrame_dtypes/#value","title":"Value","text":"<p><code>$dtypes</code> returns an unnamed list with the data type of each column. <code>$schema</code> returns a named list with the column names and the data type of each column.</p>"},{"location":"man/DataFrame_dtypes/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$dtypes\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; DataType: Float64\n#&gt; \n#&gt; [[2]]\n#&gt; DataType: Float64\n#&gt; \n#&gt; [[3]]\n#&gt; DataType: Float64\n#&gt; \n#&gt; [[4]]\n#&gt; DataType: Float64\n#&gt; \n#&gt; [[5]]\n#&gt; DataType: Categorical(\n#&gt;     Some(\n#&gt;         local,\n#&gt;     ),\n#&gt;     Physical,\n#&gt; )\n</code></pre> <pre><code>pl$DataFrame(iris)$schema\n</code></pre> <pre><code>#&gt; $Sepal.Length\n#&gt; DataType: Float64\n#&gt; \n#&gt; $Sepal.Width\n#&gt; DataType: Float64\n#&gt; \n#&gt; $Petal.Length\n#&gt; DataType: Float64\n#&gt; \n#&gt; $Petal.Width\n#&gt; DataType: Float64\n#&gt; \n#&gt; $Species\n#&gt; DataType: Categorical(\n#&gt;     Some(\n#&gt;         local,\n#&gt;     ),\n#&gt;     Physical,\n#&gt; )\n</code></pre>"},{"location":"man/DataFrame_equals/","title":"Compare two DataFrames","text":"<p>Source code</p>"},{"location":"man/DataFrame_equals/#description","title":"Description","text":"<p>Check if two DataFrames are equal.</p>"},{"location":"man/DataFrame_equals/#usage","title":"Usage","text":"<pre><code>DataFrame_equals(other)\n</code></pre>"},{"location":"man/DataFrame_equals/#arguments","title":"Arguments","text":"<code>other</code>  DataFrame to compare with."},{"location":"man/DataFrame_equals/#value","title":"Value","text":"<p>A boolean.</p>"},{"location":"man/DataFrame_equals/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat1 = pl$DataFrame(iris)\ndat2 = pl$DataFrame(iris)\ndat3 = pl$DataFrame(mtcars)\ndat1$equals(dat2)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>dat1$equals(dat3)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/DataFrame_estimated_size/","title":"Estimated size","text":"<p>Source code</p>"},{"location":"man/DataFrame_estimated_size/#description","title":"Description","text":"<p>Return an estimation of the total (heap) allocated size of the DataFrame.</p>"},{"location":"man/DataFrame_estimated_size/#usage","title":"Usage","text":"<pre><code>DataFrame_estimated_size\n</code></pre>"},{"location":"man/DataFrame_estimated_size/#format","title":"Format","text":"<p>function</p>"},{"location":"man/DataFrame_estimated_size/#value","title":"Value","text":"<p>Estimated size in bytes</p>"},{"location":"man/DataFrame_estimated_size/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$estimated_size()\n</code></pre> <pre><code>#&gt; [1] 2816\n</code></pre>"},{"location":"man/DataFrame_explode/","title":"Explode columns containing a list of values","text":"<p>Source code</p>"},{"location":"man/DataFrame_explode/#description","title":"Description","text":"<p>Explode columns containing a list of values</p>"},{"location":"man/DataFrame_explode/#usage","title":"Usage","text":"<pre><code>DataFrame_explode(...)\n</code></pre>"},{"location":"man/DataFrame_explode/#arguments","title":"Arguments","text":"<code>\u2026</code>  Column(s) to be exploded as individual <code>Into\\ or list/vector of <code>Into\\. In a handful of places in rust-polars, only the plain variant <code>Expr::Column</code> is accepted. This is currenly one of such places. Therefore <code>pl$col(\u201cname\u201d)</code> and <code>pl$all()</code> is allowed, not <code>pl$col(\u201cname\u201d)$alias(\u201cnewname\u201d)</code>. <code>\u201cname\u201d</code> is implicitly converted to <code>pl$col(\u201cname\u201d)</code>."},{"location":"man/DataFrame_explode/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_explode/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  letters = c(\"aa\", \"aa\", \"bb\", \"cc\"),\n  numbers = list(1, c(2, 3), c(4, 5), c(6, 7, 8)),\n  numbers_2 = list(0, c(1, 2), c(3, 4), c(5, 6, 7)) # same structure as numbers\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers         \u2506 numbers_2       \u2502\n#&gt; \u2502 ---     \u2506 ---             \u2506 ---             \u2502\n#&gt; \u2502 str     \u2506 list[f64]       \u2506 list[f64]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 aa      \u2506 [1.0]           \u2506 [0.0]           \u2502\n#&gt; \u2502 aa      \u2506 [2.0, 3.0]      \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 bb      \u2506 [4.0, 5.0]      \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 cc      \u2506 [6.0, 7.0, 8.0] \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># explode a single column, append others\ndf$explode(\"numbers\")\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2       \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---             \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 list[f64]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 aa      \u2506 1.0     \u2506 [0.0]           \u2502\n#&gt; \u2502 aa      \u2506 2.0     \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 aa      \u2506 3.0     \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 bb      \u2506 4.0     \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 bb      \u2506 5.0     \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 cc      \u2506 6.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2502 cc      \u2506 7.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2502 cc      \u2506 8.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># it is also possible to explode a character column to have one letter per row\ndf$explode(\"letters\")\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers         \u2506 numbers_2       \u2502\n#&gt; \u2502 ---     \u2506 ---             \u2506 ---             \u2502\n#&gt; \u2502 str     \u2506 list[f64]       \u2506 list[f64]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a       \u2506 [1.0]           \u2506 [0.0]           \u2502\n#&gt; \u2502 a       \u2506 [1.0]           \u2506 [0.0]           \u2502\n#&gt; \u2502 a       \u2506 [2.0, 3.0]      \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 a       \u2506 [2.0, 3.0]      \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 b       \u2506 [4.0, 5.0]      \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 b       \u2506 [4.0, 5.0]      \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 c       \u2506 [6.0, 7.0, 8.0] \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2502 c       \u2506 [6.0, 7.0, 8.0] \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># explode two columns of same nesting structure, by names or the common dtype\n# \"List(Float64)\"\ndf$explode(\"numbers\", \"numbers_2\")\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2 \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---       \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 aa      \u2506 1.0     \u2506 0.0       \u2502\n#&gt; \u2502 aa      \u2506 2.0     \u2506 1.0       \u2502\n#&gt; \u2502 aa      \u2506 3.0     \u2506 2.0       \u2502\n#&gt; \u2502 bb      \u2506 4.0     \u2506 3.0       \u2502\n#&gt; \u2502 bb      \u2506 5.0     \u2506 4.0       \u2502\n#&gt; \u2502 cc      \u2506 6.0     \u2506 5.0       \u2502\n#&gt; \u2502 cc      \u2506 7.0     \u2506 6.0       \u2502\n#&gt; \u2502 cc      \u2506 8.0     \u2506 7.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$explode(pl$col(pl$List(pl$Float64)))\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2 \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---       \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 aa      \u2506 1.0     \u2506 0.0       \u2502\n#&gt; \u2502 aa      \u2506 2.0     \u2506 1.0       \u2502\n#&gt; \u2502 aa      \u2506 3.0     \u2506 2.0       \u2502\n#&gt; \u2502 bb      \u2506 4.0     \u2506 3.0       \u2502\n#&gt; \u2502 bb      \u2506 5.0     \u2506 4.0       \u2502\n#&gt; \u2502 cc      \u2506 6.0     \u2506 5.0       \u2502\n#&gt; \u2502 cc      \u2506 7.0     \u2506 6.0       \u2502\n#&gt; \u2502 cc      \u2506 8.0     \u2506 7.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_fill_nan/","title":"Fill <code>NaN</code>","text":"<p>Source code</p>"},{"location":"man/DataFrame_fill_nan/#description","title":"Description","text":"<p>Fill <code>NaN</code> values by an Expression evaluation.</p>"},{"location":"man/DataFrame_fill_nan/#usage","title":"Usage","text":"<pre><code>DataFrame_fill_nan(fill_value)\n</code></pre>"},{"location":"man/DataFrame_fill_nan/#arguments","title":"Arguments","text":"<code>fill_value</code>  Value to fill <code>NaN</code> with."},{"location":"man/DataFrame_fill_nan/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_fill_nan/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1.5, 2, NaN, 4),\n  b = c(1.5, NaN, NaN, 4)\n)\ndf$fill_nan(99)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_fill_null/","title":"Fill nulls","text":"<p>Source code</p>"},{"location":"man/DataFrame_fill_null/#description","title":"Description","text":"<p>Fill null values (which correspond to <code>NA</code> in R) using the specified value or strategy.</p>"},{"location":"man/DataFrame_fill_null/#usage","title":"Usage","text":"<pre><code>DataFrame_fill_null(fill_value)\n</code></pre>"},{"location":"man/DataFrame_fill_null/#arguments","title":"Arguments","text":"<code>fill_value</code>  Value to fill nulls with."},{"location":"man/DataFrame_fill_null/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_fill_null/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1.5, 2, NA, 4),\n  b = c(1.5, NA, NA, 4)\n)\n\ndf$fill_null(99)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$fill_null(pl$col(\"a\")$mean())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5 \u2506 1.5 \u2502\n#&gt; \u2502 2.0 \u2506 2.5 \u2502\n#&gt; \u2502 2.5 \u2506 2.5 \u2502\n#&gt; \u2502 4.0 \u2506 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_filter/","title":"Filter rows of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_filter/#description","title":"Description","text":"<p>Filter rows with an Expression defining a boolean column. Multiple expressions are combined with <code>&amp;</code> (AND). This is equivalent to <code>dplyr::filter()</code>.</p>"},{"location":"man/DataFrame_filter/#usage","title":"Usage","text":"<pre><code>DataFrame_filter(...)\n</code></pre>"},{"location":"man/DataFrame_filter/#arguments","title":"Arguments","text":"<code>\u2026</code>  Polars expressions which will evaluate to a boolean."},{"location":"man/DataFrame_filter/#details","title":"Details","text":"<p>Rows where the condition returns <code>NA</code> are dropped.</p>"},{"location":"man/DataFrame_filter/#value","title":"Value","text":"<p>A DataFrame with only the rows where the conditions are <code>TRUE</code>.</p>"},{"location":"man/DataFrame_filter/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris)\n\ndf$filter(pl$col(\"Sepal.Length\") &gt; 5)\n</code></pre> <pre><code>#&gt; shape: (118, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5.4          \u2506 3.9         \u2506 1.7          \u2506 0.4         \u2506 setosa    \u2502\n#&gt; \u2502 5.4          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5.8          \u2506 4.0         \u2506 1.2          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># This is equivalent to\n# df$filter(pl$col(\"Sepal.Length\") &gt; 5 &amp; pl$col(\"Petal.Width\") &lt; 1)\ndf$filter(pl$col(\"Sepal.Length\") &gt; 5, pl$col(\"Petal.Width\") &lt; 1)\n</code></pre> <pre><code>#&gt; shape: (22, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.4          \u2506 3.9         \u2506 1.7          \u2506 0.4         \u2506 setosa  \u2502\n#&gt; \u2502 5.4          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.8          \u2506 4.0         \u2506 1.2          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026       \u2502\n#&gt; \u2502 5.1          \u2506 3.4         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.9          \u2506 0.4         \u2506 setosa  \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.6          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.3          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># rows where condition is NA are dropped\niris2 = iris\niris2[c(1, 3, 5), \"Species\"] = NA\ndf = pl$DataFrame(iris2)\n\ndf$filter(pl$col(\"Species\") == \"setosa\")\n</code></pre> <pre><code>#&gt; shape: (47, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.4          \u2506 3.9         \u2506 1.7          \u2506 0.4         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.4         \u2506 1.4          \u2506 0.3         \u2506 setosa  \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026       \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.6          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.2         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.3          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.3         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_first/","title":"Get the first row of the DataFrame.","text":"<p>Source code</p>"},{"location":"man/DataFrame_first/#description","title":"Description","text":"<p>Get the first row of the DataFrame.</p>"},{"location":"man/DataFrame_first/#usage","title":"Usage","text":"<pre><code>DataFrame_first()\n</code></pre>"},{"location":"man/DataFrame_first/#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_first/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$first()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_get_column/","title":"Get column (as one Series)","text":"<p>Source code</p>"},{"location":"man/DataFrame_get_column/#description","title":"Description","text":"<p>Extract a DataFrame column as a Polars series.</p>"},{"location":"man/DataFrame_get_column/#usage","title":"Usage","text":"<pre><code>DataFrame_get_column(name)\n</code></pre>"},{"location":"man/DataFrame_get_column/#arguments","title":"Arguments","text":"<code>name</code>  Name of the column to extract."},{"location":"man/DataFrame_get_column/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/DataFrame_get_column/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris[1:2, ])\ndf$get_column(\"Species\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: 'Species' [cat]\n#&gt; [\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt; ]\n</code></pre>"},{"location":"man/DataFrame_get_columns/","title":"Get columns (as Series)","text":"<p>Source code</p>"},{"location":"man/DataFrame_get_columns/#description","title":"Description","text":"<p>Extract all DataFrame columns as a list of Polars series.</p>"},{"location":"man/DataFrame_get_columns/#usage","title":"Usage","text":"<pre><code>DataFrame_get_columns\n</code></pre>"},{"location":"man/DataFrame_get_columns/#value","title":"Value","text":"<p>A list of series</p>"},{"location":"man/DataFrame_get_columns/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris[1:2, ])\ndf$get_columns()\n</code></pre> <pre><code>#&gt; $Sepal.Length\n#&gt; polars Series: shape: (2,)\n#&gt; Series: 'Sepal.Length' [f64]\n#&gt; [\n#&gt;  5.1\n#&gt;  4.9\n#&gt; ]\n#&gt; \n#&gt; $Sepal.Width\n#&gt; polars Series: shape: (2,)\n#&gt; Series: 'Sepal.Width' [f64]\n#&gt; [\n#&gt;  3.5\n#&gt;  3.0\n#&gt; ]\n#&gt; \n#&gt; $Petal.Length\n#&gt; polars Series: shape: (2,)\n#&gt; Series: 'Petal.Length' [f64]\n#&gt; [\n#&gt;  1.4\n#&gt;  1.4\n#&gt; ]\n#&gt; \n#&gt; $Petal.Width\n#&gt; polars Series: shape: (2,)\n#&gt; Series: 'Petal.Width' [f64]\n#&gt; [\n#&gt;  0.2\n#&gt;  0.2\n#&gt; ]\n#&gt; \n#&gt; $Species\n#&gt; polars Series: shape: (2,)\n#&gt; Series: 'Species' [cat]\n#&gt; [\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt; ]\n</code></pre>"},{"location":"man/DataFrame_glimpse/","title":"Glimpse values in a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_glimpse/#description","title":"Description","text":"<p>Glimpse values in a DataFrame</p>"},{"location":"man/DataFrame_glimpse/#usage","title":"Usage","text":"<pre><code>DataFrame_glimpse(..., return_as_string = FALSE)\n</code></pre>"},{"location":"man/DataFrame_glimpse/#arguments","title":"Arguments","text":"<code>\u2026</code>  not used  <code>return_as_string</code>  Boolean (default <code>FALSE</code>). If <code>TRUE</code>, return the output as a string."},{"location":"man/DataFrame_glimpse/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_glimpse/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$glimpse()\n</code></pre> <pre><code>#&gt; &amp; Sepal.Length &lt;f64&gt; 5.1, 4.9, 4.7, 4.6, 5, 5.4, 4.6, 5, 4.4, 4.9\n#&gt; &amp; Sepal.Width  &lt;f64&gt; 3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1\n#&gt; &amp; Petal.Length &lt;f64&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5\n#&gt; &amp; Petal.Width  &lt;f64&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1\n#&gt; &amp; Species      &lt;cat&gt; setosa, setosa, setosa, setosa, setosa, setosa, setosa, setosa, setosa, setosa\n</code></pre>"},{"location":"man/DataFrame_group_by/","title":"Group a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_group_by/#description","title":"Description","text":"<p>This doesn\u2019t modify the data but only stores information about the group structure. This structure can then be used by several functions (<code>$agg()</code>, <code>$filter()</code>, etc.).</p>"},{"location":"man/DataFrame_group_by/#usage","title":"Usage","text":"<pre><code>DataFrame_group_by(..., maintain_order = pl\\$options\\$maintain_order)\n</code></pre>"},{"location":"man/DataFrame_group_by/#arguments","title":"Arguments","text":"<code>\u2026</code>  Any Expr(s) or string(s) naming a column.  <code>maintain_order</code>  Keep the same order as the original <code>DataFrame</code>. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine. The default value can be changed with <code>pl$set_options(maintain_order = TRUE)</code>."},{"location":"man/DataFrame_group_by/#value","title":"Value","text":"<p>GroupBy (a DataFrame with special groupby methods like <code>$agg()</code>)</p>"},{"location":"man/DataFrame_group_by/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ngb = pl$DataFrame(\n  foo = c(\"one\", \"two\", \"two\", \"one\", \"two\"),\n  bar = c(5, 3, 2, 4, 1)\n)$group_by(\"foo\", maintain_order = TRUE)\n\ngb\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one \u2506 5.0 \u2502\n#&gt; \u2502 two \u2506 3.0 \u2502\n#&gt; \u2502 two \u2506 2.0 \u2502\n#&gt; \u2502 one \u2506 4.0 \u2502\n#&gt; \u2502 two \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; groups: [[1]]\n#&gt; [1] \"foo\"\n#&gt; \n#&gt; maintain order:  TRUE\n</code></pre> <pre><code>gb$agg(\n  pl$col(\"bar\")$sum()$name$suffix(\"_sum\"),\n  pl$col(\"bar\")$mean()$alias(\"bar_tail_sum\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar_sum \u2506 bar_tail_sum \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---          \u2502\n#&gt; \u2502 str \u2506 f64     \u2506 f64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one \u2506 9.0     \u2506 4.5          \u2502\n#&gt; \u2502 two \u2506 6.0     \u2506 2.0          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_head/","title":"Head of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_head/#description","title":"Description","text":"<p>Get the first <code>n</code> rows of the query.</p>"},{"location":"man/DataFrame_head/#usage","title":"Usage","text":"<pre><code>DataFrame_head(n)\n</code></pre>"},{"location":"man/DataFrame_head/#arguments","title":"Arguments","text":"<code>n</code>  Positive number not larger than 2^32."},{"location":"man/DataFrame_head/#details","title":"Details","text":"<p>Any number will converted to u32. Negative raises error.</p>"},{"location":"man/DataFrame_head/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_height/","title":"Number of rows of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_height/#description","title":"Description","text":"<p>Get the number of rows (height) of a DataFrame</p>"},{"location":"man/DataFrame_height/#usage","title":"Usage","text":"<pre><code>DataFrame_height()\n</code></pre>"},{"location":"man/DataFrame_height/#value","title":"Value","text":"<p>The number of rows of the DataFrame</p>"},{"location":"man/DataFrame_height/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$height\n</code></pre> <pre><code>#&gt; [1] 150\n</code></pre>"},{"location":"man/DataFrame_join/","title":"Join DataFrames","text":"<p>Source code</p>"},{"location":"man/DataFrame_join/#description","title":"Description","text":"<p>This function can do both mutating joins (adding columns based on matching observations, for example with <code>how = \u201cleft\u201d</code>) and filtering joins (keeping observations based on matching observations, for example with <code>how = \u201cinner\u201d</code>).</p>"},{"location":"man/DataFrame_join/#usage","title":"Usage","text":"<pre><code>DataFrame_join(\n  other,\n  left_on = NULL,\n  right_on = NULL,\n  on = NULL,\n  how = c(\"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\"),\n  suffix = \"_right\",\n  allow_parallel = TRUE,\n  force_parallel = FALSE\n)\n</code></pre>"},{"location":"man/DataFrame_join/#arguments","title":"Arguments","text":"<code>other</code>  DataFrame  <code>left_on</code>, <code>right_on</code>  Same as <code>on</code> but only for the left or the right DataFrame. They must have the same length.  <code>on</code>  Either a vector of column names or a list of expressions and/or strings. Use <code>left_on</code> and <code>right_on</code> if the column names to match on are different between the two DataFrames.  <code>how</code>  One of the following methods: \"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\".  <code>suffix</code>  Suffix to add to duplicated column names.  <code>allow_parallel</code>  Boolean.  <code>force_parallel</code>  Boolean."},{"location":"man/DataFrame_join/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_join/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# inner join by default\ndf1 = pl$DataFrame(list(key = 1:3, payload = c(\"f\", \"i\", NA)))\ndf2 = pl$DataFrame(list(key = c(3L, 4L, 5L, NA_integer_)))\ndf1$join(other = df2, on = \"key\")\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 key \u2506 payload \u2502\n#&gt; \u2502 --- \u2506 ---     \u2502\n#&gt; \u2502 i32 \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># cross join\ndf1 = pl$DataFrame(x = letters[1:3])\ndf2 = pl$DataFrame(y = 1:4)\ndf1$join(other = df2, how = \"cross\")\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 1   \u2502\n#&gt; \u2502 a   \u2506 2   \u2502\n#&gt; \u2502 a   \u2506 3   \u2502\n#&gt; \u2502 a   \u2506 4   \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026   \u2502\n#&gt; \u2502 c   \u2506 1   \u2502\n#&gt; \u2502 c   \u2506 2   \u2502\n#&gt; \u2502 c   \u2506 3   \u2502\n#&gt; \u2502 c   \u2506 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_join_asof/","title":"Perform joins on nearest keys","text":"<p>Source code</p>"},{"location":"man/DataFrame_join_asof/#description","title":"Description","text":"<p>This is similar to a left-join except that we match on nearest key rather than equal keys.</p>"},{"location":"man/DataFrame_join_asof/#usage","title":"Usage","text":"<pre><code>DataFrame_join_asof(\n  other,\n  ...,\n  left_on = NULL,\n  right_on = NULL,\n  on = NULL,\n  by_left = NULL,\n  by_right = NULL,\n  by = NULL,\n  strategy = \"backward\",\n  suffix = \"_right\",\n  tolerance = NULL,\n  allow_parallel = TRUE,\n  force_parallel = FALSE\n)\n</code></pre>"},{"location":"man/DataFrame_join_asof/#arguments","title":"Arguments","text":"<code>other</code>  DataFrame or LazyFrame  <code>\u2026</code>  Not used, blocks use of further positional arguments  <code>left_on</code>, <code>right_on</code>  Same as <code>on</code> but only for the left or the right DataFrame. They must have the same length.  <code>on</code>  Either a vector of column names or a list of expressions and/or strings. Use <code>left_on</code> and <code>right_on</code> if the column names to match on are different between the two DataFrames.  <code>by_left</code>, <code>by_right</code>  Same as <code>by</code> but only for the left or the right table. They must have the same length.  <code>by</code>  Join on these columns before performing asof join. Either a vector of column names or a list of expressions and/or strings. Use <code>left_by</code> and <code>right_by</code> if the column names to match on are different between the two tables.  <code>strategy</code>   Strategy for where to find match:  <ul> <li>  \"backward\" (default): search for the last row in the right table whose <code>on</code> key is less than or equal to the left key.  </li> <li>  \"forward\": search for the first row in the right table whose <code>on</code> key is greater than or equal to the left key.  </li> <li>  \"nearest\": search for the last row in the right table whose value is nearest to the left key. String keys are not currently supported for a nearest search.  </li> </ul> <code>suffix</code>  Suffix to add to duplicated column names.  <code>tolerance</code>   Numeric tolerance. By setting this the join will only be done if the near keys are within this distance. If an asof join is done on columns of dtype \"Date\", \"Datetime\", \"Duration\" or \"Time\" you can use the following values:  <pre>- 1ns   (1 nanosecond)\n- 1us   (1 microsecond)\n- 1ms   (1 millisecond)\n- 1s    (1 second)\n- 1m    (1 minute)\n- 1h    (1 hour)\n- 1d    (1 day)\n- 1w    (1 week)\n- 1mo   (1 calendar month) // currently not available, as interval is not fixed\n- 1y    (1 calendar year)  // currently not available, as interval is not fixed\n- 1i    (1 index count)\n</pre>  Or combine them: \"3d12h4m25s\" \\# 3 days, 12 hours, 4 minutes, and 25 seconds  There may be a circumstance where R types are not sufficient to express a numeric tolerance. In that case, you can use the expression syntax like <code>tolerance = pl$lit(42)$cast(pl$Uint64)</code> <code>allow_parallel</code>  Boolean.  <code>force_parallel</code>  Boolean."},{"location":"man/DataFrame_join_asof/#details","title":"Details","text":"<p>Both tables (DataFrames or LazyFrames) must be sorted by the asof_join key.</p>"},{"location":"man/DataFrame_join_asof/#value","title":"Value","text":"<p>New joined DataFrame</p>"},{"location":"man/DataFrame_join_asof/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create two DataFrames to join asof\ngdp = pl$DataFrame(\n  date = as.Date(c(\"2015-1-1\", \"2016-1-1\", \"2017-5-1\", \"2018-1-1\", \"2019-1-1\")),\n  gdp = c(4321, 4164, 4411, 4566, 4696),\n  group = c(\"b\", \"a\", \"a\", \"b\", \"b\")\n)\n\npop = pl$DataFrame(\n  date = as.Date(c(\"2016-5-12\", \"2017-5-12\", \"2018-5-12\", \"2019-5-12\")),\n  population = c(82.19, 82.66, 83.12, 83.52),\n  group = c(\"b\", \"b\", \"a\", \"a\")\n)\n\n# optional make sure tables are already sorted with \"on\" join-key\ngdp = gdp$sort(\"date\")\npop = pop$sort(\"date\")\n\n# Left-join_asof DataFrame pop with gdp on \"date\"\n# Look backward in gdp to find closest matching date\npop$join_asof(gdp, on = \"date\", strategy = \"backward\")\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4164.0 \u2506 a           \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4566.0 \u2506 b           \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 4696.0 \u2506 b           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># .... and forward\npop$join_asof(gdp, on = \"date\", strategy = \"forward\")\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4566.0 \u2506 b           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4696.0 \u2506 b           \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># join by a group: \"only look within within group\"\npop$join_asof(gdp, on = \"date\", by = \"group\", strategy = \"backward\")\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4321.0 \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4321.0 \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4411.0 \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 4411.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># only look 2 weeks and 2 days back\npop$join_asof(gdp, on = \"date\", strategy = \"backward\", tolerance = \"2w2d\")\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># only look 11 days back (numeric tolerance depends on polars type, &lt;date&gt; is in days)\npop$join_asof(gdp, on = \"date\", strategy = \"backward\", tolerance = 11)\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_last/","title":"Get the last row of the DataFrame.","text":"<p>Source code</p>"},{"location":"man/DataFrame_last/#description","title":"Description","text":"<p>Get the last row of the DataFrame.</p>"},{"location":"man/DataFrame_last/#usage","title":"Usage","text":"<pre><code>DataFrame_last()\n</code></pre>"},{"location":"man/DataFrame_last/#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_last/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$last()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_lazy/","title":"Convert an existing DataFrame to a LazyFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_lazy/#description","title":"Description","text":"<p>Start a new lazy query from a DataFrame.</p>"},{"location":"man/DataFrame_lazy/#usage","title":"Usage","text":"<pre><code>DataFrame_lazy\n</code></pre>"},{"location":"man/DataFrame_lazy/#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/DataFrame_lazy/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$lazy()\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/DataFrame_limit/","title":"Limit a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_limit/#description","title":"Description","text":"<p>Take some maximum number of rows.</p>"},{"location":"man/DataFrame_limit/#usage","title":"Usage","text":"<pre><code>DataFrame_limit(n)\n</code></pre>"},{"location":"man/DataFrame_limit/#arguments","title":"Arguments","text":"<code>n</code>  Positive number not larger than 2^32."},{"location":"man/DataFrame_limit/#details","title":"Details","text":"<p>Any number will converted to u32. Negative raises error.</p>"},{"location":"man/DataFrame_limit/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_limit/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$limit(6)\n</code></pre> <pre><code>#&gt; shape: (6, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.4          \u2506 3.9         \u2506 1.7          \u2506 0.4         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_max/","title":"Max","text":"<p>Source code</p>"},{"location":"man/DataFrame_max/#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to their maximum value.</p>"},{"location":"man/DataFrame_max/#usage","title":"Usage","text":"<pre><code>DataFrame_max()\n</code></pre>"},{"location":"man/DataFrame_max/#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$max()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 33.9 \u2506 8.0 \u2506 472.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_mean/","title":"Mean","text":"<p>Source code</p>"},{"location":"man/DataFrame_mean/#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to their mean value.</p>"},{"location":"man/DataFrame_mean/#usage","title":"Usage","text":"<pre><code>DataFrame_mean()\n</code></pre>"},{"location":"man/DataFrame_mean/#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_mean/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$mean()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl    \u2506 disp       \u2506 hp       \u2506 \u2026 \u2506 vs     \u2506 am      \u2506 gear   \u2506 carb   \u2502\n#&gt; \u2502 ---       \u2506 ---    \u2506 ---        \u2506 ---      \u2506   \u2506 ---    \u2506 ---     \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 f64       \u2506 f64    \u2506 f64        \u2506 f64      \u2506   \u2506 f64    \u2506 f64     \u2506 f64    \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 20.090625 \u2506 6.1875 \u2506 230.721875 \u2506 146.6875 \u2506 \u2026 \u2506 0.4375 \u2506 0.40625 \u2506 3.6875 \u2506 2.8125 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_median/","title":"Median","text":"<p>Source code</p>"},{"location":"man/DataFrame_median/#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to their median value.</p>"},{"location":"man/DataFrame_median/#usage","title":"Usage","text":"<pre><code>DataFrame_median()\n</code></pre>"},{"location":"man/DataFrame_median/#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_median/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$median()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 6.0 \u2506 196.3 \u2506 123.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_melt/","title":"Unpivot a Frame from wide to long format","text":"<p>Source code</p>"},{"location":"man/DataFrame_melt/#description","title":"Description","text":"<p>Unpivot a Frame from wide to long format</p>"},{"location":"man/DataFrame_melt/#usage","title":"Usage","text":"<pre><code>DataFrame_melt(\n  id_vars = NULL,\n  value_vars = NULL,\n  variable_name = NULL,\n  value_name = NULL\n)\n</code></pre>"},{"location":"man/DataFrame_melt/#arguments","title":"Arguments","text":"<code>id_vars</code>  Columns to use as identifier variables.  <code>value_vars</code>  Values to use as identifier variables. If <code>value_vars</code> is empty all columns that are not in <code>id_vars</code> will be used.  <code>variable_name</code>  Name to give to the new column containing the names of the melted columns. Defaults to \"variable\".  <code>value_name</code>  Name to give to the new column containing the values of the melted columns. Defaults to \"value\""},{"location":"man/DataFrame_melt/#details","title":"Details","text":"<p>Optionally leaves identifiers set.</p> <p>This function is useful to massage a Frame into a format where one or more columns are identifier variables (id_vars), while all other columns, considered measured variables (value_vars), are \"unpivoted\" to the row axis, leaving just two non-identifier columns, \u2018variable\u2019 and \u2018value\u2019.</p>"},{"location":"man/DataFrame_melt/#value","title":"Value","text":"<p>A new <code>DataFrame</code></p>"},{"location":"man/DataFrame_melt/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(\"x\", \"y\", \"z\"),\n  b = c(1, 3, 5),\n  c = c(2, 4, 6),\n  d = c(7, 8, 9)\n)\ndf$melt(id_vars = \"a\", value_vars = c(\"b\", \"c\", \"d\"))\n</code></pre> <pre><code>#&gt; shape: (9, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 variable \u2506 value \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 str      \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 x   \u2506 b        \u2506 1.0   \u2502\n#&gt; \u2502 y   \u2506 b        \u2506 3.0   \u2502\n#&gt; \u2502 z   \u2506 b        \u2506 5.0   \u2502\n#&gt; \u2502 x   \u2506 c        \u2506 2.0   \u2502\n#&gt; \u2502 y   \u2506 c        \u2506 4.0   \u2502\n#&gt; \u2502 z   \u2506 c        \u2506 6.0   \u2502\n#&gt; \u2502 x   \u2506 d        \u2506 7.0   \u2502\n#&gt; \u2502 y   \u2506 d        \u2506 8.0   \u2502\n#&gt; \u2502 z   \u2506 d        \u2506 9.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_min/","title":"Min","text":"<p>Source code</p>"},{"location":"man/DataFrame_min/#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to their minimum value.</p>"},{"location":"man/DataFrame_min/#usage","title":"Usage","text":"<pre><code>DataFrame_min()\n</code></pre>"},{"location":"man/DataFrame_min/#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$min()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp \u2506 hp   \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---  \u2506 ---  \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64  \u2506 f64  \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 4.0 \u2506 71.1 \u2506 52.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_n_chunks/","title":"Number of chunks of the Series in a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_n_chunks/#description","title":"Description","text":"<p>Number of chunks (memory allocations) for all or first Series in a DataFrame.</p>"},{"location":"man/DataFrame_n_chunks/#usage","title":"Usage","text":"<pre><code>DataFrame_n_chunks(strategy = \"all\")\n</code></pre>"},{"location":"man/DataFrame_n_chunks/#arguments","title":"Arguments","text":"<code>strategy</code>  Either <code>\u201call\u201d</code> or <code>\u201cfirst\u201d</code>. <code>\u201cfirst\u201d</code> only returns chunks for the first Series."},{"location":"man/DataFrame_n_chunks/#details","title":"Details","text":"<p>A DataFrame is a vector of Series. Each Series in rust-polars is a wrapper around a ChunkedArray, which is like a virtual contiguous vector physically backed by an ordered set of chunks. Each chunk of values has a contiguous memory layout and is an arrow array. Arrow arrays are a fast, thread-safe and cross-platform memory layout.</p> <p>In R, combining with <code>c()</code> or <code>rbind()</code> requires immediate vector re-allocation to place vector values in contiguous memory. This is slow and memory consuming, and it is why repeatedly appending to a vector in R is discouraged.</p> <p>In polars, when we concatenate or append to Series or DataFrame, the re-allocation can be avoided or delayed by simply appending chunks to each individual Series. However, if chunks become many and small or are misaligned across Series, this can hurt the performance of subsequent operations.</p> <p>Most places in the polars api where chunking could occur, the user have to typically actively opt-out by setting an argument <code>rechunk = FALSE</code>.</p>"},{"location":"man/DataFrame_n_chunks/#value","title":"Value","text":"<p>A real vector of chunk counts per Series.</p>"},{"location":"man/DataFrame_n_chunks/#see-also","title":"See Also","text":"<p><code>\\&lt;DataFrame&gt;$rechunk()</code></p>"},{"location":"man/DataFrame_n_chunks/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create DataFrame with misaligned chunks\ndf = pl$concat(\n  1:10, # single chunk\n  pl$concat(1:5, 1:5, rechunk = FALSE, how = \"vertical\")$rename(\"b\"), # two chunks\n  how = \"horizontal\"\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (10, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1   \u2502\n#&gt; \u2502 2   \u2506 2   \u2502\n#&gt; \u2502 3   \u2506 3   \u2502\n#&gt; \u2502 4   \u2506 4   \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026   \u2502\n#&gt; \u2502 7   \u2506 2   \u2502\n#&gt; \u2502 8   \u2506 3   \u2502\n#&gt; \u2502 9   \u2506 4   \u2502\n#&gt; \u2502 10  \u2506 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 2\n</code></pre> <pre><code># rechunk a chunked DataFrame\ndf$rechunk()$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 1\n</code></pre> <pre><code># rechunk is not an in-place operation\ndf$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 2\n</code></pre> <pre><code># The following toy example emulates the Series \"chunkyness\" in R. Here it a\n# S3-classed list with same type of vectors and where have all relevant S3\n# generics implemented to make behave as if it was a regular vector.\n\"+.chunked_vector\" = \\(x, y) structure(list(unlist(x) + unlist(y)), class = \"chunked_vector\")\nprint.chunked_vector = \\(x, ...) print(unlist(x), ...)\nc.chunked_vector = \\(...) {\n  structure(do.call(c, lapply(list(...), unclass)), class = \"chunked_vector\")\n}\nrechunk = \\(x) structure(unlist(x), class = \"chunked_vector\")\nx = structure(list(1:4, 5L), class = \"chunked_vector\")\nx\n</code></pre> <pre><code>#&gt; [1] 1 2 3 4 5\n</code></pre> <pre><code>x + 5:1\n</code></pre> <pre><code>#&gt; [1] 6 6 6 6 6\n</code></pre> <pre><code>lapply(x, tracemem) # trace chunks to verify no re-allocation\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] \"&lt;0x557983ced3a0&gt;\"\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"&lt;0x557980b14c28&gt;\"\n</code></pre> <pre><code>z = c(x, x)\nz # looks like a plain vector\n</code></pre> <pre><code>#&gt;  [1] 1 2 3 4 5 1 2 3 4 5\n</code></pre> <pre><code>lapply(z, tracemem) # mem allocation  in z are the same from x\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] \"&lt;0x557983ced3a0&gt;\"\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"&lt;0x557980b14c28&gt;\"\n#&gt; \n#&gt; [[3]]\n#&gt; [1] \"&lt;0x557983ced3a0&gt;\"\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"&lt;0x557980b14c28&gt;\"\n</code></pre> <pre><code>str(z)\n</code></pre> <pre><code>#&gt; List of 4\n#&gt;  $ : int [1:4] 1 2 3 4\n#&gt;  $ : int 5\n#&gt;  $ : int [1:4] 1 2 3 4\n#&gt;  $ : int 5\n#&gt;  - attr(*, \"class\")= chr \"chunked_vector\"\n</code></pre> <pre><code>z = rechunk(z)\nstr(z)\n</code></pre> <pre><code>#&gt;  'chunked_vector' int [1:10] 1 2 3 4 5 1 2 3 4 5\n</code></pre>"},{"location":"man/DataFrame_null_count/","title":"Count null values","text":"<p>Source code</p>"},{"location":"man/DataFrame_null_count/#description","title":"Description","text":"<p>Create a new DataFrame that shows the null (which correspond to <code>NA</code> in R) counts per column.</p>"},{"location":"man/DataFrame_null_count/#usage","title":"Usage","text":"<pre><code>DataFrame_null_count\n</code></pre>"},{"location":"man/DataFrame_null_count/#format","title":"Format","text":"<p>function</p>"},{"location":"man/DataFrame_null_count/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_null_count/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nx = mtcars\nx[1, 2:3] = NA\npl$DataFrame(x)$null_count()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg \u2506 cyl \u2506 disp \u2506 hp  \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2506 --- \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 u32 \u2506 u32 \u2506 u32  \u2506 u32 \u2506   \u2506 u32 \u2506 u32 \u2506 u32  \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 1   \u2506 1    \u2506 0   \u2506 \u2026 \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_pivot/","title":"Pivot data from long to wide","text":"<p>Source code</p>"},{"location":"man/DataFrame_pivot/#description","title":"Description","text":"<p>Pivot data from long to wide</p>"},{"location":"man/DataFrame_pivot/#usage","title":"Usage","text":"<pre><code>DataFrame_pivot(\n  values,\n  index,\n  columns,\n  aggregate_function = NULL,\n  maintain_order = TRUE,\n  sort_columns = FALSE,\n  separator = \"_\"\n)\n</code></pre>"},{"location":"man/DataFrame_pivot/#arguments","title":"Arguments","text":"<code>values</code>  Column values to aggregate. Can be multiple columns if the <code>columns</code> arguments contains multiple columns as well.  <code>index</code>  One or multiple keys to group by.  <code>columns</code>  Name of the column(s) whose values will be used as the header of the output DataFrame.  <code>aggregate_function</code>   One of:  <ul> <li>  string indicating the expressions to aggregate with, such as \u2018first\u2019, \u2018sum\u2019, \u2018max\u2019, \u2018min\u2019, \u2018mean\u2019, \u2018median\u2019, \u2018last\u2019, \u2018count\u2019),  </li> <li>  an Expr e.g.\u00a0<code>pl$element()$sum()</code> </li> </ul> <code>maintain_order</code>  Keep the same order as the original <code>DataFrame</code>. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine. The default value can be changed with <code>pl$set_options(maintain_order = TRUE)</code>.  <code>sort_columns</code>  Sort the transposed columns by name. Default is by order of discovery.  <code>separator</code>  Used as separator/delimiter in generated column names."},{"location":"man/DataFrame_pivot/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_pivot/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  foo = c(\"one\", \"one\", \"one\", \"two\", \"two\", \"two\"),\n  bar = c(\"A\", \"B\", \"C\", \"A\", \"B\", \"C\"),\n  baz = c(1, 2, 3, 4, 5, 6)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 baz \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 str \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one \u2506 A   \u2506 1.0 \u2502\n#&gt; \u2502 one \u2506 B   \u2506 2.0 \u2502\n#&gt; \u2502 one \u2506 C   \u2506 3.0 \u2502\n#&gt; \u2502 two \u2506 A   \u2506 4.0 \u2502\n#&gt; \u2502 two \u2506 B   \u2506 5.0 \u2502\n#&gt; \u2502 two \u2506 C   \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$pivot(\n  values = \"baz\", index = \"foo\", columns = \"bar\"\n)\n</code></pre> <pre><code>#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 A   \u2506 B   \u2506 C   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str \u2506 f64 \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one \u2506 1.0 \u2506 2.0 \u2506 3.0 \u2502\n#&gt; \u2502 two \u2506 4.0 \u2506 5.0 \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Run an expression as aggregation function\ndf = pl$DataFrame(\n  col1 = c(\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"),\n  col2 = c(\"x\", \"x\", \"x\", \"x\", \"y\", \"y\"),\n  col3 = c(6, 7, 3, 2, 5, 7)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col1 \u2506 col2 \u2506 col3 \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 str  \u2506 str  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a    \u2506 x    \u2506 6.0  \u2502\n#&gt; \u2502 a    \u2506 x    \u2506 7.0  \u2502\n#&gt; \u2502 a    \u2506 x    \u2506 3.0  \u2502\n#&gt; \u2502 b    \u2506 x    \u2506 2.0  \u2502\n#&gt; \u2502 b    \u2506 y    \u2506 5.0  \u2502\n#&gt; \u2502 b    \u2506 y    \u2506 7.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$pivot(\n  index = \"col1\",\n  columns = \"col2\",\n  values = \"col3\",\n  aggregate_function = pl$element()$tanh()$mean()\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 col1 \u2506 x        \u2506 y        \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 str  \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a    \u2506 0.998347 \u2506 null     \u2502\n#&gt; \u2502 b    \u2506 0.964028 \u2506 0.999954 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_quantile/","title":"Quantile","text":"<p>Source code</p>"},{"location":"man/DataFrame_quantile/#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to a unique quantile value. Use <code>$describe()</code> to specify several quantiles.</p>"},{"location":"man/DataFrame_quantile/#usage","title":"Usage","text":"<pre><code>DataFrame_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"man/DataFrame_quantile/#arguments","title":"Arguments","text":"<code>quantile</code>  Numeric of length 1 between 0 and 1.  <code>interpolation</code>  Interpolation method: \"nearest\", \"higher\", \"lower\", \"midpoint\", or \"linear\"."},{"location":"man/DataFrame_quantile/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_quantile/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$quantile(.4)\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_rechunk/","title":"Rechunk a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_rechunk/#description","title":"Description","text":"<p>Rechunking re-allocates any \"chunked\" memory allocations to speed-up e.g.\u00a0vectorized operations.</p>"},{"location":"man/DataFrame_rechunk/#usage","title":"Usage","text":"<pre><code>DataFrame_rechunk()\n</code></pre>"},{"location":"man/DataFrame_rechunk/#details","title":"Details","text":"<p>A DataFrame is a vector of Series. Each Series in rust-polars is a wrapper around a ChunkedArray, which is like a virtual contiguous vector physically backed by an ordered set of chunks. Each chunk of values has a contiguous memory layout and is an arrow array. Arrow arrays are a fast, thread-safe and cross-platform memory layout.</p> <p>In R, combining with <code>c()</code> or <code>rbind()</code> requires immediate vector re-allocation to place vector values in contiguous memory. This is slow and memory consuming, and it is why repeatedly appending to a vector in R is discouraged.</p> <p>In polars, when we concatenate or append to Series or DataFrame, the re-allocation can be avoided or delayed by simply appending chunks to each individual Series. However, if chunks become many and small or are misaligned across Series, this can hurt the performance of subsequent operations.</p> <p>Most places in the polars api where chunking could occur, the user have to typically actively opt-out by setting an argument <code>rechunk = FALSE</code>.</p>"},{"location":"man/DataFrame_rechunk/#value","title":"Value","text":"<p>A DataFrame</p>"},{"location":"man/DataFrame_rechunk/#see-also","title":"See Also","text":"<p><code>\\&lt;DataFrame&gt;$n_chunks()</code></p>"},{"location":"man/DataFrame_rechunk/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create DataFrame with misaligned chunks\ndf = pl$concat(\n  1:10, # single chunk\n  pl$concat(1:5, 1:5, rechunk = FALSE, how = \"vertical\")$rename(\"b\"), # two chunks\n  how = \"horizontal\"\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (10, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1   \u2502\n#&gt; \u2502 2   \u2506 2   \u2502\n#&gt; \u2502 3   \u2506 3   \u2502\n#&gt; \u2502 4   \u2506 4   \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026   \u2502\n#&gt; \u2502 7   \u2506 2   \u2502\n#&gt; \u2502 8   \u2506 3   \u2502\n#&gt; \u2502 9   \u2506 4   \u2502\n#&gt; \u2502 10  \u2506 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 2\n</code></pre> <pre><code># rechunk a chunked DataFrame\ndf$rechunk()$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 1\n</code></pre> <pre><code># rechunk is not an in-place operation\ndf$n_chunks()\n</code></pre> <pre><code>#&gt; [1] 1 2\n</code></pre> <pre><code># The following toy example emulates the Series \"chunkyness\" in R. Here it a\n# S3-classed list with same type of vectors and where have all relevant S3\n# generics implemented to make behave as if it was a regular vector.\n\"+.chunked_vector\" = \\(x, y) structure(list(unlist(x) + unlist(y)), class = \"chunked_vector\")\nprint.chunked_vector = \\(x, ...) print(unlist(x), ...)\nc.chunked_vector = \\(...) {\n  structure(do.call(c, lapply(list(...), unclass)), class = \"chunked_vector\")\n}\nrechunk = \\(x) structure(unlist(x), class = \"chunked_vector\")\nx = structure(list(1:4, 5L), class = \"chunked_vector\")\nx\n</code></pre> <pre><code>#&gt; [1] 1 2 3 4 5\n</code></pre> <pre><code>x + 5:1\n</code></pre> <pre><code>#&gt; [1] 6 6 6 6 6\n</code></pre> <pre><code>lapply(x, tracemem) # trace chunks to verify no re-allocation\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] \"&lt;0x55a3e8ea90e0&gt;\"\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"&lt;0x55a3e5da76d8&gt;\"\n</code></pre> <pre><code>z = c(x, x)\nz # looks like a plain vector\n</code></pre> <pre><code>#&gt;  [1] 1 2 3 4 5 1 2 3 4 5\n</code></pre> <pre><code>lapply(z, tracemem) # mem allocation  in z are the same from x\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] \"&lt;0x55a3e8ea90e0&gt;\"\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"&lt;0x55a3e5da76d8&gt;\"\n#&gt; \n#&gt; [[3]]\n#&gt; [1] \"&lt;0x55a3e8ea90e0&gt;\"\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"&lt;0x55a3e5da76d8&gt;\"\n</code></pre> <pre><code>str(z)\n</code></pre> <pre><code>#&gt; List of 4\n#&gt;  $ : int [1:4] 1 2 3 4\n#&gt;  $ : int 5\n#&gt;  $ : int [1:4] 1 2 3 4\n#&gt;  $ : int 5\n#&gt;  - attr(*, \"class\")= chr \"chunked_vector\"\n</code></pre> <pre><code>z = rechunk(z)\nstr(z)\n</code></pre> <pre><code>#&gt;  'chunked_vector' int [1:10] 1 2 3 4 5 1 2 3 4 5\n</code></pre>"},{"location":"man/DataFrame_rename/","title":"Rename columns of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_rename/#description","title":"Description","text":"<p>Rename columns of a DataFrame</p>"},{"location":"man/DataFrame_rename/#usage","title":"Usage","text":"<pre><code>DataFrame_rename(...)\n</code></pre>"},{"location":"man/DataFrame_rename/#arguments","title":"Arguments","text":"<code>\u2026</code>   One of the following:  <ul> <li>  params like <code>new_name = \u201cold_name\u201d</code> to rename selected variables.  </li> <li>  as above but with params wrapped in a list  </li> </ul>"},{"location":"man/DataFrame_rename/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_rename/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(mtcars)\n\ndf$rename(miles_per_gallon = \"mpg\", horsepower = \"hp\")\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 miles_per_gallon \u2506 cyl \u2506 disp  \u2506 horsepower \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---              \u2506 --- \u2506 ---   \u2506 ---        \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64              \u2506 f64 \u2506 f64   \u2506 f64        \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8             \u2506 4.0 \u2506 108.0 \u2506 93.0       \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4             \u2506 6.0 \u2506 258.0 \u2506 110.0      \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026                \u2506 \u2026   \u2506 \u2026     \u2506 \u2026          \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8             \u2506 8.0 \u2506 351.0 \u2506 264.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7             \u2506 6.0 \u2506 145.0 \u2506 175.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0             \u2506 8.0 \u2506 301.0 \u2506 335.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4             \u2506 4.0 \u2506 121.0 \u2506 109.0      \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>replacements = list(miles_per_gallon = \"mpg\", horsepower = \"hp\")\ndf$rename(replacements)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 miles_per_gallon \u2506 cyl \u2506 disp  \u2506 horsepower \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---              \u2506 --- \u2506 ---   \u2506 ---        \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64              \u2506 f64 \u2506 f64   \u2506 f64        \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8             \u2506 4.0 \u2506 108.0 \u2506 93.0       \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4             \u2506 6.0 \u2506 258.0 \u2506 110.0      \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026                \u2506 \u2026   \u2506 \u2026     \u2506 \u2026          \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8             \u2506 8.0 \u2506 351.0 \u2506 264.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7             \u2506 6.0 \u2506 145.0 \u2506 175.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0             \u2506 8.0 \u2506 301.0 \u2506 335.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4             \u2506 4.0 \u2506 121.0 \u2506 109.0      \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_reverse/","title":"Reverse","text":"<p>Source code</p>"},{"location":"man/DataFrame_reverse/#description","title":"Description","text":"<p>Reverse the DataFrame (the last row becomes the first one, etc.).</p>"},{"location":"man/DataFrame_reverse/#usage","title":"Usage","text":"<pre><code>DataFrame_reverse()\n</code></pre>"},{"location":"man/DataFrame_reverse/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_reverse/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$reverse()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_sample/","title":"Take a sample of rows from a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_sample/#description","title":"Description","text":"<p>Take a sample of rows from a DataFrame</p>"},{"location":"man/DataFrame_sample/#usage","title":"Usage","text":"<pre><code>DataFrame_sample(\n  n = NULL,\n  fraction = NULL,\n  with_replacement = FALSE,\n  shuffle = FALSE,\n  seed = NULL\n)\n</code></pre>"},{"location":"man/DataFrame_sample/#arguments","title":"Arguments","text":"<code>n</code>  Number of rows to return. Cannot be used with <code>fraction</code>.  <code>fraction</code>  Fraction of rows to return (between 0 and 1). Cannot be used with <code>n</code>.  <code>with_replacement</code>  Allow values to be sampled more than once.  <code>shuffle</code>  If <code>TRUE</code>, the order of the sampled rows will be shuffled. If <code>FALSE</code> (default), the order of the returned rows will be neither stable nor fully random.  <code>seed</code>  Seed for the random number generator. If set to <code>NULL</code> (default), a random seed is generated for each sample operation."},{"location":"man/DataFrame_sample/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_sample/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris)\ndf$sample(n = 20)\n</code></pre> <pre><code>#&gt; shape: (20, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species    \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---        \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 4.2          \u2506 1.5         \u2506 versicolor \u2502\n#&gt; \u2502 6.4          \u2506 2.9         \u2506 4.3          \u2506 1.3         \u2506 versicolor \u2502\n#&gt; \u2502 5.7          \u2506 2.5         \u2506 5.0          \u2506 2.0         \u2506 virginica  \u2502\n#&gt; \u2502 6.3          \u2506 3.3         \u2506 4.7          \u2506 1.6         \u2506 versicolor \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026          \u2502\n#&gt; \u2502 5.0          \u2506 3.0         \u2506 1.6          \u2506 0.2         \u2506 setosa     \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.5          \u2506 1.8         \u2506 virginica  \u2502\n#&gt; \u2502 7.0          \u2506 3.2         \u2506 4.7          \u2506 1.4         \u2506 versicolor \u2502\n#&gt; \u2502 4.9          \u2506 3.1         \u2506 1.5          \u2506 0.1         \u2506 setosa     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sample(frac = 0.1)\n</code></pre> <pre><code>#&gt; shape: (15, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species    \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---        \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.4          \u2506 2.8         \u2506 5.6          \u2506 2.2         \u2506 virginica  \u2502\n#&gt; \u2502 7.0          \u2506 3.2         \u2506 4.7          \u2506 1.4         \u2506 versicolor \u2502\n#&gt; \u2502 6.1          \u2506 3.0         \u2506 4.9          \u2506 1.8         \u2506 virginica  \u2502\n#&gt; \u2502 4.9          \u2506 2.5         \u2506 4.5          \u2506 1.7         \u2506 virginica  \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026          \u2502\n#&gt; \u2502 6.2          \u2506 2.8         \u2506 4.8          \u2506 1.8         \u2506 virginica  \u2502\n#&gt; \u2502 6.6          \u2506 3.0         \u2506 4.4          \u2506 1.4         \u2506 versicolor \u2502\n#&gt; \u2502 5.8          \u2506 2.7         \u2506 4.1          \u2506 1.0         \u2506 versicolor \u2502\n#&gt; \u2502 6.3          \u2506 2.7         \u2506 4.9          \u2506 1.8         \u2506 virginica  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_select/","title":"Select and modify columns of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_select/#description","title":"Description","text":"<p>Similar to <code>dplyr::mutate()</code>. However, it discards unmentioned columns (like <code>.()</code> in <code>data.table</code>).</p>"},{"location":"man/DataFrame_select/#usage","title":"Usage","text":"<pre><code>DataFrame_select(...)\n</code></pre>"},{"location":"man/DataFrame_select/#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to keep. Those can be expressions (e.g <code>pl$col(\u201ca\u201d)</code>), column names (e.g <code>\u201ca\u201d</code>), or list containing expressions or column names (e.g <code>list(pl$col(\u201ca\u201d))</code>)."},{"location":"man/DataFrame_select/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_select/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$select(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\n</code></pre> <pre><code>#&gt; shape: (150, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 abs_SL \u2506 add_2_SL \u2502\n#&gt; \u2502 ---    \u2506 ---      \u2502\n#&gt; \u2502 f64    \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1    \u2506 7.1      \u2502\n#&gt; \u2502 4.9    \u2506 6.9      \u2502\n#&gt; \u2502 4.7    \u2506 6.7      \u2502\n#&gt; \u2502 4.6    \u2506 6.6      \u2502\n#&gt; \u2502 \u2026      \u2506 \u2026        \u2502\n#&gt; \u2502 6.3    \u2506 8.3      \u2502\n#&gt; \u2502 6.5    \u2506 8.5      \u2502\n#&gt; \u2502 6.2    \u2506 8.2      \u2502\n#&gt; \u2502 5.9    \u2506 7.9      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_shape/","title":"Dimensions of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_shape/#description","title":"Description","text":"<p>Get shape/dimensions of DataFrame</p>"},{"location":"man/DataFrame_shape/#usage","title":"Usage","text":"<pre><code>DataFrame_shape()\n</code></pre>"},{"location":"man/DataFrame_shape/#value","title":"Value","text":"<p>Numeric vector of length two with the number of rows and the number of columns.</p>"},{"location":"man/DataFrame_shape/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$shape\n</code></pre> <pre><code>#&gt; [1] 150   5\n</code></pre>"},{"location":"man/DataFrame_shift/","title":"Shift a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_shift/#description","title":"Description","text":"<p>Shift the values by a given period. If the period (<code>n</code>) is positive, then <code>n</code> rows will be inserted at the top of the DataFrame and the last <code>n</code> rows will be discarded. Vice-versa if the period is negative. In the end, the total number of rows of the DataFrame doesn\u2019t change.</p>"},{"location":"man/DataFrame_shift/#usage","title":"Usage","text":"<pre><code>DataFrame_shift(periods = 1)\n</code></pre>"},{"location":"man/DataFrame_shift/#arguments","title":"Arguments","text":"<code>periods</code>  Number of periods to shift (can be negative)."},{"location":"man/DataFrame_shift/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_shift/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$shift(2)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl  \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs   \u2506 am   \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2506   \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64   \u2506 f64   \u2506   \u2506 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026    \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 26.0 \u2506 4.0  \u2506 120.3 \u2506 91.0  \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0  \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0  \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0  \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$DataFrame(mtcars)$shift(-2)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl  \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs   \u2506 am   \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2506   \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64   \u2506 f64   \u2506   \u2506 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0  \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0  \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0  \u2506 0.0  \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0  \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0  \u2506 0.0  \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.1 \u2506 6.0  \u2506 225.0 \u2506 105.0 \u2506 \u2026 \u2506 1.0  \u2506 0.0  \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026    \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.0 \u2506 8.0  \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0  \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_shift_and_fill/","title":"Shift and fill","text":"<p>Source code</p>"},{"location":"man/DataFrame_shift_and_fill/#description","title":"Description","text":"<p>Shift the values by a given period and fill the resulting null values. See the docs of <code>$shift()</code> for more details on shifting.</p>"},{"location":"man/DataFrame_shift_and_fill/#usage","title":"Usage","text":"<pre><code>DataFrame_shift_and_fill(fill_value, periods = 1)\n</code></pre>"},{"location":"man/DataFrame_shift_and_fill/#arguments","title":"Arguments","text":"<code>fill_value</code>  Fill new <code>NULL</code> values with this value. Must of length 1. A logical value will be converted to numeric.  <code>periods</code>  Number of periods to shift (can be negative)."},{"location":"man/DataFrame_shift_and_fill/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_shift_and_fill/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(mtcars)\n\n# insert two rows filled with 0 at the top of the DataFrame\ndf$shift_and_fill(0, 2)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0  \u2506 0.0 \u2506 0.0   \u2506 0.0   \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 0.0  \u2506 0.0  \u2502\n#&gt; \u2502 0.0  \u2506 0.0 \u2506 0.0   \u2506 0.0   \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 0.0  \u2506 0.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 26.0 \u2506 4.0 \u2506 120.3 \u2506 91.0  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># automatic conversion of logical value to numeric\ndf$shift_and_fill(TRUE, 2)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 1.0 \u2506 1.0   \u2506 1.0   \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 1.0  \u2506 1.0  \u2502\n#&gt; \u2502 1.0  \u2506 1.0 \u2506 1.0   \u2506 1.0   \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 1.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 26.0 \u2506 4.0 \u2506 120.3 \u2506 91.0  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_slice/","title":"Slice","text":"<p>Source code</p>"},{"location":"man/DataFrame_slice/#description","title":"Description","text":"<p>Get a slice of the DataFrame.</p>"},{"location":"man/DataFrame_slice/#usage","title":"Usage","text":"<pre><code>DataFrame_slice(offset, length = NULL)\n</code></pre>"},{"location":"man/DataFrame_slice/#arguments","title":"Arguments","text":"<code>offset</code>  Start index, can be a negative value. This is 0-indexed, so <code>offset = 1</code> doesn\u2019t include the first row.  <code>length</code>  Length of the slice. If <code>NULL</code> (default), all rows starting at the offset will be selected."},{"location":"man/DataFrame_slice/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_slice/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# skip the first 2 rows and take the 4 following rows\npl$DataFrame(mtcars)$slice(2, 4)\n</code></pre> <pre><code>#&gt; shape: (4, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 225.0 \u2506 105.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># this is equivalent to:\nmtcars[3:6, ]\n</code></pre> <pre><code>#&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n</code></pre>"},{"location":"man/DataFrame_sort/","title":"Sort a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_sort/#description","title":"Description","text":"<p>Sort by one or more Expressions.</p>"},{"location":"man/DataFrame_sort/#usage","title":"Usage","text":"<pre><code>DataFrame_sort(\n  by,\n  ...,\n  descending = FALSE,\n  nulls_last = FALSE,\n  maintain_order = FALSE\n)\n</code></pre>"},{"location":"man/DataFrame_sort/#arguments","title":"Arguments","text":"<code>by</code>  Column(s) to sort by. Can be character vector of column names, a list of Expr(s) or a list with a mix of Expr(s) and column names.  <code>\u2026</code>  More columns to sort by as above but provided one Expr per argument.  <code>descending</code>  Boolean. Sort in descending order (default is <code>FALSE</code>). This must be either of length 1 or a logical vector of the same length as the number of Expr(s) specified in <code>by</code> and <code>\u2026</code>.  <code>nulls_last</code>  Boolean. Place <code>NULL</code>s at the end? Default is <code>FALSE</code>.  <code>maintain_order</code>  Keep the same order as the original <code>DataFrame</code>. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine. The default value can be changed with <code>pl$set_options(maintain_order = TRUE)</code>."},{"location":"man/DataFrame_sort/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_sort/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = mtcars\ndf$mpg[1] = NA\ndf = pl$DataFrame(df)\ndf$sort(\"mpg\")\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(\"mpg\", nulls_last = TRUE)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(\"cyl\", \"mpg\")\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"))\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"), descending = TRUE)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"), descending = c(TRUE, FALSE))\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(pl$col(\"cyl\"), pl$col(\"mpg\"))\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_std/","title":"Std","text":"<p>Source code</p>"},{"location":"man/DataFrame_std/#description","title":"Description","text":"<p>Aggregate the columns of this DataFrame to their standard deviation values.</p>"},{"location":"man/DataFrame_std/#usage","title":"Usage","text":"<pre><code>DataFrame_std(ddof = 1)\n</code></pre>"},{"location":"man/DataFrame_std/#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/DataFrame_std/#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_std/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$std()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg      \u2506 cyl      \u2506 disp       \u2506 hp        \u2506 \u2026 \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb   \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2506 ---        \u2506 ---       \u2506   \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---    \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2506 f64        \u2506 f64       \u2506   \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.026948 \u2506 1.785922 \u2506 123.938694 \u2506 68.562868 \u2506 \u2026 \u2506 0.504016 \u2506 0.498991 \u2506 0.737804 \u2506 1.6152 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_sum/","title":"Sum","text":"<p>Source code</p>"},{"location":"man/DataFrame_sum/#description","title":"Description","text":"<p>Aggregate the columns of this DataFrame to their sum values.</p>"},{"location":"man/DataFrame_sum/#usage","title":"Usage","text":"<pre><code>DataFrame_sum()\n</code></pre>"},{"location":"man/DataFrame_sum/#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_sum/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$sum()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg   \u2506 cyl   \u2506 disp   \u2506 hp     \u2506 \u2026 \u2506 vs   \u2506 am   \u2506 gear  \u2506 carb \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---    \u2506 ---    \u2506   \u2506 ---  \u2506 ---  \u2506 ---   \u2506 ---  \u2502\n#&gt; \u2502 f64   \u2506 f64   \u2506 f64    \u2506 f64    \u2506   \u2506 f64  \u2506 f64  \u2506 f64   \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 642.9 \u2506 198.0 \u2506 7383.1 \u2506 4694.0 \u2506 \u2026 \u2506 14.0 \u2506 13.0 \u2506 118.0 \u2506 90.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_tail/","title":"Tail of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_tail/#description","title":"Description","text":"<p>Get the last <code>n</code> rows.</p>"},{"location":"man/DataFrame_tail/#usage","title":"Usage","text":"<pre><code>DataFrame_tail(n)\n</code></pre>"},{"location":"man/DataFrame_tail/#arguments","title":"Arguments","text":"<code>n</code>  Positive number not larger than 2^32."},{"location":"man/DataFrame_tail/#details","title":"Details","text":"<p>Any number will converted to u32. Negative raises error.</p>"},{"location":"man/DataFrame_tail/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_to_data_frame/","title":"Return Polars DataFrame as R data.frame","text":"<p>Source code</p>"},{"location":"man/DataFrame_to_data_frame/#description","title":"Description","text":"<p>Return Polars DataFrame as R data.frame</p>"},{"location":"man/DataFrame_to_data_frame/#usage","title":"Usage","text":"<pre><code>DataFrame_to_data_frame(...)\n</code></pre>"},{"location":"man/DataFrame_to_data_frame/#arguments","title":"Arguments","text":"<code>\u2026</code>  Any args pased to <code>as.data.frame()</code>."},{"location":"man/DataFrame_to_data_frame/#value","title":"Value","text":"<p>An R data.frame</p>"},{"location":"man/DataFrame_to_data_frame/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris[1:3, ])\ndf$to_data_frame()\n</code></pre> <pre><code>#&gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#&gt; 1          5.1         3.5          1.4         0.2  setosa\n#&gt; 2          4.9         3.0          1.4         0.2  setosa\n#&gt; 3          4.7         3.2          1.3         0.2  setosa\n</code></pre>"},{"location":"man/DataFrame_to_list/","title":"Return Polars DataFrame as a list of vectors","text":"<p>Source code</p>"},{"location":"man/DataFrame_to_list/#description","title":"Description","text":"<p>Return Polars DataFrame as a list of vectors</p>"},{"location":"man/DataFrame_to_list/#usage","title":"Usage","text":"<pre><code>DataFrame_to_list(unnest_structs = TRUE)\n</code></pre>"},{"location":"man/DataFrame_to_list/#arguments","title":"Arguments","text":"<code>unnest_structs</code>  Boolean. If <code>TRUE</code> (default), then <code>$unnest()</code> is applied on any struct column."},{"location":"man/DataFrame_to_list/#details","title":"Details","text":"<p>For simplicity reasons, this implementation relies on unnesting all structs before exporting to R. If <code>unnest_structs = FALSE</code>, then <code>struct</code> columns will be returned as nested lists, where each row is a list of values. Such a structure is not very typical or efficient in R.</p>"},{"location":"man/DataFrame_to_list/#value","title":"Value","text":"<p>R list of vectors</p>"},{"location":"man/DataFrame_to_list/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$to_list()\n</code></pre> <pre><code>#&gt; $Sepal.Length\n#&gt;   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n#&gt;  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n#&gt;  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n#&gt;  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n#&gt;  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n#&gt;  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n#&gt; [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n#&gt; [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n#&gt; [145] 6.7 6.7 6.3 6.5 6.2 5.9\n#&gt; \n#&gt; $Sepal.Width\n#&gt;   [1] 3.5 3.0 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 3.7 3.4 3.0 3.0 4.0 4.4 3.9 3.5\n#&gt;  [19] 3.8 3.8 3.4 3.7 3.6 3.3 3.4 3.0 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2\n#&gt;  [37] 3.5 3.6 3.0 3.4 3.5 2.3 3.2 3.5 3.8 3.0 3.8 3.2 3.7 3.3 3.2 3.2 3.1 2.3\n#&gt;  [55] 2.8 2.8 3.3 2.4 2.9 2.7 2.0 3.0 2.2 2.9 2.9 3.1 3.0 2.7 2.2 2.5 3.2 2.8\n#&gt;  [73] 2.5 2.8 2.9 3.0 2.8 3.0 2.9 2.6 2.4 2.4 2.7 2.7 3.0 3.4 3.1 2.3 3.0 2.5\n#&gt;  [91] 2.6 3.0 2.6 2.3 2.7 3.0 2.9 2.9 2.5 2.8 3.3 2.7 3.0 2.9 3.0 3.0 2.5 2.9\n#&gt; [109] 2.5 3.6 3.2 2.7 3.0 2.5 2.8 3.2 3.0 3.8 2.6 2.2 3.2 2.8 2.8 2.7 3.3 3.2\n#&gt; [127] 2.8 3.0 2.8 3.0 2.8 3.8 2.8 2.8 2.6 3.0 3.4 3.1 3.0 3.1 3.1 3.1 2.7 3.2\n#&gt; [145] 3.3 3.0 2.5 3.0 3.4 3.0\n#&gt; \n#&gt; $Petal.Length\n#&gt;   [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 1.5 1.6 1.4 1.1 1.2 1.5 1.3 1.4\n#&gt;  [19] 1.7 1.5 1.7 1.5 1.0 1.7 1.9 1.6 1.6 1.5 1.4 1.6 1.6 1.5 1.5 1.4 1.5 1.2\n#&gt;  [37] 1.3 1.4 1.3 1.5 1.3 1.3 1.3 1.6 1.9 1.4 1.6 1.4 1.5 1.4 4.7 4.5 4.9 4.0\n#&gt;  [55] 4.6 4.5 4.7 3.3 4.6 3.9 3.5 4.2 4.0 4.7 3.6 4.4 4.5 4.1 4.5 3.9 4.8 4.0\n#&gt;  [73] 4.9 4.7 4.3 4.4 4.8 5.0 4.5 3.5 3.8 3.7 3.9 5.1 4.5 4.5 4.7 4.4 4.1 4.0\n#&gt;  [91] 4.4 4.6 4.0 3.3 4.2 4.2 4.2 4.3 3.0 4.1 6.0 5.1 5.9 5.6 5.8 6.6 4.5 6.3\n#&gt; [109] 5.8 6.1 5.1 5.3 5.5 5.0 5.1 5.3 5.5 6.7 6.9 5.0 5.7 4.9 6.7 4.9 5.7 6.0\n#&gt; [127] 4.8 4.9 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 4.8 5.4 5.6 5.1 5.1 5.9\n#&gt; [145] 5.7 5.2 5.0 5.2 5.4 5.1\n#&gt; \n#&gt; $Petal.Width\n#&gt;   [1] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 0.2 0.2 0.1 0.1 0.2 0.4 0.4 0.3\n#&gt;  [19] 0.3 0.3 0.2 0.4 0.2 0.5 0.2 0.2 0.4 0.2 0.2 0.2 0.2 0.4 0.1 0.2 0.2 0.2\n#&gt;  [37] 0.2 0.1 0.2 0.2 0.3 0.3 0.2 0.6 0.4 0.3 0.2 0.2 0.2 0.2 1.4 1.5 1.5 1.3\n#&gt;  [55] 1.5 1.3 1.6 1.0 1.3 1.4 1.0 1.5 1.0 1.4 1.3 1.4 1.5 1.0 1.5 1.1 1.8 1.3\n#&gt;  [73] 1.5 1.2 1.3 1.4 1.4 1.7 1.5 1.0 1.1 1.0 1.2 1.6 1.5 1.6 1.5 1.3 1.3 1.3\n#&gt;  [91] 1.2 1.4 1.2 1.0 1.3 1.2 1.3 1.3 1.1 1.3 2.5 1.9 2.1 1.8 2.2 2.1 1.7 1.8\n#&gt; [109] 1.8 2.5 2.0 1.9 2.1 2.0 2.4 2.3 1.8 2.2 2.3 1.5 2.3 2.0 2.0 1.8 2.1 1.8\n#&gt; [127] 1.8 1.8 2.1 1.6 1.9 2.0 2.2 1.5 1.4 2.3 2.4 1.8 1.8 2.1 2.4 2.3 1.9 2.3\n#&gt; [145] 2.5 2.3 1.9 2.0 2.3 1.8\n#&gt; \n#&gt; $Species\n#&gt;   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n#&gt;  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [79] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [97] versicolor versicolor versicolor versicolor virginica  virginica \n#&gt; [103] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [109] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [115] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [121] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [127] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [133] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [139] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [145] virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; Levels: setosa versicolor virginica\n</code></pre>"},{"location":"man/DataFrame_to_series/","title":"Get column by index","text":"<p>Source code</p>"},{"location":"man/DataFrame_to_series/#description","title":"Description","text":"<p>Extract a DataFrame column (by index) as a Polars series. Unlike <code>get_column()</code>, this method will not fail but will return a <code>NULL</code> if the index doesn\u2019t exist in the DataFrame. Keep in mind that Polars is 0-indexed so \"0\" is the first column.</p>"},{"location":"man/DataFrame_to_series/#usage","title":"Usage","text":"<pre><code>DataFrame_to_series(idx = 0)\n</code></pre>"},{"location":"man/DataFrame_to_series/#arguments","title":"Arguments","text":"<code>idx</code>  Index of the column to return as Series. Defaults to 0, which is the first column."},{"location":"man/DataFrame_to_series/#value","title":"Value","text":"<p>Series or NULL</p>"},{"location":"man/DataFrame_to_series/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris[1:10, ])\n\n# default is to extract the first column\ndf$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (10,)\n#&gt; Series: 'Sepal.Length' [f64]\n#&gt; [\n#&gt;  5.1\n#&gt;  4.9\n#&gt;  4.7\n#&gt;  4.6\n#&gt;  5.0\n#&gt;  5.4\n#&gt;  4.6\n#&gt;  5.0\n#&gt;  4.4\n#&gt;  4.9\n#&gt; ]\n</code></pre> <pre><code># Polars is 0-indexed, so we use idx = 1 to extract the *2nd* column\ndf$to_series(idx = 1)\n</code></pre> <pre><code>#&gt; polars Series: shape: (10,)\n#&gt; Series: 'Sepal.Width' [f64]\n#&gt; [\n#&gt;  3.5\n#&gt;  3.0\n#&gt;  3.2\n#&gt;  3.1\n#&gt;  3.6\n#&gt;  3.9\n#&gt;  3.4\n#&gt;  3.4\n#&gt;  2.9\n#&gt;  3.1\n#&gt; ]\n</code></pre> <pre><code># doesn't error if the column isn't there\ndf$to_series(idx = 8)\n</code></pre> <pre><code>#&gt; NULL\n</code></pre>"},{"location":"man/DataFrame_to_struct/","title":"Convert DataFrame to a Series of type \"struct\"","text":"<p>Source code</p>"},{"location":"man/DataFrame_to_struct/#description","title":"Description","text":"<p>Convert DataFrame to a Series of type \"struct\"</p>"},{"location":"man/DataFrame_to_struct/#usage","title":"Usage","text":"<pre><code>DataFrame_to_struct(name = \"\")\n</code></pre>"},{"location":"man/DataFrame_to_struct/#arguments","title":"Arguments","text":"<code>name</code>  Name given to the new Series"},{"location":"man/DataFrame_to_struct/#value","title":"Value","text":"<p>A Series of type \"struct\"</p>"},{"location":"man/DataFrame_to_struct/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# round-trip conversion from DataFrame with two columns\ndf = pl$DataFrame(a = 1:5, b = c(\"one\", \"two\", \"three\", \"four\", \"five\"))\ns = df$to_struct()\ns\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [struct[2]]\n#&gt; [\n#&gt;  {1,\"one\"}\n#&gt;  {2,\"two\"}\n#&gt;  {3,\"three\"}\n#&gt;  {4,\"four\"}\n#&gt;  {5,\"five\"}\n#&gt; ]\n</code></pre> <pre><code># convert to an R list\ns$to_r()\n</code></pre> <pre><code>#&gt; $a\n#&gt; [1] 1 2 3 4 5\n#&gt; \n#&gt; $b\n#&gt; [1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n#&gt; \n#&gt; attr(,\"is_struct\")\n#&gt; [1] TRUE\n</code></pre> <pre><code># Convert back to a DataFrame\ndf_s = s$to_frame()\ndf_s\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502             \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 struct[2]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,\"one\"}   \u2502\n#&gt; \u2502 {2,\"two\"}   \u2502\n#&gt; \u2502 {3,\"three\"} \u2502\n#&gt; \u2502 {4,\"four\"}  \u2502\n#&gt; \u2502 {5,\"five\"}  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_transpose/","title":"Transpose a DataFrame over the diagonal.","text":"<p>Source code</p>"},{"location":"man/DataFrame_transpose/#description","title":"Description","text":"<p>Transpose a DataFrame over the diagonal.</p>"},{"location":"man/DataFrame_transpose/#usage","title":"Usage","text":"<pre><code>DataFrame_transpose(\n  include_header = FALSE,\n  header_name = \"column\",\n  column_names = NULL\n)\n</code></pre>"},{"location":"man/DataFrame_transpose/#arguments","title":"Arguments","text":"<code>include_header</code>  If <code>TRUE</code>, the column names will be added as first column.  <code>header_name</code>  If <code>include_header</code> is <code>TRUE</code>, this determines the name of the column that will be inserted.  <code>column_names</code>  Character vector indicating the new column names. If <code>NULL</code> (default), the columns will be named as \"column_1\", \"column_2\", etc. The length of this vector must match the number of rows of the original input."},{"location":"man/DataFrame_transpose/#details","title":"Details","text":"<p>This is a very expensive operation.</p> <p>Transpose may be the fastest option to perform non foldable (see <code>fold()</code> or <code>reduce()</code>) row operations like median.</p> <p>Polars transpose is currently eager only, likely because it is not trivial to deduce the schema.</p>"},{"location":"man/DataFrame_transpose/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_transpose/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# simple use-case\npl$DataFrame(mtcars)$transpose(include_header = TRUE, column_names = rownames(mtcars))\n</code></pre> <pre><code>#&gt; shape: (11, 33)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 column \u2506 Mazda RX4 \u2506 Mazda RX4   \u2506 Datsun \u2506 \u2026 \u2506 Ford        \u2506 Ferrari \u2506 Maserati    \u2506 Volvo 142E \u2502\n#&gt; \u2502 ---    \u2506 ---       \u2506 Wag         \u2506 710    \u2506   \u2506 Pantera L   \u2506 Dino    \u2506 Bora        \u2506 ---        \u2502\n#&gt; \u2502 str    \u2506 f64       \u2506 ---         \u2506 ---    \u2506   \u2506 ---         \u2506 ---     \u2506 ---         \u2506 f64        \u2502\n#&gt; \u2502        \u2506           \u2506 f64         \u2506 f64    \u2506   \u2506 f64         \u2506 f64     \u2506 f64         \u2506            \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 mpg    \u2506 21.0      \u2506 21.0        \u2506 22.8   \u2506 \u2026 \u2506 15.8        \u2506 19.7    \u2506 15.0        \u2506 21.4       \u2502\n#&gt; \u2502 cyl    \u2506 6.0       \u2506 6.0         \u2506 4.0    \u2506 \u2026 \u2506 8.0         \u2506 6.0     \u2506 8.0         \u2506 4.0        \u2502\n#&gt; \u2502 disp   \u2506 160.0     \u2506 160.0       \u2506 108.0  \u2506 \u2026 \u2506 351.0       \u2506 145.0   \u2506 301.0       \u2506 121.0      \u2502\n#&gt; \u2502 hp     \u2506 110.0     \u2506 110.0       \u2506 93.0   \u2506 \u2026 \u2506 264.0       \u2506 175.0   \u2506 335.0       \u2506 109.0      \u2502\n#&gt; \u2502 \u2026      \u2506 \u2026         \u2506 \u2026           \u2506 \u2026      \u2506 \u2026 \u2506 \u2026           \u2506 \u2026       \u2506 \u2026           \u2506 \u2026          \u2502\n#&gt; \u2502 vs     \u2506 0.0       \u2506 0.0         \u2506 1.0    \u2506 \u2026 \u2506 0.0         \u2506 0.0     \u2506 0.0         \u2506 1.0        \u2502\n#&gt; \u2502 am     \u2506 1.0       \u2506 1.0         \u2506 1.0    \u2506 \u2026 \u2506 1.0         \u2506 1.0     \u2506 1.0         \u2506 1.0        \u2502\n#&gt; \u2502 gear   \u2506 4.0       \u2506 4.0         \u2506 4.0    \u2506 \u2026 \u2506 5.0         \u2506 5.0     \u2506 5.0         \u2506 4.0        \u2502\n#&gt; \u2502 carb   \u2506 4.0       \u2506 4.0         \u2506 1.0    \u2506 \u2026 \u2506 4.0         \u2506 6.0     \u2506 8.0         \u2506 2.0        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># All rows must have one shared supertype, recast Categorical to String which is a supertype\n# of f64, and then dataset \"Iris\" can be transposed\npl$DataFrame(iris)$with_columns(pl$col(\"Species\")$cast(pl$String))$transpose()\n</code></pre> <pre><code>#&gt; shape: (5, 150)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 column_0 \u2506 column_1 \u2506 column_2 \u2506 column_3 \u2506 \u2026 \u2506 column_146 \u2506 column_147 \u2506 column_148 \u2506 column_14 \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2506 ---      \u2506 ---      \u2506   \u2506 ---        \u2506 ---        \u2506 ---        \u2506 9         \u2502\n#&gt; \u2502 str      \u2506 str      \u2506 str      \u2506 str      \u2506   \u2506 str        \u2506 str        \u2506 str        \u2506 ---       \u2502\n#&gt; \u2502          \u2506          \u2506          \u2506          \u2506   \u2506            \u2506            \u2506            \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1      \u2506 4.9      \u2506 4.7      \u2506 4.6      \u2506 \u2026 \u2506 6.3        \u2506 6.5        \u2506 6.2        \u2506 5.9       \u2502\n#&gt; \u2502 3.5      \u2506 3.0      \u2506 3.2      \u2506 3.1      \u2506 \u2026 \u2506 2.5        \u2506 3.0        \u2506 3.4        \u2506 3.0       \u2502\n#&gt; \u2502 1.4      \u2506 1.4      \u2506 1.3      \u2506 1.5      \u2506 \u2026 \u2506 5.0        \u2506 5.2        \u2506 5.4        \u2506 5.1       \u2502\n#&gt; \u2502 0.2      \u2506 0.2      \u2506 0.2      \u2506 0.2      \u2506 \u2026 \u2506 1.9        \u2506 2.0        \u2506 2.3        \u2506 1.8       \u2502\n#&gt; \u2502 setosa   \u2506 setosa   \u2506 setosa   \u2506 setosa   \u2506 \u2026 \u2506 virginica  \u2506 virginica  \u2506 virginica  \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_unique/","title":"Drop duplicated rows","text":"<p>Source code</p>"},{"location":"man/DataFrame_unique/#description","title":"Description","text":"<p>Drop duplicated rows</p>"},{"location":"man/DataFrame_unique/#usage","title":"Usage","text":"<pre><code>DataFrame_unique(subset = NULL, keep = \"first\", maintain_order = FALSE)\n</code></pre>"},{"location":"man/DataFrame_unique/#arguments","title":"Arguments","text":"<code>subset</code>  A character vector with the names of the column(s) to use to identify duplicates. If <code>NULL</code> (default), use all columns.  <code>keep</code>   Which of the duplicate rows to keep:  <ul> <li>  \"first\": Keep first unique row.  </li> <li>  \"last\": Keep last unique row.  </li> <li>  \"none\": Don\u2019t keep duplicate rows.  </li> </ul> <code>maintain_order</code>  Keep the same order as the original <code>DataFrame</code>. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine. The default value can be changed with <code>pl$set_options(maintain_order = TRUE)</code>."},{"location":"man/DataFrame_unique/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/DataFrame_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  x = sample(10, 100, rep = TRUE),\n  y = sample(10, 100, rep = TRUE)\n)\ndf$height\n</code></pre> <pre><code>#&gt; [1] 100\n</code></pre> <pre><code>df$unique()$height\n</code></pre> <pre><code>#&gt; [1] 64\n</code></pre> <pre><code>df$unique(subset = \"x\")$height\n</code></pre> <pre><code>#&gt; [1] 10\n</code></pre> <pre><code>df$unique(keep = \"last\")\n</code></pre> <pre><code>#&gt; shape: (64, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4   \u2506 1   \u2502\n#&gt; \u2502 1   \u2506 6   \u2502\n#&gt; \u2502 5   \u2506 2   \u2502\n#&gt; \u2502 6   \u2506 10  \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026   \u2502\n#&gt; \u2502 2   \u2506 2   \u2502\n#&gt; \u2502 1   \u2506 9   \u2502\n#&gt; \u2502 10  \u2506 10  \u2502\n#&gt; \u2502 1   \u2506 7   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># only keep unique rows\ndf$unique(keep = \"none\")\n</code></pre> <pre><code>#&gt; shape: (35, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 7   \u2506 3   \u2502\n#&gt; \u2502 4   \u2506 1   \u2502\n#&gt; \u2502 1   \u2506 6   \u2502\n#&gt; \u2502 8   \u2506 3   \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026   \u2502\n#&gt; \u2502 10  \u2506 10  \u2502\n#&gt; \u2502 2   \u2506 9   \u2502\n#&gt; \u2502 3   \u2506 1   \u2502\n#&gt; \u2502 1   \u2506 7   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_unnest/","title":"Unnest the Struct columns of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_unnest/#description","title":"Description","text":"<p>Unnest the Struct columns of a DataFrame</p>"},{"location":"man/DataFrame_unnest/#usage","title":"Usage","text":"<pre><code>DataFrame_unnest(names = NULL)\n</code></pre>"},{"location":"man/DataFrame_unnest/#arguments","title":"Arguments","text":"<code>names</code>  Names of the struct columns to unnest. If <code>NULL</code> (default), then all \"struct\" columns are unnested."},{"location":"man/DataFrame_unnest/#value","title":"Value","text":"<p>A DataFrame where all \"struct\" columns are unnested. Non-struct columns are not modified.</p>"},{"location":"man/DataFrame_unnest/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = 1:5,\n  b = c(\"one\", \"two\", \"three\", \"four\", \"five\"),\n  c = 6:10\n)$\n  select(\n  pl$col(\"b\")$to_struct(),\n  pl$col(\"a\", \"c\")$to_struct()$alias(\"a_and_c\")\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b         \u2506 a_and_c   \u2502\n#&gt; \u2502 ---       \u2506 ---       \u2502\n#&gt; \u2502 struct[1] \u2506 struct[2] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"one\"}   \u2506 {1,6}     \u2502\n#&gt; \u2502 {\"two\"}   \u2506 {2,7}     \u2502\n#&gt; \u2502 {\"three\"} \u2506 {3,8}     \u2502\n#&gt; \u2502 {\"four\"}  \u2506 {4,9}     \u2502\n#&gt; \u2502 {\"five\"}  \u2506 {5,10}    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by default, all struct columns are unnested\ndf$unnest()\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b     \u2506 a   \u2506 c   \u2502\n#&gt; \u2502 ---   \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str   \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one   \u2506 1   \u2506 6   \u2502\n#&gt; \u2502 two   \u2506 2   \u2506 7   \u2502\n#&gt; \u2502 three \u2506 3   \u2506 8   \u2502\n#&gt; \u2502 four  \u2506 4   \u2506 9   \u2502\n#&gt; \u2502 five  \u2506 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># we can specify specific columns to unnest\ndf$unnest(\"a_and_c\")\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b         \u2506 a   \u2506 c   \u2502\n#&gt; \u2502 ---       \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 struct[1] \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"one\"}   \u2506 1   \u2506 6   \u2502\n#&gt; \u2502 {\"two\"}   \u2506 2   \u2506 7   \u2502\n#&gt; \u2502 {\"three\"} \u2506 3   \u2506 8   \u2502\n#&gt; \u2502 {\"four\"}  \u2506 4   \u2506 9   \u2502\n#&gt; \u2502 {\"five\"}  \u2506 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_var/","title":"Var","text":"<p>Source code</p>"},{"location":"man/DataFrame_var/#description","title":"Description","text":"<p>Aggregate the columns of this DataFrame to their variance values.</p>"},{"location":"man/DataFrame_var/#usage","title":"Usage","text":"<pre><code>DataFrame_var(ddof = 1)\n</code></pre>"},{"location":"man/DataFrame_var/#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/DataFrame_var/#value","title":"Value","text":"<p>A DataFrame with one row.</p>"},{"location":"man/DataFrame_var/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$var()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl      \u2506 disp        \u2506 hp          \u2506 \u2026 \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb     \u2502\n#&gt; \u2502 ---       \u2506 ---      \u2506 ---         \u2506 ---         \u2506   \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64       \u2506 f64      \u2506 f64         \u2506 f64         \u2506   \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 36.324103 \u2506 3.189516 \u2506 15360.79982 \u2506 4700.866935 \u2506 \u2026 \u2506 0.254032 \u2506 0.248992 \u2506 0.544355 \u2506 2.608871 \u2502\n#&gt; \u2502           \u2506          \u2506 9           \u2506             \u2506   \u2506          \u2506          \u2506          \u2506          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_width/","title":"Number of columns of a DataFrame","text":"<p>Source code</p>"},{"location":"man/DataFrame_width/#description","title":"Description","text":"<p>Get the number of columns (width) of a DataFrame</p>"},{"location":"man/DataFrame_width/#usage","title":"Usage","text":"<pre><code>DataFrame_width()\n</code></pre>"},{"location":"man/DataFrame_width/#value","title":"Value","text":"<p>The number of columns of a DataFrame</p>"},{"location":"man/DataFrame_width/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$width\n</code></pre> <pre><code>#&gt; [1] 5\n</code></pre>"},{"location":"man/DataFrame_with_columns/","title":"Modify/append column(s)","text":"<p>Source code</p>"},{"location":"man/DataFrame_with_columns/#description","title":"Description","text":"<p>Add columns or modify existing ones with expressions. This is the equivalent of <code>dplyr::mutate()</code> as it keeps unmentioned columns (unlike <code>$select()</code>).</p>"},{"location":"man/DataFrame_with_columns/#usage","title":"Usage","text":"<pre><code>DataFrame_with_columns(...)\n</code></pre>"},{"location":"man/DataFrame_with_columns/#arguments","title":"Arguments","text":"<code>\u2026</code>  Any expressions or string column name, or same wrapped in a list. If first and only element is a list, it is unwrapped as a list of args."},{"location":"man/DataFrame_with_columns/#value","title":"Value","text":"<p>A DataFrame</p>"},{"location":"man/DataFrame_with_columns/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$with_columns(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\n</code></pre> <pre><code>#&gt; shape: (150, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2506 abs_SL \u2506 add_2_SL \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2506 ---    \u2506 ---      \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2506 f64    \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.1    \u2506 7.1      \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 4.9    \u2506 6.9      \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2506 4.7    \u2506 6.7      \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2506 4.6    \u2506 6.6      \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2506 \u2026      \u2506 \u2026        \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2506 6.3    \u2506 8.3      \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2506 6.5    \u2506 8.5      \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2506 6.2    \u2506 8.2      \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2506 5.9    \u2506 7.9      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># same query\nl_expr = list(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\npl$DataFrame(iris)$with_columns(l_expr)\n</code></pre> <pre><code>#&gt; shape: (150, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2506 abs_SL \u2506 add_2_SL \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2506 ---    \u2506 ---      \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2506 f64    \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.1    \u2506 7.1      \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 4.9    \u2506 6.9      \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2506 4.7    \u2506 6.7      \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2506 4.6    \u2506 6.6      \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2506 \u2026      \u2506 \u2026        \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2506 6.3    \u2506 8.3      \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2506 6.5    \u2506 8.5      \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2506 6.2    \u2506 8.2      \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2506 5.9    \u2506 7.9      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$DataFrame(iris)$with_columns(\n  pl$col(\"Sepal.Length\")$abs(), # not named expr will keep name \"Sepal.Length\"\n  SW_add_2 = (pl$col(\"Sepal.Width\") + 2)\n)\n</code></pre> <pre><code>#&gt; shape: (150, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2506 SW_add_2 \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2506 ---      \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.5      \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.0      \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2506 5.2      \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2506 5.1      \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2506 \u2026        \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2506 4.5      \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2506 5.0      \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2506 5.4      \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2506 5.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/DataFrame_with_row_count/","title":"Add a column for row indices","text":"<p>Source code</p>"},{"location":"man/DataFrame_with_row_count/#description","title":"Description","text":"<p>Add a new column at index 0 that counts the rows</p>"},{"location":"man/DataFrame_with_row_count/#usage","title":"Usage","text":"<pre><code>DataFrame_with_row_count(name, offset = NULL)\n</code></pre>"},{"location":"man/DataFrame_with_row_count/#arguments","title":"Arguments","text":"<code>name</code>  string name of the created column  <code>offset</code>  positive integer offset for the start of the counter"},{"location":"man/DataFrame_with_row_count/#value","title":"Value","text":"<p>A new <code>DataFrame</code> object with a counter column in front</p>"},{"location":"man/DataFrame_with_row_count/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(mtcars)\n\n# by default, the index starts at 0 (to mimic the behavior of Python Polars)\ndf$with_row_count(\"idx\")\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 idx \u2506 mpg  \u2506 cyl \u2506 disp  \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 ---  \u2506 --- \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 u32 \u2506 f64  \u2506 f64 \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 1   \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 2   \u2506 22.8 \u2506 4.0 \u2506 108.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 3   \u2506 21.4 \u2506 6.0 \u2506 258.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 28  \u2506 15.8 \u2506 8.0 \u2506 351.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 29  \u2506 19.7 \u2506 6.0 \u2506 145.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 30  \u2506 15.0 \u2506 8.0 \u2506 301.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 31  \u2506 21.4 \u2506 4.0 \u2506 121.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># but in R, we use a 1-index\ndf$with_row_count(\"idx\", offset = 1)\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 idx \u2506 mpg  \u2506 cyl \u2506 disp  \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 ---  \u2506 --- \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 u32 \u2506 f64  \u2506 f64 \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 2   \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 3   \u2506 22.8 \u2506 4.0 \u2506 108.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 4   \u2506 21.4 \u2506 6.0 \u2506 258.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 29  \u2506 15.8 \u2506 8.0 \u2506 351.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 30  \u2506 19.7 \u2506 6.0 \u2506 145.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 31  \u2506 15.0 \u2506 8.0 \u2506 301.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 32  \u2506 21.4 \u2506 4.0 \u2506 121.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprBin_contains/","title":"contains","text":"<p>Source code</p>"},{"location":"man/ExprBin_contains/#description","title":"Description","text":"<p>R Check if binaries in Series contain a binary substring.</p>"},{"location":"man/ExprBin_contains/#usage","title":"Usage","text":"<pre><code>ExprBin_contains(lit)\n</code></pre>"},{"location":"man/ExprBin_contains/#arguments","title":"Arguments","text":"<code>lit</code>  The binary substring to look for"},{"location":"man/ExprBin_contains/#value","title":"Value","text":"<p>Expr returning a Boolean</p>"},{"location":"man/ExprBin_decode/","title":"decode","text":"<p>Source code</p>"},{"location":"man/ExprBin_decode/#description","title":"Description","text":"<p>Decode a value using the provided encoding.</p>"},{"location":"man/ExprBin_decode/#usage","title":"Usage","text":"<pre><code>ExprBin_decode(encoding, strict = TRUE)\n</code></pre>"},{"location":"man/ExprBin_decode/#arguments","title":"Arguments","text":"<code>encoding</code>  binary choice either \u2018hex\u2019 or \u2018base64\u2019  <code>strict</code>  Raise an error if the underlying value cannot be decoded, otherwise mask out with a null value."},{"location":"man/ExprBin_decode/#value","title":"Value","text":"<p>binary array with values decoded using provided encoding</p>"},{"location":"man/ExprBin_encode/","title":"encode","text":"<p>Source code</p>"},{"location":"man/ExprBin_encode/#description","title":"Description","text":"<p>Encode a value using the provided encoding.</p>"},{"location":"man/ExprBin_encode/#usage","title":"Usage","text":"<pre><code>ExprBin_encode(encoding)\n</code></pre>"},{"location":"man/ExprBin_encode/#arguments","title":"Arguments","text":"<code>encoding</code>  binary choice either \u2018hex\u2019 or \u2018base64\u2019"},{"location":"man/ExprBin_encode/#value","title":"Value","text":"<p>binary array with values encoded using provided encoding</p>"},{"location":"man/ExprBin_ends_with/","title":"ends_with","text":"<p>Source code</p>"},{"location":"man/ExprBin_ends_with/#description","title":"Description","text":"<p>Check if string values end with a binary substring.</p>"},{"location":"man/ExprBin_ends_with/#usage","title":"Usage","text":"<pre><code>ExprBin_ends_with(suffix)\n</code></pre>"},{"location":"man/ExprBin_ends_with/#arguments","title":"Arguments","text":"<code>suffix</code>  Suffix substring."},{"location":"man/ExprBin_ends_with/#value","title":"Value","text":"<p>Expr returning a Boolean</p>"},{"location":"man/ExprBin_starts_with/","title":"starts_with","text":"<p>Source code</p>"},{"location":"man/ExprBin_starts_with/#description","title":"Description","text":"<p>Check if values starts with a binary substring.</p>"},{"location":"man/ExprBin_starts_with/#usage","title":"Usage","text":"<pre><code>ExprBin_starts_with(sub)\n</code></pre>"},{"location":"man/ExprBin_starts_with/#arguments","title":"Arguments","text":"<code>sub</code>  Prefix substring."},{"location":"man/ExprBin_starts_with/#value","title":"Value","text":"<p>Expr returing a Boolean</p>"},{"location":"man/ExprCat_get_categories/","title":"Get the categories stored in this data type","text":"<p>Source code</p>"},{"location":"man/ExprCat_get_categories/#description","title":"Description","text":"<p>Get the categories stored in this data type</p>"},{"location":"man/ExprCat_get_categories/#usage","title":"Usage","text":"<pre><code>ExprCat_get_categories()\n</code></pre>"},{"location":"man/ExprCat_get_categories/#value","title":"Value","text":"<p>A polars DataFrame with the categories for each categorical Series.</p>"},{"location":"man/ExprCat_get_categories/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  cats = factor(c(\"z\", \"z\", \"k\", \"a\", \"b\")),\n  vals = factor(c(3, 1, 2, 2, 3))\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cats \u2506 vals \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 cat  \u2506 cat  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 z    \u2506 3    \u2502\n#&gt; \u2502 z    \u2506 1    \u2502\n#&gt; \u2502 k    \u2506 2    \u2502\n#&gt; \u2502 a    \u2506 2    \u2502\n#&gt; \u2502 b    \u2506 3    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(\n  pl$col(\"cats\")$cat$get_categories()\n)\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cats \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 z    \u2502\n#&gt; \u2502 k    \u2502\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 b    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(\n  pl$col(\"vals\")$cat$get_categories()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 vals \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprCat_set_ordering/","title":"Set Ordering","text":"<p>Source code</p>"},{"location":"man/ExprCat_set_ordering/#description","title":"Description","text":"<p>Determine how this categorical series should be sorted.</p>"},{"location":"man/ExprCat_set_ordering/#usage","title":"Usage","text":"<pre><code>ExprCat_set_ordering(ordering)\n</code></pre>"},{"location":"man/ExprCat_set_ordering/#arguments","title":"Arguments","text":"<code>ordering</code>   string either \u2018physical\u2019 or \u2018lexical\u2019  <ul> <li>  \u2018physical\u2019 -\\&gt; Use the physical representation of the categories to determine the order (default).  </li> <li>  \u2018lexical\u2019 -\\&gt; Use the string values to determine the ordering.  </li> </ul>"},{"location":"man/ExprCat_set_ordering/#value","title":"Value","text":"<p>bool: TRUE if equal</p>"},{"location":"man/ExprCat_set_ordering/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  cats = factor(c(\"z\", \"z\", \"k\", \"a\", \"b\")),\n  vals = c(3, 1, 2, 2, 3)\n)$with_columns(\n  pl$col(\"cats\")$cat$set_ordering(\"physical\")\n)\ndf$select(pl$all()$sort())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cats \u2506 vals \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 cat  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 z    \u2506 1.0  \u2502\n#&gt; \u2502 z    \u2506 2.0  \u2502\n#&gt; \u2502 k    \u2506 2.0  \u2502\n#&gt; \u2502 a    \u2506 3.0  \u2502\n#&gt; \u2502 b    \u2506 3.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_cast_time_unit/","title":"cast_time_unit","text":"<p>Source code</p>"},{"location":"man/ExprDT_cast_time_unit/#description","title":"Description","text":"<p>Cast the underlying data to another time unit. This may lose precision. The corresponding global timepoint will stay unchanged +/- precision.</p>"},{"location":"man/ExprDT_cast_time_unit/#usage","title":"Usage","text":"<pre><code>ExprDT_cast_time_unit(tu = c(\"ns\", \"us\", \"ms\"))\n</code></pre>"},{"location":"man/ExprDT_cast_time_unit/#arguments","title":"Arguments","text":"<code>tu</code>  string option either \u2018ns\u2019, \u2018us\u2019, or \u2018ms\u2019"},{"location":"man/ExprDT_cast_time_unit/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_cast_time_unit/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2001-1-1\"),\n    end = as.Date(\"2001-1-3\"),\n    interval = \"1d1s\",\n    eager = TRUE\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  pl$col(\"date\")$dt$cast_time_unit()$alias(\"cast_time_unit_ns\"),\n  pl$col(\"date\")$dt$cast_time_unit(tu = \"ms\")$alias(\"cast_time_unit_ms\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 cast_time_unit_ns   \u2506 cast_time_unit_ms   \u2502\n#&gt; \u2502 ---                 \u2506 ---                 \u2506 ---                 \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 datetime[ns]        \u2506 datetime[ms]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01 00:00:00 \u2506 2001-01-01 00:00:00 \u2506 2001-01-01 00:00:00 \u2502\n#&gt; \u2502 2001-01-02 00:00:01 \u2506 2001-01-02 00:00:01 \u2506 2001-01-02 00:00:01 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_combine/","title":"Combine Data and Time","text":"<p>Source code</p>"},{"location":"man/ExprDT_combine/#description","title":"Description","text":"<p>Create a naive Datetime from an existing Date/Datetime expression and a Time. Each date/datetime in the first half of the interval is mapped to the start of its bucket. Each date/datetime in the second half of the interval is mapped to the end of its bucket.</p>"},{"location":"man/ExprDT_combine/#usage","title":"Usage","text":"<pre><code>ExprDT_combine(tm, tu = \"us\")\n</code></pre>"},{"location":"man/ExprDT_combine/#arguments","title":"Arguments","text":"<code>tm</code>  Expr or numeric or PTime, the number of epoch since or before(if negative) the Date or tm is an Expr e.g.\u00a0a column of DataType \u2018Time\u2019 or something into an Expr.  <code>tu</code>  time unit of epochs, default is \"us\", if tm is a PTime, then tz passed via PTime."},{"location":"man/ExprDT_combine/#details","title":"Details","text":"<p>The <code>tu</code> allows the following time time units the following string language:</p> <ul> <li>  1ns \\# 1 nanosecond  </li> <li>  1us \\# 1 microsecond  </li> <li>  1ms \\# 1 millisecond  </li> </ul>"},{"location":"man/ExprDT_combine/#value","title":"Value","text":"<p>Date/Datetime expr</p>"},{"location":"man/ExprDT_combine/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Using pl$PTime\npl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(\"02:34:12\"))$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ns]]\n#&gt; [\n#&gt;  2021-01-01 02:34:12\n#&gt; ]\n</code></pre> <pre><code>pl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(3600 * 1.5, tu = \"s\"))$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ns]]\n#&gt; [\n#&gt;  2021-01-01 01:30:00\n#&gt; ]\n</code></pre> <pre><code>pl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(3600 * 1.5E6 + 123, tu = \"us\"))$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ns]]\n#&gt; [\n#&gt;  2021-01-01 01:30:00.000123\n#&gt; ]\n</code></pre> <pre><code># pass double and set tu manually\npl$lit(as.Date(\"2021-01-01\"))$dt$combine(3600 * 1.5E6 + 123, tu = \"us\")$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[\u03bcs]]\n#&gt; [\n#&gt;  2021-01-01 01:30:00.000123\n#&gt; ]\n</code></pre> <pre><code># if needed to convert back to R it is more intuitive to set a specific time zone\nexpr = pl$lit(as.Date(\"2021-01-01\"))$dt$combine(3600 * 1.5E6 + 123, tu = \"us\")\nexpr$cast(pl$Datetime(tu = \"us\", tz = \"GMT\"))$to_r()\n</code></pre> <pre><code>#&gt; [1] \"2021-01-01 01:30:00 GMT\"\n</code></pre>"},{"location":"man/ExprDT_convert_time_zone/","title":"With Time Zone","text":"<p>Source code</p>"},{"location":"man/ExprDT_convert_time_zone/#description","title":"Description","text":"<p>Set time zone for a Series of type Datetime. Use to change time zone annotation, but keep the corresponding global timepoint.</p>"},{"location":"man/ExprDT_convert_time_zone/#usage","title":"Usage","text":"<pre><code>ExprDT_convert_time_zone(tz)\n</code></pre>"},{"location":"man/ExprDT_convert_time_zone/#arguments","title":"Arguments","text":"<code>tz</code>  String time zone from base::OlsonNames()"},{"location":"man/ExprDT_convert_time_zone/#details","title":"Details","text":"<p>corresponds to in R manually modifying the tzone attribute of POSIXt objects</p>"},{"location":"man/ExprDT_convert_time_zone/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_convert_time_zone/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2001-3-1\"),\n    end = as.Date(\"2001-5-1\"),\n    interval = \"1mo12m34s\",\n    eager = TRUE\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  pl$col(\"date\")\n  $dt$replace_time_zone(\"Europe/Amsterdam\")\n  $dt$convert_time_zone(\"Europe/London\")\n  $alias(\"London_with\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 London_with                 \u2502\n#&gt; \u2502 ---                 \u2506 ---                         \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 datetime[\u03bcs, Europe/London] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-03-01 00:00:00 \u2506 2001-02-28 23:00:00 GMT     \u2502\n#&gt; \u2502 2001-04-01 00:12:34 \u2506 2001-03-31 23:12:34 BST     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_day/","title":"Day","text":"<p>Source code</p>"},{"location":"man/ExprDT_day/#description","title":"Description","text":"<p>Extract day from underlying Date representation. Applies to Date and Datetime columns. Returns the day of month starting from 1. The return value ranges from 1 to 31. (The last day of month differs by months.)</p>"},{"location":"man/ExprDT_day/#usage","title":"Usage","text":"<pre><code>ExprDT_day()\n</code></pre>"},{"location":"man/ExprDT_day/#value","title":"Value","text":"<p>Expr of day as UInt32</p>"},{"location":"man/ExprDT_day/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\",\n    eager = TRUE\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$day()$alias(\"day\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 day \u2502\n#&gt; \u2502 ---        \u2506 --- \u2502\n#&gt; \u2502 date       \u2506 i8  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 25  \u2502\n#&gt; \u2502 2020-12-26 \u2506 26  \u2502\n#&gt; \u2502 2020-12-27 \u2506 27  \u2502\n#&gt; \u2502 2020-12-28 \u2506 28  \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026   \u2502\n#&gt; \u2502 2021-01-02 \u2506 2   \u2502\n#&gt; \u2502 2021-01-03 \u2506 3   \u2502\n#&gt; \u2502 2021-01-04 \u2506 4   \u2502\n#&gt; \u2502 2021-01-05 \u2506 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_epoch/","title":"Epoch","text":"<p>Source code</p>"},{"location":"man/ExprDT_epoch/#description","title":"Description","text":"<p>Get the time passed since the Unix EPOCH in the give time unit.</p>"},{"location":"man/ExprDT_epoch/#usage","title":"Usage","text":"<pre><code>ExprDT_epoch(tu = c(\"us\", \"ns\", \"ms\", \"s\", \"d\"))\n</code></pre>"},{"location":"man/ExprDT_epoch/#arguments","title":"Arguments","text":"<code>tu</code>  string option either \u2018ns\u2019, \u2018us\u2019, \u2018ms\u2019, \u2018s\u2019 or \u2018d\u2019"},{"location":"man/ExprDT_epoch/#details","title":"Details","text":"<p>ns and perhaps us will exceed integerish limit if returning to R as flaot64/double.</p>"},{"location":"man/ExprDT_epoch/#value","title":"Value","text":"<p>Expr of epoch as UInt32</p>"},{"location":"man/ExprDT_epoch/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$date_range(as.Date(\"2022-1-1\"), eager = FALSE)$dt$epoch(\"ns\")$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i64]\n#&gt; [\n#&gt;  1640995200000000000\n#&gt; ]\n</code></pre> <pre><code>pl$date_range(as.Date(\"2022-1-1\"), eager = FALSE)$dt$epoch(\"ms\")$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i64]\n#&gt; [\n#&gt;  1640995200000\n#&gt; ]\n</code></pre> <pre><code>pl$date_range(as.Date(\"2022-1-1\"), eager = FALSE)$dt$epoch(\"s\")$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i64]\n#&gt; [\n#&gt;  1640995200\n#&gt; ]\n</code></pre> <pre><code>pl$date_range(as.Date(\"2022-1-1\"), eager = FALSE)$dt$epoch(\"d\")$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  18993\n#&gt; ]\n</code></pre>"},{"location":"man/ExprDT_hour/","title":"Hour","text":"<p>Source code</p>"},{"location":"man/ExprDT_hour/#description","title":"Description","text":"<p>Extract hour from underlying Datetime representation. Applies to Datetime columns. Returns the hour number from 0 to 23.</p>"},{"location":"man/ExprDT_hour/#usage","title":"Usage","text":"<pre><code>ExprDT_hour()\n</code></pre>"},{"location":"man/ExprDT_hour/#value","title":"Value","text":"<p>Expr of hour as UInt32</p>"},{"location":"man/ExprDT_hour/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d2h\",\n    time_zone = \"GMT\",\n    eager = TRUE\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$hour()$alias(\"hour\")\n)\n</code></pre> <pre><code>#&gt; shape: (11, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 hour \u2502\n#&gt; \u2502 ---                     \u2506 ---  \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 i8   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 0    \u2502\n#&gt; \u2502 2020-12-26 02:00:00 GMT \u2506 2    \u2502\n#&gt; \u2502 2020-12-27 04:00:00 GMT \u2506 4    \u2502\n#&gt; \u2502 2020-12-28 06:00:00 GMT \u2506 6    \u2502\n#&gt; \u2502 \u2026                       \u2506 \u2026    \u2502\n#&gt; \u2502 2021-01-01 14:00:00 GMT \u2506 14   \u2502\n#&gt; \u2502 2021-01-02 16:00:00 GMT \u2506 16   \u2502\n#&gt; \u2502 2021-01-03 18:00:00 GMT \u2506 18   \u2502\n#&gt; \u2502 2021-01-04 20:00:00 GMT \u2506 20   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_iso_year/","title":"Iso-Year","text":"<p>Source code</p>"},{"location":"man/ExprDT_iso_year/#description","title":"Description","text":"<p>Extract ISO year from underlying Date representation. Applies to Date and Datetime columns. Returns the year number in the ISO standard. This may not correspond with the calendar year.</p>"},{"location":"man/ExprDT_iso_year/#usage","title":"Usage","text":"<pre><code>ExprDT_iso_year()\n</code></pre>"},{"location":"man/ExprDT_iso_year/#value","title":"Value","text":"<p>Expr of iso_year as Int32</p>"},{"location":"man/ExprDT_iso_year/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\",\n    eager = TRUE\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$year()$alias(\"year\"),\n  pl$col(\"date\")$dt$iso_year()$alias(\"iso_year\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 year \u2506 iso_year \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2506 ---      \u2502\n#&gt; \u2502 date       \u2506 i32  \u2506 i32      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-26 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-27 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-28 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026    \u2506 \u2026        \u2502\n#&gt; \u2502 2021-01-02 \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-03 \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-04 \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2502 2021-01-05 \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_microsecond/","title":"Microsecond","text":"<p>Source code</p>"},{"location":"man/ExprDT_microsecond/#description","title":"Description","text":"<p>Extract microseconds from underlying Datetime representation. Applies to Datetime columns.</p>"},{"location":"man/ExprDT_microsecond/#usage","title":"Usage","text":"<pre><code>ExprDT_microsecond()\n</code></pre>"},{"location":"man/ExprDT_microsecond/#value","title":"Value","text":"<p>Expr of microsecond as Int64</p>"},{"location":"man/ExprDT_microsecond/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  date = pl$date_range(\n    as.numeric(as.POSIXct(\"2001-1-1\")) * 1E6 + 456789, # manually convert to us\n    as.numeric(as.POSIXct(\"2001-1-1 00:00:6\")) * 1E6,\n    interval = \"2s654321us\",\n    time_unit = \"us\", # instruct polars input is us, and store as us\n    eager = TRUE\n  )\n)$with_columns(\n  pl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"),\n  pl$col(\"date\")$dt$microsecond()$alias(\"microsecond\")\n)\n</code></pre> <pre><code>#&gt; shape: (2_089, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                         \u2506 datetime int64     \u2506 microsecond \u2502\n#&gt; \u2502 ---                          \u2506 ---                \u2506 ---         \u2502\n#&gt; \u2502 datetime[\u03bcs]                 \u2506 i64                \u2506 i32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 +32971-04-28 00:07:36.789    \u2506 978307200456789000 \u2506 789000      \u2502\n#&gt; \u2502 +32971-04-28 00:07:39.443321 \u2506 978307200459443321 \u2506 443321      \u2502\n#&gt; \u2502 +32971-04-28 00:07:42.097642 \u2506 978307200462097642 \u2506 97642       \u2502\n#&gt; \u2502 +32971-04-28 00:07:44.751963 \u2506 978307200464751963 \u2506 751963      \u2502\n#&gt; \u2502 \u2026                            \u2506 \u2026                  \u2506 \u2026           \u2502\n#&gt; \u2502 +32971-04-28 01:39:51.048285 \u2506 978307205991048285 \u2506 48285       \u2502\n#&gt; \u2502 +32971-04-28 01:39:53.702606 \u2506 978307205993702606 \u2506 702606      \u2502\n#&gt; \u2502 +32971-04-28 01:39:56.356927 \u2506 978307205996356927 \u2506 356927      \u2502\n#&gt; \u2502 +32971-04-28 01:39:59.011248 \u2506 978307205999011248 \u2506 11248       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_millisecond/","title":"Millisecond","text":"<p>Source code</p>"},{"location":"man/ExprDT_millisecond/#description","title":"Description","text":"<p>Extract milliseconds from underlying Datetime representation. Applies to Datetime columns.</p>"},{"location":"man/ExprDT_millisecond/#usage","title":"Usage","text":"<pre><code>ExprDT_millisecond()\n</code></pre>"},{"location":"man/ExprDT_millisecond/#value","title":"Value","text":"<p>Expr of millisecond as Int64</p>"},{"location":"man/ExprDT_millisecond/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(date = pl$date_range(\n  as.numeric(as.POSIXct(\"2001-1-1\")) * 1E6 + 456789, # manually convert to us\n  as.numeric(as.POSIXct(\"2001-1-1 00:00:6\")) * 1E6,\n  interval = \"2s654321us\",\n  time_unit = \"us\", # instruct polars input is us, and store as us\n  eager = TRUE\n))$with_columns(\n  pl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"),\n  pl$col(\"date\")$dt$millisecond()$alias(\"millisecond\")\n)\n</code></pre> <pre><code>#&gt; shape: (2_089, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                         \u2506 datetime int64     \u2506 millisecond \u2502\n#&gt; \u2502 ---                          \u2506 ---                \u2506 ---         \u2502\n#&gt; \u2502 datetime[\u03bcs]                 \u2506 i64                \u2506 i32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 +32971-04-28 00:07:36.789    \u2506 978307200456789000 \u2506 789         \u2502\n#&gt; \u2502 +32971-04-28 00:07:39.443321 \u2506 978307200459443321 \u2506 443         \u2502\n#&gt; \u2502 +32971-04-28 00:07:42.097642 \u2506 978307200462097642 \u2506 97          \u2502\n#&gt; \u2502 +32971-04-28 00:07:44.751963 \u2506 978307200464751963 \u2506 751         \u2502\n#&gt; \u2502 \u2026                            \u2506 \u2026                  \u2506 \u2026           \u2502\n#&gt; \u2502 +32971-04-28 01:39:51.048285 \u2506 978307205991048285 \u2506 48          \u2502\n#&gt; \u2502 +32971-04-28 01:39:53.702606 \u2506 978307205993702606 \u2506 702         \u2502\n#&gt; \u2502 +32971-04-28 01:39:56.356927 \u2506 978307205996356927 \u2506 356         \u2502\n#&gt; \u2502 +32971-04-28 01:39:59.011248 \u2506 978307205999011248 \u2506 11          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_minute/","title":"Minute","text":"<p>Source code</p>"},{"location":"man/ExprDT_minute/#description","title":"Description","text":"<p>Extract minutes from underlying Datetime representation. Applies to Datetime columns. Returns the minute number from 0 to 59.</p>"},{"location":"man/ExprDT_minute/#usage","title":"Usage","text":"<pre><code>ExprDT_minute()\n</code></pre>"},{"location":"man/ExprDT_minute/#value","title":"Value","text":"<p>Expr of minute as UInt32</p>"},{"location":"man/ExprDT_minute/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d5s\",\n    time_zone = \"GMT\",\n    eager = TRUE\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$minute()$alias(\"minute\")\n)\n</code></pre> <pre><code>#&gt; shape: (11, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 minute \u2502\n#&gt; \u2502 ---                     \u2506 ---    \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 i8     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 0      \u2502\n#&gt; \u2502 2020-12-26 00:00:05 GMT \u2506 0      \u2502\n#&gt; \u2502 2020-12-27 00:00:10 GMT \u2506 0      \u2502\n#&gt; \u2502 2020-12-28 00:00:15 GMT \u2506 0      \u2502\n#&gt; \u2502 \u2026                       \u2506 \u2026      \u2502\n#&gt; \u2502 2021-01-01 00:00:35 GMT \u2506 0      \u2502\n#&gt; \u2502 2021-01-02 00:00:40 GMT \u2506 0      \u2502\n#&gt; \u2502 2021-01-03 00:00:45 GMT \u2506 0      \u2502\n#&gt; \u2502 2021-01-04 00:00:50 GMT \u2506 0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_month/","title":"Month","text":"<p>Source code</p>"},{"location":"man/ExprDT_month/#description","title":"Description","text":"<p>Extract month from underlying Date representation. Applies to Date and Datetime columns. Returns the month number starting from 1. The return value ranges from 1 to 12.</p>"},{"location":"man/ExprDT_month/#usage","title":"Usage","text":"<pre><code>ExprDT_month()\n</code></pre>"},{"location":"man/ExprDT_month/#value","title":"Value","text":"<p>Expr of month as UInt32</p>"},{"location":"man/ExprDT_month/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\",\n    eager = TRUE\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$month()$alias(\"month\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 month \u2502\n#&gt; \u2502 ---        \u2506 ---   \u2502\n#&gt; \u2502 date       \u2506 i8    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 12    \u2502\n#&gt; \u2502 2020-12-26 \u2506 12    \u2502\n#&gt; \u2502 2020-12-27 \u2506 12    \u2502\n#&gt; \u2502 2020-12-28 \u2506 12    \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026     \u2502\n#&gt; \u2502 2021-01-02 \u2506 1     \u2502\n#&gt; \u2502 2021-01-03 \u2506 1     \u2502\n#&gt; \u2502 2021-01-04 \u2506 1     \u2502\n#&gt; \u2502 2021-01-05 \u2506 1     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_nanosecond/","title":"Nanosecond","text":"<p>Source code</p>"},{"location":"man/ExprDT_nanosecond/#description","title":"Description","text":"<p>Extract seconds from underlying Datetime representation. Applies to Datetime columns. Returns the integer second number from 0 to 59, or a floating point number from 0 \\&lt; 60 if <code>fractional=True</code> that includes any milli/micro/nanosecond component.</p>"},{"location":"man/ExprDT_nanosecond/#usage","title":"Usage","text":"<pre><code>ExprDT_nanosecond()\n</code></pre>"},{"location":"man/ExprDT_nanosecond/#value","title":"Value","text":"<p>Expr of second as Int64</p>"},{"location":"man/ExprDT_nanosecond/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(date = pl$date_range(\n  as.numeric(as.POSIXct(\"2001-1-1\")) * 1E9 + 123456789, # manually convert to us\n  as.numeric(as.POSIXct(\"2001-1-1 00:00:6\")) * 1E9,\n  interval = \"1s987654321ns\",\n  time_unit = \"ns\", # instruct polars input is us, and store as us\n  eager = TRUE\n))$with_columns(\n  pl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"),\n  pl$col(\"date\")$dt$nanosecond()$alias(\"nanosecond\")\n)\n</code></pre> <pre><code>#&gt; shape: (2_956_522, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                          \u2506 datetime int64      \u2506 nanosecond \u2502\n#&gt; \u2502 ---                           \u2506 ---                 \u2506 ---        \u2502\n#&gt; \u2502 datetime[ns]                  \u2506 i64                 \u2506 i32        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2051-08-06 07:05:44.407597056 \u2506 2574918344407597056 \u2506 407597056  \u2502\n#&gt; \u2502 2051-08-06 07:05:46.395251377 \u2506 2574918346395251377 \u2506 395251377  \u2502\n#&gt; \u2502 2051-08-06 07:05:48.382905698 \u2506 2574918348382905698 \u2506 382905698  \u2502\n#&gt; \u2502 2051-08-06 07:05:50.370560019 \u2506 2574918350370560019 \u2506 370560019  \u2502\n#&gt; \u2502 \u2026                             \u2506 \u2026                   \u2506 \u2026          \u2502\n#&gt; \u2502 2051-10-13 07:28:00.185411334 \u2506 2580794880185411334 \u2506 185411334  \u2502\n#&gt; \u2502 2051-10-13 07:28:02.173065655 \u2506 2580794882173065655 \u2506 173065655  \u2502\n#&gt; \u2502 2051-10-13 07:28:04.160719976 \u2506 2580794884160719976 \u2506 160719976  \u2502\n#&gt; \u2502 2051-10-13 07:28:06.148374297 \u2506 2580794886148374297 \u2506 148374297  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_offset_by/","title":"Offset By","text":"<p>Source code</p>"},{"location":"man/ExprDT_offset_by/#description","title":"Description","text":"<p>Offset this date by a relative time offset. This differs from <code>pl$col(\u201cfoo_datetime_tu\u201d) + value_tu</code> in that it can take months and leap years into account. Note that only a single minus sign is allowed in the <code>by</code> string, as the first character.</p>"},{"location":"man/ExprDT_offset_by/#usage","title":"Usage","text":"<pre><code>ExprDT_offset_by(by)\n</code></pre>"},{"location":"man/ExprDT_offset_by/#arguments","title":"Arguments","text":"<code>by</code>  optional string encoding duration see details."},{"location":"man/ExprDT_offset_by/#details","title":"Details","text":"<p>The <code>by</code> are created with the the following string language:</p> <ul> <li>  1ns \\# 1 nanosecond  </li> <li>  1us \\# 1 microsecond  </li> <li>  1ms \\# 1 millisecond  </li> <li>  1s \\# 1 second  </li> <li>  1m \\# 1 minute  </li> <li>  1h \\# 1 hour  </li> <li>  1d \\# 1 day  </li> <li>  1w \\# 1 calendar week  </li> <li>  1mo \\# 1 calendar month  </li> <li>  1y \\# 1 calendar year  </li> <li>  1i \\# 1 index count  </li> </ul> <p>These strings can be combined:</p> <ul> <li>  3d12h4m25s \\# 3 days, 12 hours, 4 minutes, and 25 seconds  </li> </ul>"},{"location":"man/ExprDT_offset_by/#value","title":"Value","text":"<p>Date/Datetime expr</p>"},{"location":"man/ExprDT_offset_by/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  dates = pl$date_range(\n    as.Date(\"2000-1-1\"),\n    as.Date(\"2005-1-1\"),\n    \"1y\",\n    eager = TRUE\n  )\n)\ndf$select(\n  pl$col(\"dates\")$dt$offset_by(\"1y\")$alias(\"date_plus_1y\"),\n  pl$col(\"dates\")$dt$offset_by(\"-1y2mo\")$alias(\"date_min\")\n)\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date_plus_1y \u2506 date_min   \u2502\n#&gt; \u2502 ---          \u2506 ---        \u2502\n#&gt; \u2502 date         \u2506 date       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01   \u2506 1998-11-01 \u2502\n#&gt; \u2502 2002-01-01   \u2506 1999-11-01 \u2502\n#&gt; \u2502 2003-01-01   \u2506 2000-11-01 \u2502\n#&gt; \u2502 2004-01-01   \u2506 2001-11-01 \u2502\n#&gt; \u2502 2005-01-01   \u2506 2002-11-01 \u2502\n#&gt; \u2502 2006-01-01   \u2506 2003-11-01 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># the \"by\" argument also accepts expressions\ndf = pl$DataFrame(\n  dates = pl$date_range(\n    as.POSIXct(\"2022-01-01\", tz = \"GMT\"),\n    as.POSIXct(\"2022-01-02\", tz = \"GMT\"),\n    interval = \"6h\", time_unit = \"ms\", time_zone = \"GMT\"\n  )$to_r(),\n  offset = c(\"1d\", \"-2d\", \"1mo\", NA, \"1y\")\n)\n\ndf\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dates                   \u2506 offset \u2502\n#&gt; \u2502 ---                     \u2506 ---    \u2502\n#&gt; \u2502 datetime[ms, GMT]       \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2022-01-01 00:00:00 GMT \u2506 1d     \u2502\n#&gt; \u2502 2022-01-01 06:00:00 GMT \u2506 -2d    \u2502\n#&gt; \u2502 2022-01-01 12:00:00 GMT \u2506 1mo    \u2502\n#&gt; \u2502 2022-01-01 18:00:00 GMT \u2506 null   \u2502\n#&gt; \u2502 2022-01-02 00:00:00 GMT \u2506 1y     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(new_dates = pl$col(\"dates\")$dt$offset_by(pl$col(\"offset\")))\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dates                   \u2506 offset \u2506 new_dates               \u2502\n#&gt; \u2502 ---                     \u2506 ---    \u2506 ---                     \u2502\n#&gt; \u2502 datetime[ms, GMT]       \u2506 str    \u2506 datetime[ms, GMT]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2022-01-01 00:00:00 GMT \u2506 1d     \u2506 2022-01-02 00:00:00 GMT \u2502\n#&gt; \u2502 2022-01-01 06:00:00 GMT \u2506 -2d    \u2506 2021-12-30 06:00:00 GMT \u2502\n#&gt; \u2502 2022-01-01 12:00:00 GMT \u2506 1mo    \u2506 2022-02-01 12:00:00 GMT \u2502\n#&gt; \u2502 2022-01-01 18:00:00 GMT \u2506 null   \u2506 null                    \u2502\n#&gt; \u2502 2022-01-02 00:00:00 GMT \u2506 1y     \u2506 2023-01-02 00:00:00 GMT \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_ordinal_day/","title":"Ordinal Day","text":"<p>Source code</p>"},{"location":"man/ExprDT_ordinal_day/#description","title":"Description","text":"<p>Extract ordinal day from underlying Date representation. Applies to Date and Datetime columns. Returns the day of year starting from 1. The return value ranges from 1 to 366. (The last day of year differs by years.)</p>"},{"location":"man/ExprDT_ordinal_day/#usage","title":"Usage","text":"<pre><code>ExprDT_ordinal_day()\n</code></pre>"},{"location":"man/ExprDT_ordinal_day/#value","title":"Value","text":"<p>Expr of ordinal_day as UInt32</p>"},{"location":"man/ExprDT_ordinal_day/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\",\n    eager = TRUE\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$ordinal_day()$alias(\"ordinal_day\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 ordinal_day \u2502\n#&gt; \u2502 ---        \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 i16         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 360         \u2502\n#&gt; \u2502 2020-12-26 \u2506 361         \u2502\n#&gt; \u2502 2020-12-27 \u2506 362         \u2502\n#&gt; \u2502 2020-12-28 \u2506 363         \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026           \u2502\n#&gt; \u2502 2021-01-02 \u2506 2           \u2502\n#&gt; \u2502 2021-01-03 \u2506 3           \u2502\n#&gt; \u2502 2021-01-04 \u2506 4           \u2502\n#&gt; \u2502 2021-01-05 \u2506 5           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_quarter/","title":"Quarter","text":"<p>Source code</p>"},{"location":"man/ExprDT_quarter/#description","title":"Description","text":"<p>Extract quarter from underlying Date representation. Applies to Date and Datetime columns. Returns the quarter ranging from 1 to 4.</p>"},{"location":"man/ExprDT_quarter/#usage","title":"Usage","text":"<pre><code>ExprDT_quarter()\n</code></pre>"},{"location":"man/ExprDT_quarter/#value","title":"Value","text":"<p>Expr of quarter as UInt32</p>"},{"location":"man/ExprDT_quarter/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\",\n    eager = TRUE\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$quarter()$alias(\"quarter\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 quarter \u2502\n#&gt; \u2502 ---        \u2506 ---     \u2502\n#&gt; \u2502 date       \u2506 i8      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 4       \u2502\n#&gt; \u2502 2020-12-26 \u2506 4       \u2502\n#&gt; \u2502 2020-12-27 \u2506 4       \u2502\n#&gt; \u2502 2020-12-28 \u2506 4       \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026       \u2502\n#&gt; \u2502 2021-01-02 \u2506 1       \u2502\n#&gt; \u2502 2021-01-03 \u2506 1       \u2502\n#&gt; \u2502 2021-01-04 \u2506 1       \u2502\n#&gt; \u2502 2021-01-05 \u2506 1       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_replace_time_zone/","title":"replace_time_zone","text":"<p>Source code</p>"},{"location":"man/ExprDT_replace_time_zone/#description","title":"Description","text":"<p>Cast time zone for a Series of type Datetime. Different from <code>convert_time_zone</code>, this will also modify the underlying timestamp. Use to correct a wrong time zone annotation. This will change the corresponding global timepoint.</p>"},{"location":"man/ExprDT_replace_time_zone/#usage","title":"Usage","text":"<pre><code>ExprDT_replace_time_zone(tz, ambiguous = \"raise\")\n</code></pre>"},{"location":"man/ExprDT_replace_time_zone/#arguments","title":"Arguments","text":"<code>tz</code>  NULL or string time zone from <code>base::OlsonNames()</code> <code>ambiguous</code>   Determine how to deal with ambiguous datetimes:  <ul> <li> <code>\u201craise\u201d</code> (default): raise  </li> <li> <code>\u201cearliest\u201d</code>: use the earliest datetime  </li> <li> <code>\u201clatest\u201d</code>: use the latest datetime  </li> </ul>"},{"location":"man/ExprDT_replace_time_zone/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_replace_time_zone/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf_1 = pl$DataFrame(x = as.POSIXct(\"2009-08-07 00:00:01\", tz = \"America/New_York\"))\n\ndf_1$with_columns(\n  pl$col(\"x\")$dt$replace_time_zone(\"UTC\")$alias(\"utc\"),\n  pl$col(\"x\")$dt$replace_time_zone(\"Europe/Amsterdam\")$alias(\"cest\")\n)\n</code></pre> <pre><code>#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x                              \u2506 utc                     \u2506 cest                           \u2502\n#&gt; \u2502 ---                            \u2506 ---                     \u2506 ---                            \u2502\n#&gt; \u2502 datetime[ms, America/New_York] \u2506 datetime[ms, UTC]       \u2506 datetime[ms, Europe/Amsterdam] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2009-08-07 00:00:01 EDT        \u2506 2009-08-07 00:00:01 UTC \u2506 2009-08-07 00:00:01 CEST       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># You can use ambiguous to deal with ambiguous datetimes\ndf_2 = pl$DataFrame(\n  x = seq(\n    as.POSIXct(\"2018-10-28 01:30\", tz = \"UTC\"),\n    as.POSIXct(\"2018-10-28 02:30\", tz = \"UTC\"),\n    by = \"30 min\"\n  )\n)\n\ndf_2$with_columns(\n  pl$col(\"x\")$dt$replace_time_zone(\"Europe/Brussels\", \"earliest\")$alias(\"earliest\"),\n  pl$col(\"x\")$dt$replace_time_zone(\"Europe/Brussels\", \"latest\")$alias(\"latest\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x                       \u2506 earliest                      \u2506 latest                        \u2502\n#&gt; \u2502 ---                     \u2506 ---                           \u2506 ---                           \u2502\n#&gt; \u2502 datetime[ms, UTC]       \u2506 datetime[ms, Europe/Brussels] \u2506 datetime[ms, Europe/Brussels] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2018-10-28 01:30:00 UTC \u2506 2018-10-28 01:30:00 CEST      \u2506 2018-10-28 01:30:00 CEST      \u2502\n#&gt; \u2502 2018-10-28 02:00:00 UTC \u2506 2018-10-28 02:00:00 CEST      \u2506 2018-10-28 02:00:00 CET       \u2502\n#&gt; \u2502 2018-10-28 02:30:00 UTC \u2506 2018-10-28 02:30:00 CEST      \u2506 2018-10-28 02:30:00 CET       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_round/","title":"Round datetime","text":"<p>Source code</p>"},{"location":"man/ExprDT_round/#description","title":"Description","text":"<p>Divide the date/datetime range into buckets. Each date/datetime in the first half of the interval is mapped to the start of its bucket. Each date/datetime in the second half of the interval is mapped to the end of its bucket.</p>"},{"location":"man/ExprDT_round/#usage","title":"Usage","text":"<pre><code>ExprDT_round(every, offset = NULL)\n</code></pre>"},{"location":"man/ExprDT_round/#arguments","title":"Arguments","text":"<code>every</code>  string encoding duration see details.  <code>offset</code>  optional string encoding duration see details."},{"location":"man/ExprDT_round/#details","title":"Details","text":"<p>The <code>every</code> and <code>offset</code> argument are created with the the following string language:</p> <ul> <li>  1ns \\# 1 nanosecond  </li> <li>  1us \\# 1 microsecond  </li> <li>  1ms \\# 1 millisecond  </li> <li>  1s \\# 1 second  </li> <li>  1m \\# 1 minute  </li> <li>  1h \\# 1 hour  </li> <li>  1d \\# 1 day  </li> <li>  1w \\# 1 calendar week  </li> <li>  1mo \\# 1 calendar month  </li> <li>  1y \\# 1 calendar year These strings can be combined:  <ul> <li>  3d12h4m25s \\# 3 days, 12 hours, 4 minutes, and 25 seconds  </li> </ul> </li> </ul> <p>This functionality is currently experimental and may change without it being considered a breaking change.</p>"},{"location":"man/ExprDT_round/#value","title":"Value","text":"<p>Date/Datetime expr</p>"},{"location":"man/ExprDT_round/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nt1 = as.POSIXct(\"3040-01-01\", tz = \"GMT\")\nt2 = t1 + as.difftime(25, units = \"secs\")\ns = pl$date_range(t1, t2, interval = \"2s\", time_unit = \"ms\", eager = TRUE)\n\n# use a dt namespace function\ndf = pl$DataFrame(datetime = s)$with_columns(\n  pl$col(\"datetime\")$dt$truncate(\"4s\")$alias(\"truncated_4s\"),\n  pl$col(\"datetime\")$dt$truncate(\"4s\", offset(\"3s\"))$alias(\"truncated_4s_offset_2s\")\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (13, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 datetime                \u2506 truncated_4s            \u2506 truncated_4s_offset_2s  \u2502\n#&gt; \u2502 ---                     \u2506 ---                     \u2506 ---                     \u2502\n#&gt; \u2502 datetime[ms, GMT]       \u2506 datetime[ms, GMT]       \u2506 datetime[ms, GMT]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:03 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:02 GMT \u2506 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:03 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:07 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:06 GMT \u2506 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:07 GMT \u2502\n#&gt; \u2502 \u2026                       \u2506 \u2026                       \u2506 \u2026                       \u2502\n#&gt; \u2502 3040-01-01 00:00:18 GMT \u2506 3040-01-01 00:00:16 GMT \u2506 3040-01-01 00:00:19 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:23 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:22 GMT \u2506 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:23 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:24 GMT \u2506 3040-01-01 00:00:24 GMT \u2506 3040-01-01 00:00:27 GMT \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_second/","title":"Second","text":"<p>Source code</p>"},{"location":"man/ExprDT_second/#description","title":"Description","text":"<p>Extract seconds from underlying Datetime representation. Applies to Datetime columns. Returns the integer second number from 0 to 59, or a floating point number from 0 \\&lt; 60 if <code>fractional=True</code> that includes any milli/micro/nanosecond component.</p>"},{"location":"man/ExprDT_second/#usage","title":"Usage","text":"<pre><code>ExprDT_second(fractional = FALSE)\n</code></pre>"},{"location":"man/ExprDT_second/#arguments","title":"Arguments","text":"<code>fractional</code>  Whether to include the fractional component of the second."},{"location":"man/ExprDT_second/#value","title":"Value","text":"<p>Expr of second as UInt32</p>"},{"location":"man/ExprDT_second/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(date = pl$date_range(\n  as.numeric(as.POSIXct(\"2001-1-1\")) * 1E6 + 456789, # manually convert to us\n  as.numeric(as.POSIXct(\"2001-1-1 00:00:6\")) * 1E6,\n  interval = \"2s654321us\",\n  time_unit = \"us\", # instruct polars input is us, and store as us\n  eager = TRUE\n))$with_columns(\n  pl$col(\"date\")$dt$second()$alias(\"second\"),\n  pl$col(\"date\")$dt$second(fractional = TRUE)$alias(\"second_frac\")\n)\n</code></pre> <pre><code>#&gt; shape: (2_089, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                         \u2506 second \u2506 second_frac \u2502\n#&gt; \u2502 ---                          \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 datetime[\u03bcs]                 \u2506 i8     \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 +32971-04-28 00:07:36.789    \u2506 36     \u2506 36.789      \u2502\n#&gt; \u2502 +32971-04-28 00:07:39.443321 \u2506 39     \u2506 39.443321   \u2502\n#&gt; \u2502 +32971-04-28 00:07:42.097642 \u2506 42     \u2506 42.097642   \u2502\n#&gt; \u2502 +32971-04-28 00:07:44.751963 \u2506 44     \u2506 44.751963   \u2502\n#&gt; \u2502 \u2026                            \u2506 \u2026      \u2506 \u2026           \u2502\n#&gt; \u2502 +32971-04-28 01:39:51.048285 \u2506 51     \u2506 51.048285   \u2502\n#&gt; \u2502 +32971-04-28 01:39:53.702606 \u2506 53     \u2506 53.702606   \u2502\n#&gt; \u2502 +32971-04-28 01:39:56.356927 \u2506 56     \u2506 56.356927   \u2502\n#&gt; \u2502 +32971-04-28 01:39:59.011248 \u2506 59     \u2506 59.011248   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_strftime/","title":"strftime","text":"<p>Source code</p>"},{"location":"man/ExprDT_strftime/#description","title":"Description","text":"<p>Format Date/Datetime with a formatting rule. See <code>chrono strftime/strptime \\&lt;https://docs.rs/chrono/latest/chrono/format/strftime/index.html&gt;</code>_.</p>"},{"location":"man/ExprDT_strftime/#usage","title":"Usage","text":"<pre><code>ExprDT_strftime(format)\n</code></pre>"},{"location":"man/ExprDT_strftime/#arguments","title":"Arguments","text":"<code>format</code>  string format very much like in R passed to chrono"},{"location":"man/ExprDT_strftime/#value","title":"Value","text":"<p>Date/Datetime expr</p>"},{"location":"man/ExprDT_strftime/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(as.POSIXct(\"2021-01-02 12:13:14\", tz = \"GMT\"))$dt$strftime(\"this is the year: %Y\")$to_r()\n</code></pre> <pre><code>#&gt; [1] \"this is the year: 2021\"\n</code></pre>"},{"location":"man/ExprDT_time/","title":"Extract time from a Datetime Series","text":"<p>Source code</p>"},{"location":"man/ExprDT_time/#description","title":"Description","text":"<p>This only works on Datetime Series, it will error on Date Series.</p>"},{"location":"man/ExprDT_time/#usage","title":"Usage","text":"<pre><code>ExprDT_time()\n</code></pre>"},{"location":"man/ExprDT_time/#value","title":"Value","text":"<p>A Time Expr</p>"},{"location":"man/ExprDT_time/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(dates = pl$date_range(\n  as.Date(\"2000-1-1\"),\n  as.Date(\"2000-1-2\"),\n  \"1h\",\n  eager = TRUE\n))\n\ndf$with_columns(times = pl$col(\"dates\")$dt$time())\n</code></pre> <pre><code>#&gt; shape: (25, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dates               \u2506 times    \u2502\n#&gt; \u2502 ---                 \u2506 ---      \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 time     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2000-01-01 00:00:00 \u2506 00:00:00 \u2502\n#&gt; \u2502 2000-01-01 01:00:00 \u2506 01:00:00 \u2502\n#&gt; \u2502 2000-01-01 02:00:00 \u2506 02:00:00 \u2502\n#&gt; \u2502 2000-01-01 03:00:00 \u2506 03:00:00 \u2502\n#&gt; \u2502 \u2026                   \u2506 \u2026        \u2502\n#&gt; \u2502 2000-01-01 21:00:00 \u2506 21:00:00 \u2502\n#&gt; \u2502 2000-01-01 22:00:00 \u2506 22:00:00 \u2502\n#&gt; \u2502 2000-01-01 23:00:00 \u2506 23:00:00 \u2502\n#&gt; \u2502 2000-01-02 00:00:00 \u2506 00:00:00 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_timestamp/","title":"timestamp","text":"<p>Source code</p>"},{"location":"man/ExprDT_timestamp/#description","title":"Description","text":"<p>Return a timestamp in the given time unit.</p>"},{"location":"man/ExprDT_timestamp/#usage","title":"Usage","text":"<pre><code>ExprDT_timestamp(tu = c(\"ns\", \"us\", \"ms\"))\n</code></pre>"},{"location":"man/ExprDT_timestamp/#arguments","title":"Arguments","text":"<code>tu</code>  string option either \u2018ns\u2019, \u2018us\u2019, or \u2018ms\u2019"},{"location":"man/ExprDT_timestamp/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_timestamp/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2001-1-1\"),\n    end = as.Date(\"2001-1-3\"),\n    interval = \"1d1s\",\n    eager = TRUE\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  pl$col(\"date\")$dt$timestamp()$alias(\"timestamp_ns\"),\n  pl$col(\"date\")$dt$timestamp(tu = \"ms\")$alias(\"timestamp_ms\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 timestamp_ns       \u2506 timestamp_ms \u2502\n#&gt; \u2502 ---                 \u2506 ---                \u2506 ---          \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 i64                \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01 00:00:00 \u2506 978307200000000000 \u2506 978307200000 \u2502\n#&gt; \u2502 2001-01-02 00:00:01 \u2506 978393601000000000 \u2506 978393601000 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_days/","title":"Days","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_days/#description","title":"Description","text":"<p>Extract the days from a Duration type.</p>"},{"location":"man/ExprDT_total_days/#usage","title":"Usage","text":"<pre><code>ExprDT_total_days()\n</code></pre>"},{"location":"man/ExprDT_total_days/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_days/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2020-3-1\"),\n    end = as.Date(\"2020-5-1\"),\n    interval = \"1mo\",\n    eager = TRUE\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  diff_days = pl$col(\"date\")$diff()$dt$total_days()\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 diff_days \u2502\n#&gt; \u2502 ---        \u2506 ---       \u2502\n#&gt; \u2502 date       \u2506 i64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-03-01 \u2506 null      \u2502\n#&gt; \u2502 2020-04-01 \u2506 31        \u2502\n#&gt; \u2502 2020-05-01 \u2506 30        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_hours/","title":"Hours","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_hours/#description","title":"Description","text":"<p>Extract the hours from a Duration type.</p>"},{"location":"man/ExprDT_total_hours/#usage","title":"Usage","text":"<pre><code>ExprDT_total_hours()\n</code></pre>"},{"location":"man/ExprDT_total_hours/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_hours/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2020-1-1\"),\n    end = as.Date(\"2020-1-4\"),\n    interval = \"1d\",\n    eager = TRUE\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  diff_hours = pl$col(\"date\")$diff()$dt$total_hours()\n)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 diff_hours \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2502\n#&gt; \u2502 date       \u2506 i64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 \u2506 null       \u2502\n#&gt; \u2502 2020-01-02 \u2506 24         \u2502\n#&gt; \u2502 2020-01-03 \u2506 24         \u2502\n#&gt; \u2502 2020-01-04 \u2506 24         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_microseconds/","title":"microseconds","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_microseconds/#description","title":"Description","text":"<p>Extract the microseconds from a Duration type.</p>"},{"location":"man/ExprDT_total_microseconds/#usage","title":"Usage","text":"<pre><code>ExprDT_total_microseconds()\n</code></pre>"},{"location":"man/ExprDT_total_microseconds/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_microseconds/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(date = pl$date_range(\n  start = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n  end = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"),\n  interval = \"1ms\",\n  eager = TRUE\n))\ndf$select(\n  pl$col(\"date\"),\n  diff_microsec = pl$col(\"date\")$diff()$dt$total_microseconds()\n)\n</code></pre> <pre><code>#&gt; shape: (1_001, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                        \u2506 diff_microsec \u2502\n#&gt; \u2502 ---                         \u2506 ---           \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]           \u2506 i64           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00 GMT     \u2506 null          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.001 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.002 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.003 GMT \u2506 1000          \u2502\n#&gt; \u2502 \u2026                           \u2506 \u2026             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.997 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.998 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.999 GMT \u2506 1000          \u2502\n#&gt; \u2502 2020-01-01 00:00:01 GMT     \u2506 1000          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_milliseconds/","title":"milliseconds","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_milliseconds/#description","title":"Description","text":"<p>Extract the milliseconds from a Duration type.</p>"},{"location":"man/ExprDT_total_milliseconds/#usage","title":"Usage","text":"<pre><code>ExprDT_total_milliseconds()\n</code></pre>"},{"location":"man/ExprDT_total_milliseconds/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_milliseconds/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(date = pl$date_range(\n  start = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n  end = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"),\n  interval = \"1ms\",\n  eager = TRUE\n))\ndf$select(\n  pl$col(\"date\"),\n  diff_millisec = pl$col(\"date\")$diff()$dt$total_milliseconds()\n)\n</code></pre> <pre><code>#&gt; shape: (1_001, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                        \u2506 diff_millisec \u2502\n#&gt; \u2502 ---                         \u2506 ---           \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]           \u2506 i64           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00 GMT     \u2506 null          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.001 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.002 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.003 GMT \u2506 1             \u2502\n#&gt; \u2502 \u2026                           \u2506 \u2026             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.997 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.998 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:00.999 GMT \u2506 1             \u2502\n#&gt; \u2502 2020-01-01 00:00:01 GMT     \u2506 1             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_minutes/","title":"Minutes","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_minutes/#description","title":"Description","text":"<p>Extract the minutes from a Duration type.</p>"},{"location":"man/ExprDT_total_minutes/#usage","title":"Usage","text":"<pre><code>ExprDT_total_minutes()\n</code></pre>"},{"location":"man/ExprDT_total_minutes/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_minutes/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2020-1-1\"),\n    end = as.Date(\"2020-1-4\"),\n    interval = \"1d\",\n    eager = TRUE\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  diff_minutes = pl$col(\"date\")$diff()$dt$total_minutes()\n)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 diff_minutes \u2502\n#&gt; \u2502 ---        \u2506 ---          \u2502\n#&gt; \u2502 date       \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 \u2506 null         \u2502\n#&gt; \u2502 2020-01-02 \u2506 1440         \u2502\n#&gt; \u2502 2020-01-03 \u2506 1440         \u2502\n#&gt; \u2502 2020-01-04 \u2506 1440         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_nanoseconds/","title":"nanoseconds","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_nanoseconds/#description","title":"Description","text":"<p>Extract the nanoseconds from a Duration type.</p>"},{"location":"man/ExprDT_total_nanoseconds/#usage","title":"Usage","text":"<pre><code>ExprDT_total_nanoseconds()\n</code></pre>"},{"location":"man/ExprDT_total_nanoseconds/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_nanoseconds/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(date = pl$date_range(\n  start = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n  end = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"),\n  interval = \"1ms\",\n  eager = TRUE\n))\ndf$select(\n  pl$col(\"date\"),\n  diff_nanosec = pl$col(\"date\")$diff()$dt$total_nanoseconds()\n)\n</code></pre> <pre><code>#&gt; shape: (1_001, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                        \u2506 diff_nanosec \u2502\n#&gt; \u2502 ---                         \u2506 ---          \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]           \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00 GMT     \u2506 null         \u2502\n#&gt; \u2502 2020-01-01 00:00:00.001 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.002 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.003 GMT \u2506 1000000      \u2502\n#&gt; \u2502 \u2026                           \u2506 \u2026            \u2502\n#&gt; \u2502 2020-01-01 00:00:00.997 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.998 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.999 GMT \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:01 GMT     \u2506 1000000      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_total_seconds/","title":"Seconds","text":"<p>Source code</p>"},{"location":"man/ExprDT_total_seconds/#description","title":"Description","text":"<p>Extract the seconds from a Duration type.</p>"},{"location":"man/ExprDT_total_seconds/#usage","title":"Usage","text":"<pre><code>ExprDT_total_seconds()\n</code></pre>"},{"location":"man/ExprDT_total_seconds/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_total_seconds/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(date = pl$date_range(\n  start = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n  end = as.POSIXct(\"2020-1-1 00:04:00\", tz = \"GMT\"),\n  interval = \"1m\",\n  eager = TRUE\n))\ndf$select(\n  pl$col(\"date\"),\n  diff_sec = pl$col(\"date\")$diff()$dt$total_seconds()\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 diff_sec \u2502\n#&gt; \u2502 ---                     \u2506 ---      \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 i64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00 GMT \u2506 null     \u2502\n#&gt; \u2502 2020-01-01 00:01:00 GMT \u2506 60       \u2502\n#&gt; \u2502 2020-01-01 00:02:00 GMT \u2506 60       \u2502\n#&gt; \u2502 2020-01-01 00:03:00 GMT \u2506 60       \u2502\n#&gt; \u2502 2020-01-01 00:04:00 GMT \u2506 60       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_truncate/","title":"Truncate datetime","text":"<p>Source code</p>"},{"location":"man/ExprDT_truncate/#description","title":"Description","text":"<p>Divide the date/datetime range into buckets. Each date/datetime is mapped to the start of its bucket.</p>"},{"location":"man/ExprDT_truncate/#usage","title":"Usage","text":"<pre><code>ExprDT_truncate(every, offset = NULL)\n</code></pre>"},{"location":"man/ExprDT_truncate/#arguments","title":"Arguments","text":"<code>every</code>  string encoding duration see details.  <code>offset</code>  optional string encoding duration see details."},{"location":"man/ExprDT_truncate/#details","title":"Details","text":"<p>The <code>every</code> and <code>offset</code> argument are created with the the following string language:</p> <ul> <li>  1ns \\# 1 nanosecond  </li> <li>  1us \\# 1 microsecond  </li> <li>  1ms \\# 1 millisecond  </li> <li>  1s \\# 1 second  </li> <li>  1m \\# 1 minute  </li> <li>  1h \\# 1 hour  </li> <li>  1d \\# 1 day  </li> <li>  1w \\# 1 calendar week  </li> <li>  1mo \\# 1 calendar month  </li> <li>  1y \\# 1 calendar year These strings can be combined:  <ul> <li>  3d12h4m25s \\# 3 days, 12 hours, 4 minutes, and 25 seconds  </li> </ul> </li> </ul>"},{"location":"man/ExprDT_truncate/#value","title":"Value","text":"<p>Date/Datetime expr</p>"},{"location":"man/ExprDT_truncate/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nt1 = as.POSIXct(\"3040-01-01\", tz = \"GMT\")\nt2 = t1 + as.difftime(25, units = \"secs\")\ns = pl$date_range(t1, t2, interval = \"2s\", time_unit = \"ms\", eager = TRUE)\n\n# use a dt namespace function\ndf = pl$DataFrame(datetime = s)$with_columns(\n  pl$col(\"datetime\")$dt$truncate(\"4s\")$alias(\"truncated_4s\"),\n  pl$col(\"datetime\")$dt$truncate(\"4s\", offset(\"3s\"))$alias(\"truncated_4s_offset_2s\")\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (13, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 datetime                \u2506 truncated_4s            \u2506 truncated_4s_offset_2s  \u2502\n#&gt; \u2502 ---                     \u2506 ---                     \u2506 ---                     \u2502\n#&gt; \u2502 datetime[ms, GMT]       \u2506 datetime[ms, GMT]       \u2506 datetime[ms, GMT]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:03 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:02 GMT \u2506 3040-01-01 00:00:00 GMT \u2506 3040-01-01 00:00:03 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:07 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:06 GMT \u2506 3040-01-01 00:00:04 GMT \u2506 3040-01-01 00:00:07 GMT \u2502\n#&gt; \u2502 \u2026                       \u2506 \u2026                       \u2506 \u2026                       \u2502\n#&gt; \u2502 3040-01-01 00:00:18 GMT \u2506 3040-01-01 00:00:16 GMT \u2506 3040-01-01 00:00:19 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:23 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:22 GMT \u2506 3040-01-01 00:00:20 GMT \u2506 3040-01-01 00:00:23 GMT \u2502\n#&gt; \u2502 3040-01-01 00:00:24 GMT \u2506 3040-01-01 00:00:24 GMT \u2506 3040-01-01 00:00:27 GMT \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_week/","title":"Week","text":"<p>Source code</p>"},{"location":"man/ExprDT_week/#description","title":"Description","text":"<p>Extract the week from the underlying Date representation. Applies to Date and Datetime columns. Returns the ISO week number starting from 1. The return value ranges from 1 to 53. (The last week of year differs by years.)</p>"},{"location":"man/ExprDT_week/#usage","title":"Usage","text":"<pre><code>ExprDT_week()\n</code></pre>"},{"location":"man/ExprDT_week/#value","title":"Value","text":"<p>Expr of week as UInt32</p>"},{"location":"man/ExprDT_week/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\",\n    eager = TRUE\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$week()$alias(\"week\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 week \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2502\n#&gt; \u2502 date       \u2506 i8   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 52   \u2502\n#&gt; \u2502 2020-12-26 \u2506 52   \u2502\n#&gt; \u2502 2020-12-27 \u2506 52   \u2502\n#&gt; \u2502 2020-12-28 \u2506 53   \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026    \u2502\n#&gt; \u2502 2021-01-02 \u2506 53   \u2502\n#&gt; \u2502 2021-01-03 \u2506 53   \u2502\n#&gt; \u2502 2021-01-04 \u2506 1    \u2502\n#&gt; \u2502 2021-01-05 \u2506 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_weekday/","title":"Weekday","text":"<p>Source code</p>"},{"location":"man/ExprDT_weekday/#description","title":"Description","text":"<p>Extract the week day from the underlying Date representation. Applies to Date and Datetime columns. Returns the ISO weekday number where monday = 1 and sunday = 7</p>"},{"location":"man/ExprDT_weekday/#usage","title":"Usage","text":"<pre><code>ExprDT_weekday()\n</code></pre>"},{"location":"man/ExprDT_weekday/#value","title":"Value","text":"<p>Expr of weekday as UInt32</p>"},{"location":"man/ExprDT_weekday/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\",\n    eager = TRUE\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$weekday()$alias(\"weekday\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 weekday \u2502\n#&gt; \u2502 ---        \u2506 ---     \u2502\n#&gt; \u2502 date       \u2506 i8      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 5       \u2502\n#&gt; \u2502 2020-12-26 \u2506 6       \u2502\n#&gt; \u2502 2020-12-27 \u2506 7       \u2502\n#&gt; \u2502 2020-12-28 \u2506 1       \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026       \u2502\n#&gt; \u2502 2021-01-02 \u2506 6       \u2502\n#&gt; \u2502 2021-01-03 \u2506 7       \u2502\n#&gt; \u2502 2021-01-04 \u2506 1       \u2502\n#&gt; \u2502 2021-01-05 \u2506 2       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_with_time_unit/","title":"with_time_unit","text":"<p>Source code</p>"},{"location":"man/ExprDT_with_time_unit/#description","title":"Description","text":"<p>Set time unit of a Series of dtype Datetime or Duration. This does not modify underlying data, and should be used to fix an incorrect time unit. The corresponding global timepoint will change.</p>"},{"location":"man/ExprDT_with_time_unit/#usage","title":"Usage","text":"<pre><code>ExprDT_with_time_unit(tu = c(\"ns\", \"us\", \"ms\"))\n</code></pre>"},{"location":"man/ExprDT_with_time_unit/#arguments","title":"Arguments","text":"<code>tu</code>  string option either \u2018ns\u2019, \u2018us\u2019, or \u2018ms\u2019"},{"location":"man/ExprDT_with_time_unit/#value","title":"Value","text":"<p>Expr of i64</p>"},{"location":"man/ExprDT_with_time_unit/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    start = as.Date(\"2001-1-1\"),\n    end = as.Date(\"2001-1-3\"),\n    interval = \"1d1s\",\n    eager = TRUE\n  )\n)\ndf$select(\n  pl$col(\"date\"),\n  pl$col(\"date\")$dt$with_time_unit()$alias(\"with_time_unit_ns\"),\n  pl$col(\"date\")$dt$with_time_unit(tu = \"ms\")$alias(\"with_time_unit_ms\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 with_time_unit_ns       \u2506 with_time_unit_ms     \u2502\n#&gt; \u2502 ---                 \u2506 ---                     \u2506 ---                   \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 datetime[ns]            \u2506 datetime[ms]          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01 00:00:00 \u2506 1970-01-12 07:45:07.200 \u2506 +32971-04-28 00:00:00 \u2502\n#&gt; \u2502 2001-01-02 00:00:01 \u2506 1970-01-12 07:46:33.601 \u2506 +32974-01-22 00:16:40 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprDT_year/","title":"Year","text":"<p>Source code</p>"},{"location":"man/ExprDT_year/#description","title":"Description","text":"<p>Extract year from underlying Date representation. Applies to Date and Datetime columns. Returns the year number in the calendar date.</p>"},{"location":"man/ExprDT_year/#usage","title":"Usage","text":"<pre><code>ExprDT_year()\n</code></pre>"},{"location":"man/ExprDT_year/#value","title":"Value","text":"<p>Expr of Year as Int32</p>"},{"location":"man/ExprDT_year/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  date = pl$date_range(\n    as.Date(\"2020-12-25\"),\n    as.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\",\n    eager = TRUE\n  )\n)\ndf$with_columns(\n  pl$col(\"date\")$dt$year()$alias(\"year\"),\n  pl$col(\"date\")$dt$iso_year()$alias(\"iso_year\")\n)\n</code></pre> <pre><code>#&gt; shape: (12, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 year \u2506 iso_year \u2502\n#&gt; \u2502 ---        \u2506 ---  \u2506 ---      \u2502\n#&gt; \u2502 date       \u2506 i32  \u2506 i32      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-26 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-27 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-28 \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026    \u2506 \u2026        \u2502\n#&gt; \u2502 2021-01-02 \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-03 \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-04 \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2502 2021-01-05 \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_arg_max/","title":"Arg max sublists","text":"<p>Source code</p>"},{"location":"man/ExprList_arg_max/#description","title":"Description","text":"<p>Retrieve the index of the maximum value in every sublist.</p>"},{"location":"man/ExprList_arg_max/#usage","title":"Usage","text":"<pre><code>ExprList_arg_max()\n</code></pre>"},{"location":"man/ExprList_arg_max/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_arg_max/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_arg_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(s = list(1:2, 2:1)))\ndf$select(pl$col(\"s\")$list$arg_max())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_arg_min/","title":"Arg min sublists","text":"<p>Source code</p>"},{"location":"man/ExprList_arg_min/#description","title":"Description","text":"<p>Retrieve the index of the minimal value in every sublist.</p>"},{"location":"man/ExprList_arg_min/#usage","title":"Usage","text":"<pre><code>ExprList_arg_min()\n</code></pre>"},{"location":"man/ExprList_arg_min/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_arg_min/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_arg_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(s = list(1:2, 2:1)))\ndf$select(pl$col(\"s\")$list$arg_min())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_concat/","title":"concat another list","text":"<p>Source code</p>"},{"location":"man/ExprList_concat/#description","title":"Description","text":"<p>Concat the arrays in a Series dtype List in linear time.</p>"},{"location":"man/ExprList_concat/#usage","title":"Usage","text":"<pre><code>ExprList_concat(other)\n</code></pre>"},{"location":"man/ExprList_concat/#arguments","title":"Arguments","text":"<code>other</code>  Rlist, Expr or column of same type as self."},{"location":"man/ExprList_concat/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_concat/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_concat/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = list(\"a\", \"x\"),\n  b = list(c(\"b\", \"c\"), c(\"y\", \"z\"))\n)\ndf$select(pl$col(\"a\")$list$concat(pl$col(\"b\")))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a               \u2502\n#&gt; \u2502 ---             \u2502\n#&gt; \u2502 list[str]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\", \"b\", \"c\"] \u2502\n#&gt; \u2502 [\"x\", \"y\", \"z\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"a\")$list$concat(pl$lit(\"hello from R\")))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a                     \u2502\n#&gt; \u2502 ---                   \u2502\n#&gt; \u2502 list[str]             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\", \"hello from R\"] \u2502\n#&gt; \u2502 [\"x\", \"hello from R\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"a\")$list$concat(pl$lit(list(\"hello\", c(\"hello\", \"world\")))))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a                       \u2502\n#&gt; \u2502 ---                     \u2502\n#&gt; \u2502 list[str]               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\", \"hello\"]          \u2502\n#&gt; \u2502 [\"x\", \"hello\", \"world\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_contains/","title":"Sublists contains","text":"<p>Source code</p>"},{"location":"man/ExprList_contains/#description","title":"Description","text":"<p>Check if sublists contain the given item.</p>"},{"location":"man/ExprList_contains/#usage","title":"Usage","text":"<pre><code>ExprList_contains(item)\n</code></pre>"},{"location":"man/ExprList_contains/#arguments","title":"Arguments","text":"<code>item</code>  any into Expr/literal"},{"location":"man/ExprList_contains/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_contains/#value","title":"Value","text":"<p>Expr of a boolean mask</p>"},{"location":"man/ExprList_contains/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) # NULL or integer() or list()\ndf$select(pl$col(\"a\")$list$contains(1L))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_diff/","title":"Diff sublists","text":"<p>Source code</p>"},{"location":"man/ExprList_diff/#description","title":"Description","text":"<p>Calculate the n-th discrete difference of every sublist.</p>"},{"location":"man/ExprList_diff/#usage","title":"Usage","text":"<pre><code>ExprList_diff(n = 1, null_behavior = c(\"ignore\", \"drop\"))\n</code></pre>"},{"location":"man/ExprList_diff/#arguments","title":"Arguments","text":"<code>n</code>  Number of slots to shift  <code>null_behavior</code>  choice \"ignore\"(default) \"drop\""},{"location":"man/ExprList_diff/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_diff/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_diff/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(s = list(1:4, c(10L, 2L, 1L))))\ndf$select(pl$col(\"s\")$list$diff(1))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s              \u2502\n#&gt; \u2502 ---            \u2502\n#&gt; \u2502 list[i32]      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [null, 1, \u2026 1] \u2502\n#&gt; \u2502 [null, -8, -1] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_eval/","title":"eval sublists (kinda like lapply)","text":"<p>Source code</p>"},{"location":"man/ExprList_eval/#description","title":"Description","text":"<p>Run any polars expression against the lists\u2019 elements.</p>"},{"location":"man/ExprList_eval/#usage","title":"Usage","text":"<pre><code>ExprList_eval(expr, parallel = FALSE)\n</code></pre>"},{"location":"man/ExprList_eval/#arguments","title":"Arguments","text":"<code>expr</code>  Expression to run. Note that you can select an element with <code>pl$first()</code>, or <code>pl$col()</code> <code>parallel</code>  Run all expression parallel. Don\u2019t activate this blindly. Parallelism is worth it if there is enough work to do per thread. This likely should not be use in the groupby context, because we already do parallel execution per group."},{"location":"man/ExprList_eval/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_eval/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_eval/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(1, 8, 3), b = c(4, 5, 2))\ndf$select(pl$all()$cast(pl$dtypes$Int64))$with_columns(\n  pl$concat_list(c(\"a\", \"b\"))$list$eval(pl$element()$rank())$alias(\"rank\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 rank       \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---        \u2502\n#&gt; \u2502 i64 \u2506 i64 \u2506 list[f64]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 4   \u2506 [1.0, 2.0] \u2502\n#&gt; \u2502 8   \u2506 5   \u2506 [2.0, 1.0] \u2502\n#&gt; \u2502 3   \u2506 2   \u2506 [2.0, 1.0] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_first/","title":"First in sublists","text":"<p>Source code</p>"},{"location":"man/ExprList_first/#description","title":"Description","text":"<p>Get the first value of the sublists.</p>"},{"location":"man/ExprList_first/#usage","title":"Usage","text":"<pre><code>ExprList_first()\n</code></pre>"},{"location":"man/ExprList_first/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_first/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_first/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) # NULL or integer() or list()\ndf$select(pl$col(\"a\")$list$first())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_gather/","title":"take in sublists","text":"<p>Source code</p>"},{"location":"man/ExprList_gather/#description","title":"Description","text":"<p>Get the take value of the sublists.</p>"},{"location":"man/ExprList_gather/#usage","title":"Usage","text":"<pre><code>ExprList_gather(index, null_on_oob = FALSE)\n</code></pre>"},{"location":"man/ExprList_gather/#arguments","title":"Arguments","text":"<code>index</code>  R list of integers for each sub-element or Expr or Series of type <code>List\\[usize\\]</code> <code>null_on_oob</code>  boolean"},{"location":"man/ExprList_gather/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_gather/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_gather/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(c(3, 2, 1), 1, c(1, 2)))) #\nidx = pl$Series(list(0:1, integer(), c(1L, 999L)))\ndf$select(pl$col(\"a\")$list$gather(pl$lit(idx), null_on_oob = TRUE))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a           \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 list[f64]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3.0, 2.0]  \u2502\n#&gt; \u2502 []          \u2502\n#&gt; \u2502 [2.0, null] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># with implicit conversion to Expr\ndf$select(pl$col(\"a\")$list$gather(list(0:1, integer(), c(1L, 999L)), null_on_oob = TRUE))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a           \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 list[f64]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3.0, 2.0]  \u2502\n#&gt; \u2502 []          \u2502\n#&gt; \u2502 [2.0, null] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by some column name, must cast to an Int/Uint type to work\ndf$select(pl$col(\"a\")$list$gather(pl$col(\"a\")$cast(pl$List(pl$UInt64)), null_on_oob = TRUE))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a                \u2502\n#&gt; \u2502 ---              \u2502\n#&gt; \u2502 list[f64]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [null, 1.0, 2.0] \u2502\n#&gt; \u2502 [null]           \u2502\n#&gt; \u2502 [2.0, null]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_get/","title":"Get list","text":"<p>Source code</p>"},{"location":"man/ExprList_get/#description","title":"Description","text":"<p>Get the value by index in the sublists.</p>"},{"location":"man/ExprList_get/#usage","title":"Usage","text":"<pre><code>ExprList_get(index)\n\n# S3 method for class 'RPolarsExprListNameSpace'\nx[index]\n</code></pre>"},{"location":"man/ExprList_get/#arguments","title":"Arguments","text":"<code>index</code>  value to get  <code>x</code>  RPolarsExprListNameSpace"},{"location":"man/ExprList_get/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_get/#details","title":"Details","text":"<p><code>[.RPolarsExprListNameSpace</code> used as e.g.\u00a0<code>pl$col(\u201ca\u201d)$arr[0]</code> same as <code>pl$col(\u201ca\u201d)$get(0)</code></p>"},{"location":"man/ExprList_get/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_get/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) # NULL or integer() or list()\ndf$select(pl$col(\"a\")$list$get(0))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"a\")$list$get(c(2, 0, -1)))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) # NULL or integer() or list()\ndf$select(pl$col(\"a\")$list[0])\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"a\")$list[c(2, 0, -1)])\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_head/","title":"Heads of sublists","text":"<p>Source code</p>"},{"location":"man/ExprList_head/#description","title":"Description","text":"<p>head the first <code>n</code> values of every sublist.</p>"},{"location":"man/ExprList_head/#usage","title":"Usage","text":"<pre><code>ExprList_head(n = 5L)\n</code></pre>"},{"location":"man/ExprList_head/#arguments","title":"Arguments","text":"<code>n</code>  Numeric or Expr, number of values to return for each sublist."},{"location":"man/ExprList_head/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_head/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_head/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(1:4, c(10L, 2L, 1L))))\ndf$select(pl$col(\"a\")$list$head(2))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2]    \u2502\n#&gt; \u2502 [10, 2]   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_join/","title":"Join sublists","text":"<p>Source code</p>"},{"location":"man/ExprList_join/#description","title":"Description","text":"<p>Join all string items in a sublist and place a separator between them. This errors if inner type of list <code>!= String</code>.</p>"},{"location":"man/ExprList_join/#usage","title":"Usage","text":"<pre><code>ExprList_join(separator)\n</code></pre>"},{"location":"man/ExprList_join/#arguments","title":"Arguments","text":"<code>separator</code>  String to separate the items with. Can be an Expr."},{"location":"man/ExprList_join/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_join/#value","title":"Value","text":"<p>Series of dtype String</p>"},{"location":"man/ExprList_join/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(s = list(c(\"a\", \"b\", \"c\"), c(\"x\", \"y\"))))\ndf$select(pl$col(\"s\")$list$join(\" \"))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s     \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a b c \u2502\n#&gt; \u2502 x y   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_last/","title":"Last in sublists","text":"<p>Source code</p>"},{"location":"man/ExprList_last/#description","title":"Description","text":"<p>Get the last value of the sublists.</p>"},{"location":"man/ExprList_last/#usage","title":"Usage","text":"<pre><code>ExprList_last()\n</code></pre>"},{"location":"man/ExprList_last/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_last/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_last/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) # NULL or integer() or list()\ndf$select(pl$col(\"a\")$list$last())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_lengths/","title":"Lengths arrays in list","text":"<p>Source code</p>"},{"location":"man/ExprList_lengths/#description","title":"Description","text":"<p>Get the length of the arrays as UInt32</p>"},{"location":"man/ExprList_lengths/#usage","title":"Usage","text":"<pre><code>ExprList_lengths()\n</code></pre>"},{"location":"man/ExprList_lengths/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_lengths/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_lengths/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list_of_strs = pl$Series(list(c(\"a\", \"b\"), \"c\")))\ndf$with_columns(pl$col(\"list_of_strs\")$list$lengths()$alias(\"list_of_strs_lengths\"))\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 list_of_strs \u2506 list_of_strs_lengths \u2502\n#&gt; \u2502 ---          \u2506 ---                  \u2502\n#&gt; \u2502 list[str]    \u2506 u32                  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\", \"b\"]   \u2506 2                    \u2502\n#&gt; \u2502 [\"c\"]        \u2506 1                    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_max/","title":"Max lists","text":"<p>Source code</p>"},{"location":"man/ExprList_max/#description","title":"Description","text":"<p>Compute the max value of the lists in the array.</p>"},{"location":"man/ExprList_max/#usage","title":"Usage","text":"<pre><code>ExprList_max()\n</code></pre>"},{"location":"man/ExprList_max/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_max/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = pl$Series(list(1L, 2:3)))\ndf$select(pl$col(\"values\")$list$max())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 i32    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1      \u2502\n#&gt; \u2502 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_mean/","title":"Mean of lists","text":"<p>Source code</p>"},{"location":"man/ExprList_mean/#description","title":"Description","text":"<p>Compute the mean value of the lists in the array.</p>"},{"location":"man/ExprList_mean/#usage","title":"Usage","text":"<pre><code>ExprList_mean()\n</code></pre>"},{"location":"man/ExprList_mean/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_mean/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_mean/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = pl$Series(list(1L, 2:3)))\ndf$select(pl$col(\"values\")$list$mean())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0    \u2502\n#&gt; \u2502 2.5    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_min/","title":"#\u2019 Min lists","text":"<p>Source code</p>"},{"location":"man/ExprList_min/#description","title":"Description","text":"<p>Compute the min value of the lists in the array.</p>"},{"location":"man/ExprList_min/#usage","title":"Usage","text":"<pre><code>ExprList_min()\n</code></pre>"},{"location":"man/ExprList_min/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_min/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = pl$Series(list(1L, 2:3)))\ndf$select(pl$col(\"values\")$list$min())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 i32    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1      \u2502\n#&gt; \u2502 2      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_reverse/","title":"Reverse list","text":"<p>Source code</p>"},{"location":"man/ExprList_reverse/#description","title":"Description","text":"<p>Reverse the arrays in the list.</p>"},{"location":"man/ExprList_reverse/#usage","title":"Usage","text":"<pre><code>ExprList_reverse()\n</code></pre>"},{"location":"man/ExprList_reverse/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_reverse/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_reverse/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(\n  values = list(3:1, c(9L, 1:2))\n))\ndf$select(pl$col(\"values\")$list$reverse())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values    \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, 3] \u2502\n#&gt; \u2502 [2, 1, 9] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_shift/","title":"Shift sublists","text":"<p>Source code</p>"},{"location":"man/ExprList_shift/#description","title":"Description","text":"<p>Shift values by the given period.</p>"},{"location":"man/ExprList_shift/#usage","title":"Usage","text":"<pre><code>ExprList_shift(periods = 1)\n</code></pre>"},{"location":"man/ExprList_shift/#arguments","title":"Arguments","text":"<code>periods</code>  Value. Number of places to shift (may be negative)."},{"location":"man/ExprList_shift/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_shift/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_shift/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(s = list(1:4, c(10L, 2L, 1L))))\ndf$select(pl$col(\"s\")$list$shift())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s              \u2502\n#&gt; \u2502 ---            \u2502\n#&gt; \u2502 list[i32]      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [null, 1, \u2026 3] \u2502\n#&gt; \u2502 [null, 10, 2]  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_slice/","title":"Slice sublists","text":"<p>Source code</p>"},{"location":"man/ExprList_slice/#description","title":"Description","text":"<p>Slice every sublist.</p>"},{"location":"man/ExprList_slice/#usage","title":"Usage","text":"<pre><code>ExprList_slice(offset, length = NULL)\n</code></pre>"},{"location":"man/ExprList_slice/#arguments","title":"Arguments","text":"<code>offset</code>  value or Expr. Start index. Negative indexing is supported.  <code>length</code>  value or Expr. Length of the slice. If set to <code>None</code> (default), the slice is taken to the end of the list."},{"location":"man/ExprList_slice/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_slice/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_slice/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(s = list(1:4, c(10L, 2L, 1L))))\ndf$select(pl$col(\"s\")$list$slice(2))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3, 4]    \u2502\n#&gt; \u2502 [1]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_sort/","title":"Sort an Expr","text":"<p>Source code</p>"},{"location":"man/ExprList_sort/#description","title":"Description","text":"<p>Sort this column. If used in a groupby context, the groups are sorted.</p>"},{"location":"man/ExprList_sort/#usage","title":"Usage","text":"<pre><code>ExprList_sort(descending = FALSE)\n</code></pre>"},{"location":"man/ExprList_sort/#arguments","title":"Arguments","text":"<code>descending</code>  Sort values in descending order"},{"location":"man/ExprList_sort/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_sum/","title":"Sum lists","text":"<p>Source code</p>"},{"location":"man/ExprList_sum/#description","title":"Description","text":"<p>Sum all the lists in the array.</p>"},{"location":"man/ExprList_sum/#usage","title":"Usage","text":"<pre><code>ExprList_sum()\n</code></pre>"},{"location":"man/ExprList_sum/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_sum/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_sum/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(values = pl$Series(list(1L, 2:3)))\ndf$select(pl$col(\"values\")$list$sum())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 i32    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1      \u2502\n#&gt; \u2502 5      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_tail/","title":"Tails of sublists","text":"<p>Source code</p>"},{"location":"man/ExprList_tail/#description","title":"Description","text":"<p>tail the first <code>n</code> values of every sublist.</p>"},{"location":"man/ExprList_tail/#usage","title":"Usage","text":"<pre><code>ExprList_tail(n = 5L)\n</code></pre>"},{"location":"man/ExprList_tail/#arguments","title":"Arguments","text":"<code>n</code>  Numeric or Expr, number of values to return for each sublist."},{"location":"man/ExprList_tail/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_tail/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_tail/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(1:4, c(10L, 2L, 1L))))\ndf$select(pl$col(\"a\")$list$tail(2))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3, 4]    \u2502\n#&gt; \u2502 [2, 1]    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprList_to_struct/","title":"List to Struct","text":"<p>Source code</p>"},{"location":"man/ExprList_to_struct/#description","title":"Description","text":"<p>List to Struct</p>"},{"location":"man/ExprList_to_struct/#usage","title":"Usage","text":"<pre><code>ExprList_to_struct(\n  n_field_strategy = c(\"first_non_null\", \"max_width\"),\n  name_generator = NULL,\n  upper_bound = 0\n)\n</code></pre>"},{"location":"man/ExprList_to_struct/#arguments","title":"Arguments","text":"<code>n_field_strategy</code>  Strategy to determine the number of fields of the struct. default = \"first_non_null\": set number of fields equal to the length of the first non zero-length sublist. else \u2018max_width\u2019; else \"max_width\": set number of fields as max length of all sublists.  <code>name_generator</code>  an R function that takes an R scalar double and outputs a string value. It is a f64 because i32 might not be a big enough enumerate all. The default (<code>NULL</code>) is equivalent to the R function <code>(idx) paste0(\u201cfield\\_\u201d, idx)</code> <code>upper_bound</code>  upper_bound A polars <code>LazyFrame</code> needs to know the schema at all time. The caller therefore must provide an <code>upper_bound</code> of struct fields that will be set. If set incorrectly, downstream operation may fail. For instance an <code>all()$sum()</code> expression will look in the current schema to determine which columns to select. It is advised to set this value in a lazy query."},{"location":"man/ExprList_to_struct/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_to_struct/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_to_struct/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(1:3, 1:2)))\ndf2 = df$select(pl$col(\"a\")$list$to_struct(\n  name_generator = \\(idx) paste0(\"hello_you_\", idx)\n))\ndf2$unnest()\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 hello_you_0 \u2506 hello_you_1 \u2506 hello_you_2 \u2502\n#&gt; \u2502 ---         \u2506 ---         \u2506 ---         \u2502\n#&gt; \u2502 i32         \u2506 i32         \u2506 i32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1           \u2506 2           \u2506 3           \u2502\n#&gt; \u2502 1           \u2506 2           \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df2$to_list()\n</code></pre> <pre><code>#&gt; $a\n#&gt; $a$hello_you_0\n#&gt; [1] 1 1\n#&gt; \n#&gt; $a$hello_you_1\n#&gt; [1] 2 2\n#&gt; \n#&gt; $a$hello_you_2\n#&gt; [1]  3 NA\n</code></pre>"},{"location":"man/ExprList_unique/","title":"Unique list","text":"<p>Source code</p>"},{"location":"man/ExprList_unique/#description","title":"Description","text":"<p>Get the unique/distinct values in the list.</p>"},{"location":"man/ExprList_unique/#usage","title":"Usage","text":"<pre><code>ExprList_unique()\n</code></pre>"},{"location":"man/ExprList_unique/#format","title":"Format","text":"<p>function</p>"},{"location":"man/ExprList_unique/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprList_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = list(1, 1, 2)))\ndf$select(pl$col(\"a\")$list$unique())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0]     \u2502\n#&gt; \u2502 [1.0]     \u2502\n#&gt; \u2502 [2.0]     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprMeta_eq/","title":"Meta Equal","text":"<p>Source code</p>"},{"location":"man/ExprMeta_eq/#description","title":"Description","text":"<p>Are two expressions on a meta level equal</p>"},{"location":"man/ExprMeta_eq/#usage","title":"Usage","text":"<pre><code>ExprMeta_eq(other)\n</code></pre>"},{"location":"man/ExprMeta_eq/#arguments","title":"Arguments","text":"<code>other</code>  Expr to compare with"},{"location":"man/ExprMeta_eq/#value","title":"Value","text":"<p>bool: TRUE if equal</p>"},{"location":"man/ExprMeta_eq/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# three naive expression literals\ne1 = pl$lit(40) + 2\ne2 = pl$lit(42)\ne3 = pl$lit(40) + 2\n\n# e1 and e3 are identical expressions\ne1$meta$eq(e3)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># e_test is an expression testing whether e1 and e2 evaluates to the same value.\ne_test = e1 == e2 # or e_test = e1$eq(e2)\n\n# direct evaluate e_test, possible because only made up of literals\ne_test$to_r()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># e1 and e2 are on the meta-level NOT identical expressions\ne1$meta$neq(e2)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/ExprMeta_has_multiple_outputs/","title":"Has multiple outputs","text":"<p>Source code</p>"},{"location":"man/ExprMeta_has_multiple_outputs/#description","title":"Description","text":"<p>Whether this expression expands into multiple expressions.</p>"},{"location":"man/ExprMeta_has_multiple_outputs/#usage","title":"Usage","text":"<pre><code>ExprMeta_has_multiple_outputs()\n</code></pre>"},{"location":"man/ExprMeta_has_multiple_outputs/#value","title":"Value","text":"<p>Bool</p>"},{"location":"man/ExprMeta_has_multiple_outputs/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$all()$meta$has_multiple_outputs()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$col(\"some_colname\")$meta$has_multiple_outputs()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/ExprMeta_is_regex_projection/","title":"Is regex projection.","text":"<p>Source code</p>"},{"location":"man/ExprMeta_is_regex_projection/#description","title":"Description","text":"<p>Whether this expression expands to columns that match a regex pattern.</p>"},{"location":"man/ExprMeta_is_regex_projection/#usage","title":"Usage","text":"<pre><code>ExprMeta_is_regex_projection()\n</code></pre>"},{"location":"man/ExprMeta_is_regex_projection/#value","title":"Value","text":"<p>Bool</p>"},{"location":"man/ExprMeta_is_regex_projection/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$col(\"^Sepal.*$\")$meta$is_regex_projection()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$col(\"Sepal.Length\")$meta$is_regex_projection()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/ExprMeta_neq/","title":"Meta Not Equal","text":"<p>Source code</p>"},{"location":"man/ExprMeta_neq/#description","title":"Description","text":"<p>Are two expressions on a meta level NOT equal</p>"},{"location":"man/ExprMeta_neq/#usage","title":"Usage","text":"<pre><code>ExprMeta_neq(other)\n</code></pre>"},{"location":"man/ExprMeta_neq/#arguments","title":"Arguments","text":"<code>other</code>  Expr to compare with"},{"location":"man/ExprMeta_neq/#value","title":"Value","text":"<p>bool: TRUE if NOT equal</p>"},{"location":"man/ExprMeta_neq/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# three naive expression literals\ne1 = pl$lit(40) + 2\ne2 = pl$lit(42)\ne3 = pl$lit(40) + 2\n\n# e1 and e3 are identical expressions\ne1$meta$eq(e3)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># e_test is an expression testing whether e1 and e2 evaluates to the same value.\ne_test = e1 == e2 # or e_test = e1$eq(e2)\n\n# direct evaluate e_test, possible because only made up of literals\ne_test$to_r()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># e1 and e2 are on the meta-level NOT identical expressions\ne1$meta$neq(e2)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/ExprMeta_output_name/","title":"Output Name","text":"<p>Source code</p>"},{"location":"man/ExprMeta_output_name/#description","title":"Description","text":"<p>Get the column name that this expression would produce. It might not always be possible to determine the output name as it might depend on the schema of the context. In that case this will raise an error.</p>"},{"location":"man/ExprMeta_output_name/#usage","title":"Usage","text":"<pre><code>ExprMeta_output_name()\n</code></pre>"},{"location":"man/ExprMeta_output_name/#value","title":"Value","text":"<p>R charvec of output names.</p>"},{"location":"man/ExprMeta_output_name/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ne = pl$col(\"alice\")$alias(\"bob\")\ne$meta$root_names() == \"alice\"\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>e$meta$output_name() == \"bob\"\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>e$meta$undo_aliases()$meta$output_name() == \"alice\"\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/ExprMeta_pop/","title":"Pop","text":"<p>Source code</p>"},{"location":"man/ExprMeta_pop/#description","title":"Description","text":"<p>Pop the latest expression and return the input(s) of the popped expression.</p>"},{"location":"man/ExprMeta_pop/#usage","title":"Usage","text":"<pre><code>ExprMeta_pop()\n</code></pre>"},{"location":"man/ExprMeta_pop/#value","title":"Value","text":"<p>R list of Expr(s) usually one, only multiple if top Expr took more Expr as input.</p>"},{"location":"man/ExprMeta_pop/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ne1 = pl$lit(40) + 2\ne2 = pl$lit(42)$sum()\n\ne1\n</code></pre> <pre><code>#&gt; polars Expr: [(40.0) + (2.0)]\n</code></pre> <pre><code>e1$meta$pop()\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; polars Expr: 2.0\n#&gt; \n#&gt; [[2]]\n#&gt; polars Expr: 40.0\n</code></pre> <pre><code>e2\n</code></pre> <pre><code>#&gt; polars Expr: 42.0.sum()\n</code></pre> <pre><code>e2$meta$pop()\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; polars Expr: 42.0\n</code></pre>"},{"location":"man/ExprMeta_root_names/","title":"Root Name","text":"<p>Source code</p>"},{"location":"man/ExprMeta_root_names/#description","title":"Description","text":"<p>Get a vector with the root column name</p>"},{"location":"man/ExprMeta_root_names/#usage","title":"Usage","text":"<pre><code>ExprMeta_root_names()\n</code></pre>"},{"location":"man/ExprMeta_root_names/#value","title":"Value","text":"<p>R charvec of root names.</p>"},{"location":"man/ExprMeta_root_names/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ne = pl$col(\"alice\")$alias(\"bob\")\ne$meta$root_names() == \"alice\"\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>e$meta$output_name() == \"bob\"\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>e$meta$undo_aliases()$meta$output_name() == \"alice\"\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/ExprMeta_tree_format/","title":"Format an expression as a tree","text":"<p>Source code</p>"},{"location":"man/ExprMeta_tree_format/#description","title":"Description","text":"<p>Format an expression as a tree</p>"},{"location":"man/ExprMeta_tree_format/#usage","title":"Usage","text":"<pre><code>ExprMeta_tree_format(return_as_string = FALSE)\n</code></pre>"},{"location":"man/ExprMeta_tree_format/#arguments","title":"Arguments","text":"<code>return_as_string</code>  Return the tree as a character vector? If <code>FALSE</code> (default), the tree is printed in the console."},{"location":"man/ExprMeta_tree_format/#value","title":"Value","text":"<p>If <code>return_as_string</code> is <code>TRUE</code>, a character vector describing the tree.</p> <p>If <code>return_as_string</code> is <code>FALSE</code>, prints the tree in the console but doesn\u2019t return any value.</p>"},{"location":"man/ExprMeta_tree_format/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nmy_expr = (pl$col(\"foo\") * pl$col(\"bar\"))$sum()$over(pl$col(\"ham\")) / 2\nmy_expr$meta$tree_format()\n</code></pre> <pre><code>#&gt; \n#&gt;            0               1                2               3        \n#&gt;    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n#&gt;    \u2502\n#&gt;    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \n#&gt;  0 \u2502 \u2502 binary: // \u2502 \n#&gt;    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \n#&gt;    \u2502        \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e       \n#&gt;    \u2502        \u2502               \u2502       \n#&gt;    \u2502        \u2502               \u2502       \n#&gt;    \u2502  \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e   \n#&gt;  1 \u2502  \u2502 lit(2.0) \u2502     \u2502 window \u2502   \n#&gt;    \u2502  \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f   \n#&gt;    \u2502                        \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e        \n#&gt;    \u2502                        \u2502               \u2502        \n#&gt;    \u2502                        \u2502               \u2502        \n#&gt;    \u2502                  \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e       \u256d\u2500\u2500\u2500\u2500\u2500\u256e     \n#&gt;  2 \u2502                  \u2502 col(ham) \u2502       \u2502 sum \u2502     \n#&gt;    \u2502                  \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f       \u2570\u2500\u2500\u2500\u2500\u2500\u256f     \n#&gt;    \u2502                                        \u2502        \n#&gt;    \u2502                                        \u2502        \n#&gt;    \u2502                                        \u2502        \n#&gt;    \u2502                                  \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e  \n#&gt;  3 \u2502                                  \u2502 binary: * \u2502  \n#&gt;    \u2502                                  \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f  \n#&gt;    \u2502                                        \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e       \n#&gt;    \u2502                                        \u2502                \u2502       \n#&gt;    \u2502                                        \u2502                \u2502       \n#&gt;    \u2502                                  \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e  \n#&gt;  4 \u2502                                  \u2502 col(bar) \u2502     \u2502 col(foo) \u2502  \n#&gt;    \u2502                                  \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"man/ExprMeta_undo_aliases/","title":"Undo aliases","text":"<p>Source code</p>"},{"location":"man/ExprMeta_undo_aliases/#description","title":"Description","text":"<p>Undo any renaming operation like <code>alias</code> or <code>keep_name</code>.</p>"},{"location":"man/ExprMeta_undo_aliases/#usage","title":"Usage","text":"<pre><code>ExprMeta_undo_aliases()\n</code></pre>"},{"location":"man/ExprMeta_undo_aliases/#value","title":"Value","text":"<p>Expr with aliases undone</p>"},{"location":"man/ExprMeta_undo_aliases/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ne = pl$col(\"alice\")$alias(\"bob\")\ne$meta$root_names() == \"alice\"\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>e$meta$output_name() == \"bob\"\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>e$meta$undo_aliases()$meta$output_name() == \"alice\"\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/ExprName_keep/","title":"Keep the original root name of the expression.","text":"<p>Source code</p>"},{"location":"man/ExprName_keep/#description","title":"Description","text":"<p>Keep the original root name of the expression.</p>"},{"location":"man/ExprName_keep/#usage","title":"Usage","text":"<pre><code>ExprName_keep()\n</code></pre>"},{"location":"man/ExprName_keep/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_keep/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = 1:3))$select(pl$col(\"alice\")$alias(\"bob\")$name$keep())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1     \u2502\n#&gt; \u2502 2     \u2502\n#&gt; \u2502 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_map/","title":"Map alias of expression with an R function","text":"<p>Source code</p>"},{"location":"man/ExprName_map/#description","title":"Description","text":"<p>Rename the output of an expression by mapping a function over the root name.</p>"},{"location":"man/ExprName_map/#usage","title":"Usage","text":"<pre><code>ExprName_map(fun)\n</code></pre>"},{"location":"man/ExprName_map/#arguments","title":"Arguments","text":"<code>fun</code>  an R function which takes a string as input and return a string"},{"location":"man/ExprName_map/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_map/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = 1:3))$select(\n  pl$col(\"alice\")$alias(\"joe_is_not_root\")$name$map(\\(x) paste0(x, \"_and_bob\"))\n)\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice_and_bob \u2502\n#&gt; \u2502 ---           \u2502\n#&gt; \u2502 i32           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1             \u2502\n#&gt; \u2502 2             \u2502\n#&gt; \u2502 3             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_prefix/","title":"Add a prefix to a column name","text":"<p>Source code</p>"},{"location":"man/ExprName_prefix/#description","title":"Description","text":"<p>Add a prefix to a column name</p>"},{"location":"man/ExprName_prefix/#usage","title":"Usage","text":"<pre><code>ExprName_prefix(prefix)\n</code></pre>"},{"location":"man/ExprName_prefix/#arguments","title":"Arguments","text":"<code>prefix</code>  Prefix to be added to column name(s)"},{"location":"man/ExprName_prefix/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_prefix/#see-also","title":"See Also","text":"<p><code>$suffix()</code> to add a suffix</p>"},{"location":"man/ExprName_prefix/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat = pl$DataFrame(mtcars)\n\ndat$select(\n  pl$col(\"mpg\"),\n  pl$col(\"mpg\")$name$prefix(\"name_\"),\n  pl$col(\"cyl\", \"drat\")$name$prefix(\"bar_\")\n)\n</code></pre> <pre><code>#&gt; shape: (32, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 name_mpg \u2506 bar_cyl \u2506 bar_drat \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2506 ---     \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64      \u2506 f64     \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 21.0     \u2506 6.0     \u2506 3.9      \u2502\n#&gt; \u2502 21.0 \u2506 21.0     \u2506 6.0     \u2506 3.9      \u2502\n#&gt; \u2502 22.8 \u2506 22.8     \u2506 4.0     \u2506 3.85     \u2502\n#&gt; \u2502 21.4 \u2506 21.4     \u2506 6.0     \u2506 3.08     \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026        \u2506 \u2026       \u2506 \u2026        \u2502\n#&gt; \u2502 15.8 \u2506 15.8     \u2506 8.0     \u2506 4.22     \u2502\n#&gt; \u2502 19.7 \u2506 19.7     \u2506 6.0     \u2506 3.62     \u2502\n#&gt; \u2502 15.0 \u2506 15.0     \u2506 8.0     \u2506 3.54     \u2502\n#&gt; \u2502 21.4 \u2506 21.4     \u2506 4.0     \u2506 4.11     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_suffix/","title":"Add a suffix to a column name","text":"<p>Source code</p>"},{"location":"man/ExprName_suffix/#description","title":"Description","text":"<p>Add a suffix to a column name</p>"},{"location":"man/ExprName_suffix/#usage","title":"Usage","text":"<pre><code>ExprName_suffix(suffix)\n</code></pre>"},{"location":"man/ExprName_suffix/#arguments","title":"Arguments","text":"<code>suffix</code>  Suffix to be added to column name(s)"},{"location":"man/ExprName_suffix/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_suffix/#see-also","title":"See Also","text":"<p><code>$prefix()</code> to add a prefix</p>"},{"location":"man/ExprName_suffix/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat = pl$DataFrame(mtcars)\n\ndat$select(\n  pl$col(\"mpg\"),\n  pl$col(\"mpg\")$name$suffix(\"_foo\"),\n  pl$col(\"cyl\", \"drat\")$name$suffix(\"_bar\")\n)\n</code></pre> <pre><code>#&gt; shape: (32, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 mpg_foo \u2506 cyl_bar \u2506 drat_bar \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---     \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64     \u2506 f64     \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 21.0    \u2506 6.0     \u2506 3.9      \u2502\n#&gt; \u2502 21.0 \u2506 21.0    \u2506 6.0     \u2506 3.9      \u2502\n#&gt; \u2502 22.8 \u2506 22.8    \u2506 4.0     \u2506 3.85     \u2502\n#&gt; \u2502 21.4 \u2506 21.4    \u2506 6.0     \u2506 3.08     \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026       \u2506 \u2026       \u2506 \u2026        \u2502\n#&gt; \u2502 15.8 \u2506 15.8    \u2506 8.0     \u2506 4.22     \u2502\n#&gt; \u2502 19.7 \u2506 19.7    \u2506 6.0     \u2506 3.62     \u2502\n#&gt; \u2502 15.0 \u2506 15.0    \u2506 8.0     \u2506 3.54     \u2502\n#&gt; \u2502 21.4 \u2506 21.4    \u2506 4.0     \u2506 4.11     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_to_lowercase/","title":"Make the root column name lowercase","text":"<p>Source code</p>"},{"location":"man/ExprName_to_lowercase/#description","title":"Description","text":"<p>Due to implementation constraints, this method can only be called as the last expression in a chain.</p>"},{"location":"man/ExprName_to_lowercase/#usage","title":"Usage","text":"<pre><code>ExprName_to_lowercase()\n</code></pre>"},{"location":"man/ExprName_to_lowercase/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_to_lowercase/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(Alice = 1:3)$with_columns(pl$col(\"Alice\")$name$to_lowercase())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Alice \u2506 alice \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 i32   \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1     \u2506 1     \u2502\n#&gt; \u2502 2     \u2506 2     \u2502\n#&gt; \u2502 3     \u2506 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprName_to_uppercase/","title":"Make the root column name uppercase","text":"<p>Source code</p>"},{"location":"man/ExprName_to_uppercase/#description","title":"Description","text":"<p>Due to implementation constraints, this method can only be called as the last expression in a chain.</p>"},{"location":"man/ExprName_to_uppercase/#usage","title":"Usage","text":"<pre><code>ExprName_to_uppercase()\n</code></pre>"},{"location":"man/ExprName_to_uppercase/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprName_to_uppercase/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(Alice = 1:3)$with_columns(pl$col(\"Alice\")$name$to_uppercase())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Alice \u2506 ALICE \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 i32   \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1     \u2506 1     \u2502\n#&gt; \u2502 2     \u2506 2     \u2502\n#&gt; \u2502 3     \u2506 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_concat/","title":"Vertically concatenate values of a Series","text":"<p>Source code</p>"},{"location":"man/ExprStr_concat/#description","title":"Description","text":"<p>Vertically concatenate the values in the Series to a single string value.</p>"},{"location":"man/ExprStr_concat/#usage","title":"Usage","text":"<pre><code>ExprStr_concat(delimiter = \"-\", ignore_nulls = TRUE)\n</code></pre>"},{"location":"man/ExprStr_concat/#arguments","title":"Arguments","text":"<code>delimiter</code>  The delimiter to insert between consecutive string values.  <code>ignore_nulls</code>  Ignore null values. If <code>FALSE</code>, null values will be propagated: if the column contains any null values, the output is null."},{"location":"man/ExprStr_concat/#value","title":"Value","text":"<p>Expr of String concatenated</p>"},{"location":"man/ExprStr_concat/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# concatenate a Series of strings to a single string\ndf = pl$DataFrame(foo = c(\"1\", NA, 2))\ndf$select(pl$col(\"foo\")$str$concat(\"-\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1-2 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"foo\")$str$concat(\"-\", ignore_nulls = FALSE))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo  \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Series list of strings to Series of concatenated strings\ndf = pl$DataFrame(list(bar = list(c(\"a\", \"b\", \"c\"), c(\"1\", \"2\", NA))))\ndf$select(pl$col(\"bar\")$list$eval(pl$col()$str$concat())$list$first())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bar   \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a-b-c \u2502\n#&gt; \u2502 1-2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_contains/","title":"Check if string contains a regex","text":"<p>Source code</p>"},{"location":"man/ExprStr_contains/#description","title":"Description","text":"<p>Check if string contains a substring that matches a regex.</p>"},{"location":"man/ExprStr_contains/#usage","title":"Usage","text":"<pre><code>ExprStr_contains(pattern, literal = FALSE, strict = TRUE)\n</code></pre>"},{"location":"man/ExprStr_contains/#arguments","title":"Arguments","text":"<code>pattern</code>  String or Expr of a string, a valid regex pattern.  <code>literal</code>  Treat pattern as a literal string.  <code>strict</code>  Raise an error if the underlying pattern is not a valid regex expression, otherwise replace the invalid regex with a null value."},{"location":"man/ExprStr_contains/#details","title":"Details","text":"<p>See also <code>$str$starts_with()</code> and <code>$str$ends_with()</code>.</p>"},{"location":"man/ExprStr_contains/#value","title":"Value","text":"<p>Expr returning a Boolean</p>"},{"location":"man/ExprStr_contains/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(\"Crab\", \"cat and dog\", \"rab$bit\", NA))\ndf$select(\n  pl$col(\"a\"),\n  pl$col(\"a\")$str$contains(\"cat|bit\")$alias(\"regex\"),\n  pl$col(\"a\")$str$contains(\"rab$\", literal = TRUE)$alias(\"literal\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a           \u2506 regex \u2506 literal \u2502\n#&gt; \u2502 ---         \u2506 ---   \u2506 ---     \u2502\n#&gt; \u2502 str         \u2506 bool  \u2506 bool    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Crab        \u2506 false \u2506 false   \u2502\n#&gt; \u2502 cat and dog \u2506 true  \u2506 false   \u2502\n#&gt; \u2502 rab$bit     \u2506 true  \u2506 true    \u2502\n#&gt; \u2502 null        \u2506 null  \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_contains_any/","title":"Use the aho-corasick algorithm to find matches","text":"<p>Source code</p>"},{"location":"man/ExprStr_contains_any/#description","title":"Description","text":"<p>This function determines if any of the patterns find a match.</p>"},{"location":"man/ExprStr_contains_any/#usage","title":"Usage","text":"<pre><code>ExprStr_contains_any(patterns, ascii_case_insensitive = FALSE)\n</code></pre>"},{"location":"man/ExprStr_contains_any/#arguments","title":"Arguments","text":"<code>patterns</code>  String patterns to search. Can be an Expr.  <code>ascii_case_insensitive</code>  Enable ASCII-aware case insensitive matching. When this option is enabled, searching will be performed without respect to case for ASCII letters (a-z and A-Z) only."},{"location":"man/ExprStr_contains_any/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprStr_contains_any/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  lyrics = c(\n    \"Everybody wants to rule the world\",\n    \"Tell me what you want, what you really really want\",\n    \"Can you feel the love tonight\"\n  )\n)\n\ndf$with_columns(\n  contains_any = pl$col(\"lyrics\")$str$contains_any(c(\"you\", \"me\"))\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 lyrics                            \u2506 contains_any \u2502\n#&gt; \u2502 ---                               \u2506 ---          \u2502\n#&gt; \u2502 str                               \u2506 bool         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Everybody wants to rule the worl\u2026 \u2506 false        \u2502\n#&gt; \u2502 Tell me what you want, what you \u2026 \u2506 true         \u2502\n#&gt; \u2502 Can you feel the love tonight     \u2506 true         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_count_matches/","title":"Count all successive non-overlapping regex matches","text":"<p>Source code</p>"},{"location":"man/ExprStr_count_matches/#description","title":"Description","text":"<p>Count all successive non-overlapping regex matches</p>"},{"location":"man/ExprStr_count_matches/#usage","title":"Usage","text":"<pre><code>ExprStr_count_matches(pattern, literal = FALSE)\n</code></pre>"},{"location":"man/ExprStr_count_matches/#arguments","title":"Arguments","text":"<code>pattern</code>  A valid regex pattern  <code>literal</code>  Treat pattern as a literal string."},{"location":"man/ExprStr_count_matches/#value","title":"Value","text":"<p>UInt32 array. Contains null if original value is null or regex capture nothing.</p>"},{"location":"man/ExprStr_count_matches/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(\"123 bla 45 asd\", \"xyz 678 910t\"))\ndf$select(\n  pl$col(\"foo\")$str$count_matches(r\"{(\\d)}\")$alias(\"count digits\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 count digits \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 u32          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5            \u2502\n#&gt; \u2502 6            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># we can use Polars expressions as pattern so that it's not necessarily the\n# same for all rows\ndf2 = pl$DataFrame(foo = c(\"hello\", \"hi there\"), pat = c(\"ell\", \"e\"))\ndf2$with_columns(\n  pl$col(\"foo\")$str$count_matches(pl$col(\"pat\"))$alias(\"reg_count\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo      \u2506 pat \u2506 reg_count \u2502\n#&gt; \u2502 ---      \u2506 --- \u2506 ---       \u2502\n#&gt; \u2502 str      \u2506 str \u2506 u32       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 hello    \u2506 ell \u2506 1         \u2502\n#&gt; \u2502 hi there \u2506 e   \u2506 2         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_decode/","title":"Decode a value using the provided encoding","text":"<p>Source code</p>"},{"location":"man/ExprStr_decode/#description","title":"Description","text":"<p>Decode a value using the provided encoding</p>"},{"location":"man/ExprStr_decode/#usage","title":"Usage","text":"<pre><code>ExprStr_decode(encoding, ..., strict = TRUE)\n</code></pre>"},{"location":"man/ExprStr_decode/#arguments","title":"Arguments","text":"<code>encoding</code>  Either \u2018hex\u2019 or \u2018base64\u2019.  <code>\u2026</code>  Not used currently.  <code>strict</code>  If <code>TRUE</code> (default), raise an error if the underlying value cannot be decoded. Otherwise, replace it with a null value."},{"location":"man/ExprStr_decode/#value","title":"Value","text":"<p>String array with values decoded using provided encoding</p>"},{"location":"man/ExprStr_decode/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(strings = c(\"foo\", \"bar\", NA))\ndf$select(pl$col(\"strings\")$str$encode(\"hex\"))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 666f6f  \u2502\n#&gt; \u2502 626172  \u2502\n#&gt; \u2502 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(\n  pl$col(\"strings\")$str$encode(\"base64\")$alias(\"base64\"), # notice DataType is not encoded\n  pl$col(\"strings\")$str$encode(\"hex\")$alias(\"hex\") # ... and must restored with cast\n)$with_columns(\n  pl$col(\"base64\")$str$decode(\"base64\")$alias(\"base64_decoded\")$cast(pl$String),\n  pl$col(\"hex\")$str$decode(\"hex\")$alias(\"hex_decoded\")$cast(pl$String)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2506 base64 \u2506 hex    \u2506 base64_decoded \u2506 hex_decoded \u2502\n#&gt; \u2502 ---     \u2506 ---    \u2506 ---    \u2506 ---            \u2506 ---         \u2502\n#&gt; \u2502 str     \u2506 str    \u2506 str    \u2506 str            \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo     \u2506 Zm9v   \u2506 666f6f \u2506 foo            \u2506 foo         \u2502\n#&gt; \u2502 bar     \u2506 YmFy   \u2506 626172 \u2506 bar            \u2506 bar         \u2502\n#&gt; \u2502 null    \u2506 null   \u2506 null   \u2506 null           \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_encode/","title":"Encode a value using the provided encoding","text":"<p>Source code</p>"},{"location":"man/ExprStr_encode/#description","title":"Description","text":"<p>Encode a value using the provided encoding</p>"},{"location":"man/ExprStr_encode/#usage","title":"Usage","text":"<pre><code>ExprStr_encode(encoding)\n</code></pre>"},{"location":"man/ExprStr_encode/#arguments","title":"Arguments","text":"<code>encoding</code>  Either \u2018hex\u2019 or \u2018base64\u2019."},{"location":"man/ExprStr_encode/#value","title":"Value","text":"<p>String array with values encoded using provided encoding</p>"},{"location":"man/ExprStr_encode/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(strings = c(\"foo\", \"bar\", NA))\ndf$select(pl$col(\"strings\")$str$encode(\"hex\"))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 666f6f  \u2502\n#&gt; \u2502 626172  \u2502\n#&gt; \u2502 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(\n  pl$col(\"strings\")$str$encode(\"base64\")$alias(\"base64\"), # notice DataType is not encoded\n  pl$col(\"strings\")$str$encode(\"hex\")$alias(\"hex\") # ... and must restored with cast\n)$with_columns(\n  pl$col(\"base64\")$str$decode(\"base64\")$alias(\"base64_decoded\")$cast(pl$String),\n  pl$col(\"hex\")$str$decode(\"hex\")$alias(\"hex_decoded\")$cast(pl$String)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2506 base64 \u2506 hex    \u2506 base64_decoded \u2506 hex_decoded \u2502\n#&gt; \u2502 ---     \u2506 ---    \u2506 ---    \u2506 ---            \u2506 ---         \u2502\n#&gt; \u2502 str     \u2506 str    \u2506 str    \u2506 str            \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo     \u2506 Zm9v   \u2506 666f6f \u2506 foo            \u2506 foo         \u2502\n#&gt; \u2502 bar     \u2506 YmFy   \u2506 626172 \u2506 bar            \u2506 bar         \u2502\n#&gt; \u2502 null    \u2506 null   \u2506 null   \u2506 null           \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_ends_with/","title":"Check if string ends with a regex","text":"<p>Source code</p>"},{"location":"man/ExprStr_ends_with/#description","title":"Description","text":"<p>Check if string values end with a substring.</p>"},{"location":"man/ExprStr_ends_with/#usage","title":"Usage","text":"<pre><code>ExprStr_ends_with(sub)\n</code></pre>"},{"location":"man/ExprStr_ends_with/#arguments","title":"Arguments","text":"<code>sub</code>  Suffix substring or Expr."},{"location":"man/ExprStr_ends_with/#details","title":"Details","text":"<p>See also <code>$str$starts_with()</code> and <code>$str$contains()</code>.</p>"},{"location":"man/ExprStr_ends_with/#value","title":"Value","text":"<p>Expr returning a Boolean</p>"},{"location":"man/ExprStr_ends_with/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(fruits = c(\"apple\", \"mango\", NA))\ndf$select(\n  pl$col(\"fruits\"),\n  pl$col(\"fruits\")$str$ends_with(\"go\")$alias(\"has_suffix\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 has_suffix \u2502\n#&gt; \u2502 ---    \u2506 ---        \u2502\n#&gt; \u2502 str    \u2506 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 false      \u2502\n#&gt; \u2502 mango  \u2506 true       \u2502\n#&gt; \u2502 null   \u2506 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_explode/","title":"Returns a column with a separate row for every string character","text":"<p>Source code</p>"},{"location":"man/ExprStr_explode/#description","title":"Description","text":"<p>Returns a column with a separate row for every string character</p>"},{"location":"man/ExprStr_explode/#usage","title":"Usage","text":"<pre><code>ExprStr_explode()\n</code></pre>"},{"location":"man/ExprStr_explode/#value","title":"Value","text":"<p>Expr: Series of dtype String.</p>"},{"location":"man/ExprStr_explode/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(\"foo\", \"bar\"))\ndf$select(pl$col(\"a\")$str$explode())\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 f   \u2502\n#&gt; \u2502 o   \u2502\n#&gt; \u2502 o   \u2502\n#&gt; \u2502 b   \u2502\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 r   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_extract/","title":"Extract the target capture group from provided patterns","text":"<p>Source code</p>"},{"location":"man/ExprStr_extract/#description","title":"Description","text":"<p>Extract the target capture group from provided patterns</p>"},{"location":"man/ExprStr_extract/#usage","title":"Usage","text":"<pre><code>ExprStr_extract(pattern, group_index)\n</code></pre>"},{"location":"man/ExprStr_extract/#arguments","title":"Arguments","text":"<code>pattern</code>  A valid regex pattern  <code>group_index</code>  Index of the targeted capture group. Group 0 means the whole pattern, first group begin at index 1 (default)."},{"location":"man/ExprStr_extract/#value","title":"Value","text":"<p>String array. Contains null if original value is null or regex capture nothing.</p>"},{"location":"man/ExprStr_extract/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(\n    \"http://vote.com/ballon_dor?candidate=messi&amp;ref=polars\",\n    \"http://vote.com/ballon_dor?candidat=jorginho&amp;ref=polars\",\n    \"http://vote.com/ballon_dor?candidate=ronaldo&amp;ref=polars\"\n  )\n)\ndf$select(\n  pl$col(\"a\")$str$extract(r\"(candidate=(\\w+))\", 1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a       \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 messi   \u2502\n#&gt; \u2502 null    \u2502\n#&gt; \u2502 ronaldo \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_extract_all/","title":"Extract all matches for the given regex pattern","text":"<p>Source code</p>"},{"location":"man/ExprStr_extract_all/#description","title":"Description","text":"<p>Extracts all matches for the given regex pattern. Extracts each successive non-overlapping regex match in an individual string as an array.</p>"},{"location":"man/ExprStr_extract_all/#usage","title":"Usage","text":"<pre><code>ExprStr_extract_all(pattern)\n</code></pre>"},{"location":"man/ExprStr_extract_all/#arguments","title":"Arguments","text":"<code>pattern</code>  A valid regex pattern"},{"location":"man/ExprStr_extract_all/#value","title":"Value","text":"<p><code>List[String]</code> array. Contain null if original value is null or regex capture nothing.</p>"},{"location":"man/ExprStr_extract_all/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(\"123 bla 45 asd\", \"xyz 678 910t\"))\ndf$select(\n  pl$col(\"foo\")$str$extract_all(r\"((\\d+))\")$alias(\"extracted_nrs\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 extracted_nrs  \u2502\n#&gt; \u2502 ---            \u2502\n#&gt; \u2502 list[str]      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"123\", \"45\"]  \u2502\n#&gt; \u2502 [\"678\", \"910\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_json_decode/","title":"Parse string values as JSON.","text":"<p>Source code</p>"},{"location":"man/ExprStr_json_decode/#description","title":"Description","text":"<p>Parse string values as JSON.</p>"},{"location":"man/ExprStr_json_decode/#usage","title":"Usage","text":"<pre><code>ExprStr_json_decode(dtype, infer_schema_length = 100)\n</code></pre>"},{"location":"man/ExprStr_json_decode/#arguments","title":"Arguments","text":"<code>dtype</code>  The dtype to cast the extracted value to. If <code>NULL</code>, the dtype will be inferred from the JSON value.  <code>infer_schema_length</code>  How many rows to parse to determine the schema. If <code>NULL</code>, all rows are used."},{"location":"man/ExprStr_json_decode/#details","title":"Details","text":"<p>Throw errors if encounter invalid json strings.</p>"},{"location":"man/ExprStr_json_decode/#value","title":"Value","text":"<p>Expr returning a struct</p>"},{"location":"man/ExprStr_json_decode/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  json_val = c('{\"a\":1, \"b\": true}', NA, '{\"a\":2, \"b\": false}')\n)\ndtype = pl$Struct(pl$Field(\"a\", pl$Int64), pl$Field(\"b\", pl$Boolean))\ndf$select(pl$col(\"json_val\")$str$json_decode(dtype))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 json_val    \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 struct[2]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,true}    \u2502\n#&gt; \u2502 {null,null} \u2502\n#&gt; \u2502 {2,false}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_json_path_match/","title":"Extract the first match of JSON string with the provided JSONPath expression","text":"<p>Source code</p>"},{"location":"man/ExprStr_json_path_match/#description","title":"Description","text":"<p>Extract the first match of JSON string with the provided JSONPath expression</p>"},{"location":"man/ExprStr_json_path_match/#usage","title":"Usage","text":"<pre><code>ExprStr_json_path_match(json_path)\n</code></pre>"},{"location":"man/ExprStr_json_path_match/#arguments","title":"Arguments","text":"<code>json_path</code>  A valid JSON path query string."},{"location":"man/ExprStr_json_path_match/#details","title":"Details","text":"<p>Throw errors if encounter invalid JSON strings. All return value will be cast to String regardless of the original value.</p> <p>Documentation on JSONPath standard can be found here: https://goessner.net/articles/JsonPath/.</p>"},{"location":"man/ExprStr_json_path_match/#value","title":"Value","text":"<p>String array. Contain null if original value is null or the json_path return nothing.</p>"},{"location":"man/ExprStr_json_path_match/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  json_val = c('{\"a\":\"1\"}', NA, '{\"a\":2}', '{\"a\":2.1}', '{\"a\":true}')\n)\ndf$select(pl$col(\"json_val\")$str$json_path_match(\"$.a\"))\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 json_val \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1        \u2502\n#&gt; \u2502 null     \u2502\n#&gt; \u2502 2        \u2502\n#&gt; \u2502 2.1      \u2502\n#&gt; \u2502 true     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_len_bytes/","title":"Get the number of bytes in strings","text":"<p>Source code</p>"},{"location":"man/ExprStr_len_bytes/#description","title":"Description","text":"<p>Get length of the strings as UInt32 (as number of bytes). Use <code>$str$len_chars()</code> to get the number of characters.</p>"},{"location":"man/ExprStr_len_bytes/#usage","title":"Usage","text":"<pre><code>ExprStr_len_bytes()\n</code></pre>"},{"location":"man/ExprStr_len_bytes/#details","title":"Details","text":"<p>If you know that you are working with ASCII text, <code>lengths</code> will be equivalent, and faster (returns length in terms of the number of bytes).</p>"},{"location":"man/ExprStr_len_bytes/#value","title":"Value","text":"<p>Expr of u32</p>"},{"location":"man/ExprStr_len_bytes/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  s = c(\"Caf\u00e9\", NA, \"345\", \"\u00e6\u00f8\u00e5\")\n)$select(\n  pl$col(\"s\"),\n  pl$col(\"s\")$str$len_bytes()$alias(\"lengths\"),\n  pl$col(\"s\")$str$len_chars()$alias(\"n_chars\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s    \u2506 lengths \u2506 n_chars \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 str  \u2506 u32     \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Caf\u00e9 \u2506 5       \u2506 4       \u2502\n#&gt; \u2502 null \u2506 null    \u2506 null    \u2502\n#&gt; \u2502 345  \u2506 3       \u2506 3       \u2502\n#&gt; \u2502 \u00e6\u00f8\u00e5  \u2506 6       \u2506 3       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_len_chars/","title":"Get the number of characters in strings","text":"<p>Source code</p>"},{"location":"man/ExprStr_len_chars/#description","title":"Description","text":"<p>Get length of the strings as UInt32 (as number of characters). Use <code>$str$len_bytes()</code> to get the number of bytes.</p>"},{"location":"man/ExprStr_len_chars/#usage","title":"Usage","text":"<pre><code>ExprStr_len_chars()\n</code></pre>"},{"location":"man/ExprStr_len_chars/#details","title":"Details","text":"<p>If you know that you are working with ASCII text, <code>lengths</code> will be equivalent, and faster (returns length in terms of the number of bytes).</p>"},{"location":"man/ExprStr_len_chars/#value","title":"Value","text":"<p>Expr of u32</p>"},{"location":"man/ExprStr_len_chars/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  s = c(\"Caf\u00e9\", NA, \"345\", \"\u00e6\u00f8\u00e5\")\n)$select(\n  pl$col(\"s\"),\n  pl$col(\"s\")$str$len_bytes()$alias(\"lengths\"),\n  pl$col(\"s\")$str$len_chars()$alias(\"n_chars\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s    \u2506 lengths \u2506 n_chars \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 str  \u2506 u32     \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Caf\u00e9 \u2506 5       \u2506 4       \u2502\n#&gt; \u2502 null \u2506 null    \u2506 null    \u2502\n#&gt; \u2502 345  \u2506 3       \u2506 3       \u2502\n#&gt; \u2502 \u00e6\u00f8\u00e5  \u2506 6       \u2506 3       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_pad_end/","title":"Left justify strings","text":"<p>Source code</p>"},{"location":"man/ExprStr_pad_end/#description","title":"Description","text":"<p>Return the string left justified in a string of length <code>width</code>.</p>"},{"location":"man/ExprStr_pad_end/#usage","title":"Usage","text":"<pre><code>ExprStr_pad_end(width, fillchar = \" \")\n</code></pre>"},{"location":"man/ExprStr_pad_end/#arguments","title":"Arguments","text":"<code>width</code>  Justify left to this length.  <code>fillchar</code>  Fill with this ASCII character."},{"location":"man/ExprStr_pad_end/#details","title":"Details","text":"<p>Padding is done using the specified <code>fillchar</code>. The original string is returned if <code>width</code> is less than or equal to <code>len(s)</code>.</p>"},{"location":"man/ExprStr_pad_end/#value","title":"Value","text":"<p>Expr of String</p>"},{"location":"man/ExprStr_pad_end/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(\"cow\", \"monkey\", NA, \"hippopotamus\"))\ndf$select(pl$col(\"a\")$str$pad_end(8, \"*\"))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a            \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 str          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 cow*****     \u2502\n#&gt; \u2502 monkey**     \u2502\n#&gt; \u2502 null         \u2502\n#&gt; \u2502 hippopotamus \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_pad_start/","title":"Right justify strings","text":"<p>Source code</p>"},{"location":"man/ExprStr_pad_start/#description","title":"Description","text":"<p>Return the string right justified in a string of length <code>width</code>.</p>"},{"location":"man/ExprStr_pad_start/#usage","title":"Usage","text":"<pre><code>ExprStr_pad_start(width, fillchar = \" \")\n</code></pre>"},{"location":"man/ExprStr_pad_start/#arguments","title":"Arguments","text":"<code>width</code>  Justify right to this length.  <code>fillchar</code>  Fill with this ASCII character."},{"location":"man/ExprStr_pad_start/#details","title":"Details","text":"<p>Padding is done using the specified <code>fillchar</code>. The original string is returned if <code>width</code> is less than or equal to <code>len(s)</code>.</p>"},{"location":"man/ExprStr_pad_start/#value","title":"Value","text":"<p>Expr of String</p>"},{"location":"man/ExprStr_pad_start/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(\"cow\", \"monkey\", NA, \"hippopotamus\"))\ndf$select(pl$col(\"a\")$str$pad_start(8, \"*\"))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a            \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 str          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 *****cow     \u2502\n#&gt; \u2502 **monkey     \u2502\n#&gt; \u2502 null         \u2502\n#&gt; \u2502 hippopotamus \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_parse_int/","title":"Parse integers with base radix from strings","text":"<p>Source code</p>"},{"location":"man/ExprStr_parse_int/#description","title":"Description","text":"<p>Parse integers with base 2 by default.</p>"},{"location":"man/ExprStr_parse_int/#usage","title":"Usage","text":"<pre><code>ExprStr_parse_int(radix = 2, strict = TRUE)\n</code></pre>"},{"location":"man/ExprStr_parse_int/#arguments","title":"Arguments","text":"<code>radix</code>  Positive integer which is the base of the string we are parsing. Default is 2.  <code>strict</code>  If <code>TRUE</code> (default), integer overflow will raise an error. Otherwise, they will be converted to <code>null</code>."},{"location":"man/ExprStr_parse_int/#value","title":"Value","text":"<p>Expr: Series of dtype i32.</p>"},{"location":"man/ExprStr_parse_int/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(bin = c(\"110\", \"101\", \"010\"))\ndf$select(pl$col(\"bin\")$str$parse_int())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bin \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"bin\")$str$parse_int(10))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bin \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 110 \u2502\n#&gt; \u2502 101 \u2502\n#&gt; \u2502 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Convert to null if the string is not a valid integer when `strict = FALSE`\ndf = pl$DataFrame(x = c(\"1\", \"2\", \"foo\"))\ndf$select(pl$col(\"x\")$str$parse_int(10, FALSE))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_replace/","title":"Replace first matching regex/literal substring with a new string value","text":"<p>Source code</p>"},{"location":"man/ExprStr_replace/#description","title":"Description","text":"<p>Replace first matching regex/literal substring with a new string value</p>"},{"location":"man/ExprStr_replace/#usage","title":"Usage","text":"<pre><code>ExprStr_replace(pattern, value, literal = FALSE)\n</code></pre>"},{"location":"man/ExprStr_replace/#arguments","title":"Arguments","text":"<code>pattern</code>  Regex pattern, can be an Expr.  <code>value</code>  Replacement, can be an Expr.  <code>literal</code>  Treat pattern as a literal string."},{"location":"man/ExprStr_replace/#value","title":"Value","text":"<p>Expr of String Series</p>"},{"location":"man/ExprStr_replace/#see-also","title":"See Also","text":"<p><code>$str$replace_all()</code>: Replace all matching regex/literal substrings.</p>"},{"location":"man/ExprStr_replace/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(id = c(1, 2), text = c(\"123abc\", \"abc456\"))\ndf$with_columns(\n  pl$col(\"text\")$str$replace(r\"{abc\\b}\", \"ABC\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 id  \u2506 text   \u2502\n#&gt; \u2502 --- \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 123ABC \u2502\n#&gt; \u2502 2.0 \u2506 abc456 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_replace_all/","title":"Replace all matching regex/literal substrings with a new string value","text":"<p>Source code</p>"},{"location":"man/ExprStr_replace_all/#description","title":"Description","text":"<p>Replace all matching regex/literal substrings with a new string value</p>"},{"location":"man/ExprStr_replace_all/#usage","title":"Usage","text":"<pre><code>ExprStr_replace_all(pattern, value, literal = FALSE)\n</code></pre>"},{"location":"man/ExprStr_replace_all/#arguments","title":"Arguments","text":"<code>pattern</code>  Regex pattern, can be an Expr.  <code>value</code>  Replacement, can be an Expr.  <code>literal</code>  Treat pattern as a literal string."},{"location":"man/ExprStr_replace_all/#value","title":"Value","text":"<p>Expr of String Series</p>"},{"location":"man/ExprStr_replace_all/#see-also","title":"See Also","text":"<p><code>$str$replace()</code>: Replace first matching regex/literal substring.</p>"},{"location":"man/ExprStr_replace_all/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(id = c(1, 2), text = c(\"abcabc\", \"123a123\"))\ndf$with_columns(\n  pl$col(\"text\")$str$replace_all(\"a\", \"-\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 id  \u2506 text    \u2502\n#&gt; \u2502 --- \u2506 ---     \u2502\n#&gt; \u2502 f64 \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 -bc-bc  \u2502\n#&gt; \u2502 2.0 \u2506 123-123 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_replace_many/","title":"Use the aho-corasick algorithm to replace many matches","text":"<p>Source code</p>"},{"location":"man/ExprStr_replace_many/#description","title":"Description","text":"<p>This function replaces several matches at once.</p>"},{"location":"man/ExprStr_replace_many/#usage","title":"Usage","text":"<pre><code>ExprStr_replace_many(patterns, replace_with, ascii_case_insensitive = FALSE)\n</code></pre>"},{"location":"man/ExprStr_replace_many/#arguments","title":"Arguments","text":"<code>patterns</code>  String patterns to search. Can be an Expr.  <code>replace_with</code>  A vector of strings used as replacements. If this is of length 1, then it is applied to all matches. Otherwise, it must be of same length as the <code>patterns</code> argument.  <code>ascii_case_insensitive</code>  Enable ASCII-aware case insensitive matching. When this option is enabled, searching will be performed without respect to case for ASCII letters (a-z and A-Z) only."},{"location":"man/ExprStr_replace_many/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprStr_replace_many/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  lyrics = c(\n    \"Everybody wants to rule the world\",\n    \"Tell me what you want, what you really really want\",\n    \"Can you feel the love tonight\"\n  )\n)\n\n# a replacement of length 1 is applied to all matches\ndf$with_columns(\n  remove_pronouns = pl$col(\"lyrics\")$str$replace_many(c(\"you\", \"me\"), \"\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 lyrics                            \u2506 remove_pronouns                   \u2502\n#&gt; \u2502 ---                               \u2506 ---                               \u2502\n#&gt; \u2502 str                               \u2506 str                               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Everybody wants to rule the worl\u2026 \u2506 Everybody wants to rule the worl\u2026 \u2502\n#&gt; \u2502 Tell me what you want, what you \u2026 \u2506 Tell  what  want, what  really r\u2026 \u2502\n#&gt; \u2502 Can you feel the love tonight     \u2506 Can  feel the love tonight        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># if there are more than one replacement, the patterns and replacements are\n# matched\ndf$with_columns(\n  fake_pronouns = pl$col(\"lyrics\")$str$replace_many(c(\"you\", \"me\"), c(\"foo\", \"bar\"))\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 lyrics                            \u2506 fake_pronouns                     \u2502\n#&gt; \u2502 ---                               \u2506 ---                               \u2502\n#&gt; \u2502 str                               \u2506 str                               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Everybody wants to rule the worl\u2026 \u2506 Everybody wants to rule the worl\u2026 \u2502\n#&gt; \u2502 Tell me what you want, what you \u2026 \u2506 Tell bar what foo want, what foo\u2026 \u2502\n#&gt; \u2502 Can you feel the love tonight     \u2506 Can foo feel the love tonight     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_reverse/","title":"Returns string values in reversed order","text":"<p>Source code</p>"},{"location":"man/ExprStr_reverse/#description","title":"Description","text":"<p>Returns string values in reversed order</p>"},{"location":"man/ExprStr_reverse/#usage","title":"Usage","text":"<pre><code>ExprStr_reverse()\n</code></pre>"},{"location":"man/ExprStr_reverse/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprStr_reverse/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(text = c(\"foo\", \"bar\", NA))\ndf$with_columns(reversed = pl$col(\"text\")$str$reverse())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 text \u2506 reversed \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2502\n#&gt; \u2502 str  \u2506 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo  \u2506 oof      \u2502\n#&gt; \u2502 bar  \u2506 rab      \u2502\n#&gt; \u2502 null \u2506 null     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_slice/","title":"Create subslices of the string values of a String Series","text":"<p>Source code</p>"},{"location":"man/ExprStr_slice/#description","title":"Description","text":"<p>Create subslices of the string values of a String Series</p>"},{"location":"man/ExprStr_slice/#usage","title":"Usage","text":"<pre><code>ExprStr_slice(offset, length = NULL)\n</code></pre>"},{"location":"man/ExprStr_slice/#arguments","title":"Arguments","text":"<code>offset</code>  Start index. Negative indexing is supported.  <code>length</code>  Length of the slice. If <code>NULL</code> (default), the slice is taken to the end of the string."},{"location":"man/ExprStr_slice/#value","title":"Value","text":"<p>Expr: Series of dtype String.</p>"},{"location":"man/ExprStr_slice/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(s = c(\"pear\", NA, \"papaya\", \"dragonfruit\"))\ndf$with_columns(\n  pl$col(\"s\")$str$slice(-3)$alias(\"s_sliced\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2506 s_sliced \u2502\n#&gt; \u2502 ---         \u2506 ---      \u2502\n#&gt; \u2502 str         \u2506 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 pear        \u2506 ear      \u2502\n#&gt; \u2502 null        \u2506 null     \u2502\n#&gt; \u2502 papaya      \u2506 aya      \u2502\n#&gt; \u2502 dragonfruit \u2506 uit      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_split/","title":"Split the string by a substring","text":"<p>Source code</p>"},{"location":"man/ExprStr_split/#description","title":"Description","text":"<p>Split the string by a substring</p>"},{"location":"man/ExprStr_split/#usage","title":"Usage","text":"<pre><code>ExprStr_split(by, inclusive = FALSE)\n</code></pre>"},{"location":"man/ExprStr_split/#arguments","title":"Arguments","text":"<code>by</code>  String or Expr of a string, a valid regex pattern that will be used to split the string.  <code>inclusive</code>  If <code>TRUE</code>, include the split character/string in the results."},{"location":"man/ExprStr_split/#value","title":"Value","text":"<p>List of String type</p>"},{"location":"man/ExprStr_split/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(s = c(\"foo bar\", \"foo-bar\", \"foo bar baz\"))\ndf$select(pl$col(\"s\")$str$split(by = \" \"))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s                     \u2502\n#&gt; \u2502 ---                   \u2502\n#&gt; \u2502 list[str]             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"foo\", \"bar\"]        \u2502\n#&gt; \u2502 [\"foo-bar\"]           \u2502\n#&gt; \u2502 [\"foo\", \"bar\", \"baz\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df = pl$DataFrame(\n  s = c(\"foo^bar\", \"foo_bar\", \"foo*bar*baz\"),\n  by = c(\"_\", \"_\", \"*\")\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2506 by  \u2502\n#&gt; \u2502 ---         \u2506 --- \u2502\n#&gt; \u2502 str         \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo^bar     \u2506 _   \u2502\n#&gt; \u2502 foo_bar     \u2506 _   \u2502\n#&gt; \u2502 foo*bar*baz \u2506 *   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"s\")$str$split(by = pl$col(\"by\"))$alias(\"split\"))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 split                 \u2502\n#&gt; \u2502 ---                   \u2502\n#&gt; \u2502 list[str]             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"foo^bar\"]           \u2502\n#&gt; \u2502 [\"foo\", \"bar\"]        \u2502\n#&gt; \u2502 [\"foo\", \"bar\", \"baz\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_split_exact/","title":"Split the string by a substring using <code>n</code> splits","text":"<p>Source code</p>"},{"location":"man/ExprStr_split_exact/#description","title":"Description","text":"<p>This results in a struct of <code>n+1</code> fields. If it cannot make <code>n</code> splits, the remaining field elements will be null.</p>"},{"location":"man/ExprStr_split_exact/#usage","title":"Usage","text":"<pre><code>ExprStr_split_exact(by, n, inclusive = FALSE)\n</code></pre>"},{"location":"man/ExprStr_split_exact/#arguments","title":"Arguments","text":"<code>by</code>  Substring to split by.  <code>n</code>  Number of splits to make.  <code>inclusive</code>  If <code>TRUE</code>, include the split character/string in the results."},{"location":"man/ExprStr_split_exact/#value","title":"Value","text":"<p>Struct where each of n+1 fields is of String type</p>"},{"location":"man/ExprStr_split_exact/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(s = c(\"a_1\", NA, \"c\", \"d_4\"))\ndf$select(pl$col(\"s\")$str$split_exact(by = \"_\", 1))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 struct[2]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"a\",\"1\"}   \u2502\n#&gt; \u2502 {null,null} \u2502\n#&gt; \u2502 {\"c\",null}  \u2502\n#&gt; \u2502 {\"d\",\"4\"}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_splitn/","title":"Split the string by a substring, restricted to returning at most <code>n</code> items","text":"<p>Source code</p>"},{"location":"man/ExprStr_splitn/#description","title":"Description","text":"<p>If the number of possible splits is less than <code>n-1</code>, the remaining field elements will be null. If the number of possible splits is <code>n-1</code> or greater, the last (nth) substring will contain the remainder of the string.</p>"},{"location":"man/ExprStr_splitn/#usage","title":"Usage","text":"<pre><code>ExprStr_splitn(by, n)\n</code></pre>"},{"location":"man/ExprStr_splitn/#arguments","title":"Arguments","text":"<code>by</code>  Substring to split by.  <code>n</code>  Number of splits to make."},{"location":"man/ExprStr_splitn/#value","title":"Value","text":"<p>Struct where each of <code>n</code> fields is of String type</p>"},{"location":"man/ExprStr_splitn/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(s = c(\"a_1\", NA, \"c\", \"d_4\"))\ndf$select(pl$col(\"s\")$str$splitn(by = \"_\", 0))\n</code></pre> <pre><code>#&gt; shape: (0, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 struct[1] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"s\")$str$splitn(by = \"_\", 1))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 struct[1] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"a_1\"}   \u2502\n#&gt; \u2502 {null}    \u2502\n#&gt; \u2502 {\"c\"}     \u2502\n#&gt; \u2502 {\"d_4\"}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"s\")$str$splitn(by = \"_\", 2))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 struct[2]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"a\",\"1\"}   \u2502\n#&gt; \u2502 {null,null} \u2502\n#&gt; \u2502 {\"c\",null}  \u2502\n#&gt; \u2502 {\"d\",\"4\"}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_starts_with/","title":"Check if string starts with a regex","text":"<p>Source code</p>"},{"location":"man/ExprStr_starts_with/#description","title":"Description","text":"<p>Check if string values starts with a substring.</p>"},{"location":"man/ExprStr_starts_with/#usage","title":"Usage","text":"<pre><code>ExprStr_starts_with(sub)\n</code></pre>"},{"location":"man/ExprStr_starts_with/#arguments","title":"Arguments","text":"<code>sub</code>  Prefix substring or Expr."},{"location":"man/ExprStr_starts_with/#details","title":"Details","text":"<p>See also <code>$str$contains()</code> and <code>$str$ends_with()</code>.</p>"},{"location":"man/ExprStr_starts_with/#value","title":"Value","text":"<p>Expr returning a Boolean</p>"},{"location":"man/ExprStr_starts_with/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(fruits = c(\"apple\", \"mango\", NA))\ndf$select(\n  pl$col(\"fruits\"),\n  pl$col(\"fruits\")$str$starts_with(\"app\")$alias(\"has_suffix\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 has_suffix \u2502\n#&gt; \u2502 ---    \u2506 ---        \u2502\n#&gt; \u2502 str    \u2506 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 true       \u2502\n#&gt; \u2502 mango  \u2506 false      \u2502\n#&gt; \u2502 null   \u2506 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_strip_chars/","title":"Strip leading and trailing characters","text":"<p>Source code</p>"},{"location":"man/ExprStr_strip_chars/#description","title":"Description","text":"<p>Remove leading and trailing characters.</p>"},{"location":"man/ExprStr_strip_chars/#usage","title":"Usage","text":"<pre><code>ExprStr_strip_chars(matches = NULL)\n</code></pre>"},{"location":"man/ExprStr_strip_chars/#arguments","title":"Arguments","text":"<code>matches</code>  The set of characters to be removed. All combinations of this set of characters will be stripped. If <code>NULL</code> (default), all whitespace is removed instead. This can be an Expr."},{"location":"man/ExprStr_strip_chars/#details","title":"Details","text":"<p>This function will not strip any chars beyond the first char not matched. <code>strip_chars()</code> removes characters at the beginning and the end of the string. Use <code>strip_chars_start()</code> and <code>strip_chars_end()</code> to remove characters only from left and right respectively.</p>"},{"location":"man/ExprStr_strip_chars/#value","title":"Value","text":"<p>Expr of String lowercase chars</p>"},{"location":"man/ExprStr_strip_chars/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(\" hello\", \"\\tworld\"))\ndf$select(pl$col(\"foo\")$str$strip_chars())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo   \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 hello \u2502\n#&gt; \u2502 world \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"foo\")$str$strip_chars(\" hel rld\"))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 o   \u2502\n#&gt; \u2502    wo  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_strip_chars_end/","title":"Strip trailing characters","text":"<p>Source code</p>"},{"location":"man/ExprStr_strip_chars_end/#description","title":"Description","text":"<p>Remove trailing characters.</p>"},{"location":"man/ExprStr_strip_chars_end/#usage","title":"Usage","text":"<pre><code>ExprStr_strip_chars_end(matches = NULL)\n</code></pre>"},{"location":"man/ExprStr_strip_chars_end/#arguments","title":"Arguments","text":"<code>matches</code>  The set of characters to be removed. All combinations of this set of characters will be stripped. If <code>NULL</code> (default), all whitespace is removed instead. This can be an Expr."},{"location":"man/ExprStr_strip_chars_end/#details","title":"Details","text":"<p>This function will not strip any chars beyond the first char not matched. <code>strip_chars_end()</code> removes characters at the end of the string only. Use <code>strip_chars()</code> and <code>strip_chars_start()</code> to remove characters from the left and right or only from the left respectively.</p>"},{"location":"man/ExprStr_strip_chars_end/#value","title":"Value","text":"<p>Expr of String lowercase chars</p>"},{"location":"man/ExprStr_strip_chars_end/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(\" hello\", \"\\tworld\"))\ndf$select(pl$col(\"foo\")$str$strip_chars_end(\" hel\\trld\"))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo    \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502  hello \u2502\n#&gt; \u2502    wo     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"foo\")$str$strip_chars_end(\"rldhel\\t \"))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo    \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502  hello \u2502\n#&gt; \u2502    wo     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_strip_chars_start/","title":"Strip leading characters","text":"<p>Source code</p>"},{"location":"man/ExprStr_strip_chars_start/#description","title":"Description","text":"<p>Remove leading characters.</p>"},{"location":"man/ExprStr_strip_chars_start/#usage","title":"Usage","text":"<pre><code>ExprStr_strip_chars_start(matches = NULL)\n</code></pre>"},{"location":"man/ExprStr_strip_chars_start/#arguments","title":"Arguments","text":"<code>matches</code>  The set of characters to be removed. All combinations of this set of characters will be stripped. If <code>NULL</code> (default), all whitespace is removed instead. This can be an Expr."},{"location":"man/ExprStr_strip_chars_start/#details","title":"Details","text":"<p>This function will not strip any chars beyond the first char not matched. <code>strip_chars_start()</code> removes characters at the beginning of the string only. Use <code>strip_chars()</code> and <code>strip_chars_end()</code> to remove characters from the left and right or only from the right respectively.</p>"},{"location":"man/ExprStr_strip_chars_start/#value","title":"Value","text":"<p>Expr of String lowercase chars</p>"},{"location":"man/ExprStr_strip_chars_start/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(\" hello\", \"\\tworld\"))\ndf$select(pl$col(\"foo\")$str$strip_chars_start(\" hel rld\"))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo   \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 o     \u2502\n#&gt; \u2502    world \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_strptime/","title":"Convert a String column into a Date/Datetime/Time column.","text":"<p>Source code</p>"},{"location":"man/ExprStr_strptime/#description","title":"Description","text":"<p>Convert a String column into a Date/Datetime/Time column.</p>"},{"location":"man/ExprStr_strptime/#usage","title":"Usage","text":"<pre><code>ExprStr_strptime(\n  datatype,\n  format,\n  strict = TRUE,\n  exact = TRUE,\n  cache = TRUE,\n  ambiguous = \"raise\"\n)\n</code></pre>"},{"location":"man/ExprStr_strptime/#arguments","title":"Arguments","text":"<code>datatype</code>  The data type to convert into. Can be either Date, Datetime, or Time.  <code>format</code>  Format to use for conversion. See <code>?strptime</code> for possible values. Example: \"%Y-%m-%d %H:%M:%S\". If <code>NULL</code> (default), the format is inferred from the data. Notice that time zone <code>%Z</code> is not supported and will just ignore timezones. Numeric time zones like <code>%z</code> or <code>%:z</code> are supported.  <code>strict</code>  If <code>TRUE</code> (default), raise an error if a single string cannot be parsed. Otherwise, produce a polars <code>null</code>.  <code>exact</code>  If <code>TRUE</code> (default), require an exact format match. Otherwise, allow the format to match anywhere in the target string.  <code>cache</code>  Use a cache of unique, converted dates to apply the datetime conversion.  <code>ambiguous</code>   Determine how to deal with ambiguous datetimes:  <ul> <li> <code>\u201craise\u201d</code> (default): raise  </li> <li> <code>\u201cearliest\u201d</code>: use the earliest datetime  </li> <li> <code>\u201clatest\u201d</code>: use the latest datetime  </li> </ul>"},{"location":"man/ExprStr_strptime/#details","title":"Details","text":"<p>When parsing a Datetime the column precision will be inferred from the format string, if given, eg: \u201c%F %T%.3f\u201d =&gt; Datetime(\"ms\"). If no fractional second component is found then the default is \"us\" (microsecond).</p>"},{"location":"man/ExprStr_strptime/#value","title":"Value","text":"<p>Expr of a Date, Datetime or Time Series</p>"},{"location":"man/ExprStr_strptime/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = pl$Series(\n  c(\n    \"2021-04-22\",\n    \"2022-01-04 00:00:00\",\n    \"01/31/22\",\n    \"Sun Jul  8 00:34:60 2001\"\n  ),\n  \"date\"\n)\n#' #join multiple passes with different format\ns$to_frame()$with_columns(\n  pl$col(\"date\")\n  $str$strptime(pl$Date, \"%F\", strict = FALSE)\n  $fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%F %T\", strict = FALSE))\n  $fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%D\", strict = FALSE))\n  $fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%c\", strict = FALSE))\n)\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 date       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-04-22 \u2502\n#&gt; \u2502 2022-01-04 \u2502\n#&gt; \u2502 2022-01-31 \u2502\n#&gt; \u2502 2001-07-08 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>txt_datetimes = c(\n  \"2023-01-01 11:22:33 -0100\",\n  \"2023-01-01 11:22:33 +0300\",\n  \"invalid time\"\n)\n\npl$lit(txt_datetimes)$str$strptime(\n  pl$Datetime(\"ns\"),\n  format = \"%Y-%m-%d %H:%M:%S %z\", strict = FALSE,\n)$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [datetime[ns, UTC]]\n#&gt; [\n#&gt;  2023-01-01 12:22:33 UTC\n#&gt;  2023-01-01 08:22:33 UTC\n#&gt;  null\n#&gt; ]\n</code></pre>"},{"location":"man/ExprStr_to_date/","title":"Convert a String column into a Date column","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_date/#description","title":"Description","text":"<p>Convert a String column into a Date column</p>"},{"location":"man/ExprStr_to_date/#usage","title":"Usage","text":"<pre><code>ExprStr_to_date(format = NULL, strict = TRUE, exact = TRUE, cache = TRUE)\n</code></pre>"},{"location":"man/ExprStr_to_date/#arguments","title":"Arguments","text":"<code>format</code>  Format to use for conversion. See <code>?strptime</code> for possible values. Example: \"%Y-%m-%d\". If <code>NULL</code> (default), the format is inferred from the data. Notice that time zone <code>%Z</code> is not supported and will just ignore timezones. Numeric time zones like <code>%z</code> or <code>%:z</code> are supported.  <code>strict</code>  If <code>TRUE</code> (default), raise an error if a single string cannot be parsed. If <code>FALSE</code>, parsing failure will produce a polars <code>null</code>.  <code>exact</code>  If <code>TRUE</code> (default), require an exact format match. Otherwise, allow the format to match anywhere in the target string.  <code>cache</code>  Use a cache of unique, converted dates to apply the datetime conversion."},{"location":"man/ExprStr_to_date/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprStr_to_date/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(str_date = c(\"2009-01-02\", \"2009-01-03\", \"2009-1-4\", \"2009 05 01\"))$\n  with_columns(date = pl$col(\"str_date\")$str$to_date(strict = FALSE))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 str_date   \u2506 date       \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2502\n#&gt; \u2502 str        \u2506 date       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2009-01-02 \u2506 2009-01-02 \u2502\n#&gt; \u2502 2009-01-03 \u2506 2009-01-03 \u2502\n#&gt; \u2502 2009-1-4   \u2506 2009-01-04 \u2502\n#&gt; \u2502 2009 05 01 \u2506 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_to_datetime/","title":"Convert a String column into a Datetime column","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_datetime/#description","title":"Description","text":"<p>Convert a String column into a Datetime column</p>"},{"location":"man/ExprStr_to_datetime/#usage","title":"Usage","text":"<pre><code>ExprStr_to_datetime(\n  format = NULL,\n  time_unit = NULL,\n  time_zone = NULL,\n  strict = TRUE,\n  exact = TRUE,\n  cache = TRUE,\n  ambiguous = \"raise\"\n)\n</code></pre>"},{"location":"man/ExprStr_to_datetime/#arguments","title":"Arguments","text":"<code>format</code>  Format to use for conversion. See <code>?strptime</code> for possible values. Example: \"%Y-%m-%d %H:%M:%S\". If <code>NULL</code> (default), the format is inferred from the data. Notice that time zone <code>%Z</code> is not supported and will just ignore timezones. Numeric time zones like <code>%z</code> or <code>%:z</code> are supported.  <code>time_unit</code>  String (<code>\u201cns\u201d</code>, <code>\u201cus\u201d</code>, <code>\u201cms\u201d</code>) or integer.  <code>time_zone</code>  String describing a timezone. If <code>NULL</code> (default), <code>\u201cGMT</code> is used.  <code>strict</code>  If <code>TRUE</code> (default), raise an error if a single string cannot be parsed. If <code>FALSE</code>, parsing failure will produce a polars <code>null</code>.  <code>exact</code>  If <code>TRUE</code> (default), require an exact format match. Otherwise, allow the format to match anywhere in the target string.  <code>cache</code>  Use a cache of unique, converted dates to apply the datetime conversion.  <code>ambiguous</code>   Determine how to deal with ambiguous datetimes:  <ul> <li> <code>\u201craise\u201d</code> (default): raise  </li> <li> <code>\u201cearliest\u201d</code>: use the earliest datetime  </li> <li> <code>\u201clatest\u201d</code>: use the latest datetime  </li> </ul>"},{"location":"man/ExprStr_to_datetime/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprStr_to_datetime/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(str_date = c(\"2009-01-02 01:00\", \"2009-01-03 02:00\", \"2009-1-4 3:00\"))$\n  with_columns(datetime = pl$col(\"str_date\")$str$to_datetime(strict = FALSE))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 str_date         \u2506 datetime            \u2502\n#&gt; \u2502 ---              \u2506 ---                 \u2502\n#&gt; \u2502 str              \u2506 datetime[\u03bcs]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2009-01-02 01:00 \u2506 2009-01-02 01:00:00 \u2502\n#&gt; \u2502 2009-01-03 02:00 \u2506 2009-01-03 02:00:00 \u2502\n#&gt; \u2502 2009-1-4 3:00    \u2506 2009-01-04 03:00:00 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_to_lowercase/","title":"Convert a string to lowercase","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_lowercase/#description","title":"Description","text":"<p>Transform to lowercase variant.</p>"},{"location":"man/ExprStr_to_lowercase/#usage","title":"Usage","text":"<pre><code>ExprStr_to_lowercase()\n</code></pre>"},{"location":"man/ExprStr_to_lowercase/#value","title":"Value","text":"<p>Expr of String lowercase chars</p>"},{"location":"man/ExprStr_to_lowercase/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(c(\"A\", \"b\", \"c\", \"1\", NA))$str$to_lowercase()$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [str]\n#&gt; [\n#&gt;  \"a\"\n#&gt;  \"b\"\n#&gt;  \"c\"\n#&gt;  \"1\"\n#&gt;  null\n#&gt; ]\n</code></pre>"},{"location":"man/ExprStr_to_time/","title":"Convert a String column into a Time column","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_time/#description","title":"Description","text":"<p>Convert a String column into a Time column</p>"},{"location":"man/ExprStr_to_time/#usage","title":"Usage","text":"<pre><code>ExprStr_to_time(format = NULL, strict = TRUE, cache = TRUE)\n</code></pre>"},{"location":"man/ExprStr_to_time/#arguments","title":"Arguments","text":"<code>format</code>  Format to use for conversion. See <code>?strptime</code> for possible values. Example: \"%H:%M:%S\". If <code>NULL</code> (default), the format is inferred from the data. Notice that time zone <code>%Z</code> is not supported and will just ignore timezones. Numeric time zones like <code>%z</code> or <code>%:z</code> are supported.  <code>strict</code>  If <code>TRUE</code> (default), raise an error if a single string cannot be parsed. If <code>FALSE</code>, parsing failure will produce a polars <code>null</code>.  <code>cache</code>  Use a cache of unique, converted dates to apply the datetime conversion."},{"location":"man/ExprStr_to_time/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprStr_to_time/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(str_time = c(\"01:20:01\", \"28:00:02\", \"03:00:02\"))$\n  with_columns(time = pl$col(\"str_time\")$str$to_time(strict = FALSE))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 str_time \u2506 time     \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2502\n#&gt; \u2502 str      \u2506 time     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 01:20:01 \u2506 01:20:01 \u2502\n#&gt; \u2502 28:00:02 \u2506 null     \u2502\n#&gt; \u2502 03:00:02 \u2506 03:00:02 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStr_to_titlecase/","title":"Convert a string to titlecase","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_titlecase/#description","title":"Description","text":"<p>Transform to titlecase variant.</p>"},{"location":"man/ExprStr_to_titlecase/#usage","title":"Usage","text":"<pre><code>ExprStr_to_titlecase()\n</code></pre>"},{"location":"man/ExprStr_to_titlecase/#details","title":"Details","text":"<p>This method is only available with the feature flag \"simd\" which can be set via envvar \"RPOLARS_FULL_FEATURES\" and it requires Rust nightly toolchain to compile. See polars_info for more details.</p>"},{"location":"man/ExprStr_to_titlecase/#value","title":"Value","text":"<p>Expr of String titlecase chars</p>"},{"location":"man/ExprStr_to_titlecase/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\npl$lit(c(\"hello there\", \"HI, THERE\", NA))$str$to_titlecase()$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [str]\n#&gt; [\n#&gt;  \"Hello There\"\n#&gt;  \"Hi, There\"\n#&gt;  null\n#&gt; ]\n</code></pre>"},{"location":"man/ExprStr_to_uppercase/","title":"Convert a string to uppercase","text":"<p>Source code</p>"},{"location":"man/ExprStr_to_uppercase/#description","title":"Description","text":"<p>Transform to uppercase variant.</p>"},{"location":"man/ExprStr_to_uppercase/#usage","title":"Usage","text":"<pre><code>ExprStr_to_uppercase()\n</code></pre>"},{"location":"man/ExprStr_to_uppercase/#value","title":"Value","text":"<p>Expr of String uppercase chars</p>"},{"location":"man/ExprStr_to_uppercase/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(c(\"A\", \"b\", \"c\", \"1\", NA))$str$to_uppercase()$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [str]\n#&gt; [\n#&gt;  \"A\"\n#&gt;  \"B\"\n#&gt;  \"C\"\n#&gt;  \"1\"\n#&gt;  null\n#&gt; ]\n</code></pre>"},{"location":"man/ExprStr_zfill/","title":"Fills the string with zeroes.","text":"<p>Source code</p>"},{"location":"man/ExprStr_zfill/#description","title":"Description","text":"<p>Add zeroes to a string until it reaches <code>n</code> characters. If the number of characters is already greater than <code>n</code>, the string is not modified.</p>"},{"location":"man/ExprStr_zfill/#usage","title":"Usage","text":"<pre><code>ExprStr_zfill(alignment)\n</code></pre>"},{"location":"man/ExprStr_zfill/#arguments","title":"Arguments","text":"<code>alignment</code>  Fill the value up to this length."},{"location":"man/ExprStr_zfill/#details","title":"Details","text":"<p>Return a copy of the string left filled with ASCII \u20180\u2019 digits to make a string of length width.</p> <p>A leading sign prefix (\u2018+\u2019/\u2018-\u2019) is handled by inserting the padding after the sign character rather than before. The original string is returned if width is less than or equal to <code>len(s)</code>.</p>"},{"location":"man/ExprStr_zfill/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/ExprStr_zfill/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nsome_floats_expr = pl$lit(c(0, 10, -5, 5))\n\n# cast to String and ljust alignment = 5, and view as R char vector\nsome_floats_expr$cast(pl$String)$str$zfill(5)$to_r()\n</code></pre> <pre><code>#&gt; [1] \"000.0\" \"010.0\" \"-05.0\" \"005.0\"\n</code></pre> <pre><code># cast to int and the to utf8 and then ljust alignment = 5, and view as R\n# char vector\nsome_floats_expr$cast(pl$Int64)$cast(pl$String)$str$zfill(5)$to_r()\n</code></pre> <pre><code>#&gt; [1] \"00000\" \"00010\" \"-0005\" \"00005\"\n</code></pre>"},{"location":"man/ExprStruct_field/","title":"field","text":"<p>Source code</p>"},{"location":"man/ExprStruct_field/#description","title":"Description","text":"<p>Retrieve a <code>Struct</code> field as a new Series. By default base 2.</p>"},{"location":"man/ExprStruct_field/#usage","title":"Usage","text":"<pre><code>ExprStruct_field(name)\n</code></pre>"},{"location":"man/ExprStruct_field/#arguments","title":"Arguments","text":"<code>name</code>  string, the Name of the struct field to retrieve."},{"location":"man/ExprStruct_field/#value","title":"Value","text":"<p>Expr: Series of same and name selected field.</p>"},{"location":"man/ExprStruct_field/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  aaa = c(1, 2),\n  bbb = c(\"ab\", \"cd\"),\n  ccc = c(TRUE, NA),\n  ddd = list(c(1, 2), 3)\n)$select(\n  pl$struct(pl$all())$alias(\"struct_col\")\n)\n# struct field into a new Series\ndf$select(\n  pl$col(\"struct_col\")$struct$field(\"bbb\"),\n  pl$col(\"struct_col\")$struct$field(\"ddd\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bbb \u2506 ddd        \u2502\n#&gt; \u2502 --- \u2506 ---        \u2502\n#&gt; \u2502 str \u2506 list[f64]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 ab  \u2506 [1.0, 2.0] \u2502\n#&gt; \u2502 cd  \u2506 [3.0]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/ExprStruct_rename_fields/","title":"rename fields","text":"<p>Source code</p>"},{"location":"man/ExprStruct_rename_fields/#description","title":"Description","text":"<p>Rename the fields of the struct. By default base 2.</p>"},{"location":"man/ExprStruct_rename_fields/#usage","title":"Usage","text":"<pre><code>ExprStruct_rename_fields(names)\n</code></pre>"},{"location":"man/ExprStruct_rename_fields/#arguments","title":"Arguments","text":"<code>names</code>  char vec or list of strings given in the same order as the struct\u2019s fields. Providing fewer names will drop the latter fields. Providing too many names is ignored."},{"location":"man/ExprStruct_rename_fields/#value","title":"Value","text":"<p>Expr: struct-series with new names for the fields</p>"},{"location":"man/ExprStruct_rename_fields/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  aaa = 1:2,\n  bbb = c(\"ab\", \"cd\"),\n  ccc = c(TRUE, NA),\n  ddd = list(1:2, 3L)\n)$select(\n  pl$struct(pl$all())$alias(\"struct_col\")\n)$select(\n  pl$col(\"struct_col\")$struct$rename_fields(c(\"www\", \"xxx\", \"yyy\", \"zzz\"))\n)\ndf$unnest()\n</code></pre> <pre><code>#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 www \u2506 xxx \u2506 yyy  \u2506 zzz       \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2506 ---       \u2502\n#&gt; \u2502 i32 \u2506 str \u2506 bool \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 ab  \u2506 true \u2506 [1, 2]    \u2502\n#&gt; \u2502 2   \u2506 cd  \u2506 null \u2506 [3]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_abs/","title":"Compute the absolute values","text":"<p>Source code</p>"},{"location":"man/Expr_abs/#description","title":"Description","text":"<p>Compute the absolute values</p>"},{"location":"man/Expr_abs/#usage","title":"Usage","text":"<pre><code>Expr_abs\n</code></pre>"},{"location":"man/Expr_abs/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_abs/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = -1:1)$\n  with_columns(abs = pl$col(\"a\")$abs())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 abs \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1  \u2506 1   \u2502\n#&gt; \u2502 0   \u2506 0   \u2502\n#&gt; \u2502 1   \u2506 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_add/","title":"Add two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_add/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_add/#usage","title":"Usage","text":"<pre><code>Expr_add(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 + e2\n</code></pre>"},{"location":"man/Expr_add/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_add/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_add/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(5) + 10\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) + (10.0)]\n</code></pre> <pre><code>pl$lit(5) + pl$lit(10)\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) + (10.0)]\n</code></pre> <pre><code>pl$lit(5)$add(pl$lit(10))\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) + (10.0)]\n</code></pre> <pre><code>+pl$lit(5) # unary use resolves to same as pl$lit(5)\n</code></pre> <pre><code>#&gt; polars Expr: 5.0\n</code></pre>"},{"location":"man/Expr_agg_groups/","title":"Aggregate groups","text":"<p>Source code</p>"},{"location":"man/Expr_agg_groups/#description","title":"Description","text":"<p>Get the group indexes of the group by operation. Should be used in aggregation context only.</p>"},{"location":"man/Expr_agg_groups/#usage","title":"Usage","text":"<pre><code>Expr_agg_groups\n</code></pre>"},{"location":"man/Expr_agg_groups/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_agg_groups/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(\n  group = c(\"one\", \"one\", \"one\", \"two\", \"two\", \"two\"),\n  value = c(94, 95, 96, 97, 97, 99)\n))\ndf$group_by(\"group\", maintain_order = TRUE)$agg(pl$col(\"value\")$agg_groups())\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2506 value     \u2502\n#&gt; \u2502 ---   \u2506 ---       \u2502\n#&gt; \u2502 str   \u2506 list[u32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one   \u2506 [0, 1, 2] \u2502\n#&gt; \u2502 two   \u2506 [3, 4, 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_alias/","title":"Rename Expr output","text":"<p>Source code</p>"},{"location":"man/Expr_alias/#description","title":"Description","text":"<p>Rename the output of an expression.</p>"},{"location":"man/Expr_alias/#usage","title":"Usage","text":"<pre><code>Expr_alias(name)\n</code></pre>"},{"location":"man/Expr_alias/#arguments","title":"Arguments","text":"<code>name</code>  New name of output"},{"location":"man/Expr_alias/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_alias/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$col(\"bob\")$alias(\"alice\")\n</code></pre> <pre><code>#&gt; polars Expr: col(\"bob\").alias(\"alice\")\n</code></pre>"},{"location":"man/Expr_all/","title":"Apply logical AND on a column","text":"<p>Source code</p>"},{"location":"man/Expr_all/#description","title":"Description","text":"<p>Check if all boolean values in a Boolean column are <code>TRUE</code>. This method is an expression - not to be confused with <code>pl$all()</code> which is a function to select all columns.</p>"},{"location":"man/Expr_all/#usage","title":"Usage","text":"<pre><code>Expr_all(drop_nulls = TRUE)\n</code></pre>"},{"location":"man/Expr_all/#arguments","title":"Arguments","text":"<code>drop_nulls</code>  Boolean. Default TRUE, as name says."},{"location":"man/Expr_all/#value","title":"Value","text":"<p>Boolean literal</p>"},{"location":"man/Expr_all/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  all = c(TRUE, TRUE),\n  any = c(TRUE, FALSE),\n  none = c(FALSE, FALSE)\n)$select(\n  # the first $all() selects all columns, the second one applies the AND\n  # logical on the values\n  pl$all()$all()\n)\n</code></pre> <pre><code>#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all  \u2506 any   \u2506 none  \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2506 false \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_and/","title":"Apply logical AND on two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_and/#description","title":"Description","text":"<p>Combine two boolean expressions with AND.</p>"},{"location":"man/Expr_and/#usage","title":"Usage","text":"<pre><code>Expr_and(other)\n</code></pre>"},{"location":"man/Expr_and/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal"},{"location":"man/Expr_and/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_and/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(TRUE) &amp; TRUE\n</code></pre> <pre><code>#&gt; polars Expr: [(true) &amp; (true)]\n</code></pre> <pre><code>pl$lit(TRUE)$and(pl$lit(TRUE))\n</code></pre> <pre><code>#&gt; polars Expr: [(true) &amp; (true)]\n</code></pre>"},{"location":"man/Expr_any/","title":"Apply logical OR on a column","text":"<p>Source code</p>"},{"location":"man/Expr_any/#description","title":"Description","text":"<p>Check if any boolean value in a Boolean column is <code>TRUE</code>.</p>"},{"location":"man/Expr_any/#usage","title":"Usage","text":"<pre><code>Expr_any(drop_nulls = TRUE)\n</code></pre>"},{"location":"man/Expr_any/#arguments","title":"Arguments","text":"<code>drop_nulls</code>  Boolean. Default TRUE, as name says."},{"location":"man/Expr_any/#value","title":"Value","text":"<p>Boolean literal</p>"},{"location":"man/Expr_any/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  all = c(TRUE, TRUE),\n  any = c(TRUE, FALSE),\n  none = c(FALSE, FALSE)\n)$select(\n  pl$all()$any()\n)\n</code></pre> <pre><code>#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all  \u2506 any  \u2506 none  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 bool \u2506 bool \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2506 true \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_append/","title":"Append expressions","text":"<p>Source code</p>"},{"location":"man/Expr_append/#description","title":"Description","text":"<p>This is done by adding the chunks of <code>other</code> to this <code>output</code>.</p>"},{"location":"man/Expr_append/#usage","title":"Usage","text":"<pre><code>Expr_append(other, upcast = TRUE)\n</code></pre>"},{"location":"man/Expr_append/#arguments","title":"Arguments","text":"<code>other</code>  Expr or something coercible to an Expr.  <code>upcast</code>  Cast both Expr to a common supertype if they have one."},{"location":"man/Expr_append/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_append/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# append bottom to to row\ndf = pl$DataFrame(list(a = 1:3, b = c(NA_real_, 4, 5)))\ndf$select(pl$all()$head(1)$append(pl$all()$tail(1)))\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b    \u2502\n#&gt; \u2502 --- \u2506 ---  \u2502\n#&gt; \u2502 i32 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 null \u2502\n#&gt; \u2502 3   \u2506 5.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># implicit upcast, when default = TRUE\npl$DataFrame(list())$select(pl$lit(42)$append(42L))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 42.0    \u2502\n#&gt; \u2502 42.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$DataFrame(list())$select(pl$lit(42)$append(FALSE))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 42.0    \u2502\n#&gt; \u2502 0.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$DataFrame(list())$select(pl$lit(\"Bob\")$append(FALSE))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Bob     \u2502\n#&gt; \u2502 false   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_approx_n_unique/","title":"Approx count unique values","text":"<p>Source code</p>"},{"location":"man/Expr_approx_n_unique/#description","title":"Description","text":"<p>This is done using the HyperLogLog++ algorithm for cardinality estimation.</p>"},{"location":"man/Expr_approx_n_unique/#usage","title":"Usage","text":"<pre><code>Expr_approx_n_unique\n</code></pre>"},{"location":"man/Expr_approx_n_unique/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_approx_n_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris[, 4:5])$\n  with_columns(count = pl$col(\"Species\")$approx_n_unique())\n</code></pre> <pre><code>#&gt; shape: (150, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Width \u2506 Species   \u2506 count \u2502\n#&gt; \u2502 ---         \u2506 ---       \u2506 ---   \u2502\n#&gt; \u2502 f64         \u2506 cat       \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 \u2026           \u2506 \u2026         \u2506 \u2026     \u2502\n#&gt; \u2502 1.9         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 2.0         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 2.3         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 1.8         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arccos/","title":"Compute inverse cosine","text":"<p>Source code</p>"},{"location":"man/Expr_arccos/#description","title":"Description","text":"<p>Compute inverse cosine</p>"},{"location":"man/Expr_arccos/#usage","title":"Usage","text":"<pre><code>Expr_arccos\n</code></pre>"},{"location":"man/Expr_arccos/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arccos/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, cos(0.5), 0, 1, NA_real_))$\n  with_columns(arccos = pl$col(\"a\")$arccos())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arccos   \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 3.141593 \u2502\n#&gt; \u2502 0.877583 \u2506 0.5      \u2502\n#&gt; \u2502 0.0      \u2506 1.570796 \u2502\n#&gt; \u2502 1.0      \u2506 0.0      \u2502\n#&gt; \u2502 null     \u2506 null     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arccosh/","title":"Compute inverse hyperbolic cosine","text":"<p>Source code</p>"},{"location":"man/Expr_arccosh/#description","title":"Description","text":"<p>Compute inverse hyperbolic cosine</p>"},{"location":"man/Expr_arccosh/#usage","title":"Usage","text":"<pre><code>Expr_arccosh\n</code></pre>"},{"location":"man/Expr_arccosh/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arccosh/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, cosh(0.5), 0, 1, NA_real_))$\n  with_columns(arccosh = pl$col(\"a\")$arccosh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arccosh \u2502\n#&gt; \u2502 ---      \u2506 ---     \u2502\n#&gt; \u2502 f64      \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 NaN     \u2502\n#&gt; \u2502 1.127626 \u2506 0.5     \u2502\n#&gt; \u2502 0.0      \u2506 NaN     \u2502\n#&gt; \u2502 1.0      \u2506 0.0     \u2502\n#&gt; \u2502 null     \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arcsin/","title":"Compute inverse sine","text":"<p>Source code</p>"},{"location":"man/Expr_arcsin/#description","title":"Description","text":"<p>Compute inverse sine</p>"},{"location":"man/Expr_arcsin/#usage","title":"Usage","text":"<pre><code>Expr_arcsin\n</code></pre>"},{"location":"man/Expr_arcsin/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arcsin/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, sin(0.5), 0, 1, NA_real_))$\n  with_columns(arcsin = pl$col(\"a\")$arcsin())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arcsin    \u2502\n#&gt; \u2502 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -1.570796 \u2502\n#&gt; \u2502 0.479426 \u2506 0.5       \u2502\n#&gt; \u2502 0.0      \u2506 0.0       \u2502\n#&gt; \u2502 1.0      \u2506 1.570796  \u2502\n#&gt; \u2502 null     \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arcsinh/","title":"Compute inverse hyperbolic sine","text":"<p>Source code</p>"},{"location":"man/Expr_arcsinh/#description","title":"Description","text":"<p>Compute inverse hyperbolic sine</p>"},{"location":"man/Expr_arcsinh/#usage","title":"Usage","text":"<pre><code>Expr_arcsinh\n</code></pre>"},{"location":"man/Expr_arcsinh/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arcsinh/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, sinh(0.5), 0, 1, NA_real_))$\n  with_columns(arcsinh = pl$col(\"a\")$arcsinh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arcsinh   \u2502\n#&gt; \u2502 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -0.881374 \u2502\n#&gt; \u2502 0.521095 \u2506 0.5       \u2502\n#&gt; \u2502 0.0      \u2506 0.0       \u2502\n#&gt; \u2502 1.0      \u2506 0.881374  \u2502\n#&gt; \u2502 null     \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arctan/","title":"Compute inverse tangent","text":"<p>Source code</p>"},{"location":"man/Expr_arctan/#description","title":"Description","text":"<p>Compute inverse tangent</p>"},{"location":"man/Expr_arctan/#usage","title":"Usage","text":"<pre><code>Expr_arctan\n</code></pre>"},{"location":"man/Expr_arctan/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arctan/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, tan(0.5), 0, 1, NA_real_))$\n  with_columns(arctan = pl$col(\"a\")$arctan())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arctan    \u2502\n#&gt; \u2502 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -0.785398 \u2502\n#&gt; \u2502 0.546302 \u2506 0.5       \u2502\n#&gt; \u2502 0.0      \u2506 0.0       \u2502\n#&gt; \u2502 1.0      \u2506 0.785398  \u2502\n#&gt; \u2502 null     \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arctanh/","title":"Compute inverse hyperbolic tangent","text":"<p>Source code</p>"},{"location":"man/Expr_arctanh/#description","title":"Description","text":"<p>Compute inverse hyperbolic tangent</p>"},{"location":"man/Expr_arctanh/#usage","title":"Usage","text":"<pre><code>Expr_arctanh\n</code></pre>"},{"location":"man/Expr_arctanh/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arctanh/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, tanh(0.5), 0, 1, NA_real_))$\n  with_columns(arctanh = pl$col(\"a\")$arctanh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 arctanh \u2502\n#&gt; \u2502 ---      \u2506 ---     \u2502\n#&gt; \u2502 f64      \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -inf    \u2502\n#&gt; \u2502 0.462117 \u2506 0.5     \u2502\n#&gt; \u2502 0.0      \u2506 0.0     \u2502\n#&gt; \u2502 1.0      \u2506 inf     \u2502\n#&gt; \u2502 null     \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arg_max/","title":"Index of max value","text":"<p>Source code</p>"},{"location":"man/Expr_arg_max/#description","title":"Description","text":"<p>Get the index of the maximal value.</p>"},{"location":"man/Expr_arg_max/#usage","title":"Usage","text":"<pre><code>Expr_arg_max\n</code></pre>"},{"location":"man/Expr_arg_max/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arg_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  a = c(6, 1, 0, NA, Inf, NaN)\n)$with_columns(arg_max = pl$col(\"a\")$arg_max())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 arg_max \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0  \u2506 4       \u2502\n#&gt; \u2502 1.0  \u2506 4       \u2502\n#&gt; \u2502 0.0  \u2506 4       \u2502\n#&gt; \u2502 null \u2506 4       \u2502\n#&gt; \u2502 inf  \u2506 4       \u2502\n#&gt; \u2502 NaN  \u2506 4       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arg_min/","title":"Index of min value","text":"<p>Source code</p>"},{"location":"man/Expr_arg_min/#description","title":"Description","text":"<p>Get the index of the minimal value.</p>"},{"location":"man/Expr_arg_min/#usage","title":"Usage","text":"<pre><code>Expr_arg_min\n</code></pre>"},{"location":"man/Expr_arg_min/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arg_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  a = c(6, 1, 0, NA, Inf, NaN)\n)$with_columns(arg_min = pl$col(\"a\")$arg_min())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 arg_min \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0  \u2506 2       \u2502\n#&gt; \u2502 1.0  \u2506 2       \u2502\n#&gt; \u2502 0.0  \u2506 2       \u2502\n#&gt; \u2502 null \u2506 2       \u2502\n#&gt; \u2502 inf  \u2506 2       \u2502\n#&gt; \u2502 NaN  \u2506 2       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arg_sort/","title":"Index of a sort","text":"<p>Source code</p>"},{"location":"man/Expr_arg_sort/#description","title":"Description","text":"<p>Get the index values that would sort this column.</p>"},{"location":"man/Expr_arg_sort/#usage","title":"Usage","text":"<pre><code>Expr_arg_sort(descending = FALSE, nulls_last = FALSE)\n</code></pre>"},{"location":"man/Expr_arg_sort/#arguments","title":"Arguments","text":"<code>descending</code>  Sort in descending order. When sorting by multiple columns, can be specified per column by passing a vector of booleans.  <code>nulls_last</code>  If <code>TRUE</code>, place nulls values last."},{"location":"man/Expr_arg_sort/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arg_sort/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  a = c(6, 1, 0, NA, Inf, NaN)\n)$with_columns(arg_sorted = pl$col(\"a\")$arg_sort())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 arg_sorted \u2502\n#&gt; \u2502 ---  \u2506 ---        \u2502\n#&gt; \u2502 f64  \u2506 u32        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0  \u2506 3          \u2502\n#&gt; \u2502 1.0  \u2506 2          \u2502\n#&gt; \u2502 0.0  \u2506 1          \u2502\n#&gt; \u2502 null \u2506 0          \u2502\n#&gt; \u2502 inf  \u2506 4          \u2502\n#&gt; \u2502 NaN  \u2506 5          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_arg_unique/","title":"Index of first unique values","text":"<p>Source code</p>"},{"location":"man/Expr_arg_unique/#description","title":"Description","text":"<p>This finds the position of first occurrence of each unique value.</p>"},{"location":"man/Expr_arg_unique/#usage","title":"Usage","text":"<pre><code>Expr_arg_unique\n</code></pre>"},{"location":"man/Expr_arg_unique/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_arg_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(c(1:2, 1:3))$arg_unique())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_argsort/","title":"Index of a sort","text":"<p>Source code</p>"},{"location":"man/Expr_argsort/#description","title":"Description","text":"<p>argsort is a alias for arg_sort</p>"},{"location":"man/Expr_argsort/#usage","title":"Usage","text":"<pre><code>Expr_argsort(descending = FALSE, nulls_last = FALSE)\n</code></pre>"},{"location":"man/Expr_argsort/#arguments","title":"Arguments","text":"<code>descending</code>  Sort in descending order. When sorting by multiple columns, can be specified per column by passing a vector of booleans.  <code>nulls_last</code>  If <code>TRUE</code>, place nulls values last."},{"location":"man/Expr_argsort/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  a = c(6, 1, 0, NA, Inf, NaN)\n)$with_columns(arg_sorted = pl$col(\"a\")$arg_sort())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 arg_sorted \u2502\n#&gt; \u2502 ---  \u2506 ---        \u2502\n#&gt; \u2502 f64  \u2506 u32        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0  \u2506 3          \u2502\n#&gt; \u2502 1.0  \u2506 2          \u2502\n#&gt; \u2502 0.0  \u2506 1          \u2502\n#&gt; \u2502 null \u2506 0          \u2502\n#&gt; \u2502 inf  \u2506 4          \u2502\n#&gt; \u2502 NaN  \u2506 5          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_backward_fill/","title":"Fill null values backward","text":"<p>Source code</p>"},{"location":"man/Expr_backward_fill/#description","title":"Description","text":"<p>Fill missing values with the next to be seen values. Syntactic sugar for <code>$fill_null(strategy = \u201cbackward\u201d)</code>.</p>"},{"location":"man/Expr_backward_fill/#usage","title":"Usage","text":"<pre><code>Expr_backward_fill(limit = NULL)\n</code></pre>"},{"location":"man/Expr_backward_fill/#arguments","title":"Arguments","text":"<code>limit</code>  Number of consecutive null values to fill when using the <code>\u201cforward\u201d</code> or <code>\u201cbackward\u201d</code> strategy."},{"location":"man/Expr_backward_fill/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_backward_fill/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(NA, 1, NA, 2, NA))$\n  with_columns(\n  backward = pl$col(\"a\")$backward_fill()\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 backward \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 1.0      \u2502\n#&gt; \u2502 1.0  \u2506 1.0      \u2502\n#&gt; \u2502 null \u2506 2.0      \u2502\n#&gt; \u2502 2.0  \u2506 2.0      \u2502\n#&gt; \u2502 null \u2506 null     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_bottom_k/","title":"Bottom k values","text":"<p>Source code</p>"},{"location":"man/Expr_bottom_k/#description","title":"Description","text":"<p>Return the <code>k</code> smallest elements. This has time complexity: <code> O(n + k \\log{}n - ) </code></p>"},{"location":"man/Expr_bottom_k/#usage","title":"Usage","text":"<pre><code>Expr_bottom_k(k)\n</code></pre>"},{"location":"man/Expr_bottom_k/#arguments","title":"Arguments","text":"<code>k</code>  Number of top values to get"},{"location":"man/Expr_bottom_k/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_bottom_k/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(6, 1, 0, NA, Inf, NaN))$select(pl$col(\"a\")$bottom_k(5))\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 0.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 6.0  \u2502\n#&gt; \u2502 inf  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cast/","title":"Cast between DataType","text":"<p>Source code</p>"},{"location":"man/Expr_cast/#description","title":"Description","text":"<p>Cast between DataType</p>"},{"location":"man/Expr_cast/#usage","title":"Usage","text":"<pre><code>Expr_cast(dtype, strict = TRUE)\n</code></pre>"},{"location":"man/Expr_cast/#arguments","title":"Arguments","text":"<code>dtype</code>  DataType to cast to.  <code>strict</code>  If <code>TRUE</code> (default), an error will be thrown if cast failed at resolve time."},{"location":"man/Expr_cast/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cast/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = 1:3, b = c(1, 2, 3))\ndf$with_columns(\n  pl$col(\"a\")$cast(pl$dtypes$Float64),\n  pl$col(\"b\")$cast(pl$dtypes$Int32)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1   \u2502\n#&gt; \u2502 2.0 \u2506 2   \u2502\n#&gt; \u2502 3.0 \u2506 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># strict FALSE, inserts null for any cast failure\npl$lit(c(100, 200, 300))$cast(pl$dtypes$UInt8, strict = FALSE)$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [u8]\n#&gt; [\n#&gt;  100\n#&gt;  200\n#&gt;  null\n#&gt; ]\n</code></pre> <pre><code># strict TRUE, raise any failure as an error when query is executed.\ntryCatch(\n  {\n    pl$lit(\"a\")$cast(pl$dtypes$Float64, strict = TRUE)$to_series()\n  },\n  error = function(e) e\n)\n</code></pre> <pre><code>#&gt; &lt;RPolarsErr_error: Execution halted with the following contexts\n#&gt;    0: In R: in $select()\n#&gt;    0: During function call [.main()]\n#&gt;    1: Encountered the following error in Rust-Polars:\n#&gt;          cannot cast non numeric any-value to numeric dtype\n#&gt; &gt;\n</code></pre>"},{"location":"man/Expr_ceil/","title":"Ceiling","text":"<p>Source code</p>"},{"location":"man/Expr_ceil/#description","title":"Description","text":"<p>Rounds up to the nearest integer value. Only works on floating point Series.</p>"},{"location":"man/Expr_ceil/#usage","title":"Usage","text":"<pre><code>Expr_ceil\n</code></pre>"},{"location":"man/Expr_ceil/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_ceil/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0.33, 0.5, 1.02, 1.5, NaN, NA, Inf, -Inf))$with_columns(\n  ceiling = pl$col(\"a\")$ceil()\n)\n</code></pre> <pre><code>#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 ceiling \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.33 \u2506 1.0     \u2502\n#&gt; \u2502 0.5  \u2506 1.0     \u2502\n#&gt; \u2502 1.02 \u2506 2.0     \u2502\n#&gt; \u2502 1.5  \u2506 2.0     \u2502\n#&gt; \u2502 NaN  \u2506 NaN     \u2502\n#&gt; \u2502 null \u2506 null    \u2502\n#&gt; \u2502 inf  \u2506 inf     \u2502\n#&gt; \u2502 -inf \u2506 -inf    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_class/","title":"Polars Expressions","text":""},{"location":"man/Expr_class/#description","title":"Description","text":"<p>Expressions are all the functions and methods that are applicable to a Polars DataFrame or LazyFrame. They can be split into the following categories (following the Py-Polars classification):</p> <ul> <li>  Aggregate  </li> <li>  Binary  </li> <li>  Categorical  </li> <li>  Computation  </li> <li>  Functions  </li> <li>  List  </li> <li>  Meta  </li> <li>  Name  </li> <li>  String  </li> <li>  Struct  </li> <li>  Temporal  </li> </ul>"},{"location":"man/Expr_class/#value","title":"Value","text":"<p>not applicable</p>"},{"location":"man/Expr_clip/","title":"Clip elements","text":"<p>Source code</p>"},{"location":"man/Expr_clip/#description","title":"Description","text":"<p>Clip (limit) the values in an array to a <code>min</code> and <code>max</code> boundary. This only works for numerical types.</p>"},{"location":"man/Expr_clip/#usage","title":"Usage","text":"<pre><code>Expr_clip(min, max)\n</code></pre>"},{"location":"man/Expr_clip/#arguments","title":"Arguments","text":"<code>min</code>  Minimum value, Expr returning a numeric.  <code>max</code>  Maximum value, Expr returning a numeric."},{"location":"man/Expr_clip/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_clip/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(foo = c(-50L, 5L, NA_integer_, 50L))$\n  with_columns(clipped = pl$col(\"foo\")$clip(1, 10))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo  \u2506 clipped \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 i32  \u2506 i32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -50  \u2506 1       \u2502\n#&gt; \u2502 5    \u2506 5       \u2502\n#&gt; \u2502 null \u2506 null    \u2502\n#&gt; \u2502 50   \u2506 10      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_clip_max/","title":"Clip elements above maximum value","text":"<p>Source code</p>"},{"location":"man/Expr_clip_max/#description","title":"Description","text":"<p>Replace all values above a maximum value by this maximum value.</p>"},{"location":"man/Expr_clip_max/#usage","title":"Usage","text":"<pre><code>Expr_clip_max(max)\n</code></pre>"},{"location":"man/Expr_clip_max/#arguments","title":"Arguments","text":"<code>max</code>  Maximum value, Expr returning a numeric."},{"location":"man/Expr_clip_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(foo = c(-50L, 5L, NA_integer_, 50L))$\n  with_columns(clipped = pl$col(\"foo\")$clip_max(10))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo  \u2506 clipped \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 i32  \u2506 i32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -50  \u2506 -50     \u2502\n#&gt; \u2502 5    \u2506 5       \u2502\n#&gt; \u2502 null \u2506 null    \u2502\n#&gt; \u2502 50   \u2506 10      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_clip_min/","title":"Clip elements below minimum value","text":"<p>Source code</p>"},{"location":"man/Expr_clip_min/#description","title":"Description","text":"<p>Replace all values below a minimum value by this minimum value.</p>"},{"location":"man/Expr_clip_min/#usage","title":"Usage","text":"<pre><code>Expr_clip_min(min)\n</code></pre>"},{"location":"man/Expr_clip_min/#arguments","title":"Arguments","text":"<code>min</code>  Minimum value, Expr returning a numeric."},{"location":"man/Expr_clip_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(foo = c(-50L, 5L, NA_integer_, 50L))$\n  with_columns(clipped = pl$col(\"foo\")$clip_min(1))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo  \u2506 clipped \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 i32  \u2506 i32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -50  \u2506 1       \u2502\n#&gt; \u2502 5    \u2506 5       \u2502\n#&gt; \u2502 null \u2506 null    \u2502\n#&gt; \u2502 50   \u2506 50      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cos/","title":"Compute cosine","text":"<p>Source code</p>"},{"location":"man/Expr_cos/#description","title":"Description","text":"<p>Compute cosine</p>"},{"location":"man/Expr_cos/#usage","title":"Usage","text":"<pre><code>Expr_cos\n</code></pre>"},{"location":"man/Expr_cos/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cos/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0, pi / 2, pi, NA_real_))$\n  with_columns(cosine = pl$col(\"a\")$cos())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 cosine     \u2502\n#&gt; \u2502 ---      \u2506 ---        \u2502\n#&gt; \u2502 f64      \u2506 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0      \u2506 1.0        \u2502\n#&gt; \u2502 1.570796 \u2506 6.1232e-17 \u2502\n#&gt; \u2502 3.141593 \u2506 -1.0       \u2502\n#&gt; \u2502 null     \u2506 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cosh/","title":"Compute hyperbolic cosine","text":"<p>Source code</p>"},{"location":"man/Expr_cosh/#description","title":"Description","text":"<p>Compute hyperbolic cosine</p>"},{"location":"man/Expr_cosh/#usage","title":"Usage","text":"<pre><code>Expr_cosh\n</code></pre>"},{"location":"man/Expr_cosh/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cosh/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, acosh(0.5), 0, 1, NA_real_))$\n  with_columns(cosh = pl$col(\"a\")$cosh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 cosh     \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0 \u2506 1.543081 \u2502\n#&gt; \u2502 NaN  \u2506 NaN      \u2502\n#&gt; \u2502 0.0  \u2506 1.0      \u2502\n#&gt; \u2502 1.0  \u2506 1.543081 \u2502\n#&gt; \u2502 null \u2506 null     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_count/","title":"Count elements","text":"<p>Source code</p>"},{"location":"man/Expr_count/#description","title":"Description","text":"<p>Count the number of elements in this expression. Note that <code>NULL</code> values are also counted. <code>$len()</code> is an alias.</p>"},{"location":"man/Expr_count/#usage","title":"Usage","text":"<pre><code>Expr_count\n\nExpr_len\n</code></pre>"},{"location":"man/Expr_count/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p>"},{"location":"man/Expr_count/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_count/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  all = c(TRUE, TRUE),\n  any = c(TRUE, FALSE),\n  none = c(FALSE, FALSE)\n)$select(\n  pl$all()$count()\n)\n</code></pre> <pre><code>#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all \u2506 any \u2506 none \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 u32 \u2506 u32 \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2506 2   \u2506 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cum_count/","title":"Cumulative count","text":"<p>Source code</p>"},{"location":"man/Expr_cum_count/#description","title":"Description","text":"<p>Get an array with the cumulative count (zero-indexed) computed at every element.</p>"},{"location":"man/Expr_cum_count/#usage","title":"Usage","text":"<pre><code>Expr_cum_count(reverse = FALSE)\n</code></pre>"},{"location":"man/Expr_cum_count/#arguments","title":"Arguments","text":"<code>reverse</code>  If <code>TRUE</code>, reverse the count."},{"location":"man/Expr_cum_count/#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p> <p><code>$cum_count()</code> does not seem to count within lists.</p>"},{"location":"man/Expr_cum_count/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cum_count/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:4)$with_columns(\n  pl$col(\"a\")$cum_count()$alias(\"cum_count\"),\n  pl$col(\"a\")$cum_count(reverse = TRUE)$alias(\"cum_count_reversed\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 cum_count \u2506 cum_count_reversed \u2502\n#&gt; \u2502 --- \u2506 ---       \u2506 ---                \u2502\n#&gt; \u2502 i32 \u2506 u32       \u2506 u32                \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 0         \u2506 3                  \u2502\n#&gt; \u2502 2   \u2506 1         \u2506 2                  \u2502\n#&gt; \u2502 3   \u2506 2         \u2506 1                  \u2502\n#&gt; \u2502 4   \u2506 3         \u2506 0                  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cum_max/","title":"Cumulative maximum","text":"<p>Source code</p>"},{"location":"man/Expr_cum_max/#description","title":"Description","text":"<p>Get an array with the cumulative max computed at every element.</p>"},{"location":"man/Expr_cum_max/#usage","title":"Usage","text":"<pre><code>Expr_cum_max(reverse = FALSE)\n</code></pre>"},{"location":"man/Expr_cum_max/#arguments","title":"Arguments","text":"<code>reverse</code>  If <code>TRUE</code>, start from the last value."},{"location":"man/Expr_cum_max/#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Expr_cum_max/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cum_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1:4, 2L))$with_columns(\n  pl$col(\"a\")$cum_max()$alias(\"cummux\"),\n  pl$col(\"a\")$cum_max(reverse = TRUE)$alias(\"cum_max_reversed\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 cummux \u2506 cum_max_reversed \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 ---              \u2502\n#&gt; \u2502 i32 \u2506 i32    \u2506 i32              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1      \u2506 4                \u2502\n#&gt; \u2502 2   \u2506 2      \u2506 4                \u2502\n#&gt; \u2502 3   \u2506 3      \u2506 4                \u2502\n#&gt; \u2502 4   \u2506 4      \u2506 4                \u2502\n#&gt; \u2502 2   \u2506 4      \u2506 2                \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cum_min/","title":"Cumulative minimum","text":"<p>Source code</p>"},{"location":"man/Expr_cum_min/#description","title":"Description","text":"<p>Get an array with the cumulative min computed at every element.</p>"},{"location":"man/Expr_cum_min/#usage","title":"Usage","text":"<pre><code>Expr_cum_min(reverse = FALSE)\n</code></pre>"},{"location":"man/Expr_cum_min/#arguments","title":"Arguments","text":"<code>reverse</code>  If <code>TRUE</code>, start from the last value."},{"location":"man/Expr_cum_min/#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Expr_cum_min/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cum_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1:4, 2L))$with_columns(\n  pl$col(\"a\")$cum_min()$alias(\"cum_min\"),\n  pl$col(\"a\")$cum_min(reverse = TRUE)$alias(\"cum_min_reversed\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 cum_min \u2506 cum_min_reversed \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---              \u2502\n#&gt; \u2502 i32 \u2506 i32     \u2506 i32              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1       \u2506 1                \u2502\n#&gt; \u2502 2   \u2506 1       \u2506 2                \u2502\n#&gt; \u2502 3   \u2506 1       \u2506 2                \u2502\n#&gt; \u2502 4   \u2506 1       \u2506 2                \u2502\n#&gt; \u2502 2   \u2506 1       \u2506 2                \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cum_prod/","title":"Cumulative product","text":"<p>Source code</p>"},{"location":"man/Expr_cum_prod/#description","title":"Description","text":"<p>Get an array with the cumulative product computed at every element.</p>"},{"location":"man/Expr_cum_prod/#usage","title":"Usage","text":"<pre><code>Expr_cum_prod(reverse = FALSE)\n</code></pre>"},{"location":"man/Expr_cum_prod/#arguments","title":"Arguments","text":"<code>reverse</code>  If <code>TRUE</code>, start with the total product of elements and divide each row one by one."},{"location":"man/Expr_cum_prod/#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Expr_cum_prod/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cum_prod/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:4)$with_columns(\n  pl$col(\"a\")$cum_prod()$alias(\"cum_prod\"),\n  pl$col(\"a\")$cum_prod(reverse = TRUE)$alias(\"cum_prod_reversed\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 cum_prod \u2506 cum_prod_reversed \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---               \u2502\n#&gt; \u2502 i32 \u2506 i64      \u2506 i64               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1        \u2506 24                \u2502\n#&gt; \u2502 2   \u2506 2        \u2506 24                \u2502\n#&gt; \u2502 3   \u2506 6        \u2506 12                \u2502\n#&gt; \u2502 4   \u2506 24       \u2506 4                 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cum_sum/","title":"Cumulative sum","text":"<p>Source code</p>"},{"location":"man/Expr_cum_sum/#description","title":"Description","text":"<p>Get an array with the cumulative sum computed at every element.</p>"},{"location":"man/Expr_cum_sum/#usage","title":"Usage","text":"<pre><code>Expr_cum_sum(reverse = FALSE)\n</code></pre>"},{"location":"man/Expr_cum_sum/#arguments","title":"Arguments","text":"<code>reverse</code>  If <code>TRUE</code>, start with the total sum of elements and substract each row one by one."},{"location":"man/Expr_cum_sum/#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Expr_cum_sum/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cum_sum/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:4)$with_columns(\n  pl$col(\"a\")$cum_sum()$alias(\"cum_sum\"),\n  pl$col(\"a\")$cum_sum(reverse = TRUE)$alias(\"cum_sum_reversed\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 cum_sum \u2506 cum_sum_reversed \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---              \u2502\n#&gt; \u2502 i32 \u2506 i32     \u2506 i32              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1       \u2506 10               \u2502\n#&gt; \u2502 2   \u2506 3       \u2506 9                \u2502\n#&gt; \u2502 3   \u2506 6       \u2506 7                \u2502\n#&gt; \u2502 4   \u2506 10      \u2506 4                \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_cumulative_eval/","title":"Cumulative evaluation of expressions","text":"<p>Source code</p>"},{"location":"man/Expr_cumulative_eval/#description","title":"Description","text":"<p>Run an expression over a sliding window that increases by <code>1</code> slot every iteration.</p>"},{"location":"man/Expr_cumulative_eval/#usage","title":"Usage","text":"<pre><code>Expr_cumulative_eval(expr, min_periods = 1L, parallel = FALSE)\n</code></pre>"},{"location":"man/Expr_cumulative_eval/#arguments","title":"Arguments","text":"<code>expr</code>  Expression to evaluate.  <code>min_periods</code>  Number of valid (non-null) values there should be in the window before the expression is evaluated.  <code>parallel</code>  Run in parallel. Don\u2019t do this in a groupby or another operation that already has much parallelization."},{"location":"man/Expr_cumulative_eval/#details","title":"Details","text":"<p>This can be really slow as it can have <code>O(n^2)</code> complexity. Don\u2019t use this for operations that visit all elements.</p>"},{"location":"man/Expr_cumulative_eval/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_cumulative_eval/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(1:5)$cumulative_eval(\n  pl$element()$first() - pl$element()$last()^2\n)$to_r()\n</code></pre> <pre><code>#&gt; [1]   0  -3  -8 -15 -24\n</code></pre>"},{"location":"man/Expr_diff/","title":"Difference","text":"<p>Source code</p>"},{"location":"man/Expr_diff/#description","title":"Description","text":"<p>Calculate the n-th discrete difference.</p>"},{"location":"man/Expr_diff/#usage","title":"Usage","text":"<pre><code>Expr_diff(n = 1, null_behavior = c(\"ignore\", \"drop\"))\n</code></pre>"},{"location":"man/Expr_diff/#arguments","title":"Arguments","text":"<code>n</code>  Number of slots to shift.  <code>null_behavior</code>  String, either <code>\u201cignore\u201d</code> (default), else <code>\u201cdrop\u201d</code>."},{"location":"man/Expr_diff/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_diff/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(20L, 10L, 30L, 40L))$with_columns(\n  diff_default = pl$col(\"a\")$diff(),\n  diff_2_ignore = pl$col(\"a\")$diff(2, \"ignore\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 diff_default \u2506 diff_2_ignore \u2502\n#&gt; \u2502 --- \u2506 ---          \u2506 ---           \u2502\n#&gt; \u2502 i32 \u2506 i32          \u2506 i32           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 20  \u2506 null         \u2506 null          \u2502\n#&gt; \u2502 10  \u2506 -10          \u2506 null          \u2502\n#&gt; \u2502 30  \u2506 20           \u2506 10            \u2502\n#&gt; \u2502 40  \u2506 10           \u2506 30            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_div/","title":"Divide two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_div/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_div/#usage","title":"Usage","text":"<pre><code>Expr_div(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 / e2\n</code></pre>"},{"location":"man/Expr_div/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_div/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_div/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(5) / 10\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) // (10.0)]\n</code></pre> <pre><code>pl$lit(5) / pl$lit(10)\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) // (10.0)]\n</code></pre> <pre><code>pl$lit(5)$div(pl$lit(10))\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) // (10.0)]\n</code></pre>"},{"location":"man/Expr_dot/","title":"Dot product","text":"<p>Source code</p>"},{"location":"man/Expr_dot/#description","title":"Description","text":"<p>Compute the dot/inner product between two Expressions.</p>"},{"location":"man/Expr_dot/#usage","title":"Usage","text":"<pre><code>Expr_dot(other)\n</code></pre>"},{"location":"man/Expr_dot/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal"},{"location":"man/Expr_dot/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_dot/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  a = 1:4, b = c(1, 2, 3, 4)\n)$with_columns(\n  pl$col(\"a\")$dot(pl$col(\"b\"))$alias(\"a dot b\"),\n  pl$col(\"a\")$dot(pl$col(\"a\"))$alias(\"a dot a\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 a dot b \u2506 a dot a \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 i32 \u2506 f64 \u2506 f64     \u2506 i32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1.0 \u2506 30.0    \u2506 30      \u2502\n#&gt; \u2502 2   \u2506 2.0 \u2506 30.0    \u2506 30      \u2502\n#&gt; \u2502 3   \u2506 3.0 \u2506 30.0    \u2506 30      \u2502\n#&gt; \u2502 4   \u2506 4.0 \u2506 30.0    \u2506 30      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_drop_nans/","title":"Drop NaN","text":"<p>Source code</p>"},{"location":"man/Expr_drop_nans/#description","title":"Description","text":"<p>Drop NaN</p>"},{"location":"man/Expr_drop_nans/#usage","title":"Usage","text":"<pre><code>Expr_drop_nans\n</code></pre>"},{"location":"man/Expr_drop_nans/#details","title":"Details","text":"<p>Note that <code>NaN</code> values are not <code>null</code> values. Null values correspond to NA in R.</p>"},{"location":"man/Expr_drop_nans/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_drop_nans/#see-also","title":"See Also","text":"<p><code>drop_nulls()</code></p>"},{"location":"man/Expr_drop_nans/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(x = c(1, 2, NaN, NA)))$select(pl$col(\"x\")$drop_nans())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 2.0  \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_drop_nulls/","title":"Drop missing values","text":"<p>Source code</p>"},{"location":"man/Expr_drop_nulls/#description","title":"Description","text":"<p>Drop missing values</p>"},{"location":"man/Expr_drop_nulls/#usage","title":"Usage","text":"<pre><code>Expr_drop_nulls\n</code></pre>"},{"location":"man/Expr_drop_nulls/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_drop_nulls/#see-also","title":"See Also","text":"<p><code>drop_nans()</code></p>"},{"location":"man/Expr_drop_nulls/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(x = c(1, 2, NaN, NA)))$select(pl$col(\"x\")$drop_nulls())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 NaN \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_entropy/","title":"Entropy","text":"<p>Source code</p>"},{"location":"man/Expr_entropy/#description","title":"Description","text":"<p>The entropy is measured with the formula <code>-sum(pk * log(pk))</code> where <code>pk</code> are discrete probabilities.</p>"},{"location":"man/Expr_entropy/#usage","title":"Usage","text":"<pre><code>Expr_entropy(base = base::exp(1), normalize = TRUE)\n</code></pre>"},{"location":"man/Expr_entropy/#arguments","title":"Arguments","text":"<code>base</code>  Given exponential base, defaults to <code>exp(1)</code>.  <code>normalize</code>  Normalize <code>pk</code> if it doesn\u2019t sum to 1."},{"location":"man/Expr_entropy/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_entropy/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, 2, 3, 2))$\n  with_columns(entropy = pl$col(\"x\")$entropy(base = 2))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 entropy  \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1.905639 \u2502\n#&gt; \u2502 2.0 \u2506 1.905639 \u2502\n#&gt; \u2502 3.0 \u2506 1.905639 \u2502\n#&gt; \u2502 2.0 \u2506 1.905639 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_eq/","title":"Check equality","text":"<p>Source code</p>"},{"location":"man/Expr_eq/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_eq/#usage","title":"Usage","text":"<pre><code>Expr_eq(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 == e2\n</code></pre>"},{"location":"man/Expr_eq/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_eq/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_eq/#see-also","title":"See Also","text":"<p>Expr_eq_missing</p>"},{"location":"man/Expr_eq/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(2) == 2\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) == (2.0)]\n</code></pre> <pre><code>pl$lit(2) == pl$lit(2)\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) == (2.0)]\n</code></pre> <pre><code>pl$lit(2)$eq(pl$lit(2))\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) == (2.0)]\n</code></pre>"},{"location":"man/Expr_eq_missing/","title":"Check equality without <code>null</code> propagation","text":"<p>Source code</p>"},{"location":"man/Expr_eq_missing/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_eq_missing/#usage","title":"Usage","text":"<pre><code>Expr_eq_missing(other)\n</code></pre>"},{"location":"man/Expr_eq_missing/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal"},{"location":"man/Expr_eq_missing/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_eq_missing/#see-also","title":"See Also","text":"<p>Expr_eq</p>"},{"location":"man/Expr_eq_missing/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(NA, FALSE, TRUE), y = c(TRUE, TRUE, TRUE))\ndf$with_columns(\n  eq = pl$col(\"x\")$eq(\"y\"),\n  eq_missing = pl$col(\"x\")$eq_missing(\"y\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2506 y    \u2506 eq    \u2506 eq_missing \u2502\n#&gt; \u2502 ---   \u2506 ---  \u2506 ---   \u2506 ---        \u2502\n#&gt; \u2502 bool  \u2506 bool \u2506 bool  \u2506 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null  \u2506 true \u2506 null  \u2506 false      \u2502\n#&gt; \u2502 false \u2506 true \u2506 false \u2506 false      \u2502\n#&gt; \u2502 true  \u2506 true \u2506 false \u2506 false      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_ewm_mean/","title":"Exponentially-weighted moving average","text":"<p>Source code</p>"},{"location":"man/Expr_ewm_mean/#description","title":"Description","text":"<p>Exponentially-weighted moving average</p>"},{"location":"man/Expr_ewm_mean/#usage","title":"Usage","text":"<pre><code>Expr_ewm_mean(\n  com = NULL,\n  span = NULL,\n  half_life = NULL,\n  alpha = NULL,\n  adjust = TRUE,\n  min_periods = 1L,\n  ignore_nulls = TRUE\n)\n</code></pre>"},{"location":"man/Expr_ewm_mean/#arguments","title":"Arguments","text":"<code>com</code>  Specify decay in terms of center of mass, *\u03b3*, with <code> = ; ; </code> <code>span</code>  Specify decay in terms of span, *\u03b8*, with $= ; ; $  <code>half_life</code>  Specify decay in terms of half-life, :math:<code></code>, with $ = 1 - { } $ $ ; \\&gt; 0$  <code>alpha</code>  Specify smoothing factor alpha directly, 0\u2004\\&lt;\u2004*\u03b1*\u2004\u2264\u20041.  <code>adjust</code>   Divide by decaying adjustment factor in beginning periods to account for imbalance in relative weightings:  <ul> <li>  When <code>adjust=TRUE</code> the EW function is calculatedusing weights $w_i = (1 - )^i $  </li> <li>  When <code>adjust=FALSE</code> the EW function is calculated recursively by <code> y_0 = x_0 \\\\ y_t = (1 - )y\\_{t - 1} + x_t </code> </li> </ul> <code>min_periods</code>  Minimum number of observations in window required to have a value (otherwise result is null).  <code>ignore_nulls</code>   Ignore missing values when calculating weights:  <ul> <li>  When <code>TRUE</code> (default), weights are based on relative positions. For example, the weights of *x*<sub>0</sub> and *x*<sub>2</sub> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub><code>\\]</code> are 1\u2005\u2212\u2005*\u03b1* and 1 if <code>adjust=TRUE</code>, and 1\u2005\u2212\u2005*\u03b1* and *\u03b1* if <code>adjust=FALSE</code>.  </li> <li>  When <code>FALSE</code>, weights are based on absolute positions. For example, the weights of :math:<code>x_0</code> and :math:<code>x_2</code> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub>\\<code>\\]</code> are 1\u2005\u2212\u2005*\u03b1*)<sup>2</sup> and 1 if <code>adjust=TRUE</code>, and (1\u2212*\u03b1*)<sup>2</sup> and *\u03b1* if <code>adjust=FALSE</code>.  </li> </ul>"},{"location":"man/Expr_ewm_mean/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_ewm_mean/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:3)$\n  with_columns(ewm_mean = pl$col(\"a\")$ewm_mean(com = 1))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 ewm_mean \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 i32 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1.0      \u2502\n#&gt; \u2502 2   \u2506 1.666667 \u2502\n#&gt; \u2502 3   \u2506 2.428571 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_ewm_std/","title":"Exponentially-weighted moving standard deviation","text":"<p>Source code</p>"},{"location":"man/Expr_ewm_std/#description","title":"Description","text":"<p>Exponentially-weighted moving standard deviation</p>"},{"location":"man/Expr_ewm_std/#usage","title":"Usage","text":"<pre><code>Expr_ewm_std(\n  com = NULL,\n  span = NULL,\n  half_life = NULL,\n  alpha = NULL,\n  adjust = TRUE,\n  bias = FALSE,\n  min_periods = 1L,\n  ignore_nulls = TRUE\n)\n</code></pre>"},{"location":"man/Expr_ewm_std/#arguments","title":"Arguments","text":"<code>com</code>  Specify decay in terms of center of mass, *\u03b3*, with <code> = ; ; </code> <code>span</code>  Specify decay in terms of span, *\u03b8*, with $= ; ; $  <code>half_life</code>  Specify decay in terms of half-life, :math:<code></code>, with $ = 1 - { } $ $ ; \\&gt; 0$  <code>alpha</code>  Specify smoothing factor alpha directly, 0\u2004\\&lt;\u2004*\u03b1*\u2004\u2264\u20041.  <code>adjust</code>   Divide by decaying adjustment factor in beginning periods to account for imbalance in relative weightings:  <ul> <li>  When <code>adjust=TRUE</code> the EW function is calculatedusing weights $w_i = (1 - )^i $  </li> <li>  When <code>adjust=FALSE</code> the EW function is calculated recursively by <code> y_0 = x_0 \\\\ y_t = (1 - )y\\_{t - 1} + x_t </code> </li> </ul> <code>bias</code>  If <code>FALSE</code>, the calculations are corrected for statistical bias.  <code>min_periods</code>  Minimum number of observations in window required to have a value (otherwise result is null).  <code>ignore_nulls</code>   Ignore missing values when calculating weights:  <ul> <li>  When <code>TRUE</code> (default), weights are based on relative positions. For example, the weights of *x*<sub>0</sub> and *x*<sub>2</sub> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub><code>\\]</code> are 1\u2005\u2212\u2005*\u03b1* and 1 if <code>adjust=TRUE</code>, and 1\u2005\u2212\u2005*\u03b1* and *\u03b1* if <code>adjust=FALSE</code>.  </li> <li>  When <code>FALSE</code>, weights are based on absolute positions. For example, the weights of :math:<code>x_0</code> and :math:<code>x_2</code> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub>\\<code>\\]</code> are 1\u2005\u2212\u2005*\u03b1*)<sup>2</sup> and 1 if <code>adjust=TRUE</code>, and (1\u2212*\u03b1*)<sup>2</sup> and *\u03b1* if <code>adjust=FALSE</code>.  </li> </ul>"},{"location":"man/Expr_ewm_std/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_ewm_std/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:3)$\n  with_columns(ewm_std = pl$col(\"a\")$ewm_std(com = 1))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 ewm_std  \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 i32 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 0.0      \u2502\n#&gt; \u2502 2   \u2506 0.707107 \u2502\n#&gt; \u2502 3   \u2506 0.963624 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_ewm_var/","title":"Exponentially-weighted moving variance","text":"<p>Source code</p>"},{"location":"man/Expr_ewm_var/#description","title":"Description","text":"<p>Exponentially-weighted moving variance</p>"},{"location":"man/Expr_ewm_var/#usage","title":"Usage","text":"<pre><code>Expr_ewm_var(\n  com = NULL,\n  span = NULL,\n  half_life = NULL,\n  alpha = NULL,\n  adjust = TRUE,\n  bias = FALSE,\n  min_periods = 1L,\n  ignore_nulls = TRUE\n)\n</code></pre>"},{"location":"man/Expr_ewm_var/#arguments","title":"Arguments","text":"<code>com</code>  Specify decay in terms of center of mass, *\u03b3*, with <code> = ; ; </code> <code>span</code>  Specify decay in terms of span, *\u03b8*, with $= ; ; $  <code>half_life</code>  Specify decay in terms of half-life, :math:<code></code>, with $ = 1 - { } $ $ ; \\&gt; 0$  <code>alpha</code>  Specify smoothing factor alpha directly, 0\u2004\\&lt;\u2004*\u03b1*\u2004\u2264\u20041.  <code>adjust</code>   Divide by decaying adjustment factor in beginning periods to account for imbalance in relative weightings:  <ul> <li>  When <code>adjust=TRUE</code> the EW function is calculatedusing weights $w_i = (1 - )^i $  </li> <li>  When <code>adjust=FALSE</code> the EW function is calculated recursively by <code> y_0 = x_0 \\\\ y_t = (1 - )y\\_{t - 1} + x_t </code> </li> </ul> <code>bias</code>  If <code>FALSE</code>, the calculations are corrected for statistical bias.  <code>min_periods</code>  Minimum number of observations in window required to have a value (otherwise result is null).  <code>ignore_nulls</code>   Ignore missing values when calculating weights:  <ul> <li>  When <code>TRUE</code> (default), weights are based on relative positions. For example, the weights of *x*<sub>0</sub> and *x*<sub>2</sub> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub><code>\\]</code> are 1\u2005\u2212\u2005*\u03b1* and 1 if <code>adjust=TRUE</code>, and 1\u2005\u2212\u2005*\u03b1* and *\u03b1* if <code>adjust=FALSE</code>.  </li> <li>  When <code>FALSE</code>, weights are based on absolute positions. For example, the weights of :math:<code>x_0</code> and :math:<code>x_2</code> used in calculating the final weighted average of <code>\\[</code> *x*<sub>0</sub>, None, *x*<sub>2</sub>\\<code>\\]</code> are 1\u2005\u2212\u2005*\u03b1*)<sup>2</sup> and 1 if <code>adjust=TRUE</code>, and (1\u2212*\u03b1*)<sup>2</sup> and *\u03b1* if <code>adjust=FALSE</code>.  </li> </ul>"},{"location":"man/Expr_ewm_var/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_ewm_var/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:3)$\n  with_columns(ewm_var = pl$col(\"a\")$ewm_var(com = 1))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 ewm_var  \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 i32 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 0.0      \u2502\n#&gt; \u2502 2   \u2506 0.5      \u2502\n#&gt; \u2502 3   \u2506 0.928571 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_exclude/","title":"Exclude certain columns from selection","text":"<p>Source code</p>"},{"location":"man/Expr_exclude/#description","title":"Description","text":"<p>Exclude certain columns from selection</p>"},{"location":"man/Expr_exclude/#usage","title":"Usage","text":"<pre><code>Expr_exclude(columns)\n</code></pre>"},{"location":"man/Expr_exclude/#arguments","title":"Arguments","text":"<code>columns</code>   Given param type:  <ul> <li>  string: single column name or regex starting with <code>^</code> and ending with <code>$</code> </li> <li>  character vector: exclude all these column names, no regex allowed  </li> <li>  DataType: Exclude any of this DataType  </li> <li>  List(DataType): Exclude any of these DataType(s)  </li> </ul>"},{"location":"man/Expr_exclude/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_exclude/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# make DataFrame\ndf = pl$DataFrame(iris)\n\n# by name(s)\ndf$select(pl$all()$exclude(\"Species\"))\n</code></pre> <pre><code>#&gt; shape: (150, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by type\ndf$select(pl$all()$exclude(pl$Categorical))\n</code></pre> <pre><code>#&gt; shape: (150, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$all()$exclude(list(pl$Categorical, pl$Float64)))\n</code></pre> <pre><code>#&gt; shape: (0, 0)\n#&gt; \u250c\u2510\n#&gt; \u255e\u2561\n#&gt; \u2514\u2518\n</code></pre> <pre><code># by regex\ndf$select(pl$all()$exclude(\"^Sepal.*$\"))\n</code></pre> <pre><code>#&gt; shape: (150, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_exp/","title":"Compute the exponential of the elements","text":"<p>Source code</p>"},{"location":"man/Expr_exp/#description","title":"Description","text":"<p>Compute the exponential of the elements</p>"},{"location":"man/Expr_exp/#usage","title":"Usage","text":"<pre><code>Expr_exp\n</code></pre>"},{"location":"man/Expr_exp/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_exp/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = -1:3)$with_columns(a_exp = pl$col(\"a\")$exp())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 a_exp     \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 i32 \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1  \u2506 0.367879  \u2502\n#&gt; \u2502 0   \u2506 1.0       \u2502\n#&gt; \u2502 1   \u2506 2.718282  \u2502\n#&gt; \u2502 2   \u2506 7.389056  \u2502\n#&gt; \u2502 3   \u2506 20.085537 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_explode/","title":"Explode a list or String Series","text":"<p>Source code</p>"},{"location":"man/Expr_explode/#description","title":"Description","text":"<p>This means that every item is expanded to a new row.</p>"},{"location":"man/Expr_explode/#usage","title":"Usage","text":"<pre><code>Expr_explode\n</code></pre>"},{"location":"man/Expr_explode/#details","title":"Details","text":"<p>Categorical values are not supported.</p>"},{"location":"man/Expr_explode/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_explode/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(\"abc\", \"ab\"), y = c(list(1:3), list(3:5)))\ndf\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y         \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 str \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 abc \u2506 [1, 2, 3] \u2502\n#&gt; \u2502 ab  \u2506 [3, 4, 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"y\")$explode())\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 y   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_extend_constant/","title":"Extend Series with a constant","text":"<p>Source code</p>"},{"location":"man/Expr_extend_constant/#description","title":"Description","text":"<p>Extend the Series with given number of values.</p>"},{"location":"man/Expr_extend_constant/#usage","title":"Usage","text":"<pre><code>Expr_extend_constant(value, n)\n</code></pre>"},{"location":"man/Expr_extend_constant/#arguments","title":"Arguments","text":"<code>value</code>  The value to extend the Series with. This value may be <code>NULL</code> to fill with nulls.  <code>n</code>  The number of values to extend."},{"location":"man/Expr_extend_constant/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_extend_constant/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(1:4)$extend_constant(10.1, 2))\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 10  \u2502\n#&gt; \u2502 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$select(pl$lit(1:4)$extend_constant(NULL, 2))\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502      \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 4    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_fill_nan/","title":"Fill NaN","text":"<p>Source code</p>"},{"location":"man/Expr_fill_nan/#description","title":"Description","text":"<p>Fill NaN</p>"},{"location":"man/Expr_fill_nan/#usage","title":"Usage","text":"<pre><code>Expr_fill_nan(expr = NULL)\n</code></pre>"},{"location":"man/Expr_fill_nan/#arguments","title":"Arguments","text":"<code>expr</code>  Expr or something coercible in an Expr"},{"location":"man/Expr_fill_nan/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_fill_nan/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(NaN, 1, NaN, 2, NA))$\n  with_columns(\n  literal = pl$col(\"a\")$fill_nan(999),\n  # implicit coercion to string\n  string = pl$col(\"a\")$fill_nan(\"invalid\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 literal \u2506 string  \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 f64     \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 NaN  \u2506 999.0   \u2506 invalid \u2502\n#&gt; \u2502 1.0  \u2506 1.0     \u2506 1.0     \u2502\n#&gt; \u2502 NaN  \u2506 999.0   \u2506 invalid \u2502\n#&gt; \u2502 2.0  \u2506 2.0     \u2506 2.0     \u2502\n#&gt; \u2502 null \u2506 null    \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_fill_null/","title":"Fill null values with a value or strategy","text":"<p>Source code</p>"},{"location":"man/Expr_fill_null/#description","title":"Description","text":"<p>Fill null values with a value or strategy</p>"},{"location":"man/Expr_fill_null/#usage","title":"Usage","text":"<pre><code>Expr_fill_null(value = NULL, strategy = NULL, limit = NULL)\n</code></pre>"},{"location":"man/Expr_fill_null/#arguments","title":"Arguments","text":"<code>value</code>  Expr or something coercible in an Expr  <code>strategy</code>  Possible choice are <code>NULL</code> (default, requires a non-null <code>value</code>), <code>\u201cforward\u201d</code>, <code>\u201cbackward\u201d</code>, <code>\u201cmin\u201d</code>, <code>\u201cmax\u201d</code>, <code>\u201cmean\u201d</code>, <code>\u201czero\u201d</code>, <code>\u201cone\u201d</code>.  <code>limit</code>  Number of consecutive null values to fill when using the <code>\u201cforward\u201d</code> or <code>\u201cbackward\u201d</code> strategy."},{"location":"man/Expr_fill_null/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_fill_null/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(NA, 1, NA, 2, NA))$\n  with_columns(\n  value = pl$col(\"a\")$fill_null(999),\n  backward = pl$col(\"a\")$fill_null(strategy = \"backward\"),\n  mean = pl$col(\"a\")$fill_null(strategy = \"mean\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 value \u2506 backward \u2506 mean \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2506 f64      \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 999.0 \u2506 1.0      \u2506 1.5  \u2502\n#&gt; \u2502 1.0  \u2506 1.0   \u2506 1.0      \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 999.0 \u2506 2.0      \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 2.0   \u2506 2.0      \u2506 2.0  \u2502\n#&gt; \u2502 null \u2506 999.0 \u2506 null     \u2506 1.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_filter/","title":"Filter a single column.","text":"<p>Source code</p>"},{"location":"man/Expr_filter/#description","title":"Description","text":"<p>Mostly useful in an aggregation context. If you want to filter on a DataFrame level, use <code>DataFrame$filter()</code> (or <code>LazyFrame$filter()</code>).</p>"},{"location":"man/Expr_filter/#usage","title":"Usage","text":"<pre><code>Expr_filter(predicate)\n</code></pre>"},{"location":"man/Expr_filter/#arguments","title":"Arguments","text":"<code>predicate</code>  An Expr or something coercible to an Expr. Must return a boolean."},{"location":"man/Expr_filter/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_filter/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  group_col = c(\"g1\", \"g1\", \"g2\"),\n  b = c(1, 2, 3)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group_col \u2506 b   \u2502\n#&gt; \u2502 ---       \u2506 --- \u2502\n#&gt; \u2502 str       \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 g1        \u2506 1.0 \u2502\n#&gt; \u2502 g1        \u2506 2.0 \u2502\n#&gt; \u2502 g2        \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$group_by(\"group_col\")$agg(\n  lt = pl$col(\"b\")$filter(pl$col(\"b\") &lt; 2),\n  gte = pl$col(\"b\")$filter(pl$col(\"b\") &gt;= 2)\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group_col \u2506 lt        \u2506 gte       \u2502\n#&gt; \u2502 ---       \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 str       \u2506 list[f64] \u2506 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 g2        \u2506 []        \u2506 [3.0]     \u2502\n#&gt; \u2502 g1        \u2506 [1.0]     \u2506 [2.0]     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_first/","title":"Get the first value.","text":"<p>Source code</p>"},{"location":"man/Expr_first/#description","title":"Description","text":"<p>Get the first value.</p>"},{"location":"man/Expr_first/#usage","title":"Usage","text":"<pre><code>Expr_first\n</code></pre>"},{"location":"man/Expr_first/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_first/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = 3:1)$with_columns(first = pl$col(\"x\")$first())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 first \u2502\n#&gt; \u2502 --- \u2506 ---   \u2502\n#&gt; \u2502 i32 \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 3     \u2502\n#&gt; \u2502 2   \u2506 3     \u2502\n#&gt; \u2502 1   \u2506 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_flatten/","title":"Explode a list or String Series","text":"<p>Source code</p>"},{"location":"man/Expr_flatten/#description","title":"Description","text":"<p>This is an alias for <code>\\&lt;Expr&gt;$explode()</code>.</p>"},{"location":"man/Expr_flatten/#usage","title":"Usage","text":"<pre><code>Expr_flatten\n</code></pre>"},{"location":"man/Expr_flatten/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p>"},{"location":"man/Expr_flatten/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_flatten/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(\"abc\", \"ab\"), y = c(list(1:3), list(3:5)))\ndf\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y         \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 str \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 abc \u2506 [1, 2, 3] \u2502\n#&gt; \u2502 ab  \u2506 [3, 4, 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"y\")$flatten())\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 y   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_floor/","title":"Floor","text":"<p>Source code</p>"},{"location":"man/Expr_floor/#description","title":"Description","text":"<p>Rounds down to the nearest integer value. Only works on floating point Series.</p>"},{"location":"man/Expr_floor/#usage","title":"Usage","text":"<pre><code>Expr_floor\n</code></pre>"},{"location":"man/Expr_floor/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_floor/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0.33, 0.5, 1.02, 1.5, NaN, NA, Inf, -Inf))$with_columns(\n  floor = pl$col(\"a\")$floor()\n)\n</code></pre> <pre><code>#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 floor \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.33 \u2506 0.0   \u2502\n#&gt; \u2502 0.5  \u2506 0.0   \u2502\n#&gt; \u2502 1.02 \u2506 1.0   \u2502\n#&gt; \u2502 1.5  \u2506 1.0   \u2502\n#&gt; \u2502 NaN  \u2506 NaN   \u2502\n#&gt; \u2502 null \u2506 null  \u2502\n#&gt; \u2502 inf  \u2506 inf   \u2502\n#&gt; \u2502 -inf \u2506 -inf  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_floor_div/","title":"Floor divide two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_floor_div/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_floor_div/#usage","title":"Usage","text":"<pre><code>Expr_floor_div(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 %/% e2\n</code></pre>"},{"location":"man/Expr_floor_div/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_floor_div/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_floor_div/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(5) %/% 10\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) floor_div (10.0)]\n</code></pre> <pre><code>pl$lit(5) %/% pl$lit(10)\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) floor_div (10.0)]\n</code></pre> <pre><code>pl$lit(5)$floor_div(pl$lit(10))\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) floor_div (10.0)]\n</code></pre>"},{"location":"man/Expr_forward_fill/","title":"Fill null values forward","text":"<p>Source code</p>"},{"location":"man/Expr_forward_fill/#description","title":"Description","text":"<p>Fill missing values with the last seen values. Syntactic sugar for <code>$fill_null(strategy = \u201cforward\u201d)</code>.</p>"},{"location":"man/Expr_forward_fill/#usage","title":"Usage","text":"<pre><code>Expr_forward_fill(limit = NULL)\n</code></pre>"},{"location":"man/Expr_forward_fill/#arguments","title":"Arguments","text":"<code>limit</code>  Number of consecutive null values to fill when using the <code>\u201cforward\u201d</code> or <code>\u201cbackward\u201d</code> strategy."},{"location":"man/Expr_forward_fill/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_forward_fill/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(NA, 1, NA, 2, NA))$\n  with_columns(\n  backward = pl$col(\"a\")$forward_fill()\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 backward \u2502\n#&gt; \u2502 ---  \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 null     \u2502\n#&gt; \u2502 1.0  \u2506 1.0      \u2502\n#&gt; \u2502 null \u2506 1.0      \u2502\n#&gt; \u2502 2.0  \u2506 2.0      \u2502\n#&gt; \u2502 null \u2506 2.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_gather/","title":"Gather values by index","text":"<p>Source code</p>"},{"location":"man/Expr_gather/#description","title":"Description","text":"<p>Gather values by index</p>"},{"location":"man/Expr_gather/#usage","title":"Usage","text":"<pre><code>Expr_gather(indices)\n</code></pre>"},{"location":"man/Expr_gather/#arguments","title":"Arguments","text":"<code>indices</code>  R scalar/vector or Series, or Expr that leads to a Series of dtype Int64. (0-indexed)"},{"location":"man/Expr_gather/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_gather/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = 1:10)\n\ndf$select(pl$col(\"a\")$gather(c(0, 2, 4, -1)))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2502 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_gather_every/","title":"Gather every nth element","text":"<p>Source code</p>"},{"location":"man/Expr_gather_every/#description","title":"Description","text":"<p>Gather every nth value in the Series and return as a new Series.</p>"},{"location":"man/Expr_gather_every/#usage","title":"Usage","text":"<pre><code>Expr_gather_every(n, offset = 0)\n</code></pre>"},{"location":"man/Expr_gather_every/#arguments","title":"Arguments","text":"<code>n</code>  Positive integer.  <code>offset</code>  Starting index."},{"location":"man/Expr_gather_every/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_gather_every/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 0:24)$select(pl$col(\"a\")$gather_every(6))\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 6   \u2502\n#&gt; \u2502 12  \u2502\n#&gt; \u2502 18  \u2502\n#&gt; \u2502 24  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_gt/","title":"Check strictly greater inequality","text":"<p>Source code</p>"},{"location":"man/Expr_gt/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_gt/#usage","title":"Usage","text":"<pre><code>Expr_gt(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 &gt; e2\n</code></pre>"},{"location":"man/Expr_gt/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_gt/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_gt/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(2) &gt; 1\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt; (1.0)]\n</code></pre> <pre><code>pl$lit(2) &gt; pl$lit(1)\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt; (1.0)]\n</code></pre> <pre><code>pl$lit(2)$gt(pl$lit(1))\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt; (1.0)]\n</code></pre>"},{"location":"man/Expr_gt_eq/","title":"Check greater or equal inequality","text":"<p>Source code</p>"},{"location":"man/Expr_gt_eq/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_gt_eq/#usage","title":"Usage","text":"<pre><code>Expr_gt_eq(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 &gt;= e2\n</code></pre>"},{"location":"man/Expr_gt_eq/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_gt_eq/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_gt_eq/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(2) &gt;= 2\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt;= (2.0)]\n</code></pre> <pre><code>pl$lit(2) &gt;= pl$lit(2)\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt;= (2.0)]\n</code></pre> <pre><code>pl$lit(2)$gt_eq(pl$lit(2))\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &gt;= (2.0)]\n</code></pre>"},{"location":"man/Expr_hash/","title":"Hash elements","text":"<p>Source code</p>"},{"location":"man/Expr_hash/#description","title":"Description","text":"<p>The hash value is of type <code>UInt64</code>.</p>"},{"location":"man/Expr_hash/#usage","title":"Usage","text":"<pre><code>Expr_hash(seed = 0, seed_1 = NULL, seed_2 = NULL, seed_3 = NULL)\n</code></pre>"},{"location":"man/Expr_hash/#arguments","title":"Arguments","text":"<code>seed</code>  Random seed parameter. Defaults to 0. Doesn\u2019t have any effect for now.  <code>seed_1</code>, <code>seed_2</code>, <code>seed_3</code>  Random seed parameter. Defaults to arg seed. The column will be coerced to UInt32."},{"location":"man/Expr_hash/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_hash/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris[1:3, c(1, 2)])\ndf$with_columns(pl$all()$hash(1234)$name$suffix(\"_hash\"))\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Sepal.Length_hash    \u2506 Sepal.Width_hash     \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---                  \u2506 ---                  \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 u64                  \u2506 u64                  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 9796947790245334196  \u2506 6622296746434406607  \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 8942791752627378969  \u2506 15859619738811456441 \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 16255441852042469334 \u2506 13958183957335001430 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_head/","title":"Get the first n elements","text":"<p>Source code</p>"},{"location":"man/Expr_head/#description","title":"Description","text":"<p>Get the first n elements</p>"},{"location":"man/Expr_head/#usage","title":"Usage","text":"<pre><code>Expr_head(n = 10)\n</code></pre>"},{"location":"man/Expr_head/#arguments","title":"Arguments","text":"<code>n</code>  Number of elements to take."},{"location":"man/Expr_head/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_head/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = 1:11)$select(pl$col(\"x\")$head(3))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_implode/","title":"Wrap column in list","text":"<p>Source code</p>"},{"location":"man/Expr_implode/#description","title":"Description","text":"<p>Aggregate values into a list.</p>"},{"location":"man/Expr_implode/#usage","title":"Usage","text":"<pre><code>Expr_implode\n</code></pre>"},{"location":"man/Expr_implode/#details","title":"Details","text":"<p>Use <code>$to_struct()</code> to wrap a DataFrame.</p>"},{"location":"man/Expr_implode/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_implode/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = 1:3,\n  b = 4:6\n)\ndf$select(pl$all()$implode())\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2506 b         \u2502\n#&gt; \u2502 ---       \u2506 ---       \u2502\n#&gt; \u2502 list[i32] \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, 3] \u2506 [4, 5, 6] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_inspect/","title":"Inspect evaluated Series","text":"<p>Source code</p>"},{"location":"man/Expr_inspect/#description","title":"Description","text":"<p>Print the value that this expression evaluates to and pass on the value. The printing will happen when the expression evaluates, not when it is formed.</p>"},{"location":"man/Expr_inspect/#usage","title":"Usage","text":"<pre><code>Expr_inspect(fmt = \"{}\")\n</code></pre>"},{"location":"man/Expr_inspect/#arguments","title":"Arguments","text":"<code>fmt</code>  format string, should contain one set of <code>{}</code> where object will be printed. This formatting mimics python \"string\".format() use in py-polars."},{"location":"man/Expr_inspect/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_inspect/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(1:5)$inspect(\n  \"Here's what the Series looked like before keeping the first two values: {}\"\n)$head(2))\n</code></pre> <pre><code>#&gt; Here's what the Series looked like before keeping the first two values: shape: (5,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt;  5\n#&gt; ]\n\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_interpolate/","title":"Interpolate null values","text":"<p>Source code</p>"},{"location":"man/Expr_interpolate/#description","title":"Description","text":"<p>Fill nulls with linear interpolation using non-missing values. Can also be used to regrid data to a new grid - see examples below.</p>"},{"location":"man/Expr_interpolate/#usage","title":"Usage","text":"<pre><code>Expr_interpolate(method = \"linear\")\n</code></pre>"},{"location":"man/Expr_interpolate/#arguments","title":"Arguments","text":"<code>method</code>  String, either <code>\u201clinear\u201d</code> (default) or <code>\u201cnearest\u201d</code>."},{"location":"man/Expr_interpolate/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_interpolate/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, NA, 4, NA, 100, NaN, 150))$\n  with_columns(\n  interp_lin = pl$col(\"x\")$interpolate(),\n  interp_near = pl$col(\"x\")$interpolate(\"nearest\")\n)\n</code></pre> <pre><code>#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2506 interp_lin \u2506 interp_near \u2502\n#&gt; \u2502 ---   \u2506 ---        \u2506 ---         \u2502\n#&gt; \u2502 f64   \u2506 f64        \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0   \u2506 1.0        \u2506 1.0         \u2502\n#&gt; \u2502 null  \u2506 2.5        \u2506 4.0         \u2502\n#&gt; \u2502 4.0   \u2506 4.0        \u2506 4.0         \u2502\n#&gt; \u2502 null  \u2506 52.0       \u2506 100.0       \u2502\n#&gt; \u2502 100.0 \u2506 100.0      \u2506 100.0       \u2502\n#&gt; \u2502 NaN   \u2506 NaN        \u2506 NaN         \u2502\n#&gt; \u2502 150.0 \u2506 150.0      \u2506 150.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># x, y interpolation over a grid\ndf_original_grid = pl$DataFrame(\n  grid_points = c(1, 3, 10),\n  values = c(2.0, 6.0, 20.0)\n)\ndf_original_grid\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 grid_points \u2506 values \u2502\n#&gt; \u2502 ---         \u2506 ---    \u2502\n#&gt; \u2502 f64         \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0         \u2506 2.0    \u2502\n#&gt; \u2502 3.0         \u2506 6.0    \u2502\n#&gt; \u2502 10.0        \u2506 20.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df_new_grid = pl$DataFrame(grid_points = (1:10) * 1.0)\ndf_new_grid\n</code></pre> <pre><code>#&gt; shape: (10, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 grid_points \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0         \u2502\n#&gt; \u2502 2.0         \u2502\n#&gt; \u2502 3.0         \u2502\n#&gt; \u2502 4.0         \u2502\n#&gt; \u2502 \u2026           \u2502\n#&gt; \u2502 7.0         \u2502\n#&gt; \u2502 8.0         \u2502\n#&gt; \u2502 9.0         \u2502\n#&gt; \u2502 10.0        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Interpolate from this to the new grid\ndf_new_grid$join(\n  df_original_grid,\n  on = \"grid_points\", how = \"left\"\n)$with_columns(pl$col(\"values\")$interpolate())\n</code></pre> <pre><code>#&gt; shape: (10, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 grid_points \u2506 values \u2502\n#&gt; \u2502 ---         \u2506 ---    \u2502\n#&gt; \u2502 f64         \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0         \u2506 2.0    \u2502\n#&gt; \u2502 2.0         \u2506 4.0    \u2502\n#&gt; \u2502 3.0         \u2506 6.0    \u2502\n#&gt; \u2502 4.0         \u2506 8.0    \u2502\n#&gt; \u2502 \u2026           \u2506 \u2026      \u2502\n#&gt; \u2502 7.0         \u2506 14.0   \u2502\n#&gt; \u2502 8.0         \u2506 16.0   \u2502\n#&gt; \u2502 9.0         \u2506 18.0   \u2502\n#&gt; \u2502 10.0        \u2506 20.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_between/","title":"Check whether a value is between two values","text":"<p>Source code</p>"},{"location":"man/Expr_is_between/#description","title":"Description","text":"<p>This is syntactic sugar for <code>x &gt; start &amp; x \\&lt; end</code> (or <code>x &gt;= start &amp; x \\&lt;= end</code>).</p>"},{"location":"man/Expr_is_between/#usage","title":"Usage","text":"<pre><code>Expr_is_between(start, end, include_bounds = FALSE)\n</code></pre>"},{"location":"man/Expr_is_between/#arguments","title":"Arguments","text":"<code>start</code>  Lower bound, an Expr that is either numeric or datetime.  <code>end</code>  Upper bound, an Expr that is either numeric or datetime.  <code>include_bounds</code>  If <code>FALSE</code> (default), exclude start and end. This can also be a vector of two booleans indicating whether to include the start and/or the end."},{"location":"man/Expr_is_between/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_between/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(num = 1:5, y = c(0, 2, 3, 3, 3))\ndf$with_columns(\n  bet_2_4_no_bounds = pl$col(\"num\")$is_between(2, 4),\n  bet_2_4_with_bounds = pl$col(\"num\")$is_between(2, 4, TRUE),\n  bet_2_4_upper_bound = pl$col(\"num\")$is_between(2, 4, c(FALSE, TRUE)),\n  between_y_4 = pl$col(\"num\")$is_between(pl$col(\"y\"), 6)\n)\n</code></pre> <pre><code>#&gt; shape: (5, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 num \u2506 y   \u2506 bet_2_4_no_bounds \u2506 bet_2_4_with_bounds \u2506 bet_2_4_upper_bound \u2506 between_y_4 \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---               \u2506 ---                 \u2506 ---                 \u2506 ---         \u2502\n#&gt; \u2502 i32 \u2506 f64 \u2506 bool              \u2506 bool                \u2506 bool                \u2506 bool        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 0.0 \u2506 false             \u2506 false               \u2506 false               \u2506 true        \u2502\n#&gt; \u2502 2   \u2506 2.0 \u2506 false             \u2506 true                \u2506 false               \u2506 false       \u2502\n#&gt; \u2502 3   \u2506 3.0 \u2506 true              \u2506 true                \u2506 true                \u2506 false       \u2502\n#&gt; \u2502 4   \u2506 3.0 \u2506 false             \u2506 true                \u2506 true                \u2506 true        \u2502\n#&gt; \u2502 5   \u2506 3.0 \u2506 false             \u2506 false               \u2506 false               \u2506 true        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_duplicated/","title":"Check whether each value is duplicated","text":"<p>Source code</p>"},{"location":"man/Expr_is_duplicated/#description","title":"Description","text":"<p>This is syntactic sugar for <code>$is_unique()$not()</code>.</p>"},{"location":"man/Expr_is_duplicated/#usage","title":"Usage","text":"<pre><code>Expr_is_duplicated\n</code></pre>"},{"location":"man/Expr_is_duplicated/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_duplicated/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(head(mtcars[, 1:2]))$\n  with_columns(is_duplicated = pl$col(\"mpg\")$is_duplicated())\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 is_duplicated \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---           \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 bool          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 true          \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 true          \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 false         \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 false         \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 false         \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 false         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_finite/","title":"Check if elements are finite","text":"<p>Source code</p>"},{"location":"man/Expr_is_finite/#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are finite.</p>"},{"location":"man/Expr_is_finite/#usage","title":"Usage","text":"<pre><code>Expr_is_finite\n</code></pre>"},{"location":"man/Expr_is_finite/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_finite/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = c(0, NaN, NA, Inf, -Inf)))$\n  with_columns(finite = pl$col(\"alice\")$is_finite())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2506 finite \u2502\n#&gt; \u2502 ---   \u2506 ---    \u2502\n#&gt; \u2502 f64   \u2506 bool   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0   \u2506 true   \u2502\n#&gt; \u2502 NaN   \u2506 false  \u2502\n#&gt; \u2502 null  \u2506 null   \u2502\n#&gt; \u2502 inf   \u2506 false  \u2502\n#&gt; \u2502 -inf  \u2506 false  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_first_distinct/","title":"Check whether each value is the first occurrence","text":"<p>Source code</p>"},{"location":"man/Expr_is_first_distinct/#description","title":"Description","text":"<p>Check whether each value is the first occurrence</p>"},{"location":"man/Expr_is_first_distinct/#usage","title":"Usage","text":"<pre><code>Expr_is_first_distinct\n</code></pre>"},{"location":"man/Expr_is_first_distinct/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_first_distinct/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(head(mtcars[, 1:2]))$\n  with_columns(is_ufirst = pl$col(\"mpg\")$is_first_distinct())\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 is_ufirst \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---       \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 bool      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 true      \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 false     \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 true      \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 true      \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 true      \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 true      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_in/","title":"Check whether a value is in a vector","text":"<p>Source code</p>"},{"location":"man/Expr_is_in/#description","title":"Description","text":"<p>Notice that to check whether a factor value is in a vector of strings, you need to use the string cache, either with <code>pl$enable_string_cache()</code> or with <code>pl$with_string_cache()</code>. See examples.</p>"},{"location":"man/Expr_is_in/#usage","title":"Usage","text":"<pre><code>Expr_is_in(other)\n</code></pre>"},{"location":"man/Expr_is_in/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal"},{"location":"man/Expr_is_in/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_in/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1:4, NA_integer_))$with_columns(\n  in_1_3 = pl$col(\"a\")$is_in(c(1, 3)),\n  in_NA = pl$col(\"a\")$is_in(pl$lit(NA_real_))\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 in_1_3 \u2506 in_NA \u2502\n#&gt; \u2502 ---  \u2506 ---    \u2506 ---   \u2502\n#&gt; \u2502 i32  \u2506 bool   \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 true   \u2506 false \u2502\n#&gt; \u2502 2    \u2506 false  \u2506 false \u2502\n#&gt; \u2502 3    \u2506 true   \u2506 false \u2502\n#&gt; \u2502 4    \u2506 false  \u2506 false \u2502\n#&gt; \u2502 null \u2506 null   \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># this fails because we can't compare factors to strings\n# pl$DataFrame(a = factor(letters[1:5]))$with_columns(\n#   in_abc = pl$col(\"a\")$is_in(c(\"a\", \"b\", \"c\"))\n# )\n\n# need to use the string cache for this\npl$with_string_cache({\n  pl$DataFrame(a = factor(letters[1:5]))$with_columns(\n    in_abc = pl$col(\"a\")$is_in(c(\"a\", \"b\", \"c\"))\n  )\n})\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 in_abc \u2502\n#&gt; \u2502 --- \u2506 ---    \u2502\n#&gt; \u2502 cat \u2506 bool   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2506 true   \u2502\n#&gt; \u2502 b   \u2506 true   \u2502\n#&gt; \u2502 c   \u2506 true   \u2502\n#&gt; \u2502 d   \u2506 false  \u2502\n#&gt; \u2502 e   \u2506 false  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_infinite/","title":"Check if elements are infinite","text":"<p>Source code</p>"},{"location":"man/Expr_is_infinite/#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are infinite.</p>"},{"location":"man/Expr_is_infinite/#usage","title":"Usage","text":"<pre><code>Expr_is_infinite\n</code></pre>"},{"location":"man/Expr_is_infinite/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_infinite/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = c(0, NaN, NA, Inf, -Inf)))$\n  with_columns(infinite = pl$col(\"alice\")$is_infinite())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2506 infinite \u2502\n#&gt; \u2502 ---   \u2506 ---      \u2502\n#&gt; \u2502 f64   \u2506 bool     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0   \u2506 false    \u2502\n#&gt; \u2502 NaN   \u2506 false    \u2502\n#&gt; \u2502 null  \u2506 null     \u2502\n#&gt; \u2502 inf   \u2506 true     \u2502\n#&gt; \u2502 -inf  \u2506 true     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_last_distinct/","title":"Check whether each value is the last occurrence","text":"<p>Source code</p>"},{"location":"man/Expr_is_last_distinct/#description","title":"Description","text":"<p>Check whether each value is the last occurrence</p>"},{"location":"man/Expr_is_last_distinct/#usage","title":"Usage","text":"<pre><code>Expr_is_last_distinct\n</code></pre>"},{"location":"man/Expr_is_last_distinct/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_last_distinct/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(head(mtcars[, 1:2]))$\n  with_columns(is_ulast = pl$col(\"mpg\")$is_last_distinct())\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 is_ulast \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---      \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 bool     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 false    \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 true     \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 true     \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 true     \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 true     \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 true     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_nan/","title":"Check if elements are NaN","text":"<p>Source code</p>"},{"location":"man/Expr_is_nan/#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are NaN.</p>"},{"location":"man/Expr_is_nan/#usage","title":"Usage","text":"<pre><code>Expr_is_nan\n</code></pre>"},{"location":"man/Expr_is_nan/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_nan/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = c(0, NaN, NA, Inf, -Inf)))$\n  with_columns(nan = pl$col(\"alice\")$is_nan())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2506 nan   \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2502\n#&gt; \u2502 f64   \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0   \u2506 false \u2502\n#&gt; \u2502 NaN   \u2506 true  \u2502\n#&gt; \u2502 null  \u2506 null  \u2502\n#&gt; \u2502 inf   \u2506 false \u2502\n#&gt; \u2502 -inf  \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_not_nan/","title":"Check if elements are not NaN","text":"<p>Source code</p>"},{"location":"man/Expr_is_not_nan/#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are not NaN. Syntactic sugar for <code>$is_nan()$not()</code>.</p>"},{"location":"man/Expr_is_not_nan/#usage","title":"Usage","text":"<pre><code>Expr_is_not_nan\n</code></pre>"},{"location":"man/Expr_is_not_nan/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_not_nan/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(alice = c(0, NaN, NA, Inf, -Inf)))$\n  with_columns(not_nan = pl$col(\"alice\")$is_not_nan())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2506 not_nan \u2502\n#&gt; \u2502 ---   \u2506 ---     \u2502\n#&gt; \u2502 f64   \u2506 bool    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0   \u2506 true    \u2502\n#&gt; \u2502 NaN   \u2506 false   \u2502\n#&gt; \u2502 null  \u2506 true    \u2502\n#&gt; \u2502 inf   \u2506 true    \u2502\n#&gt; \u2502 -inf  \u2506 true    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_not_null/","title":"Check if elements are not NULL","text":"<p>Source code</p>"},{"location":"man/Expr_is_not_null/#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are not null. Syntactic sugar for <code>$is_null()$not()</code>.</p>"},{"location":"man/Expr_is_not_null/#usage","title":"Usage","text":"<pre><code>Expr_is_not_null\n</code></pre>"},{"location":"man/Expr_is_not_null/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_not_null/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(x = c(1, NA, 3)))$select(pl$col(\"x\")$is_not_null())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_null/","title":"Check if elements are NULL","text":"<p>Source code</p>"},{"location":"man/Expr_is_null/#description","title":"Description","text":"<p>Returns a boolean Series indicating which values are null.</p>"},{"location":"man/Expr_is_null/#usage","title":"Usage","text":"<pre><code>Expr_is_null\n</code></pre>"},{"location":"man/Expr_is_null/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_null/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(x = c(1, NA, 3)))$select(pl$col(\"x\")$is_null())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_is_unique/","title":"Check whether each value is unique","text":"<p>Source code</p>"},{"location":"man/Expr_is_unique/#description","title":"Description","text":"<p>Check whether each value is unique</p>"},{"location":"man/Expr_is_unique/#usage","title":"Usage","text":"<pre><code>Expr_is_unique\n</code></pre>"},{"location":"man/Expr_is_unique/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_is_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(head(mtcars[, 1:2]))$\n  with_columns(is_unique = pl$col(\"mpg\")$is_unique())\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 is_unique \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---       \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 bool      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 false     \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 false     \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 true      \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 true      \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 true      \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 true      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_kurtosis/","title":"Kurtosis","text":"<p>Source code</p>"},{"location":"man/Expr_kurtosis/#description","title":"Description","text":"<p>Compute the kurtosis (Fisher or Pearson) of a dataset.</p>"},{"location":"man/Expr_kurtosis/#usage","title":"Usage","text":"<pre><code>Expr_kurtosis(fisher = TRUE, bias = TRUE)\n</code></pre>"},{"location":"man/Expr_kurtosis/#arguments","title":"Arguments","text":"<code>fisher</code>  If <code>TRUE</code> (default), Fisher\u2019s definition is used (normal, centered at 0). Otherwise, Pearson\u2019s definition is used (normal, centered at 3).  <code>bias</code>  If <code>FALSE</code>, the calculations are corrected for statistical bias."},{"location":"man/Expr_kurtosis/#details","title":"Details","text":"<p>Kurtosis is the fourth central moment divided by the square of the variance. If Fisher\u2019s definition is used, then 3 is subtracted from the result to give 0 for a normal distribution.</p> <p>If bias is <code>FALSE</code>, then the kurtosis is calculated using <code>k</code> statistics to eliminate bias coming from biased moment estimators.</p>"},{"location":"man/Expr_kurtosis/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_kurtosis/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1:3, 2:1))$\n  with_columns(kurt = pl$col(\"a\")$kurtosis())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 kurt      \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 i32 \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 -1.153061 \u2502\n#&gt; \u2502 2   \u2506 -1.153061 \u2502\n#&gt; \u2502 3   \u2506 -1.153061 \u2502\n#&gt; \u2502 2   \u2506 -1.153061 \u2502\n#&gt; \u2502 1   \u2506 -1.153061 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_last/","title":"Get the last value","text":"<p>Source code</p>"},{"location":"man/Expr_last/#description","title":"Description","text":"<p>Get the last value</p>"},{"location":"man/Expr_last/#usage","title":"Usage","text":"<pre><code>Expr_last\n</code></pre>"},{"location":"man/Expr_last/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_last/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = 3:1)$with_columns(last = pl$col(\"x\")$last())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 last \u2502\n#&gt; \u2502 --- \u2506 ---  \u2502\n#&gt; \u2502 i32 \u2506 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 1    \u2502\n#&gt; \u2502 2   \u2506 1    \u2502\n#&gt; \u2502 1   \u2506 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_limit/","title":"Get the first n elements","text":"<p>Source code</p>"},{"location":"man/Expr_limit/#description","title":"Description","text":"<p>This is an alias for <code>\\&lt;Expr&gt;$head()</code>.</p>"},{"location":"man/Expr_limit/#usage","title":"Usage","text":"<pre><code>Expr_limit(n = 10)\n</code></pre>"},{"location":"man/Expr_limit/#arguments","title":"Arguments","text":"<code>n</code>  Number of elements to take."},{"location":"man/Expr_limit/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_limit/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = 1:11)$select(pl$col(\"x\")$limit(3))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_lit/","title":"Create a literal value","text":"<p>Source code</p>"},{"location":"man/Expr_lit/#description","title":"Description","text":"<p>Create a literal value</p>"},{"location":"man/Expr_lit/#usage","title":"Usage","text":"<pre><code>Expr_lit(x)\n</code></pre>"},{"location":"man/Expr_lit/#arguments","title":"Arguments","text":"<code>x</code>  A vector of any length"},{"location":"man/Expr_lit/#details","title":"Details","text":"<p><code>pl$lit(NULL)</code> translates into a polars <code>null</code>.</p>"},{"location":"man/Expr_lit/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_lit/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# scalars to literal, explicit `pl$lit(42)` implicit `+ 2`\npl$col(\"some_column\") / pl$lit(42) + 2\n</code></pre> <pre><code>#&gt; polars Expr: [([(col(\"some_column\")) // (42.0)]) + (2.0)]\n</code></pre> <pre><code># vector to literal explicitly via Series and back again\n# R vector to expression and back again\npl$select(pl$lit(pl$Series(1:4)))$to_list()[[1L]]\n</code></pre> <pre><code>#&gt; [1] 1 2 3 4\n</code></pre> <pre><code># r vector to literal and back r vector\npl$lit(1:4)$to_r()\n</code></pre> <pre><code>#&gt; [1] 1 2 3 4\n</code></pre> <pre><code># r vector to literal to dataframe\npl$select(pl$lit(1:4))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># r vector to literal to Series\npl$lit(1:4)$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre> <pre><code># vectors to literal implicitly\n(pl$lit(2) + 1:4) / 4:1\n</code></pre> <pre><code>#&gt; polars Expr: [([(2.0) + (Series)]) // (Series)]\n</code></pre>"},{"location":"man/Expr_log/","title":"Compute the logarithm of elements","text":"<p>Source code</p>"},{"location":"man/Expr_log/#description","title":"Description","text":"<p>Compute the logarithm of elements</p>"},{"location":"man/Expr_log/#usage","title":"Usage","text":"<pre><code>Expr_log(base = base::exp(1))\n</code></pre>"},{"location":"man/Expr_log/#arguments","title":"Arguments","text":"<code>base</code>  Numeric base value for logarithm, default is <code>exp(1)</code>."},{"location":"man/Expr_log/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_log/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 2, 3, exp(1)))$\n  with_columns(log = pl$col(\"a\")$log())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 log      \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0      \u2506 0.0      \u2502\n#&gt; \u2502 2.0      \u2506 0.693147 \u2502\n#&gt; \u2502 3.0      \u2506 1.098612 \u2502\n#&gt; \u2502 2.718282 \u2506 1.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_log10/","title":"Compute the base-10 logarithm of elements","text":"<p>Source code</p>"},{"location":"man/Expr_log10/#description","title":"Description","text":"<p>Compute the base-10 logarithm of elements</p>"},{"location":"man/Expr_log10/#usage","title":"Usage","text":"<pre><code>Expr_log10\n</code></pre>"},{"location":"man/Expr_log10/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_log10/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 2, 3, exp(1)))$\n  with_columns(log10 = pl$col(\"a\")$log10())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 log10    \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0      \u2506 0.0      \u2502\n#&gt; \u2502 2.0      \u2506 0.30103  \u2502\n#&gt; \u2502 3.0      \u2506 0.477121 \u2502\n#&gt; \u2502 2.718282 \u2506 0.434294 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_lower_bound/","title":"Find the lower bound of a DataType","text":"<p>Source code</p>"},{"location":"man/Expr_lower_bound/#description","title":"Description","text":"<p>Find the lower bound of a DataType</p>"},{"location":"man/Expr_lower_bound/#usage","title":"Usage","text":"<pre><code>Expr_lower_bound\n</code></pre>"},{"location":"man/Expr_lower_bound/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_lower_bound/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  x = 1:3, y = 1:3,\n  schema = list(x = pl$UInt32, y = pl$Int32)\n)$\n  select(pl$all()$lower_bound())\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y           \u2502\n#&gt; \u2502 --- \u2506 ---         \u2502\n#&gt; \u2502 u32 \u2506 i32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 -2147483648 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_lt/","title":"Check strictly lower inequality","text":"<p>Source code</p>"},{"location":"man/Expr_lt/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_lt/#usage","title":"Usage","text":"<pre><code>Expr_lt(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 &lt; e2\n</code></pre>"},{"location":"man/Expr_lt/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_lt/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_lt/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(5) &lt; 10\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) &lt; (10.0)]\n</code></pre> <pre><code>pl$lit(5) &lt; pl$lit(10)\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) &lt; (10.0)]\n</code></pre> <pre><code>pl$lit(5)$lt(pl$lit(10))\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) &lt; (10.0)]\n</code></pre>"},{"location":"man/Expr_lt_eq/","title":"Check lower or equal inequality","text":"<p>Source code</p>"},{"location":"man/Expr_lt_eq/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_lt_eq/#usage","title":"Usage","text":"<pre><code>Expr_lt_eq(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 &lt;= e2\n</code></pre>"},{"location":"man/Expr_lt_eq/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_lt_eq/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_lt_eq/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(2) &lt;= 2\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &lt;= (2.0)]\n</code></pre> <pre><code>pl$lit(2) &lt;= pl$lit(2)\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &lt;= (2.0)]\n</code></pre> <pre><code>pl$lit(2)$lt_eq(pl$lit(2))\n</code></pre> <pre><code>#&gt; polars Expr: [(2.0) &lt;= (2.0)]\n</code></pre>"},{"location":"man/Expr_map_batches/","title":"Map an expression with an R function","text":"<p>Source code</p>"},{"location":"man/Expr_map_batches/#description","title":"Description","text":"<p>Map an expression with an R function</p>"},{"location":"man/Expr_map_batches/#usage","title":"Usage","text":"<pre><code>Expr_map_batches(\n  f,\n  output_type = NULL,\n  agg_list = FALSE,\n  in_background = FALSE\n)\n</code></pre>"},{"location":"man/Expr_map_batches/#arguments","title":"Arguments","text":"<code>f</code>  a function to map with  <code>output_type</code> <code>NULL</code> or a type available in <code>names(pl$dtypes)</code>. If <code>NULL</code> (default), the output datatype will match the input datatype. This is used to inform schema of the actual return type of the R function. Setting this wrong could theoretically have some downstream implications to the query.  <code>agg_list</code>  Aggregate list. Map from vector to group in group_by context.  <code>in_background</code>  Boolean. Whether to execute the map in a background R process. Combined with setting e.g.\u00a0<code>pl$set_options(rpool_cap = 4)</code> it can speed up some slow R functions as they can run in parallel R sessions. The communication speed between processes is quite slower than between threads. This will likely only give a speed-up in a \"low IO - high CPU\" use case. If there are multiple <code>$map(in_background = TRUE)</code> calls in the query, they will be run in parallel."},{"location":"man/Expr_map_batches/#details","title":"Details","text":"<p>It is sometimes necessary to apply a specific R function on one or several columns. However, note that using R code in <code>$map()</code> is slower than native polars. The user function must take one polars <code>Series</code> as input and the return should be a <code>Series</code> or any Robj convertible into a <code>Series</code> (e.g.\u00a0vectors). Map fully supports <code>browser()</code>.</p> <p>If <code>in_background = FALSE</code> the function can access any global variable of the R session. However, note that several calls to <code>$map()</code> will sequentially share the same main R session, so the global environment might change between the start of the query and the moment a <code>map()</code> call is evaluated. Any native polars computations can still be executed meanwhile. If <code>in_background = TRUE</code>, the map will run in one or more other R sessions and will not have access to global variables. Use <code>pl$set_options(rpool_cap = 4)</code> and <code>pl$options$rpool_cap</code> to see and view number of parallel R sessions.</p>"},{"location":"man/Expr_map_batches/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_map_batches/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$\n  select(\n  pl$col(\"Sepal.Length\")$map_batches(\\(x) {\n    paste(\"cheese\", as.character(x$to_vector()))\n  }, pl$dtypes$String)\n)\n</code></pre> <pre><code>#&gt; shape: (150, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 str          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 cheese 5.1   \u2502\n#&gt; \u2502 cheese 4.9   \u2502\n#&gt; \u2502 cheese 4.7   \u2502\n#&gt; \u2502 cheese 4.6   \u2502\n#&gt; \u2502 \u2026            \u2502\n#&gt; \u2502 cheese 6.3   \u2502\n#&gt; \u2502 cheese 6.5   \u2502\n#&gt; \u2502 cheese 6.2   \u2502\n#&gt; \u2502 cheese 5.9   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># R parallel process example, use Sys.sleep() to imitate some CPU expensive\n# computation.\n\n# map a,b,c,d sequentially\npl$LazyFrame(a = 1, b = 2, c = 3, d = 4)$select(\n  pl$all()$map_batches(\\(s) {\n    Sys.sleep(.1)\n    s * 2\n  })\n)$collect() |&gt; system.time()\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.015   0.000   0.415\n</code></pre> <pre><code># map in parallel 1: Overhead to start up extra R processes / sessions\npl$set_options(rpool_cap = 0) # drop any previous processes, just to show start-up overhead\npl$set_options(rpool_cap = 4) # set back to 4, the default\npl$options$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre> <pre><code>pl$LazyFrame(a = 1, b = 2, c = 3, d = 4)$select(\n  pl$all()$map_batches(\\(s) {\n    Sys.sleep(.1)\n    s * 2\n  }, in_background = TRUE)\n)$collect() |&gt; system.time()\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.006   0.000   0.873\n</code></pre> <pre><code># map in parallel 2: Reuse R processes in \"polars global_rpool\".\npl$options$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre> <pre><code>pl$LazyFrame(a = 1, b = 2, c = 3, d = 4)$select(\n  pl$all()$map_batches(\\(s) {\n    Sys.sleep(.1)\n    s * 2\n  }, in_background = TRUE)\n)$collect() |&gt; system.time()\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.005   0.000   0.108\n</code></pre>"},{"location":"man/Expr_map_elements/","title":"Map a custom/user-defined function (UDF) to each element of a column","text":"<p>Source code</p>"},{"location":"man/Expr_map_elements/#description","title":"Description","text":"<p>The UDF is applied to each element of a column. See Details for more information on specificities related to the context.</p>"},{"location":"man/Expr_map_elements/#usage","title":"Usage","text":"<pre><code>Expr_map_elements(\n  f,\n  return_type = NULL,\n  strict_return_type = TRUE,\n  allow_fail_eval = FALSE,\n  in_background = FALSE\n)\n</code></pre>"},{"location":"man/Expr_map_elements/#arguments","title":"Arguments","text":"<code>f</code>  Function to map  <code>return_type</code>  DataType of the output Series. If <code>NULL</code>, the dtype will be <code>pl$Unknown</code>.  <code>strict_return_type</code>  If <code>TRUE</code> (default), error if not correct datatype returned from R. If <code>FALSE</code>, the output will be converted to a polars null value.  <code>allow_fail_eval</code>  If <code>FALSE</code> (default), raise an error if the function fails. If <code>TRUE</code>, the result will be converted to a polars null value.  <code>in_background</code>  Whether to run the function in a background R process, default is <code>FALSE</code>. Combined with setting e.g.\u00a0<code>pl$set_options(rpool_cap = 4)</code>, this can speed up some slow R functions as they can run in parallel R sessions. The communication speed between processes is quite slower than between threads. This will likely only give a speed-up in a \"low IO - high CPU\" usecase. A single map will not be paralleled, only in case of multiple <code>$map_elements()</code> in the query can these run in parallel."},{"location":"man/Expr_map_elements/#details","title":"Details","text":"<p>Note that, in a GroupBy context, the column will have been pre-aggregated and so each element will itself be a Series. Therefore, depending on the context, requirements for function differ:</p> <ul> <li>  in <code>$select()</code> or <code>$with_columns()</code> (selection context), the function must operate on R scalar values. Polars will convert each element into an R value and pass it to the function. The output of the user function will be converted back into a polars type (the return type must match, see argument <code>return_type</code>). Using <code>$map_elements()</code> in this context should be avoided as a <code>lapply()</code> has half the overhead.  </li> <li>  in <code>$agg()</code> (GroupBy context), the function must take a <code>Series</code> and return a <code>Series</code> or an R object convertible to <code>Series</code>, e.g.\u00a0a vector. In this context, it is much faster if there are the number of groups is much lower than the number of rows, as the iteration is only across the groups. The R user function could e.g.\u00a0convert the <code>Series</code> to a vector with <code>$to_r()</code> and perform some vectorized operations.  </li> </ul> <p>Note that it is preferred to express your function in polars syntax, which will almost always be significantly faster and more memory efficient because:</p> <ul> <li>  the native expression engine runs in Rust; functions run in R.  </li> <li>  use of R functions forces the DataFrame to be materialized in memory.  </li> <li>  Polars-native expressions can be parallelized (R functions cannot).  </li> <li>  Polars-native expressions can be logically optimized (R functions cannot).  </li> </ul> <p>Wherever possible you should strongly prefer the native expression API to achieve the best performance and avoid using <code>$map_elements()</code>.</p>"},{"location":"man/Expr_map_elements/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_map_elements/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# apply over groups: here, the input must be a Series\n# prepare two expressions, one to compute the sum of each variable, one to\n# get the first two values of each variable and store them in a list\ne_sum = pl$all()$map_elements(\\(s) sum(s$to_r()))$name$suffix(\"_sum\")\ne_head = pl$all()$map_elements(\\(s) head(s$to_r(), 2))$name$suffix(\"_head\")\npl$DataFrame(iris)$group_by(\"Species\")$agg(e_sum, e_head)\n</code></pre> <pre><code>#&gt; shape: (3, 9)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species   \u2506 Sepal.Len \u2506 Sepal.Wid \u2506 Petal.Len \u2506 \u2026 \u2506 Sepal.Len \u2506 Sepal.Wid \u2506 Petal.Len \u2506 Petal.Wi \u2502\n#&gt; \u2502 ---       \u2506 gth_sum   \u2506 th_sum    \u2506 gth_sum   \u2506   \u2506 gth_head  \u2506 th_head   \u2506 gth_head  \u2506 dth_head \u2502\n#&gt; \u2502 cat       \u2506 ---       \u2506 ---       \u2506 ---       \u2506   \u2506 ---       \u2506 ---       \u2506 ---       \u2506 ---      \u2502\n#&gt; \u2502           \u2506 f64       \u2506 f64       \u2506 f64       \u2506   \u2506 list[f64] \u2506 list[f64] \u2506 list[f64] \u2506 list[f64 \u2502\n#&gt; \u2502           \u2506           \u2506           \u2506           \u2506   \u2506           \u2506           \u2506           \u2506 ]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 virginica \u2506 329.4     \u2506 148.7     \u2506 277.6     \u2506 \u2026 \u2506 [6.3,     \u2506 [3.3,     \u2506 [6.0,     \u2506 [2.5,    \u2502\n#&gt; \u2502           \u2506           \u2506           \u2506           \u2506   \u2506 5.8]      \u2506 2.7]      \u2506 5.1]      \u2506 1.9]     \u2502\n#&gt; \u2502 versicolo \u2506 296.8     \u2506 138.5     \u2506 213.0     \u2506 \u2026 \u2506 [7.0,     \u2506 [3.2,     \u2506 [4.7,     \u2506 [1.4,    \u2502\n#&gt; \u2502 r         \u2506           \u2506           \u2506           \u2506   \u2506 6.4]      \u2506 3.2]      \u2506 4.5]      \u2506 1.5]     \u2502\n#&gt; \u2502 setosa    \u2506 250.3     \u2506 171.4     \u2506 73.1      \u2506 \u2026 \u2506 [5.1,     \u2506 [3.5,     \u2506 [1.4,     \u2506 [0.2,    \u2502\n#&gt; \u2502           \u2506           \u2506           \u2506           \u2506   \u2506 4.9]      \u2506 3.0]      \u2506 1.4]      \u2506 0.2]     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># apply a function on each value (should be avoided): here the input is an R\n# scalar\n# select only Float64 columns\nmy_selection = pl$col(pl$dtypes$Float64)\n\n# prepare two expressions, the first one only adds 10 to each element, the\n# second returns the letter whose index matches the element\ne_add10 = my_selection$map_elements(\\(x)  {\n  x + 10\n})$name$suffix(\"_sum\")\n\ne_letter = my_selection$map_elements(\\(x) {\n  letters[ceiling(x)]\n}, return_type = pl$dtypes$String)$name$suffix(\"_letter\")\npl$DataFrame(iris)$select(e_add10, e_letter)\n</code></pre> <pre><code>#&gt; shape: (150, 8)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Leng \u2506 Sepal.Widt \u2506 Petal.Leng \u2506 Petal.Wid \u2506 Sepal.Len \u2506 Sepal.Wid \u2506 Petal.Len \u2506 Petal.Wid \u2502\n#&gt; \u2502 th_sum     \u2506 h_sum      \u2506 th_sum     \u2506 th_sum    \u2506 gth_lette \u2506 th_letter \u2506 gth_lette \u2506 th_letter \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---        \u2506 ---       \u2506 r         \u2506 ---       \u2506 r         \u2506 ---       \u2502\n#&gt; \u2502 f64        \u2506 f64        \u2506 f64        \u2506 f64       \u2506 ---       \u2506 str       \u2506 ---       \u2506 str       \u2502\n#&gt; \u2502            \u2506            \u2506            \u2506           \u2506 str       \u2506           \u2506 str       \u2506           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.1       \u2506 13.5       \u2506 11.4       \u2506 10.2      \u2506 f         \u2506 d         \u2506 b         \u2506 a         \u2502\n#&gt; \u2502 14.9       \u2506 13.0       \u2506 11.4       \u2506 10.2      \u2506 e         \u2506 c         \u2506 b         \u2506 a         \u2502\n#&gt; \u2502 14.7       \u2506 13.2       \u2506 11.3       \u2506 10.2      \u2506 e         \u2506 d         \u2506 b         \u2506 a         \u2502\n#&gt; \u2502 14.6       \u2506 13.1       \u2506 11.5       \u2506 10.2      \u2506 e         \u2506 d         \u2506 b         \u2506 a         \u2502\n#&gt; \u2502 \u2026          \u2506 \u2026          \u2506 \u2026          \u2506 \u2026         \u2506 \u2026         \u2506 \u2026         \u2506 \u2026         \u2506 \u2026         \u2502\n#&gt; \u2502 16.3       \u2506 12.5       \u2506 15.0       \u2506 11.9      \u2506 g         \u2506 c         \u2506 e         \u2506 b         \u2502\n#&gt; \u2502 16.5       \u2506 13.0       \u2506 15.2       \u2506 12.0      \u2506 g         \u2506 c         \u2506 f         \u2506 b         \u2502\n#&gt; \u2502 16.2       \u2506 13.4       \u2506 15.4       \u2506 12.3      \u2506 g         \u2506 d         \u2506 f         \u2506 c         \u2502\n#&gt; \u2502 15.9       \u2506 13.0       \u2506 15.1       \u2506 11.8      \u2506 f         \u2506 c         \u2506 f         \u2506 b         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Small benchmark --------------------------------\n\n# Using `$map_elements()` is much slower than a more polars-native approach.\n# First we multiply each element of a Series of 1M elements by 2.\nn = 1000000L\nset.seed(1)\ndf = pl$DataFrame(list(\n  a = 1:n,\n  b = sample(letters, n, replace = TRUE)\n))\n\nsystem.time({\n  df$with_columns(\n    bob = pl$col(\"a\")$map_elements(\\(x) {\n      x * 2L\n    })\n  )\n})\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   2.281   0.005   2.446\n</code></pre> <pre><code># Comparing this to the standard polars syntax:\nsystem.time({\n  df$with_columns(\n    bob = pl$col(\"a\") * 2L\n  )\n})\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.002   0.000   0.002\n</code></pre> <pre><code># Running in parallel --------------------------------\n\n# here, we use Sys.sleep() to imitate some CPU expensive computation.\n\n# use apply over each Species-group in each column equal to 12 sequential\n# runs ~1.2 sec.\nsystem.time({\n  pl$LazyFrame(iris)$group_by(\"Species\")$agg(\n    pl$all()$map_elements(\\(s) {\n      Sys.sleep(.1)\n      s$sum()\n    })\n  )$collect()\n})\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.016   0.000   1.217\n</code></pre> <pre><code># first run in parallel: there is some overhead to start up extra R processes\n# drop any previous processes, just to show start-up overhead here\npl$set_options(rpool_cap = 0)\n# set back to 4, the default\npl$set_options(rpool_cap = 4)\npl$options$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre> <pre><code>system.time({\n  pl$LazyFrame(iris)$group_by(\"Species\")$agg(\n    pl$all()$map_elements(\\(s) {\n      Sys.sleep(.1)\n      s$sum()\n    }, in_background = TRUE)\n  )$collect()\n})\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.005   0.005   0.931\n</code></pre> <pre><code># second run in parallel: this reuses R processes in \"polars global_rpool\".\npl$options$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre> <pre><code>system.time({\n  pl$LazyFrame(iris)$group_by(\"Species\")$agg(\n    pl$all()$map_elements(\\(s) {\n      Sys.sleep(.1)\n      s$sum()\n    }, in_background = TRUE)\n  )$collect()\n})\n</code></pre> <pre><code>#&gt;    user  system elapsed \n#&gt;   0.008   0.000   0.334\n</code></pre>"},{"location":"man/Expr_max/","title":"Get maximum value","text":"<p>Source code</p>"},{"location":"man/Expr_max/#description","title":"Description","text":"<p>Get maximum value</p>"},{"location":"man/Expr_max/#usage","title":"Usage","text":"<pre><code>Expr_max\n</code></pre>"},{"location":"man/Expr_max/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, NA, 3))$\n  with_columns(max = pl$col(\"x\")$max())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 max \u2502\n#&gt; \u2502 ---  \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 3.0 \u2502\n#&gt; \u2502 null \u2506 3.0 \u2502\n#&gt; \u2502 3.0  \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_mean/","title":"Get mean value","text":"<p>Source code</p>"},{"location":"man/Expr_mean/#description","title":"Description","text":"<p>Get mean value</p>"},{"location":"man/Expr_mean/#usage","title":"Usage","text":"<pre><code>Expr_mean\n</code></pre>"},{"location":"man/Expr_mean/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_mean/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1L, NA, 2L))$\n  with_columns(mean = pl$col(\"x\")$mean())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 mean \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 i32  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 1.5  \u2502\n#&gt; \u2502 null \u2506 1.5  \u2502\n#&gt; \u2502 2    \u2506 1.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_median/","title":"Get median value","text":"<p>Source code</p>"},{"location":"man/Expr_median/#description","title":"Description","text":"<p>Get median value</p>"},{"location":"man/Expr_median/#usage","title":"Usage","text":"<pre><code>Expr_median\n</code></pre>"},{"location":"man/Expr_median/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_median/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1L, NA, 2L))$\n  with_columns(median = pl$col(\"x\")$median())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 median \u2502\n#&gt; \u2502 ---  \u2506 ---    \u2502\n#&gt; \u2502 i32  \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 1.5    \u2502\n#&gt; \u2502 null \u2506 1.5    \u2502\n#&gt; \u2502 2    \u2506 1.5    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_min/","title":"Get minimum value","text":"<p>Source code</p>"},{"location":"man/Expr_min/#description","title":"Description","text":"<p>Get minimum value</p>"},{"location":"man/Expr_min/#usage","title":"Usage","text":"<pre><code>Expr_min\n</code></pre>"},{"location":"man/Expr_min/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, NA, 3))$\n  with_columns(min = pl$col(\"x\")$min())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 min \u2502\n#&gt; \u2502 ---  \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 1.0 \u2502\n#&gt; \u2502 null \u2506 1.0 \u2502\n#&gt; \u2502 3.0  \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_mod/","title":"Modulo two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_mod/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_mod/#usage","title":"Usage","text":"<pre><code>Expr_mod(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 %% e2\n</code></pre>"},{"location":"man/Expr_mod/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_mod/#details","title":"Details","text":"<p>Currently, the modulo operator behaves differently than in R, and not guaranteed <code>x == (x %% y) + y * (x %/% y)</code>.</p>"},{"location":"man/Expr_mod/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_mod/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(-1:12) %% 3)$to_series()$to_vector()\n</code></pre> <pre><code>#&gt;  [1] -1  0  1  2  0  1  2  0  1  2  0  1  2  0\n</code></pre> <pre><code># The example is **NOT** equivalent to the followings:\n-1:12 %% 3\n</code></pre> <pre><code>#&gt;  [1] 2 0 1 2 0 1 2 0 1 2 0 1 2 0\n</code></pre> <pre><code>pl$select(-1:12 %% 3)$to_series()$to_vector()\n</code></pre> <pre><code>#&gt;  [1] 2 0 1 2 0 1 2 0 1 2 0 1 2 0\n</code></pre> <pre><code># Not guaranteed `x == (x %% y) + y * (x %/% y)`\nx = pl$lit(-1:12)\ny = pl$lit(3)\npl$select(x == (x %% y) + y * (x %/% y))\n</code></pre> <pre><code>#&gt; shape: (14, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502       \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 \u2026     \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_mode/","title":"Mode","text":"<p>Source code</p>"},{"location":"man/Expr_mode/#description","title":"Description","text":"<p>Compute the most occurring value(s). Can return multiple values if there are ties.</p>"},{"location":"man/Expr_mode/#usage","title":"Usage","text":"<pre><code>Expr_mode\n</code></pre>"},{"location":"man/Expr_mode/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_mode/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = 1:6, b = c(1L, 1L, 3L, 3L, 5L, 6L), c = c(1L, 1L, 2L, 2L, 3L, 3L))\ndf$select(pl$col(\"a\")$mode())\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 6   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"b\")$mode())\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"c\")$mode())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 c   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_mul/","title":"Multiply two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_mul/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_mul/#usage","title":"Usage","text":"<pre><code>Expr_mul(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 * e2\n</code></pre>"},{"location":"man/Expr_mul/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_mul/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_mul/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(5) * 10\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) * (10.0)]\n</code></pre> <pre><code>pl$lit(5) * pl$lit(10)\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) * (10.0)]\n</code></pre> <pre><code>pl$lit(5)$mul(pl$lit(10))\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) * (10.0)]\n</code></pre>"},{"location":"man/Expr_n_unique/","title":"Count number of unique values","text":"<p>Source code</p>"},{"location":"man/Expr_n_unique/#description","title":"Description","text":"<p>Count number of unique values</p>"},{"location":"man/Expr_n_unique/#usage","title":"Usage","text":"<pre><code>Expr_n_unique\n</code></pre>"},{"location":"man/Expr_n_unique/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_n_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris[, 4:5])$with_columns(count = pl$col(\"Species\")$n_unique())\n</code></pre> <pre><code>#&gt; shape: (150, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Width \u2506 Species   \u2506 count \u2502\n#&gt; \u2502 ---         \u2506 ---       \u2506 ---   \u2502\n#&gt; \u2502 f64         \u2506 cat       \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 0.2         \u2506 setosa    \u2506 3     \u2502\n#&gt; \u2502 \u2026           \u2506 \u2026         \u2506 \u2026     \u2502\n#&gt; \u2502 1.9         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 2.0         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 2.3         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2502 1.8         \u2506 virginica \u2506 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_nan_max/","title":"Get maximum value with NaN","text":"<p>Source code</p>"},{"location":"man/Expr_nan_max/#description","title":"Description","text":"<p>Get maximum value, but returns <code>NaN</code> if there are any.</p>"},{"location":"man/Expr_nan_max/#usage","title":"Usage","text":"<pre><code>Expr_nan_max\n</code></pre>"},{"location":"man/Expr_nan_max/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_nan_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, NA, 3, NaN, Inf))$\n  with_columns(nan_max = pl$col(\"x\")$nan_max())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 nan_max \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 NaN     \u2502\n#&gt; \u2502 null \u2506 NaN     \u2502\n#&gt; \u2502 3.0  \u2506 NaN     \u2502\n#&gt; \u2502 NaN  \u2506 NaN     \u2502\n#&gt; \u2502 inf  \u2506 NaN     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_nan_min/","title":"Get minimum value with NaN","text":"<p>Source code</p>"},{"location":"man/Expr_nan_min/#description","title":"Description","text":"<p>Get minimum value, but returns <code>NaN</code> if there are any.</p>"},{"location":"man/Expr_nan_min/#usage","title":"Usage","text":"<pre><code>Expr_nan_min\n</code></pre>"},{"location":"man/Expr_nan_min/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_nan_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1, NA, 3, NaN, Inf))$\n  with_columns(nan_min = pl$col(\"x\")$nan_min())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 nan_min \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 f64  \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 NaN     \u2502\n#&gt; \u2502 null \u2506 NaN     \u2502\n#&gt; \u2502 3.0  \u2506 NaN     \u2502\n#&gt; \u2502 NaN  \u2506 NaN     \u2502\n#&gt; \u2502 inf  \u2506 NaN     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_neq/","title":"Check inequality","text":"<p>Source code</p>"},{"location":"man/Expr_neq/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_neq/#usage","title":"Usage","text":"<pre><code>Expr_neq(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 != e2\n</code></pre>"},{"location":"man/Expr_neq/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_neq/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_neq/#see-also","title":"See Also","text":"<p>Expr_neq_missing</p>"},{"location":"man/Expr_neq/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(1) != 2\n</code></pre> <pre><code>#&gt; polars Expr: [(1.0) != (2.0)]\n</code></pre> <pre><code>pl$lit(1) != pl$lit(2)\n</code></pre> <pre><code>#&gt; polars Expr: [(1.0) != (2.0)]\n</code></pre> <pre><code>pl$lit(1)$neq(pl$lit(2))\n</code></pre> <pre><code>#&gt; polars Expr: [(1.0) != (2.0)]\n</code></pre>"},{"location":"man/Expr_neq_missing/","title":"Check inequality without <code>null</code> propagation","text":"<p>Source code</p>"},{"location":"man/Expr_neq_missing/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_neq_missing/#usage","title":"Usage","text":"<pre><code>Expr_neq_missing(other)\n</code></pre>"},{"location":"man/Expr_neq_missing/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal"},{"location":"man/Expr_neq_missing/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_neq_missing/#see-also","title":"See Also","text":"<p>Expr_neq</p>"},{"location":"man/Expr_neq_missing/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(NA, FALSE, TRUE), y = c(TRUE, TRUE, TRUE))\ndf$with_columns(\n  neq = pl$col(\"x\")$neq(\"y\"),\n  neq_missing = pl$col(\"x\")$neq_missing(\"y\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2506 y    \u2506 neq  \u2506 neq_missing \u2502\n#&gt; \u2502 ---   \u2506 ---  \u2506 ---  \u2506 ---         \u2502\n#&gt; \u2502 bool  \u2506 bool \u2506 bool \u2506 bool        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null  \u2506 true \u2506 null \u2506 true        \u2502\n#&gt; \u2502 false \u2506 true \u2506 true \u2506 true        \u2502\n#&gt; \u2502 true  \u2506 true \u2506 true \u2506 true        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_not/","title":"Negate a boolean expression","text":"<p>Source code</p>"},{"location":"man/Expr_not/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_not/#usage","title":"Usage","text":"<pre><code>Expr_not\n\n# S3 method for class 'RPolarsExpr'\n!x\n</code></pre>"},{"location":"man/Expr_not/#arguments","title":"Arguments","text":"<code>x</code>  Expr"},{"location":"man/Expr_not/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_not/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# two syntaxes same result\npl$lit(TRUE)$not()\n</code></pre> <pre><code>#&gt; polars Expr: true.not()\n</code></pre> <pre><code>!pl$lit(TRUE)\n</code></pre> <pre><code>#&gt; polars Expr: true.not()\n</code></pre>"},{"location":"man/Expr_null_count/","title":"Count missing values","text":"<p>Source code</p>"},{"location":"man/Expr_null_count/#description","title":"Description","text":"<p>Count missing values</p>"},{"location":"man/Expr_null_count/#usage","title":"Usage","text":"<pre><code>Expr_null_count\n</code></pre>"},{"location":"man/Expr_null_count/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_null_count/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(NA, \"a\", NA, \"b\"))$\n  with_columns(n_missing = pl$col(\"x\")$null_count())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 n_missing \u2502\n#&gt; \u2502 ---  \u2506 ---       \u2502\n#&gt; \u2502 str  \u2506 u32       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 2         \u2502\n#&gt; \u2502 a    \u2506 2         \u2502\n#&gt; \u2502 null \u2506 2         \u2502\n#&gt; \u2502 b    \u2506 2         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_or/","title":"Apply logical OR on two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_or/#description","title":"Description","text":"<p>Combine two boolean expressions with OR.</p>"},{"location":"man/Expr_or/#usage","title":"Usage","text":"<pre><code>Expr_or(other)\n</code></pre>"},{"location":"man/Expr_or/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal"},{"location":"man/Expr_or/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_or/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(TRUE) | FALSE\n</code></pre> <pre><code>#&gt; polars Expr: [(true) | (false)]\n</code></pre> <pre><code>pl$lit(TRUE)$or(pl$lit(TRUE))\n</code></pre> <pre><code>#&gt; polars Expr: [(true) | (true)]\n</code></pre>"},{"location":"man/Expr_over/","title":"Apply window function over a subgroup","text":"<p>Source code</p>"},{"location":"man/Expr_over/#description","title":"Description","text":"<p>This applies an expression on groups and returns the same number of rows as the input (contrarily to <code>$group_by()</code> + <code>$agg()</code>).</p>"},{"location":"man/Expr_over/#usage","title":"Usage","text":"<pre><code>Expr_over(...)\n</code></pre>"},{"location":"man/Expr_over/#arguments","title":"Arguments","text":"<code>\u2026</code>  Character vector indicating the columns to group by."},{"location":"man/Expr_over/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_over/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  val = 1:5,\n  a = c(\"+\", \"+\", \"-\", \"-\", \"+\"),\n  b = c(\"+\", \"-\", \"+\", \"-\", \"+\")\n)$with_columns(\n  count = pl$col(\"val\")$count()$over(\"a\", \"b\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 val \u2506 a   \u2506 b   \u2506 count \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---   \u2502\n#&gt; \u2502 i32 \u2506 str \u2506 str \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 +   \u2506 +   \u2506 2     \u2502\n#&gt; \u2502 2   \u2506 +   \u2506 -   \u2506 1     \u2502\n#&gt; \u2502 3   \u2506 -   \u2506 +   \u2506 1     \u2502\n#&gt; \u2502 4   \u2506 -   \u2506 -   \u2506 1     \u2502\n#&gt; \u2502 5   \u2506 +   \u2506 +   \u2506 2     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>over_vars = c(\"a\", \"b\")\npl$DataFrame(\n  val = 1:5,\n  a = c(\"+\", \"+\", \"-\", \"-\", \"+\"),\n  b = c(\"+\", \"-\", \"+\", \"-\", \"+\")\n)$with_columns(\n  count = pl$col(\"val\")$count()$over(over_vars)\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 val \u2506 a   \u2506 b   \u2506 count \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---   \u2502\n#&gt; \u2502 i32 \u2506 str \u2506 str \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 +   \u2506 +   \u2506 2     \u2502\n#&gt; \u2502 2   \u2506 +   \u2506 -   \u2506 1     \u2502\n#&gt; \u2502 3   \u2506 -   \u2506 +   \u2506 1     \u2502\n#&gt; \u2502 4   \u2506 -   \u2506 -   \u2506 1     \u2502\n#&gt; \u2502 5   \u2506 +   \u2506 +   \u2506 2     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_pct_change/","title":"Percentage change","text":"<p>Source code</p>"},{"location":"man/Expr_pct_change/#description","title":"Description","text":"<p>Computes percentage change (as fraction) between current element and most- recent non-null element at least <code>n</code> period(s) before the current element. Computes the change from the previous row by default.</p>"},{"location":"man/Expr_pct_change/#usage","title":"Usage","text":"<pre><code>Expr_pct_change(n = 1)\n</code></pre>"},{"location":"man/Expr_pct_change/#arguments","title":"Arguments","text":"<code>n</code>  Periods to shift for computing percent change."},{"location":"man/Expr_pct_change/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_pct_change/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(10L, 11L, 12L, NA_integer_, 12L))$\n  with_columns(pct_change = pl$col(\"a\")$pct_change())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 pct_change \u2502\n#&gt; \u2502 ---  \u2506 ---        \u2502\n#&gt; \u2502 i32  \u2506 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10   \u2506 null       \u2502\n#&gt; \u2502 11   \u2506 0.1        \u2502\n#&gt; \u2502 12   \u2506 0.090909   \u2502\n#&gt; \u2502 null \u2506 0.0        \u2502\n#&gt; \u2502 12   \u2506 0.0        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_peak_max/","title":"Find local maxima","text":"<p>Source code</p>"},{"location":"man/Expr_peak_max/#description","title":"Description","text":"<p>A local maximum is the point that marks the transition between an increase and a decrease in a Series. The first and last values of the Series can never be a peak.</p>"},{"location":"man/Expr_peak_max/#usage","title":"Usage","text":"<pre><code>Expr_peak_max()\n</code></pre>"},{"location":"man/Expr_peak_max/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_peak_max/#see-also","title":"See Also","text":"<p><code>$peak_min()</code></p>"},{"location":"man/Expr_peak_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(1, 2, 3, 2, 3, 4, 5, 2))\ndf\n</code></pre> <pre><code>#&gt; shape: (8, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 4.0 \u2502\n#&gt; \u2502 5.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(peak_max = pl$col(\"x\")$peak_max())\n</code></pre> <pre><code>#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 peak_max \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 bool     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 false    \u2502\n#&gt; \u2502 2.0 \u2506 false    \u2502\n#&gt; \u2502 3.0 \u2506 true     \u2502\n#&gt; \u2502 2.0 \u2506 false    \u2502\n#&gt; \u2502 3.0 \u2506 false    \u2502\n#&gt; \u2502 4.0 \u2506 false    \u2502\n#&gt; \u2502 5.0 \u2506 true     \u2502\n#&gt; \u2502 2.0 \u2506 false    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_peak_min/","title":"Find local minima","text":"<p>Source code</p>"},{"location":"man/Expr_peak_min/#description","title":"Description","text":"<p>A local minimum is the point that marks the transition between a decrease and an increase in a Series. The first and last values of the Series can never be a peak.</p>"},{"location":"man/Expr_peak_min/#usage","title":"Usage","text":"<pre><code>Expr_peak_min()\n</code></pre>"},{"location":"man/Expr_peak_min/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_peak_min/#see-also","title":"See Also","text":"<p><code>$peak_max()</code></p>"},{"location":"man/Expr_peak_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = c(1, 2, 3, 2, 3, 4, 5, 2))\ndf\n</code></pre> <pre><code>#&gt; shape: (8, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 4.0 \u2502\n#&gt; \u2502 5.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(peak_min = pl$col(\"x\")$peak_min())\n</code></pre> <pre><code>#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 peak_min \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 bool     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 false    \u2502\n#&gt; \u2502 2.0 \u2506 false    \u2502\n#&gt; \u2502 3.0 \u2506 false    \u2502\n#&gt; \u2502 2.0 \u2506 true     \u2502\n#&gt; \u2502 3.0 \u2506 false    \u2502\n#&gt; \u2502 4.0 \u2506 false    \u2502\n#&gt; \u2502 5.0 \u2506 false    \u2502\n#&gt; \u2502 2.0 \u2506 false    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_pow/","title":"Exponentiation","text":"<p>Source code</p>"},{"location":"man/Expr_pow/#description","title":"Description","text":"<p>Raise expression to the power of exponent.</p>"},{"location":"man/Expr_pow/#usage","title":"Usage","text":"<pre><code>Expr_pow(exponent)\n</code></pre>"},{"location":"man/Expr_pow/#arguments","title":"Arguments","text":"<code>exponent</code>  Exponent value."},{"location":"man/Expr_pow/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_pow/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# use via `pow`-method and the `^`-operator\npl$DataFrame(a = -1:3, b = 2:6)$with_columns(\n  x = pl$col(\"a\")$pow(2),\n  y = pl$col(\"a\")^3\n)\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 x   \u2506 y    \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 f64 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1  \u2506 2   \u2506 1.0 \u2506 -1.0 \u2502\n#&gt; \u2502 0   \u2506 3   \u2506 0.0 \u2506 0.0  \u2502\n#&gt; \u2502 1   \u2506 4   \u2506 1.0 \u2506 1.0  \u2502\n#&gt; \u2502 2   \u2506 5   \u2506 4.0 \u2506 8.0  \u2502\n#&gt; \u2502 3   \u2506 6   \u2506 9.0 \u2506 27.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_print/","title":"S3 method to print an Expr","text":"<p>Source code</p>"},{"location":"man/Expr_print/#description","title":"Description","text":"<p>S3 method to print an Expr</p>"},{"location":"man/Expr_print/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsExpr'\nprint(x, ...)\n\nExpr_print()\n</code></pre>"},{"location":"man/Expr_print/#arguments","title":"Arguments","text":"<code>x</code>  Expr  <code>\u2026</code>  Not used."},{"location":"man/Expr_print/#value","title":"Value","text":"<p>No value returned, it prints in the console.</p>"},{"location":"man/Expr_print/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nprint(pl$col(\"some_column\")$sum())\n</code></pre> <pre><code>#&gt; polars Expr: col(\"some_column\").sum()\n</code></pre>"},{"location":"man/Expr_product/","title":"Product","text":"<p>Source code</p>"},{"location":"man/Expr_product/#description","title":"Description","text":"<p>Compute the product of an expression.</p>"},{"location":"man/Expr_product/#usage","title":"Usage","text":"<pre><code>Expr_product\n</code></pre>"},{"location":"man/Expr_product/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_product/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(2L, NA, 2L))$\n  with_columns(product = pl$col(\"x\")$product())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 product \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 i32  \u2506 i64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2    \u2506 4       \u2502\n#&gt; \u2502 null \u2506 4       \u2502\n#&gt; \u2502 2    \u2506 4       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_quantile/","title":"Get quantile value.","text":"<p>Source code</p>"},{"location":"man/Expr_quantile/#description","title":"Description","text":"<p>Get quantile value.</p>"},{"location":"man/Expr_quantile/#usage","title":"Usage","text":"<pre><code>Expr_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"man/Expr_quantile/#arguments","title":"Arguments","text":"<code>quantile</code>  Either a numeric value or an Expr whose value must be between 0 and 1.  <code>interpolation</code>  One of <code>\u201cnearest\u201d</code>, <code>\u201chigher\u201d</code>, <code>\u201clower\u201d</code>, <code>\u201cmidpoint\u201d</code>, or <code>\u201clinear\u201d</code>."},{"location":"man/Expr_quantile/#details","title":"Details","text":"<p>Null values are ignored and <code>NaN</code>s are ranked as the largest value. For linear interpolation <code>NaN</code> poisons <code>Inf</code>, that poisons any other value.</p>"},{"location":"man/Expr_quantile/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_quantile/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(-5:5)$quantile(.5))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rank/","title":"Rank elements","text":"<p>Source code</p>"},{"location":"man/Expr_rank/#description","title":"Description","text":"<p>Assign ranks to data, dealing with ties appropriately.</p>"},{"location":"man/Expr_rank/#usage","title":"Usage","text":"<pre><code>Expr_rank(method = \"average\", descending = FALSE)\n</code></pre>"},{"location":"man/Expr_rank/#arguments","title":"Arguments","text":"<code>method</code>   String, one of <code>\u201caverage\u201d</code> (default), <code>\u201cmin\u201d</code>, <code>\u201cmax\u201d</code>, <code>\u201cdense\u201d</code>, <code>\u201cordinal\u201d</code>, <code>\u201crandom\u201d</code>. The method used to assign ranks to tied elements:  <ul> <li> <code>\u201caverage\u201d</code>: The average of the ranks that would have been assigned to all the tied values is assigned to each value.  </li> <li> <code>\u201cmin\u201d</code>: The minimum of the ranks that would have been assigned to all the tied values is assigned to each value. (This is also referred to as \"competition\" ranking.)  </li> <li> <code>\u201cmax\u201d</code> : The maximum of the ranks that would have been assigned to all the tied values is assigned to each value.  </li> <li> <code>\u201cdense\u201d</code>: Like \u2018min\u2019, but the rank of the next highest element is assigned the rank immediately after those assigned to the tied elements.  </li> <li> <code>\u201cordinal\u201d</code> : All values are given a distinct rank, corresponding to the order that the values occur in the Series.  </li> <li> <code>\u201crandom\u201d</code> : Like \u2018ordinal\u2019, but the rank for ties is not dependent on the order that the values occur in the Series.  </li> </ul> <code>descending</code>  Rank in descending order."},{"location":"man/Expr_rank/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rank/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n#  The 'average' method:\npl$DataFrame(a = c(3, 6, 1, 1, 6))$\n  with_columns(rank = pl$col(\"a\")$rank())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 rank \u2502\n#&gt; \u2502 --- \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2506 3.0  \u2502\n#&gt; \u2502 6.0 \u2506 4.5  \u2502\n#&gt; \u2502 1.0 \u2506 1.5  \u2502\n#&gt; \u2502 1.0 \u2506 1.5  \u2502\n#&gt; \u2502 6.0 \u2506 4.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>#  The 'ordinal' method:\npl$DataFrame(a = c(3, 6, 1, 1, 6))$\n  with_columns(rank = pl$col(\"a\")$rank(\"ordinal\"))\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 rank \u2502\n#&gt; \u2502 --- \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2506 3    \u2502\n#&gt; \u2502 6.0 \u2506 4    \u2502\n#&gt; \u2502 1.0 \u2506 1    \u2502\n#&gt; \u2502 1.0 \u2506 2    \u2502\n#&gt; \u2502 6.0 \u2506 5    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rechunk/","title":"Rechunk memory layout","text":"<p>Source code</p>"},{"location":"man/Expr_rechunk/#description","title":"Description","text":"<p>Create a single chunk of memory for this Series.</p>"},{"location":"man/Expr_rechunk/#usage","title":"Usage","text":"<pre><code>Expr_rechunk\n</code></pre>"},{"location":"man/Expr_rechunk/#details","title":"Details","text":"<p>See rechunk() explained here <code>docs_translations</code>.</p>"},{"location":"man/Expr_rechunk/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rechunk/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# get chunked lengths with/without rechunk\nseries_list = pl$DataFrame(list(a = 1:3, b = 4:6))$select(\n  pl$col(\"a\")$append(pl$col(\"b\"))$alias(\"a_chunked\"),\n  pl$col(\"a\")$append(pl$col(\"b\"))$rechunk()$alias(\"a_rechunked\")\n)$get_columns()\nlapply(series_list, \\(x) x$chunk_lengths())\n</code></pre> <pre><code>#&gt; $a_chunked\n#&gt; [1] 3 3\n#&gt; \n#&gt; $a_rechunked\n#&gt; [1] 6\n</code></pre>"},{"location":"man/Expr_reinterpret/","title":"Reinterpret bits","text":"<p>Source code</p>"},{"location":"man/Expr_reinterpret/#description","title":"Description","text":"<p>Reinterpret the underlying bits as a signed/unsigned integer. This operation is only allowed for Int64. For lower bits integers, you can safely use the cast operation.</p>"},{"location":"man/Expr_reinterpret/#usage","title":"Usage","text":"<pre><code>Expr_reinterpret(signed = TRUE)\n</code></pre>"},{"location":"man/Expr_reinterpret/#arguments","title":"Arguments","text":"<code>signed</code>  If <code>TRUE</code> (default), reinterpret into Int64. Otherwise, it will be reinterpreted in UInt64."},{"location":"man/Expr_reinterpret/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_reinterpret/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(x = 1:5, schema = list(x = pl$Int64))\ndf$select(pl$all()$reinterpret())\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rep/","title":"Repeat a Series","text":"<p>Source code</p>"},{"location":"man/Expr_rep/#description","title":"Description","text":"<p>This expression takes input and repeats it n times and append chunk.</p>"},{"location":"man/Expr_rep/#usage","title":"Usage","text":"<pre><code>Expr_rep(n, rechunk = TRUE)\n</code></pre>"},{"location":"man/Expr_rep/#arguments","title":"Arguments","text":"<code>n</code>  The number of times to repeat, must be non-negative and finite.  <code>rechunk</code>  If <code>TRUE</code> (default), memory layout will be rewritten."},{"location":"man/Expr_rep/#details","title":"Details","text":"<p>If the input has length 1, this uses a special faster implementation that doesn\u2019t require rechunking (so <code>rechunk = TRUE</code> has no effect).</p>"},{"location":"man/Expr_rep/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rep/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(\"alice\")$rep(n = 3))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 alice   \u2502\n#&gt; \u2502 alice   \u2502\n#&gt; \u2502 alice   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$select(pl$lit(1:3)$rep(n = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rep_extend/","title":"Extend a Series by repeating values","text":"<p>Source code</p>"},{"location":"man/Expr_rep_extend/#description","title":"Description","text":"<p>Extend a Series by repeating values</p>"},{"location":"man/Expr_rep_extend/#usage","title":"Usage","text":"<pre><code>Expr_rep_extend(expr, n, rechunk = TRUE, upcast = TRUE)\n</code></pre>"},{"location":"man/Expr_rep_extend/#arguments","title":"Arguments","text":"<code>expr</code>  Expr or something coercible to an Expr.  <code>n</code>  The number of times to repeat, must be non-negative and finite.  <code>rechunk</code>  If <code>TRUE</code> (default), memory layout will be rewritten.  <code>upcast</code>  If <code>TRUE</code> (default), non identical types will be cast to common supertype if there is any. If <code>FALSE</code> or no common super type, having different types will throw an error."},{"location":"man/Expr_rep_extend/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rep_extend/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(c(1, 2, 3))$rep_extend(1:3, n = 5))\n</code></pre> <pre><code>#&gt; shape: (18, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 \u2026   \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_repeat_by/","title":"Repeat values","text":"<p>Source code</p>"},{"location":"man/Expr_repeat_by/#description","title":"Description","text":"<p>Repeat the elements in this Series as specified in the given expression. The repeated elements are expanded into a <code>List</code>.</p>"},{"location":"man/Expr_repeat_by/#usage","title":"Usage","text":"<pre><code>Expr_repeat_by(by)\n</code></pre>"},{"location":"man/Expr_repeat_by/#arguments","title":"Arguments","text":"<code>by</code>  Expr that determines how often the values will be repeated. The column will be coerced to UInt32."},{"location":"man/Expr_repeat_by/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_repeat_by/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(\"x\", \"y\", \"z\"), n = c(0:2))\ndf$with_columns(repeated = pl$col(\"a\")$repeat_by(\"n\"))\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 n   \u2506 repeated   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---        \u2502\n#&gt; \u2502 str \u2506 i32 \u2506 list[str]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 x   \u2506 0   \u2506 []         \u2502\n#&gt; \u2502 y   \u2506 1   \u2506 [\"y\"]      \u2502\n#&gt; \u2502 z   \u2506 2   \u2506 [\"z\", \"z\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_replace/","title":"Replace values by different values","text":"<p>Source code</p>"},{"location":"man/Expr_replace/#description","title":"Description","text":"<p>This allows one to recode values in a column.</p>"},{"location":"man/Expr_replace/#usage","title":"Usage","text":"<pre><code>Expr_replace(old, new, default = NULL, return_dtype = NULL)\n</code></pre>"},{"location":"man/Expr_replace/#arguments","title":"Arguments","text":"<code>old</code>   Can be several things:  <ul> <li>  a vector indicating the values to recode;  </li> <li>  if <code>new</code> is missing, this can be a named list e.g <code>list(old = \u201cnew\u201d)</code> where the names are the old values and the values are the replacements. Note that if old values are numeric, the names must be wrapped in backticks;  </li> <li>  an Expr  </li> </ul> <code>new</code>  Either a scalar, a vector of same length as <code>old</code> or an Expr. If missing, <code>old</code> must be a named list.  <code>default</code>  The default replacement if the value is not in <code>old</code>. Can be an Expr. If <code>NULL</code> (default), then the value doesn\u2019t change.  <code>return_dtype</code>  The data type of the resulting expression. If set to <code>NULL</code> (default), the data type is determined automatically based on the other inputs."},{"location":"man/Expr_replace/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_replace/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(1, 2, 2, 3))\n\n# \"old\" and \"new\" can take either scalars or vectors of same length\ndf$with_columns(replaced = pl$col(\"a\")$replace(2, 100))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1.0      \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 3.0 \u2506 3.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(replaced = pl$col(\"a\")$replace(c(2, 3), c(100, 200)))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1.0      \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 3.0 \u2506 200.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># \"old\" can be a named list where names are values to replace, and values are\n# the replacements\nmapping = list(`2` = 100, `3` = 200)\ndf$with_columns(replaced = pl$col(\"a\")$replace(mapping, default = -1))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 -1.0     \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 2.0 \u2506 100.0    \u2502\n#&gt; \u2502 3.0 \u2506 200.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df = pl$DataFrame(a = c(\"x\", \"y\", \"z\"))\nmapping = list(x = 1, y = 2, z = 3)\ndf$with_columns(replaced = pl$col(\"a\")$replace(mapping))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 str \u2506 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 x   \u2506 1.0      \u2502\n#&gt; \u2502 y   \u2506 2.0      \u2502\n#&gt; \u2502 z   \u2506 3.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># one can specify the data type to return instead of automatically inferring it\ndf$with_columns(replaced = pl$col(\"a\")$replace(mapping, return_dtype = pl$Int8))\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 str \u2506 i8       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 x   \u2506 1        \u2502\n#&gt; \u2502 y   \u2506 2        \u2502\n#&gt; \u2502 z   \u2506 3        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># \"old\", \"new\", and \"default\" can take Expr\ndf = pl$DataFrame(a = c(1, 2, 2, 3), b = c(1.5, 2.5, 5, 1))\ndf$with_columns(\n  replaced = pl$col(\"a\")$replace(\n    old = pl$col(\"a\")$max(),\n    new = pl$col(\"b\")$sum(),\n    default = pl$col(\"b\"),\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 replaced \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1.5 \u2506 1.5      \u2502\n#&gt; \u2502 2.0 \u2506 2.5 \u2506 2.5      \u2502\n#&gt; \u2502 2.0 \u2506 5.0 \u2506 5.0      \u2502\n#&gt; \u2502 3.0 \u2506 1.0 \u2506 10.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_reshape/","title":"Reshape","text":"<p>Source code</p>"},{"location":"man/Expr_reshape/#description","title":"Description","text":"<p>Reshape an Expr to a flat Series or a Series of Lists.</p>"},{"location":"man/Expr_reshape/#usage","title":"Usage","text":"<pre><code>Expr_reshape(dims)\n</code></pre>"},{"location":"man/Expr_reshape/#arguments","title":"Arguments","text":"<code>dims</code>  Numeric vec of the dimension sizes. If a -1 is used in any of the dimensions, that dimension is inferred."},{"location":"man/Expr_reshape/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_reshape/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(1:12)$reshape(c(3, 4)))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502               \u2502\n#&gt; \u2502 ---           \u2502\n#&gt; \u2502 list[i32]     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, \u2026 4]   \u2502\n#&gt; \u2502 [5, 6, \u2026 8]   \u2502\n#&gt; \u2502 [9, 10, \u2026 12] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$select(pl$lit(1:12)$reshape(c(3, -1)))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502               \u2502\n#&gt; \u2502 ---           \u2502\n#&gt; \u2502 list[i32]     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, \u2026 4]   \u2502\n#&gt; \u2502 [5, 6, \u2026 8]   \u2502\n#&gt; \u2502 [9, 10, \u2026 12] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_reverse/","title":"Reverse a variable","text":"<p>Source code</p>"},{"location":"man/Expr_reverse/#description","title":"Description","text":"<p>Reverse a variable</p>"},{"location":"man/Expr_reverse/#usage","title":"Usage","text":"<pre><code>Expr_reverse()\n</code></pre>"},{"location":"man/Expr_reverse/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_reverse/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(a = 1:5))$select(pl$col(\"a\")$reverse())\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rle/","title":"Get the lengths of runs of identical values","text":"<p>Source code</p>"},{"location":"man/Expr_rle/#description","title":"Description","text":"<p>Get the lengths of runs of identical values</p>"},{"location":"man/Expr_rle/#usage","title":"Usage","text":"<pre><code>Expr_rle()\n</code></pre>"},{"location":"man/Expr_rle/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rle/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(s = c(1, 1, 2, 1, NA, 1, 3, 3))\ndf$select(pl$col(\"s\")$rle())$unnest(\"s\")\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 lengths \u2506 values \u2502\n#&gt; \u2502 ---     \u2506 ---    \u2502\n#&gt; \u2502 i32     \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2       \u2506 1.0    \u2502\n#&gt; \u2502 1       \u2506 2.0    \u2502\n#&gt; \u2502 1       \u2506 1.0    \u2502\n#&gt; \u2502 1       \u2506 null   \u2502\n#&gt; \u2502 1       \u2506 1.0    \u2502\n#&gt; \u2502 2       \u2506 3.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rle_id/","title":"Map values to run IDs","text":"<p>Source code</p>"},{"location":"man/Expr_rle_id/#description","title":"Description","text":"<p>Similar to $rle(), but it maps each value to an ID corresponding to the run into which it falls. This is especially useful when you want to define groups by runs of identical values rather than the values themselves. Note that the ID is 0-indexed.</p>"},{"location":"man/Expr_rle_id/#usage","title":"Usage","text":"<pre><code>Expr_rle_id()\n</code></pre>"},{"location":"man/Expr_rle_id/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rle_id/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(1, 2, 1, 1, 1, 4))\ndf$with_columns(a_r = pl$col(\"a\")$rle_id())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 a_r \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 0   \u2502\n#&gt; \u2502 2.0 \u2506 1   \u2502\n#&gt; \u2502 1.0 \u2506 2   \u2502\n#&gt; \u2502 1.0 \u2506 2   \u2502\n#&gt; \u2502 1.0 \u2506 2   \u2502\n#&gt; \u2502 4.0 \u2506 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling/","title":"Create rolling groups based on a time or numeric column","text":"<p>Source code</p>"},{"location":"man/Expr_rolling/#description","title":"Description","text":"<p>If you have a time series <code>\\&lt;t_0, t_1, \u2026, t_n&gt;</code>, then by default the windows created will be:</p> <ul> <li>  (t_0 - period, t_0\\]  </li> <li>  (t_1 - period, t_1\\]  </li> <li>  \u2026  </li> <li>  (t_n - period, t_n\\]  </li> </ul> <p>whereas if you pass a non-default offset, then the windows will be:</p> <ul> <li>  (t_0 + offset, t_0 + offset + period\\]  </li> <li>  (t_1 + offset, t_1 + offset + period\\]  </li> <li>  \u2026  </li> <li>  (t_n + offset, t_n + offset + period\\]  </li> </ul>"},{"location":"man/Expr_rolling/#usage","title":"Usage","text":"<pre><code>Expr_rolling(\n  index_column,\n  period,\n  offset = NULL,\n  closed = \"right\",\n  check_sorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling/#arguments","title":"Arguments","text":"<code>index_column</code>  Column used to group based on the time window. Often of type Date/Datetime. This column must be sorted in ascending order. If this column represents an index, it has to be either Int32 or Int64. Note that Int32 gets temporarily cast to Int64, so if performance matters use an Int64 column.  <code>period</code>  Length of the window, must be non-negative.  <code>offset</code>  Offset of the window. Default is <code>-period</code>.  <code>closed</code>  Define which sides of the temporal interval are closed (inclusive). This can be either <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code> or <code>\u201cnone\u201d</code>.  <code>check_sorted</code>  Check whether data is actually sorted. Checking it is expensive so if you are sure the data within the <code>index_column</code> is sorted, you can set this to <code>FALSE</code> but note that if the data actually is unsorted, it will lead to incorrect output."},{"location":"man/Expr_rolling/#details","title":"Details","text":"<p>The period and offset arguments are created either from a timedelta, or by using the following string language:</p> <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 calendar day)  </li> <li>  1w (1 calendar week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1q (1 calendar quarter)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count)  </li> </ul> <p>Or combine them: \"3d12h4m25s\" # 3 days, 12 hours, 4 minutes, and 25 seconds</p> <p>By \"calendar day\", we mean the corresponding time on the next day (which may not be 24 hours, due to daylight savings). Similarly for \"calendar week\", \"calendar month\", \"calendar quarter\", and \"calendar year\".</p> <p>In case of a rolling operation on an integer column, the windows are defined by:</p> <ul> <li>  \"1i\" \\# length 1  </li> <li>  \"10i\" \\# length 10  </li> </ul>"},{"location":"man/Expr_rolling/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create a DataFrame with a Datetime column and an f64 column\ndates = c(\n  \"2020-01-01 13:45:48\", \"2020-01-01 16:42:13\", \"2020-01-01 16:45:09\",\n  \"2020-01-02 18:12:48\", \"2020-01-03 19:45:32\", \"2020-01-08 23:16:43\"\n)\n\ndf = pl$DataFrame(dt = dates, a = c(3, 7, 5, 9, 2, 1))$\n  with_columns(\n  pl$col(\"dt\")$str$strptime(pl$Datetime(tu = \"us\"), format = \"%Y-%m-%d %H:%M:%S\")$set_sorted()\n)\n\ndf$with_columns(\n  sum_a = pl$sum(\"a\")$rolling(index_column = \"dt\", period = \"2d\"),\n  min_a = pl$min(\"a\")$rolling(index_column = \"dt\", period = \"2d\"),\n  max_a = pl$max(\"a\")$rolling(index_column = \"dt\", period = \"2d\")\n)\n</code></pre> <pre><code>#&gt; shape: (6, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dt                  \u2506 a   \u2506 sum_a \u2506 min_a \u2506 max_a \u2502\n#&gt; \u2502 ---                 \u2506 --- \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 f64 \u2506 f64   \u2506 f64   \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 13:45:48 \u2506 3.0 \u2506 3.0   \u2506 3.0   \u2506 3.0   \u2502\n#&gt; \u2502 2020-01-01 16:42:13 \u2506 7.0 \u2506 10.0  \u2506 3.0   \u2506 7.0   \u2502\n#&gt; \u2502 2020-01-01 16:45:09 \u2506 5.0 \u2506 15.0  \u2506 3.0   \u2506 7.0   \u2502\n#&gt; \u2502 2020-01-02 18:12:48 \u2506 9.0 \u2506 24.0  \u2506 3.0   \u2506 9.0   \u2502\n#&gt; \u2502 2020-01-03 19:45:32 \u2506 2.0 \u2506 11.0  \u2506 2.0   \u2506 9.0   \u2502\n#&gt; \u2502 2020-01-08 23:16:43 \u2506 1.0 \u2506 1.0   \u2506 1.0   \u2506 1.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># we can use \"offset\" to change the start of the window period. Here, with\n# offset = \"1d\", we start the window one day after the value in \"dt\", and\n# then we add a 2-day window relative to the window start.\ndf$with_columns(\n  sum_a_offset1 = pl$sum(\"a\")$rolling(index_column = \"dt\", period = \"2d\", offset = \"1d\")\n)\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 dt                  \u2506 a   \u2506 sum_a_offset1 \u2502\n#&gt; \u2502 ---                 \u2506 --- \u2506 ---           \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 f64 \u2506 f64           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 13:45:48 \u2506 3.0 \u2506 11.0          \u2502\n#&gt; \u2502 2020-01-01 16:42:13 \u2506 7.0 \u2506 11.0          \u2502\n#&gt; \u2502 2020-01-01 16:45:09 \u2506 5.0 \u2506 11.0          \u2502\n#&gt; \u2502 2020-01-02 18:12:48 \u2506 9.0 \u2506 2.0           \u2502\n#&gt; \u2502 2020-01-03 19:45:32 \u2506 2.0 \u2506 null          \u2502\n#&gt; \u2502 2020-01-08 23:16:43 \u2506 1.0 \u2506 null          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_max/","title":"Rolling maximum","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_max/#description","title":"Description","text":"<p>Compute the rolling (= moving) max over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_max/#usage","title":"Usage","text":"<pre><code>Expr_rolling_max(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = c(\"left\", \"right\", \"both\", \"none\"),\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_max/#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  String, one of <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>. Defines whether the temporal window interval is closed or not.  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed). Experimental."},{"location":"man/Expr_rolling_max/#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_max/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_max = pl$col(\"a\")$rolling_max(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_max \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null     \u2502\n#&gt; \u2502 3.0 \u2506 3.0      \u2502\n#&gt; \u2502 2.0 \u2506 3.0      \u2502\n#&gt; \u2502 4.0 \u2506 4.0      \u2502\n#&gt; \u2502 5.0 \u2506 5.0      \u2502\n#&gt; \u2502 6.0 \u2506 6.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_mean/","title":"Rolling mean","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_mean/#description","title":"Description","text":"<p>Compute the rolling (= moving) mean over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_mean/#usage","title":"Usage","text":"<pre><code>Expr_rolling_mean(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = c(\"left\", \"right\", \"both\", \"none\"),\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_mean/#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  String, one of <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>. Defines whether the temporal window interval is closed or not.  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed). Experimental."},{"location":"man/Expr_rolling_mean/#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_mean/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_mean/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_mean = pl$col(\"a\")$rolling_mean(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_mean \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null      \u2502\n#&gt; \u2502 3.0 \u2506 2.0       \u2502\n#&gt; \u2502 2.0 \u2506 2.5       \u2502\n#&gt; \u2502 4.0 \u2506 3.0       \u2502\n#&gt; \u2502 5.0 \u2506 4.5       \u2502\n#&gt; \u2502 6.0 \u2506 5.5       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_median/","title":"Rolling median","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_median/#description","title":"Description","text":"<p>Compute the rolling (= moving) median over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_median/#usage","title":"Usage","text":"<pre><code>Expr_rolling_median(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = c(\"left\", \"right\", \"both\", \"none\"),\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_median/#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  String, one of <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>. Defines whether the temporal window interval is closed or not.  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed). Experimental."},{"location":"man/Expr_rolling_median/#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_median/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_median/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_median = pl$col(\"a\")$rolling_median(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_median \u2502\n#&gt; \u2502 --- \u2506 ---         \u2502\n#&gt; \u2502 f64 \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null        \u2502\n#&gt; \u2502 3.0 \u2506 2.0         \u2502\n#&gt; \u2502 2.0 \u2506 2.5         \u2502\n#&gt; \u2502 4.0 \u2506 3.0         \u2502\n#&gt; \u2502 5.0 \u2506 4.5         \u2502\n#&gt; \u2502 6.0 \u2506 5.5         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_min/","title":"Rolling minimum","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_min/#description","title":"Description","text":"<p>Compute the rolling (= moving) min over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_min/#usage","title":"Usage","text":"<pre><code>Expr_rolling_min(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = c(\"left\", \"right\", \"both\", \"none\"),\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_min/#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  String, one of <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>. Defines whether the temporal window interval is closed or not.  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed). Experimental."},{"location":"man/Expr_rolling_min/#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_min/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_min = pl$col(\"a\")$rolling_min(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_min \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null     \u2502\n#&gt; \u2502 3.0 \u2506 1.0      \u2502\n#&gt; \u2502 2.0 \u2506 2.0      \u2502\n#&gt; \u2502 4.0 \u2506 2.0      \u2502\n#&gt; \u2502 5.0 \u2506 4.0      \u2502\n#&gt; \u2502 6.0 \u2506 5.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_quantile/","title":"Rolling quantile","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_quantile/#description","title":"Description","text":"<p>Compute the rolling (= moving) quantile over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_quantile/#usage","title":"Usage","text":"<pre><code>Expr_rolling_quantile(\n  quantile,\n  interpolation = \"nearest\",\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = c(\"left\", \"right\", \"both\", \"none\"),\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_quantile/#arguments","title":"Arguments","text":"<code>quantile</code>  Quantile between 0 and 1.  <code>interpolation</code>  String, one of <code>\u201cnearest\u201d</code>, <code>\u201chigher\u201d</code>, <code>\u201clower\u201d</code>, <code>\u201cmidpoint\u201d</code>, <code>\u201clinear\u201d</code>.  <code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  String, one of <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>. Defines whether the temporal window interval is closed or not.  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed). Experimental."},{"location":"man/Expr_rolling_quantile/#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_quantile/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_quantile/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_quant = pl$col(\"a\")$rolling_quantile(0.3, window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_quant \u2502\n#&gt; \u2502 --- \u2506 ---        \u2502\n#&gt; \u2502 f64 \u2506 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null       \u2502\n#&gt; \u2502 3.0 \u2506 1.0        \u2502\n#&gt; \u2502 2.0 \u2506 2.0        \u2502\n#&gt; \u2502 4.0 \u2506 2.0        \u2502\n#&gt; \u2502 5.0 \u2506 4.0        \u2502\n#&gt; \u2502 6.0 \u2506 5.0        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_skew/","title":"Rolling skew","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_skew/#description","title":"Description","text":"<p>Compute the rolling (= moving) skewness over the values in this array. A window of length <code>window_size</code> will traverse the array.</p>"},{"location":"man/Expr_rolling_skew/#usage","title":"Usage","text":"<pre><code>Expr_rolling_skew(window_size, bias = TRUE)\n</code></pre>"},{"location":"man/Expr_rolling_skew/#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>bias</code>  If <code>FALSE</code>, the calculations are corrected for statistical bias."},{"location":"man/Expr_rolling_skew/#details","title":"Details","text":"<p>For normally distributed data, the skewness should be about zero. For uni-modal continuous distributions, a skewness value greater than zero means that there is more weight in the right tail of the distribution.</p>"},{"location":"man/Expr_rolling_skew/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_skew/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_skew = pl$col(\"a\")$rolling_skew(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_skew \u2502\n#&gt; \u2502 --- \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null      \u2502\n#&gt; \u2502 3.0 \u2506 0.0       \u2502\n#&gt; \u2502 2.0 \u2506 0.0       \u2502\n#&gt; \u2502 4.0 \u2506 0.0       \u2502\n#&gt; \u2502 5.0 \u2506 0.0       \u2502\n#&gt; \u2502 6.0 \u2506 0.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_std/","title":"Rolling standard deviation","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_std/#description","title":"Description","text":"<p>Compute the rolling (= moving) standard deviation over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_std/#usage","title":"Usage","text":"<pre><code>Expr_rolling_std(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = c(\"left\", \"right\", \"both\", \"none\"),\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_std/#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  String, one of <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>. Defines whether the temporal window interval is closed or not.  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed). Experimental."},{"location":"man/Expr_rolling_std/#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_std/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_std/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_std = pl$col(\"a\")$rolling_std(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_std \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null     \u2502\n#&gt; \u2502 3.0 \u2506 1.414214 \u2502\n#&gt; \u2502 2.0 \u2506 0.707107 \u2502\n#&gt; \u2502 4.0 \u2506 1.414214 \u2502\n#&gt; \u2502 5.0 \u2506 0.707107 \u2502\n#&gt; \u2502 6.0 \u2506 0.707107 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_sum/","title":"Rolling sum","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_sum/#description","title":"Description","text":"<p>Compute the rolling (= moving) sum over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_sum/#usage","title":"Usage","text":"<pre><code>Expr_rolling_sum(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = c(\"left\", \"right\", \"both\", \"none\"),\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_sum/#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  String, one of <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>. Defines whether the temporal window interval is closed or not.  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed). Experimental."},{"location":"man/Expr_rolling_sum/#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_sum/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_sum/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_sum = pl$col(\"a\")$rolling_sum(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_sum \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null     \u2502\n#&gt; \u2502 3.0 \u2506 4.0      \u2502\n#&gt; \u2502 2.0 \u2506 5.0      \u2502\n#&gt; \u2502 4.0 \u2506 6.0      \u2502\n#&gt; \u2502 5.0 \u2506 9.0      \u2502\n#&gt; \u2502 6.0 \u2506 11.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_rolling_var/","title":"Rolling variance","text":"<p>Source code</p>"},{"location":"man/Expr_rolling_var/#description","title":"Description","text":"<p>Compute the rolling (= moving) variance over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector.</p>"},{"location":"man/Expr_rolling_var/#usage","title":"Usage","text":"<pre><code>Expr_rolling_var(\n  window_size,\n  weights = NULL,\n  min_periods = NULL,\n  center = FALSE,\n  by = NULL,\n  closed = c(\"left\", \"right\", \"both\", \"none\"),\n  warn_if_unsorted = TRUE\n)\n</code></pre>"},{"location":"man/Expr_rolling_var/#arguments","title":"Arguments","text":"<code>window_size</code>   The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:  <ul> <li>  1ns (1 nanosecond)  </li> <li>  1us (1 microsecond)  </li> <li>  1ms (1 millisecond)  </li> <li>  1s (1 second)  </li> <li>  1m (1 minute)  </li> <li>  1h (1 hour)  </li> <li>  1d (1 day)  </li> <li>  1w (1 week)  </li> <li>  1mo (1 calendar month)  </li> <li>  1y (1 calendar year)  </li> <li>  1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.  </li> </ul> <code>weights</code>  An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.  <code>min_periods</code>  The number of values in the window that should be non-null before computing a result. If <code>NULL</code>, it will be set equal to window size.  <code>center</code>  Set the labels at the center of the window  <code>by</code>  If the <code>window_size</code> is temporal for instance <code>\u201c5h\u201d</code> or <code>\u201c3s\u201d</code>, you must set the column that will be used to determine the windows. This column must be of DataType Date or DateTime.  <code>closed</code>  String, one of <code>\u201cleft\u201d</code>, <code>\u201cright\u201d</code>, <code>\u201cboth\u201d</code>, <code>\u201cnone\u201d</code>. Defines whether the temporal window interval is closed or not.  <code>warn_if_unsorted</code>  Warn if data is not known to be sorted by <code>by</code> column (if passed). Experimental."},{"location":"man/Expr_rolling_var/#details","title":"Details","text":"<p>If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>$rolling()</code> this method can cache the window size computation.</p>"},{"location":"man/Expr_rolling_var/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_rolling_var/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 3, 2, 4, 5, 6))$\n  with_columns(roll_var = pl$col(\"a\")$rolling_var(window_size = 2))\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 roll_var \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 null     \u2502\n#&gt; \u2502 3.0 \u2506 2.0      \u2502\n#&gt; \u2502 2.0 \u2506 0.5      \u2502\n#&gt; \u2502 4.0 \u2506 2.0      \u2502\n#&gt; \u2502 5.0 \u2506 0.5      \u2502\n#&gt; \u2502 6.0 \u2506 0.5      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_round/","title":"Round","text":"<p>Source code</p>"},{"location":"man/Expr_round/#description","title":"Description","text":"<p>Round underlying floating point data by <code>decimals</code> digits.</p>"},{"location":"man/Expr_round/#usage","title":"Usage","text":"<pre><code>Expr_round(decimals)\n</code></pre>"},{"location":"man/Expr_round/#arguments","title":"Arguments","text":"<code>decimals</code>  Number of decimals to round by."},{"location":"man/Expr_round/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_round/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0.33, 0.5, 1.02, 1.5, NaN, NA, Inf, -Inf))$with_columns(\n  round = pl$col(\"a\")$round(1)\n)\n</code></pre> <pre><code>#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 round \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.33 \u2506 0.3   \u2502\n#&gt; \u2502 0.5  \u2506 0.5   \u2502\n#&gt; \u2502 1.02 \u2506 1.0   \u2502\n#&gt; \u2502 1.5  \u2506 1.5   \u2502\n#&gt; \u2502 NaN  \u2506 NaN   \u2502\n#&gt; \u2502 null \u2506 null  \u2502\n#&gt; \u2502 inf  \u2506 inf   \u2502\n#&gt; \u2502 -inf \u2506 -inf  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sample/","title":"Take a sample","text":"<p>Source code</p>"},{"location":"man/Expr_sample/#description","title":"Description","text":"<p>Take a sample</p>"},{"location":"man/Expr_sample/#usage","title":"Usage","text":"<pre><code>Expr_sample(\n  frac = NULL,\n  with_replacement = TRUE,\n  shuffle = FALSE,\n  seed = NULL,\n  n = NULL\n)\n</code></pre>"},{"location":"man/Expr_sample/#arguments","title":"Arguments","text":"<code>frac</code>  Fraction of items to return (can be higher than 1). Cannot be used with <code>n</code>.  <code>with_replacement</code>  If <code>TRUE</code> (default), allow values to be sampled more than once.  <code>shuffle</code>  Shuffle the order of sampled data points (implicitly <code>TRUE</code> if <code>with_replacement = TRUE</code>).  <code>seed</code>  numeric value of 0 to 2^52 Seed for the random number generator. If <code>NULL</code> (default), a random seed value between 0 and 10000 is picked.  <code>n</code>  Number of items to return. Cannot be used with <code>frac</code>."},{"location":"man/Expr_sample/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sample/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = 1:4)\ndf$select(pl$col(\"a\")$sample(frac = 1, with_replacement = TRUE, seed = 1L))\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"a\")$sample(frac = 2, with_replacement = TRUE, seed = 1L))\n</code></pre> <pre><code>#&gt; shape: (8, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$col(\"a\")$sample(n = 2, with_replacement = FALSE, seed = 1L))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_search_sorted/","title":"Where to inject element(s) to maintain sorting","text":"<p>Source code</p>"},{"location":"man/Expr_search_sorted/#description","title":"Description","text":"<p>Find the index in self where the element should be inserted so that it doesn\u2019t break sortedness.</p>"},{"location":"man/Expr_search_sorted/#usage","title":"Usage","text":"<pre><code>Expr_search_sorted(element)\n</code></pre>"},{"location":"man/Expr_search_sorted/#arguments","title":"Arguments","text":"<code>element</code>  Expr or scalar value."},{"location":"man/Expr_search_sorted/#details","title":"Details","text":"<p>This function looks up where to insert element to keep self column sorted. It is assumed the self column is already sorted in ascending order (otherwise this leads to wrong results).</p>"},{"location":"man/Expr_search_sorted/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_search_sorted/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(a = c(1, 3, 4, 4, 6))\ndf\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 4.0 \u2502\n#&gt; \u2502 4.0 \u2502\n#&gt; \u2502 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># in which row should 5 be inserted in order to not break the sort?\n# (value is 0-indexed)\ndf$select(pl$col(\"a\")$search_sorted(5))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_set_sorted/","title":"Flag an Expr as \"sorted\"","text":"<p>Source code</p>"},{"location":"man/Expr_set_sorted/#description","title":"Description","text":"<p>This enables downstream code to use fast paths for sorted arrays. WARNING: this doesn\u2019t check whether the data is actually sorted, you have to ensure of that yourself.</p>"},{"location":"man/Expr_set_sorted/#usage","title":"Usage","text":"<pre><code>Expr_set_sorted(descending = FALSE)\n</code></pre>"},{"location":"man/Expr_set_sorted/#arguments","title":"Arguments","text":"<code>descending</code>  Sort the columns in descending order."},{"location":"man/Expr_set_sorted/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_set_sorted/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# correct use flag something correctly as ascendingly sorted\ns = pl$select(pl$lit(1:4)$set_sorted()$alias(\"a\"))$get_column(\"a\")\ns$flags\n</code></pre> <pre><code>#&gt; $SORTED_ASC\n#&gt; [1] TRUE\n#&gt; \n#&gt; $SORTED_DESC\n#&gt; [1] FALSE\n</code></pre> <pre><code># incorrect use, flag something as not sorted ascendingly\ns2 = pl$select(pl$lit(c(1, 3, 2, 4))$set_sorted()$alias(\"a\"))$get_column(\"a\")\ns2$sort()\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: 'a' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  3.0\n#&gt;  2.0\n#&gt;  4.0\n#&gt; ]\n</code></pre> <pre><code>s2$flags # returns TRUE while it's not actually sorted\n</code></pre> <pre><code>#&gt; $SORTED_ASC\n#&gt; [1] TRUE\n#&gt; \n#&gt; $SORTED_DESC\n#&gt; [1] FALSE\n</code></pre>"},{"location":"man/Expr_shift/","title":"Shift values","text":"<p>Source code</p>"},{"location":"man/Expr_shift/#description","title":"Description","text":"<p>Shift values</p>"},{"location":"man/Expr_shift/#usage","title":"Usage","text":"<pre><code>Expr_shift(periods = 1)\n</code></pre>"},{"location":"man/Expr_shift/#arguments","title":"Arguments","text":"<code>periods</code>  Number of periods to shift, may be negative."},{"location":"man/Expr_shift/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_shift/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 2, 4, 5, 8))$\n  with_columns(\n  pl$col(\"a\")$shift(-2)$alias(\"shift-2\"),\n  pl$col(\"a\")$shift(2)$alias(\"shift+2\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 shift-2 \u2506 shift+2 \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 f64 \u2506 f64     \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 4.0     \u2506 null    \u2502\n#&gt; \u2502 2.0 \u2506 5.0     \u2506 null    \u2502\n#&gt; \u2502 4.0 \u2506 8.0     \u2506 1.0     \u2502\n#&gt; \u2502 5.0 \u2506 null    \u2506 2.0     \u2502\n#&gt; \u2502 8.0 \u2506 null    \u2506 4.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_shift_and_fill/","title":"Shift and fill values","text":"<p>Source code</p>"},{"location":"man/Expr_shift_and_fill/#description","title":"Description","text":"<p>Shift the values by a given period and fill the resulting null values.</p>"},{"location":"man/Expr_shift_and_fill/#usage","title":"Usage","text":"<pre><code>Expr_shift_and_fill(periods, fill_value)\n</code></pre>"},{"location":"man/Expr_shift_and_fill/#arguments","title":"Arguments","text":"<code>periods</code>  Number of periods to shift, may be negative.  <code>fill_value</code>  Fill null values with the result of this expression."},{"location":"man/Expr_shift_and_fill/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_shift_and_fill/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(1, 2, 4, 5, 8))$\n  with_columns(\n  pl$col(\"a\")$shift_and_fill(-2, fill_value = 42)$alias(\"shift-2\"),\n  pl$col(\"a\")$shift_and_fill(2, fill_value = pl$col(\"a\") / 2)$alias(\"shift+2\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 shift-2 \u2506 shift+2 \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 f64 \u2506 f64     \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 4.0     \u2506 0.5     \u2502\n#&gt; \u2502 2.0 \u2506 5.0     \u2506 0.5     \u2502\n#&gt; \u2502 4.0 \u2506 8.0     \u2506 1.0     \u2502\n#&gt; \u2502 5.0 \u2506 42.0    \u2506 2.0     \u2502\n#&gt; \u2502 8.0 \u2506 42.0    \u2506 4.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_shrink_dtype/","title":"Shrink numeric columns to the minimal required datatype","text":"<p>Source code</p>"},{"location":"man/Expr_shrink_dtype/#description","title":"Description","text":"<p>Shrink to the dtype needed to fit the extrema of this Series. This can be used to reduce memory pressure.</p>"},{"location":"man/Expr_shrink_dtype/#usage","title":"Usage","text":"<pre><code>Expr_shrink_dtype\n</code></pre>"},{"location":"man/Expr_shrink_dtype/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p>"},{"location":"man/Expr_shrink_dtype/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_shrink_dtype/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = 1:3,\n  b = c(1, 2, 3)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1.0 \u2502\n#&gt; \u2502 2   \u2506 2.0 \u2502\n#&gt; \u2502 3   \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(pl$all()$shrink_dtype()$name$suffix(\"_shrunk\"))\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 a_shrunk \u2506 b_shrunk \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 i32 \u2506 f64 \u2506 i8       \u2506 f32      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1.0 \u2506 1        \u2506 1.0      \u2502\n#&gt; \u2502 2   \u2506 2.0 \u2506 2        \u2506 2.0      \u2502\n#&gt; \u2502 3   \u2506 3.0 \u2506 3        \u2506 3.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_shuffle/","title":"Shuffle values","text":"<p>Source code</p>"},{"location":"man/Expr_shuffle/#description","title":"Description","text":"<p>Shuffle values</p>"},{"location":"man/Expr_shuffle/#usage","title":"Usage","text":"<pre><code>Expr_shuffle(seed = NULL)\n</code></pre>"},{"location":"man/Expr_shuffle/#arguments","title":"Arguments","text":"<code>seed</code>  numeric value of 0 to 2^52 Seed for the random number generator. If <code>NULL</code> (default), a random seed value between 0 and 10000 is picked."},{"location":"man/Expr_shuffle/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_shuffle/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = 1:4)$with_columns(shuff = pl$col(\"a\")$shuffle(seed = 1))\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 shuff \u2502\n#&gt; \u2502 --- \u2506 ---   \u2502\n#&gt; \u2502 i32 \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 2     \u2502\n#&gt; \u2502 2   \u2506 3     \u2502\n#&gt; \u2502 3   \u2506 4     \u2502\n#&gt; \u2502 4   \u2506 1     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sign/","title":"Get the sign of elements","text":"<p>Source code</p>"},{"location":"man/Expr_sign/#description","title":"Description","text":"<p>Get the sign of elements</p>"},{"location":"man/Expr_sign/#usage","title":"Usage","text":"<pre><code>Expr_sign\n</code></pre>"},{"location":"man/Expr_sign/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sign/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(.9, -3, -0, 0, 4, NA_real_))$\n  with_columns(sign = pl$col(\"a\")$sign())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 sign \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 i64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.9  \u2506 1    \u2502\n#&gt; \u2502 -3.0 \u2506 -1   \u2502\n#&gt; \u2502 -0.0 \u2506 0    \u2502\n#&gt; \u2502 0.0  \u2506 0    \u2502\n#&gt; \u2502 4.0  \u2506 1    \u2502\n#&gt; \u2502 null \u2506 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sin/","title":"Compute sine","text":"<p>Source code</p>"},{"location":"man/Expr_sin/#description","title":"Description","text":"<p>Compute sine</p>"},{"location":"man/Expr_sin/#usage","title":"Usage","text":"<pre><code>Expr_sin\n</code></pre>"},{"location":"man/Expr_sin/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sin/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0, pi / 2, pi, NA_real_))$\n  with_columns(sine = pl$col(\"a\")$sin())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 sine       \u2502\n#&gt; \u2502 ---      \u2506 ---        \u2502\n#&gt; \u2502 f64      \u2506 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0      \u2506 0.0        \u2502\n#&gt; \u2502 1.570796 \u2506 1.0        \u2502\n#&gt; \u2502 3.141593 \u2506 1.2246e-16 \u2502\n#&gt; \u2502 null     \u2506 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sinh/","title":"Compute hyperbolic sine","text":"<p>Source code</p>"},{"location":"man/Expr_sinh/#description","title":"Description","text":"<p>Compute hyperbolic sine</p>"},{"location":"man/Expr_sinh/#usage","title":"Usage","text":"<pre><code>Expr_sinh\n</code></pre>"},{"location":"man/Expr_sinh/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sinh/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, asinh(0.5), 0, 1, NA_real_))$\n  with_columns(sinh = pl$col(\"a\")$sinh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 sinh      \u2502\n#&gt; \u2502 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -1.175201 \u2502\n#&gt; \u2502 0.481212 \u2506 0.5       \u2502\n#&gt; \u2502 0.0      \u2506 0.0       \u2502\n#&gt; \u2502 1.0      \u2506 1.175201  \u2502\n#&gt; \u2502 null     \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_skew/","title":"Skewness","text":"<p>Source code</p>"},{"location":"man/Expr_skew/#description","title":"Description","text":"<p>Compute the sample skewness of a data set.</p>"},{"location":"man/Expr_skew/#usage","title":"Usage","text":"<pre><code>Expr_skew(bias = TRUE)\n</code></pre>"},{"location":"man/Expr_skew/#arguments","title":"Arguments","text":"<code>bias</code>  If <code>FALSE</code>, then the calculations are corrected for statistical bias."},{"location":"man/Expr_skew/#details","title":"Details","text":"<p>For normally distributed data, the skewness should be about zero. For uni-modal continuous distributions, a skewness value greater than zero means that there is more weight in the right tail of the distribution.</p>"},{"location":"man/Expr_skew/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_skew/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(list(a = c(1:3, 2:1)))\ndf$select(pl$col(\"a\")$skew())\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.343622 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_slice/","title":"Get a slice of an Expr","text":"<p>Source code</p>"},{"location":"man/Expr_slice/#description","title":"Description","text":"<p>Performing a slice of length 1 on a subset of columns will recycle this value in those columns but will not change the number of rows in the data. See examples.</p>"},{"location":"man/Expr_slice/#usage","title":"Usage","text":"<pre><code>Expr_slice(offset, length = NULL)\n</code></pre>"},{"location":"man/Expr_slice/#arguments","title":"Arguments","text":"<code>offset</code>  Numeric or expression, zero-indexed. Indicates where to start the slice. A negative value is one-indexed and starts from the end.  <code>length</code>  Maximum number of elements contained in the slice. Default is full data."},{"location":"man/Expr_slice/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_slice/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# as head\npl$DataFrame(list(a = 0:100))$select(\n  pl$all()$slice(0, 6)\n)\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># as tail\npl$DataFrame(list(a = 0:100))$select(\n  pl$all()$slice(-6, 6)\n)\n</code></pre> <pre><code>#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 95  \u2502\n#&gt; \u2502 96  \u2502\n#&gt; \u2502 97  \u2502\n#&gt; \u2502 98  \u2502\n#&gt; \u2502 99  \u2502\n#&gt; \u2502 100 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$DataFrame(list(a = 0:100))$select(\n  pl$all()$slice(80)\n)\n</code></pre> <pre><code>#&gt; shape: (21, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 80  \u2502\n#&gt; \u2502 81  \u2502\n#&gt; \u2502 82  \u2502\n#&gt; \u2502 83  \u2502\n#&gt; \u2502 \u2026   \u2502\n#&gt; \u2502 97  \u2502\n#&gt; \u2502 98  \u2502\n#&gt; \u2502 99  \u2502\n#&gt; \u2502 100 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># recycling\npl$DataFrame(mtcars)$with_columns(pl$col(\"mpg\")$slice(0, 1))\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 21.0 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 21.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.0 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sort/","title":"Sort an Expr","text":"<p>Source code</p>"},{"location":"man/Expr_sort/#description","title":"Description","text":"<p>Sort this column. If used in a groupby context, the groups are sorted.</p>"},{"location":"man/Expr_sort/#usage","title":"Usage","text":"<pre><code>Expr_sort(descending = FALSE, nulls_last = FALSE)\n</code></pre>"},{"location":"man/Expr_sort/#arguments","title":"Arguments","text":"<code>descending</code>  Sort in descending order. When sorting by multiple columns, can be specified per column by passing a vector of booleans.  <code>nulls_last</code>  If <code>TRUE</code>, place nulls values last."},{"location":"man/Expr_sort/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sort/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(6, 1, 0, NA, Inf, NaN))$\n  with_columns(sorted = pl$col(\"a\")$sort())\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 sorted \u2502\n#&gt; \u2502 ---  \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0  \u2506 null   \u2502\n#&gt; \u2502 1.0  \u2506 0.0    \u2502\n#&gt; \u2502 0.0  \u2506 1.0    \u2502\n#&gt; \u2502 null \u2506 6.0    \u2502\n#&gt; \u2502 inf  \u2506 inf    \u2502\n#&gt; \u2502 NaN  \u2506 NaN    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sort_by/","title":"Sort Expr by order of others","text":"<p>Source code</p>"},{"location":"man/Expr_sort_by/#description","title":"Description","text":"<p>Sort this column by the ordering of another column, or multiple other columns. If used in a groupby context, the groups are sorted.</p>"},{"location":"man/Expr_sort_by/#usage","title":"Usage","text":"<pre><code>Expr_sort_by(by, descending = FALSE)\n</code></pre>"},{"location":"man/Expr_sort_by/#arguments","title":"Arguments","text":"<code>by</code>  One expression or a list of expressions and/or strings (interpreted as column names).  <code>descending</code>  Sort in descending order. When sorting by multiple columns, can be specified per column by passing a vector of booleans."},{"location":"man/Expr_sort_by/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sort_by/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  group = c(\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"),\n  value1 = c(98, 1, 3, 2, 99, 100),\n  value2 = c(\"d\", \"f\", \"b\", \"e\", \"c\", \"a\")\n)\n\n# by one column/expression\ndf$with_columns(\n  sorted = pl$col(\"group\")$sort_by(\"value1\")\n)\n</code></pre> <pre><code>#&gt; shape: (6, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2506 value1 \u2506 value2 \u2506 sorted \u2502\n#&gt; \u2502 ---   \u2506 ---    \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 str   \u2506 f64    \u2506 str    \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a     \u2506 98.0   \u2506 d      \u2506 a      \u2502\n#&gt; \u2502 a     \u2506 1.0    \u2506 f      \u2506 b      \u2502\n#&gt; \u2502 a     \u2506 3.0    \u2506 b      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 2.0    \u2506 e      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 99.0   \u2506 c      \u2506 b      \u2502\n#&gt; \u2502 b     \u2506 100.0  \u2506 a      \u2506 b      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by two columns/expressions\ndf$with_columns(\n  sorted = pl$col(\"group\")$sort_by(\n    list(\"value2\", pl$col(\"value1\")),\n    descending = c(TRUE, FALSE)\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (6, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2506 value1 \u2506 value2 \u2506 sorted \u2502\n#&gt; \u2502 ---   \u2506 ---    \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 str   \u2506 f64    \u2506 str    \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a     \u2506 98.0   \u2506 d      \u2506 a      \u2502\n#&gt; \u2502 a     \u2506 1.0    \u2506 f      \u2506 b      \u2502\n#&gt; \u2502 a     \u2506 3.0    \u2506 b      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 2.0    \u2506 e      \u2506 b      \u2502\n#&gt; \u2502 b     \u2506 99.0   \u2506 c      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 100.0  \u2506 a      \u2506 b      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by some expression\ndf$with_columns(\n  sorted = pl$col(\"group\")$sort_by(pl$col(\"value1\")$sort(descending = TRUE))\n)\n</code></pre> <pre><code>#&gt; shape: (6, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2506 value1 \u2506 value2 \u2506 sorted \u2502\n#&gt; \u2502 ---   \u2506 ---    \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 str   \u2506 f64    \u2506 str    \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a     \u2506 98.0   \u2506 d      \u2506 b      \u2502\n#&gt; \u2502 a     \u2506 1.0    \u2506 f      \u2506 b      \u2502\n#&gt; \u2502 a     \u2506 3.0    \u2506 b      \u2506 b      \u2502\n#&gt; \u2502 b     \u2506 2.0    \u2506 e      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 99.0   \u2506 c      \u2506 a      \u2502\n#&gt; \u2502 b     \u2506 100.0  \u2506 a      \u2506 a      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sqrt/","title":"Compute the square root of the elements","text":"<p>Source code</p>"},{"location":"man/Expr_sqrt/#description","title":"Description","text":"<p>Compute the square root of the elements</p>"},{"location":"man/Expr_sqrt/#usage","title":"Usage","text":"<pre><code>Expr_sqrt()\n</code></pre>"},{"location":"man/Expr_sqrt/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sqrt/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = -1:3)$with_columns(a_sqrt = pl$col(\"a\")$sqrt())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 a_sqrt   \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 i32 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1  \u2506 NaN      \u2502\n#&gt; \u2502 0   \u2506 0.0      \u2502\n#&gt; \u2502 1   \u2506 1.0      \u2502\n#&gt; \u2502 2   \u2506 1.414214 \u2502\n#&gt; \u2502 3   \u2506 1.732051 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_std/","title":"Get standard deviation","text":"<p>Source code</p>"},{"location":"man/Expr_std/#description","title":"Description","text":"<p>Get standard deviation</p>"},{"location":"man/Expr_std/#usage","title":"Usage","text":"<pre><code>Expr_std(ddof = 1)\n</code></pre>"},{"location":"man/Expr_std/#arguments","title":"Arguments","text":"<code>ddof</code>  Degrees of freedom, must be an integer between 0 and 255"},{"location":"man/Expr_std/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_std/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(1:5)$std())\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502          \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.581139 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_sub/","title":"Substract two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_sub/#description","title":"Description","text":"<p>The RHS can either be an Expr or an object that can be converted to a literal (e.g an integer).</p>"},{"location":"man/Expr_sub/#usage","title":"Usage","text":"<pre><code>Expr_sub(other)\n\n# S3 method for class 'RPolarsExpr'\ne1 - e2\n</code></pre>"},{"location":"man/Expr_sub/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal  <code>e1</code>  Expr only  <code>e2</code>  Expr or anything that can be converted to a literal"},{"location":"man/Expr_sub/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sub/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(5) - 10\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) - (10.0)]\n</code></pre> <pre><code>pl$lit(5) - pl$lit(10)\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) - (10.0)]\n</code></pre> <pre><code>pl$lit(5)$sub(pl$lit(10))\n</code></pre> <pre><code>#&gt; polars Expr: [(5.0) - (10.0)]\n</code></pre> <pre><code>-pl$lit(5)\n</code></pre> <pre><code>#&gt; polars Expr: [(0) - (5.0)]\n</code></pre>"},{"location":"man/Expr_sum/","title":"Get sum value","text":"<p>Source code</p>"},{"location":"man/Expr_sum/#description","title":"Description","text":"<p>Get sum value</p>"},{"location":"man/Expr_sum/#usage","title":"Usage","text":"<pre><code>Expr_sum\n</code></pre>"},{"location":"man/Expr_sum/#details","title":"Details","text":"<p>The dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Expr_sum/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_sum/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = c(1L, NA, 2L))$\n  with_columns(sum = pl$col(\"x\")$sum())\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2506 sum \u2502\n#&gt; \u2502 ---  \u2506 --- \u2502\n#&gt; \u2502 i32  \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 3   \u2502\n#&gt; \u2502 null \u2506 3   \u2502\n#&gt; \u2502 2    \u2506 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_tail/","title":"Get the last n elements","text":"<p>Source code</p>"},{"location":"man/Expr_tail/#description","title":"Description","text":"<p>Get the last n elements</p>"},{"location":"man/Expr_tail/#usage","title":"Usage","text":"<pre><code>Expr_tail(n = 10)\n</code></pre>"},{"location":"man/Expr_tail/#arguments","title":"Arguments","text":"<code>n</code>  Number of elements to take."},{"location":"man/Expr_tail/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_tail/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(x = 1:11)$select(pl$col(\"x\")$tail(3))\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 9   \u2502\n#&gt; \u2502 10  \u2502\n#&gt; \u2502 11  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_tan/","title":"Compute tangent","text":"<p>Source code</p>"},{"location":"man/Expr_tan/#description","title":"Description","text":"<p>Compute tangent</p>"},{"location":"man/Expr_tan/#usage","title":"Usage","text":"<pre><code>Expr_tan\n</code></pre>"},{"location":"man/Expr_tan/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_tan/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(0, pi / 2, pi, NA_real_))$\n  with_columns(tangent = pl$col(\"a\")$tan())\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 tangent     \u2502\n#&gt; \u2502 ---      \u2506 ---         \u2502\n#&gt; \u2502 f64      \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0      \u2506 0.0         \u2502\n#&gt; \u2502 1.570796 \u2506 1.6331e16   \u2502\n#&gt; \u2502 3.141593 \u2506 -1.2246e-16 \u2502\n#&gt; \u2502 null     \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_tanh/","title":"Compute hyperbolic tangent","text":"<p>Source code</p>"},{"location":"man/Expr_tanh/#description","title":"Description","text":"<p>Compute hyperbolic tangent</p>"},{"location":"man/Expr_tanh/#usage","title":"Usage","text":"<pre><code>Expr_tanh\n</code></pre>"},{"location":"man/Expr_tanh/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_tanh/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(-1, atanh(0.5), 0, 1, NA_real_))$\n  with_columns(tanh = pl$col(\"a\")$tanh())\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2506 tanh      \u2502\n#&gt; \u2502 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0     \u2506 -0.761594 \u2502\n#&gt; \u2502 0.549306 \u2506 0.5       \u2502\n#&gt; \u2502 0.0      \u2506 0.0       \u2502\n#&gt; \u2502 1.0      \u2506 0.761594  \u2502\n#&gt; \u2502 null     \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_to_physical/","title":"Cast an Expr to its physical representation","text":"<p>Source code</p>"},{"location":"man/Expr_to_physical/#description","title":"Description","text":"<p>The following DataTypes will be converted:</p> <ul> <li>  Date -\\&gt; Int32  </li> <li>  Datetime -\\&gt; Int64  </li> <li>  Time -\\&gt; Int64  </li> <li>  Duration -\\&gt; Int64  </li> <li>  Categorical -\\&gt; UInt32  </li> <li>  List(inner) -\\&gt; List(physical of inner) Other data types will be left unchanged.  </li> </ul>"},{"location":"man/Expr_to_physical/#usage","title":"Usage","text":"<pre><code>Expr_to_physical\n</code></pre>"},{"location":"man/Expr_to_physical/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_to_physical/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  list(vals = c(\"a\", \"x\", NA, \"a\", \"b\"))\n)$with_columns(\n  pl$col(\"vals\")$cast(pl$Categorical),\n  pl$col(\"vals\")\n  $cast(pl$Categorical)\n  $to_physical()\n  $alias(\"vals_physical\")\n)\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 vals \u2506 vals_physical \u2502\n#&gt; \u2502 ---  \u2506 ---           \u2502\n#&gt; \u2502 cat  \u2506 u32           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a    \u2506 0             \u2502\n#&gt; \u2502 x    \u2506 1             \u2502\n#&gt; \u2502 null \u2506 null          \u2502\n#&gt; \u2502 a    \u2506 0             \u2502\n#&gt; \u2502 b    \u2506 2             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_to_r/","title":"Convert an Expr to R output","text":"<p>Source code</p>"},{"location":"man/Expr_to_r/#description","title":"Description","text":"<p>This is mostly useful to debug an expression. It evaluates the Expr in an empty DataFrame and return the first Series to R.</p>"},{"location":"man/Expr_to_r/#usage","title":"Usage","text":"<pre><code>Expr_to_r(df = NULL, i = 0)\n</code></pre>"},{"location":"man/Expr_to_r/#arguments","title":"Arguments","text":"<code>df</code>  If <code>NULL</code> (default), it evaluates the Expr in an empty DataFrame. Otherwise, provide a DataFrame that the Expr should be evaluated in.  <code>i</code>  Numeric column to extract. Default is zero (which gives the first column)."},{"location":"man/Expr_to_r/#value","title":"Value","text":"<p>R object</p>"},{"location":"man/Expr_to_r/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(1:3)$to_r()\n</code></pre> <pre><code>#&gt; [1] 1 2 3\n</code></pre>"},{"location":"man/Expr_to_series/","title":"Convert Literal to Series","text":"<p>Source code</p>"},{"location":"man/Expr_to_series/#description","title":"Description","text":"<p>Collect an expression based on literals into a Series.</p>"},{"location":"man/Expr_to_series/#usage","title":"Usage","text":"<pre><code>Expr_to_series()\n</code></pre>"},{"location":"man/Expr_to_series/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Expr_to_series/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(1:5)$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt;  5\n#&gt; ]\n</code></pre>"},{"location":"man/Expr_to_struct/","title":"Convert an Expr to a Struct","text":"<p>Source code</p>"},{"location":"man/Expr_to_struct/#description","title":"Description","text":"<p>Convert an Expr to a Struct</p>"},{"location":"man/Expr_to_struct/#usage","title":"Usage","text":"<pre><code>Expr_to_struct()\n</code></pre>"},{"location":"man/Expr_to_struct/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_to_struct/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris[, 3:5])$with_columns(\n  my_struct = pl$all()$to_struct()\n)\n</code></pre> <pre><code>#&gt; shape: (150, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Length \u2506 Petal.Width \u2506 Species   \u2506 my_struct             \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---       \u2506 ---                   \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 cat       \u2506 struct[3]             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2506 {1.4,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2506 {1.4,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 1.3          \u2506 0.2         \u2506 setosa    \u2506 {1.3,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 1.5          \u2506 0.2         \u2506 setosa    \u2506 {1.5,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026         \u2506 \u2026                     \u2502\n#&gt; \u2502 5.0          \u2506 1.9         \u2506 virginica \u2506 {5.0,1.9,\"virginica\"} \u2502\n#&gt; \u2502 5.2          \u2506 2.0         \u2506 virginica \u2506 {5.2,2.0,\"virginica\"} \u2502\n#&gt; \u2502 5.4          \u2506 2.3         \u2506 virginica \u2506 {5.4,2.3,\"virginica\"} \u2502\n#&gt; \u2502 5.1          \u2506 1.8         \u2506 virginica \u2506 {5.1,1.8,\"virginica\"} \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_top_k/","title":"Top k values","text":"<p>Source code</p>"},{"location":"man/Expr_top_k/#description","title":"Description","text":"<p>Return the <code>k</code> largest elements. This has time complexity: <code> O(n + k \\log{}n - ) </code></p>"},{"location":"man/Expr_top_k/#usage","title":"Usage","text":"<pre><code>Expr_top_k(k)\n</code></pre>"},{"location":"man/Expr_top_k/#arguments","title":"Arguments","text":"<code>k</code>  Number of top values to get"},{"location":"man/Expr_top_k/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_top_k/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(a = c(6, 1, 0, NA, Inf, NaN))$select(pl$col(\"a\")$top_k(5))\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 NaN \u2502\n#&gt; \u2502 inf \u2502\n#&gt; \u2502 6.0 \u2502\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 0.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_unique/","title":"Get unique values","text":"<p>Source code</p>"},{"location":"man/Expr_unique/#description","title":"Description","text":"<p>Get unique values</p>"},{"location":"man/Expr_unique/#usage","title":"Usage","text":"<pre><code>Expr_unique(maintain_order = FALSE)\n</code></pre>"},{"location":"man/Expr_unique/#arguments","title":"Arguments","text":"<code>maintain_order</code>  If <code>TRUE</code>, the unique values are returned in order of appearance."},{"location":"man/Expr_unique/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$select(pl$col(\"Species\")$unique())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species    \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 cat        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2502\n#&gt; \u2502 versicolor \u2502\n#&gt; \u2502 virginica  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_unique_counts/","title":"Count unique values","text":"<p>Source code</p>"},{"location":"man/Expr_unique_counts/#description","title":"Description","text":"<p>Return a count of the unique values in the order of appearance. This method differs from <code>$value_counts()</code> in that it does not return the values, only the counts and it might be faster.</p>"},{"location":"man/Expr_unique_counts/#usage","title":"Usage","text":"<pre><code>Expr_unique_counts\n</code></pre>"},{"location":"man/Expr_unique_counts/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_unique_counts/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$select(pl$col(\"Species\")$unique_counts())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 50      \u2502\n#&gt; \u2502 50      \u2502\n#&gt; \u2502 50      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_upper_bound/","title":"Find the upper bound of a DataType","text":"<p>Source code</p>"},{"location":"man/Expr_upper_bound/#description","title":"Description","text":"<p>Find the upper bound of a DataType</p>"},{"location":"man/Expr_upper_bound/#usage","title":"Usage","text":"<pre><code>Expr_upper_bound\n</code></pre>"},{"location":"man/Expr_upper_bound/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_upper_bound/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  x = c(1, 2, 3), y = -2:0,\n  schema = list(x = pl$Float64, y = pl$Int32)\n)$\n  select(pl$all()$upper_bound())\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y          \u2502\n#&gt; \u2502 --- \u2506 ---        \u2502\n#&gt; \u2502 f64 \u2506 i32        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 inf \u2506 2147483647 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_value_counts/","title":"Value counts","text":"<p>Source code</p>"},{"location":"man/Expr_value_counts/#description","title":"Description","text":"<p>Count all unique values and create a struct mapping value to count.</p>"},{"location":"man/Expr_value_counts/#usage","title":"Usage","text":"<pre><code>Expr_value_counts(sort = FALSE, parallel = FALSE)\n</code></pre>"},{"location":"man/Expr_value_counts/#arguments","title":"Arguments","text":"<code>sort</code>  Ensure the output is sorted from most values to least.  <code>parallel</code>  Better to turn this off in the aggregation context, as it can lead to contention."},{"location":"man/Expr_value_counts/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_value_counts/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(iris)$select(pl$col(\"Species\")$value_counts())\ndf\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species           \u2502\n#&gt; \u2502 ---               \u2502\n#&gt; \u2502 struct[2]         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"versicolor\",50} \u2502\n#&gt; \u2502 {\"virginica\",50}  \u2502\n#&gt; \u2502 {\"setosa\",50}     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$unnest()$to_data_frame() # recommended to unnest structs before converting to R\n</code></pre> <pre><code>#&gt;      Species count\n#&gt; 1 versicolor    50\n#&gt; 2  virginica    50\n#&gt; 3     setosa    50\n</code></pre>"},{"location":"man/Expr_var/","title":"Get variance","text":"<p>Source code</p>"},{"location":"man/Expr_var/#description","title":"Description","text":"<p>Get variance</p>"},{"location":"man/Expr_var/#usage","title":"Usage","text":"<pre><code>Expr_var(ddof = 1)\n</code></pre>"},{"location":"man/Expr_var/#arguments","title":"Arguments","text":"<code>ddof</code>  Degrees of freedom, must be an integer between 0 and 255"},{"location":"man/Expr_var/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_var/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(pl$lit(1:5)$var())\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2.5 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_when_then_otherwise/","title":"when-then-otherwise Expr","text":""},{"location":"man/Expr_when_then_otherwise/#description","title":"Description","text":"<p>Start a \u201cwhen, then, otherwise\u201d expression.</p>"},{"location":"man/Expr_when_then_otherwise/#usage","title":"Usage","text":"<pre><code>pl_when(...)\n\nWhen_then(statement)\n\nThen_when(...)\n\nThen_otherwise(statement)\n\nChainedWhen_then(statement)\n\nChainedThen_when(...)\n\nChainedThen_otherwise(statement)\n</code></pre>"},{"location":"man/Expr_when_then_otherwise/#arguments","title":"Arguments","text":"<code>\u2026</code>  Into Expr into a boolean mask to branch by.  <code>statement</code>  Into Expr value to insert in when() or otherwise(). Strings interpreted as column."},{"location":"man/Expr_when_then_otherwise/#details","title":"Details","text":"<p>when-then-otherwise is similar to R <code>ifelse()</code>. <code>pl$when(condition)</code> takes a condition as input this will an polars <code>\\&lt;Expr&gt;</code> which renderes to a Boolean column. Then it is chained with a <code>$then(statement)</code> when arg statement is an <code>\\&lt;Expr&gt;</code> which produces a column with values if idealy all Boolean are true. Then finally an <code>$otherwise(statement)</code> with values if false. <code>$otherwise()</code> returns an <code>Expr</code> which will mix the <code>$then()</code> statement with the <code>$otherwise()</code> as given by the when-condition.</p> <p>State-machine details below. The state machine consists of 4 classes <code>\\&lt;When&gt;</code>, <code>\\&lt;Then&gt;</code>, <code>\\&lt;ChainedWhen&gt;</code> &amp; <code>\\&lt;ChainedThen&gt;</code> and a starter function <code>pl$when()</code> and the final expression class a polars <code>\\&lt;Expr&gt;</code>.</p> <p><code>pl$when</code>return a <code>\\&lt;When&gt;</code> object. <code>pl$when(condition) -&gt; \\&lt;When&gt;</code></p> <p><code>\\&lt;When&gt;</code> has a single public method <code>$then(statement)</code> <code>\\&lt;When&gt;$then(statement) -&gt; \\&lt;Then&gt;</code></p>"},{"location":"man/Expr_when_then_otherwise/#the-follow-objects-and-methods-are","title":"the follow objects and methods are","text":"<p><code>\\&lt;Then&gt;$when(condition) -&gt; \\&lt;ChainedWhen&gt;</code> <code>\\&lt;Then&gt;$otherwise(statement) -&gt; \\&lt;Expr&gt;</code> <code>\\&lt;ChainedWhen&gt;$then(statement) -&gt; \\&lt;ChainedThen&gt;</code> <code>\\&lt;ChainedThen&gt;$when(condition) -&gt; \\&lt;Expr&gt;</code> <code>\\&lt;ChainedThen&gt;$otherwise(statement) -&gt; \\&lt;Expr&gt;</code></p> <p>This statemachine ensures only syntacticly allowed methods are availble at any specific place in a nested when-then-otherwise expression.</p>"},{"location":"man/Expr_when_then_otherwise/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_when_then_otherwise/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(foo = c(1, 3, 4), bar = c(3, 4, 0))\n\n# Add a column with the value 1, where column \"foo\" &gt; 2 and the value -1 where it isn\u2019t.\ndf$with_columns(\n  pl$when(pl$col(\"foo\") &gt; 2)$then(1)$otherwise(-1)$alias(\"val\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 val  \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3.0 \u2506 -1.0 \u2502\n#&gt; \u2502 3.0 \u2506 4.0 \u2506 1.0  \u2502\n#&gt; \u2502 4.0 \u2506 0.0 \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># With multiple when, thens chained:\ndf$with_columns(\n  pl$when(pl$col(\"foo\") &gt; 2)\n  $then(1)\n  $when(pl$col(\"bar\") &gt; 2)\n  $then(4)\n  $otherwise(-1)\n  $alias(\"val\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 val \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3.0 \u2506 4.0 \u2502\n#&gt; \u2502 3.0 \u2506 4.0 \u2506 1.0 \u2502\n#&gt; \u2502 4.0 \u2506 0.0 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Pass multiple predicates, each of which must be met:\ndf$with_columns(\n  val = pl$when(\n    pl$col(\"bar\") &gt; 0,\n    pl$col(\"foo\") %% 2 != 0\n  )\n  $then(99)\n  $otherwise(-1)\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 val  \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3.0 \u2506 99.0 \u2502\n#&gt; \u2502 3.0 \u2506 4.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0 \u2506 0.0 \u2506 -1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_where/","title":"Filter a single column.","text":"<p>Source code</p>"},{"location":"man/Expr_where/#description","title":"Description","text":"<p>This is an alias for <code>\\&lt;Expr&gt;$filter()</code>.</p>"},{"location":"man/Expr_where/#usage","title":"Usage","text":"<pre><code>Expr_where(predicate)\n</code></pre>"},{"location":"man/Expr_where/#arguments","title":"Arguments","text":"<code>predicate</code>  An Expr or something coercible to an Expr. Must return a boolean."},{"location":"man/Expr_where/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_where/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  group_col = c(\"g1\", \"g1\", \"g2\"),\n  b = c(1, 2, 3)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group_col \u2506 b   \u2502\n#&gt; \u2502 ---       \u2506 --- \u2502\n#&gt; \u2502 str       \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 g1        \u2506 1.0 \u2502\n#&gt; \u2502 g1        \u2506 2.0 \u2502\n#&gt; \u2502 g2        \u2506 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$group_by(\"group_col\")$agg(\n  lt = pl$col(\"b\")$where(pl$col(\"b\") &lt; 2),\n  gte = pl$col(\"b\")$where(pl$col(\"b\") &gt;= 2)\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group_col \u2506 lt        \u2506 gte       \u2502\n#&gt; \u2502 ---       \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 str       \u2506 list[f64] \u2506 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 g1        \u2506 [1.0]     \u2506 [2.0]     \u2502\n#&gt; \u2502 g2        \u2506 []        \u2506 [3.0]     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Expr_xor/","title":"Apply logical XOR on two expressions","text":"<p>Source code</p>"},{"location":"man/Expr_xor/#description","title":"Description","text":"<p>Combine two boolean expressions with XOR.</p>"},{"location":"man/Expr_xor/#usage","title":"Usage","text":"<pre><code>Expr_xor(other)\n</code></pre>"},{"location":"man/Expr_xor/#arguments","title":"Arguments","text":"<code>other</code>  Literal or object that can be converted to a literal"},{"location":"man/Expr_xor/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Expr_xor/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(TRUE)$xor(pl$lit(FALSE))\n</code></pre> <pre><code>#&gt; polars Expr: [(true) ^ (false)]\n</code></pre>"},{"location":"man/GroupBy_agg/","title":"Aggregate over a GroupBy","text":"<p>Source code</p>"},{"location":"man/GroupBy_agg/#description","title":"Description","text":"<p>Aggregate a DataFrame over a groupby</p>"},{"location":"man/GroupBy_agg/#usage","title":"Usage","text":"<pre><code>GroupBy_agg(...)\n</code></pre>"},{"location":"man/GroupBy_agg/#arguments","title":"Arguments","text":"<code>\u2026</code>  exprs to aggregate over. \u2026 args can also be passed wrapped in a list <code>$agg(list(e1,e2,e3))</code>"},{"location":"man/GroupBy_agg/#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_agg/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  foo = c(\"one\", \"two\", \"two\", \"one\", \"two\"),\n  bar = c(5, 3, 2, 4, 1)\n)$\n  group_by(\"foo\")$\n  agg(\n  pl$col(\"bar\")$sum()$name$suffix(\"_sum\"),\n  pl$col(\"bar\")$mean()$alias(\"bar_tail_sum\")\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar_sum \u2506 bar_tail_sum \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---          \u2502\n#&gt; \u2502 str \u2506 f64     \u2506 f64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 two \u2506 6.0     \u2506 2.0          \u2502\n#&gt; \u2502 one \u2506 9.0     \u2506 4.5          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_class/","title":"Operations on Polars grouped DataFrame","text":""},{"location":"man/GroupBy_class/#description","title":"Description","text":"<p>Operations on Polars grouped DataFrame</p>"},{"location":"man/GroupBy_class/#details","title":"Details","text":"<p>The GroupBy class in R, is just another interface on top of the DataFrame(R wrapper class) in rust polars. Groupby does not use the rust api for groupby+agg because the groupby-struct is a reference to a DataFrame and that reference will share lifetime with its parent DataFrame. There is no way to expose lifetime limited objects via extendr currently (might be quirky anyhow with R GC). Instead the inputs for the groupby are just stored on R side, until also agg is called. Which will end up in a self-owned DataFrame object and all is fine. groupby aggs are performed via the rust polars LazyGroupBy methods, see DataFrame.groupby_agg method.</p>"},{"location":"man/GroupBy_class/#value","title":"Value","text":"<p>not applicable</p>"},{"location":"man/GroupBy_first/","title":"GroupBy First","text":"<p>Source code</p>"},{"location":"man/GroupBy_first/#description","title":"Description","text":"<p>Reduce the groups to the first value.</p>"},{"location":"man/GroupBy_first/#usage","title":"Usage","text":"<pre><code>GroupBy_first()\n</code></pre>"},{"location":"man/GroupBy_first/#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_first/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$first()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c     \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Banana \u2506 4.0 \u2506 13.0 \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_last/","title":"GroupBy Last","text":"<p>Source code</p>"},{"location":"man/GroupBy_last/#description","title":"Description","text":"<p>Reduce the groups to the last value.</p>"},{"location":"man/GroupBy_last/#usage","title":"Usage","text":"<pre><code>GroupBy_last()\n</code></pre>"},{"location":"man/GroupBy_last/#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_last/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$last()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c     \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 3.0 \u2506 10.0 \u2506 false \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Banana \u2506 5.0 \u2506 14.0 \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_max/","title":"GroupBy Max","text":"<p>Source code</p>"},{"location":"man/GroupBy_max/#description","title":"Description","text":"<p>Reduce the groups to the maximum value.</p>"},{"location":"man/GroupBy_max/#usage","title":"Usage","text":"<pre><code>GroupBy_max()\n</code></pre>"},{"location":"man/GroupBy_max/#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$max()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c    \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 3.0 \u2506 10.0 \u2506 true \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true \u2502\n#&gt; \u2502 Banana \u2506 5.0 \u2506 14.0 \u2506 true \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_mean/","title":"GroupBy Mean","text":"<p>Source code</p>"},{"location":"man/GroupBy_mean/#description","title":"Description","text":"<p>Reduce the groups to the mean value.</p>"},{"location":"man/GroupBy_mean/#usage","title":"Usage","text":"<pre><code>GroupBy_mean()\n</code></pre>"},{"location":"man/GroupBy_mean/#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_mean/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$mean()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b        \u2506 c        \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 2.0 \u2506 4.833333 \u2506 0.666667 \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5      \u2506 1.0      \u2502\n#&gt; \u2502 Banana \u2506 4.5 \u2506 13.5     \u2506 0.5      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_median/","title":"GroupBy Median","text":"<p>Source code</p>"},{"location":"man/GroupBy_median/#description","title":"Description","text":"<p>Reduce the groups to the median value.</p>"},{"location":"man/GroupBy_median/#usage","title":"Usage","text":"<pre><code>GroupBy_median()\n</code></pre>"},{"location":"man/GroupBy_median/#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_median/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$median()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c    \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 2.0 \u2506 4.0  \u2506 null \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 null \u2502\n#&gt; \u2502 Banana \u2506 4.5 \u2506 13.5 \u2506 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_min/","title":"GroupBy Min","text":"<p>Source code</p>"},{"location":"man/GroupBy_min/#description","title":"Description","text":"<p>Reduce the groups to the minimum value.</p>"},{"location":"man/GroupBy_min/#usage","title":"Usage","text":"<pre><code>GroupBy_min()\n</code></pre>"},{"location":"man/GroupBy_min/#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$min()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c     \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0 \u2506 0.5  \u2506 false \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Banana \u2506 4.0 \u2506 13.0 \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_null_count/","title":"GroupBy null count","text":"<p>Source code</p>"},{"location":"man/GroupBy_null_count/#description","title":"Description","text":"<p>Create a new DataFrame that shows the null counts per column.</p>"},{"location":"man/GroupBy_null_count/#usage","title":"Usage","text":"<pre><code>GroupBy_null_count()\n</code></pre>"},{"location":"man/GroupBy_null_count/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/GroupBy_null_count/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nx = mtcars\nx[1:10, 3:5] = NA\npl$DataFrame(x)$group_by(\"cyl\")$null_count()\n</code></pre> <pre><code>#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg \u2506 disp \u2506 hp  \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2506 --- \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 u32 \u2506 u32  \u2506 u32 \u2506   \u2506 u32 \u2506 u32 \u2506 u32  \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 0   \u2506 5    \u2506 5   \u2506 \u2026 \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2502 4.0 \u2506 0   \u2506 3    \u2506 3   \u2506 \u2026 \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2502 8.0 \u2506 0   \u2506 2    \u2506 2   \u2506 \u2026 \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_quantile/","title":"Quantile","text":"<p>Source code</p>"},{"location":"man/GroupBy_quantile/#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to their quantile value.</p>"},{"location":"man/GroupBy_quantile/#usage","title":"Usage","text":"<pre><code>GroupBy_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"man/GroupBy_quantile/#arguments","title":"Arguments","text":"<code>quantile</code>  numeric Quantile between 0.0 and 1.0.  <code>interpolation</code>  string Interpolation method: \"nearest\", \"higher\", \"lower\", \"midpoint\", or \"linear\"."},{"location":"man/GroupBy_quantile/#value","title":"Value","text":"<p>GroupBy</p>"},{"location":"man/GroupBy_quantile/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$lazy()$quantile(.4)$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_shift/","title":"Shift","text":"<p>Source code</p>"},{"location":"man/GroupBy_shift/#description","title":"Description","text":"<p>Shift the values by a given period.</p>"},{"location":"man/GroupBy_shift/#usage","title":"Usage","text":"<pre><code>GroupBy_shift(periods = 1)\n</code></pre>"},{"location":"man/GroupBy_shift/#arguments","title":"Arguments","text":"<code>periods</code>  integer Number of periods to shift (may be negative)."},{"location":"man/GroupBy_shift/#value","title":"Value","text":"<p>GroupBy</p>"},{"location":"man/GroupBy_shift/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$group_by(\"cyl\")$shift(2)\n</code></pre> <pre><code>#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg        \u2506 disp       \u2506 hp         \u2506 \u2026 \u2506 vs         \u2506 am         \u2506 gear      \u2506 carb      \u2502\n#&gt; \u2502 --- \u2506 ---        \u2506 ---        \u2506 ---        \u2506   \u2506 ---        \u2506 ---        \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64]  \u2506   \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64] \u2506 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0 \u2506 [null,     \u2506 [null,     \u2506 [null,     \u2506 \u2026 \u2506 [null,     \u2506 [null,     \u2506 [null,    \u2506 [null,    \u2502\n#&gt; \u2502     \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026    \u2506   \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026   \u2506 null, \u2026   \u2502\n#&gt; \u2502     \u2506 19.2]      \u2506 400.0]     \u2506 175.0]     \u2506   \u2506 0.0]       \u2506 0.0]       \u2506 3.0]      \u2506 2.0]      \u2502\n#&gt; \u2502 4.0 \u2506 [null,     \u2506 [null,     \u2506 [null,     \u2506 \u2026 \u2506 [null,     \u2506 [null,     \u2506 [null,    \u2506 [null,    \u2502\n#&gt; \u2502     \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026    \u2506   \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026   \u2506 null, \u2026   \u2502\n#&gt; \u2502     \u2506 26.0]      \u2506 120.3]     \u2506 91.0]      \u2506   \u2506 0.0]       \u2506 1.0]       \u2506 5.0]      \u2506 2.0]      \u2502\n#&gt; \u2502 6.0 \u2506 [null,     \u2506 [null,     \u2506 [null,     \u2506 \u2026 \u2506 [null,     \u2506 [null,     \u2506 [null,    \u2506 [null,    \u2502\n#&gt; \u2502     \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026    \u2506   \u2506 null, \u2026    \u2506 null, \u2026    \u2506 null, \u2026   \u2506 null, \u2026   \u2502\n#&gt; \u2502     \u2506 19.2]      \u2506 167.6]     \u2506 123.0]     \u2506   \u2506 1.0]       \u2506 0.0]       \u2506 4.0]      \u2506 4.0]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_shift_and_fill/","title":"Shift and fill","text":"<p>Source code</p>"},{"location":"man/GroupBy_shift_and_fill/#description","title":"Description","text":"<p>Shift and fill the values by a given period.</p>"},{"location":"man/GroupBy_shift_and_fill/#usage","title":"Usage","text":"<pre><code>GroupBy_shift_and_fill(fill_value, periods = 1)\n</code></pre>"},{"location":"man/GroupBy_shift_and_fill/#arguments","title":"Arguments","text":"<code>fill_value</code>  fill None values with the result of this expression.  <code>periods</code>  integer Number of periods to shift (may be negative)."},{"location":"man/GroupBy_shift_and_fill/#value","title":"Value","text":"<p>GroupBy</p>"},{"location":"man/GroupBy_shift_and_fill/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(mtcars)$group_by(\"cyl\")$shift_and_fill(99, 1)\n</code></pre> <pre><code>#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg        \u2506 disp       \u2506 hp         \u2506 \u2026 \u2506 vs         \u2506 am         \u2506 gear      \u2506 carb      \u2502\n#&gt; \u2502 --- \u2506 ---        \u2506 ---        \u2506 ---        \u2506   \u2506 ---        \u2506 ---        \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64]  \u2506   \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64] \u2506 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,     \u2506 \u2026 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,    \u2506 [99.0,    \u2502\n#&gt; \u2502     \u2506 18.7, \u2026    \u2506 360.0, \u2026   \u2506 175.0, \u2026   \u2506   \u2506 0.0, \u2026     \u2506 0.0, \u2026     \u2506 3.0, \u2026    \u2506 2.0, \u2026    \u2502\n#&gt; \u2502     \u2506 15.8]      \u2506 351.0]     \u2506 264.0]     \u2506   \u2506 0.0]       \u2506 1.0]       \u2506 5.0]      \u2506 4.0]      \u2502\n#&gt; \u2502 4.0 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,     \u2506 \u2026 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,    \u2506 [99.0,    \u2502\n#&gt; \u2502     \u2506 22.8, \u2026    \u2506 108.0, \u2026   \u2506 93.0, \u2026    \u2506   \u2506 1.0, \u2026     \u2506 1.0, \u2026     \u2506 4.0, \u2026    \u2506 1.0, \u2026    \u2502\n#&gt; \u2502     \u2506 30.4]      \u2506 95.1]      \u2506 113.0]     \u2506   \u2506 1.0]       \u2506 1.0]       \u2506 5.0]      \u2506 2.0]      \u2502\n#&gt; \u2502 6.0 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,     \u2506 \u2026 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,    \u2506 [99.0,    \u2502\n#&gt; \u2502     \u2506 21.0, \u2026    \u2506 160.0, \u2026   \u2506 110.0, \u2026   \u2506   \u2506 0.0, \u2026     \u2506 1.0, \u2026     \u2506 4.0, \u2026    \u2506 4.0, \u2026    \u2502\n#&gt; \u2502     \u2506 17.8]      \u2506 167.6]     \u2506 123.0]     \u2506   \u2506 1.0]       \u2506 0.0]       \u2506 4.0]      \u2506 4.0]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_std/","title":"GroupBy Std","text":"<p>Source code</p>"},{"location":"man/GroupBy_std/#description","title":"Description","text":"<p>Reduce the groups to the standard deviation value.</p>"},{"location":"man/GroupBy_std/#usage","title":"Usage","text":"<pre><code>GroupBy_std()\n</code></pre>"},{"location":"man/GroupBy_std/#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_std/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$std()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a        \u2506 b        \u2506 c        \u2502\n#&gt; \u2502 ---    \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 str    \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0      \u2506 4.804512 \u2506 0.57735  \u2502\n#&gt; \u2502 Orange \u2506 null     \u2506 null     \u2506 null     \u2502\n#&gt; \u2502 Banana \u2506 0.707107 \u2506 0.707107 \u2506 0.707107 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_sum/","title":"GroupBy Sum","text":"<p>Source code</p>"},{"location":"man/GroupBy_sum/#description","title":"Description","text":"<p>Reduce the groups to the sum value.</p>"},{"location":"man/GroupBy_sum/#usage","title":"Usage","text":"<pre><code>GroupBy_sum()\n</code></pre>"},{"location":"man/GroupBy_sum/#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_sum/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$sum()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c   \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 --- \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 6.0 \u2506 14.5 \u2506 2   \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 1   \u2502\n#&gt; \u2502 Banana \u2506 9.0 \u2506 27.0 \u2506 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_ungroup/","title":"GroupBy_ungroup","text":"<p>Source code</p>"},{"location":"man/GroupBy_ungroup/#description","title":"Description","text":"<p>Revert the group by operation.</p>"},{"location":"man/GroupBy_ungroup/#usage","title":"Usage","text":"<pre><code>GroupBy_ungroup()\n</code></pre>"},{"location":"man/GroupBy_ungroup/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/GroupBy_ungroup/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ngb = pl$DataFrame(mtcars)$group_by(\"cyl\")\ngb\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; groups: [[1]]\n#&gt; [1] \"cyl\"\n#&gt; \n#&gt; maintain order:  FALSE\n</code></pre> <pre><code>gb$ungroup()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/GroupBy_var/","title":"GroupBy Var","text":"<p>Source code</p>"},{"location":"man/GroupBy_var/#description","title":"Description","text":"<p>Reduce the groups to the variance value.</p>"},{"location":"man/GroupBy_var/#usage","title":"Usage","text":"<pre><code>GroupBy_var()\n</code></pre>"},{"location":"man/GroupBy_var/#value","title":"Value","text":"<p>aggregated DataFrame</p>"},{"location":"man/GroupBy_var/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 2, 3, 4, 5),\n  b = c(0.5, 0.5, 4, 10, 13, 14),\n  c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n  d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$group_by(\"d\", maintain_order = TRUE)$var()\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a    \u2506 b         \u2506 c        \u2502\n#&gt; \u2502 ---    \u2506 ---  \u2506 ---       \u2506 ---      \u2502\n#&gt; \u2502 str    \u2506 f64  \u2506 f64       \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0  \u2506 23.083333 \u2506 0.333333 \u2502\n#&gt; \u2502 Orange \u2506 null \u2506 null      \u2506 null     \u2502\n#&gt; \u2502 Banana \u2506 0.5  \u2506 0.5       \u2506 0.5      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_read_csv/","title":"New DataFrame from CSV","text":""},{"location":"man/IO_read_csv/#description","title":"Description","text":"<p>New DataFrame from CSV</p>"},{"location":"man/IO_read_csv/#usage","title":"Usage","text":"<pre><code>pl_read_csv(\n  path,\n  has_header = TRUE,\n  separator = \",\",\n  comment_prefix = NULL,\n  quote_char = \"\\\"\",\n  skip_rows = 0,\n  dtypes = NULL,\n  null_values = NULL,\n  ignore_errors = FALSE,\n  cache = FALSE,\n  infer_schema_length = 100,\n  n_rows = NULL,\n  encoding = \"utf8\",\n  low_memory = FALSE,\n  rechunk = TRUE,\n  skip_rows_after_header = 0,\n  row_count_name = NULL,\n  row_count_offset = 0,\n  try_parse_dates = FALSE,\n  eol_char = \"\\n\",\n  raise_if_empty = TRUE,\n  truncate_ragged_lines = FALSE,\n  reuse_downloaded = TRUE\n)\n</code></pre>"},{"location":"man/IO_read_csv/#arguments","title":"Arguments","text":"<code>path</code>  Path to a file or URL. It is possible to provide multiple paths provided that all CSV files have the same schema. It is not possible to provide several URLs.  <code>has_header</code>  Indicate if the first row of dataset is a header or not.If <code>FALSE</code>, column names will be autogenerated in the following format: <code>\u201ccolumn_x\u201d</code> <code>x</code> being an enumeration over every column in the dataset starting at 1.  <code>separator</code>  Single byte character to use as separator in the file.  <code>comment_prefix</code>  A string, which can be up to 5 symbols in length, used to indicate the start of a comment line. For instance, it can be set to <code>\\#</code> or <code>//</code>.  <code>quote_char</code>  Single byte character used for quoting. Set to <code>NULL</code> to turn off special handling and escaping of quotes.  <code>skip_rows</code>  Start reading after a particular number of rows. The header will be parsed at this offset.  <code>dtypes</code>   Named list of column names - dtypes or dtype - column names. This list is used while reading to overwrite dtypes. Supported types so far are:  <ul> <li>  \"Boolean\" or \"logical\" for DataType::Boolean,  </li> <li>  \"Categorical\" or \"factor\" for DataType::Categorical,  </li> <li>  \"Float32\" or \"double\" for DataType::Float32,  </li> <li>  \"Float64\" or \"float64\" for DataType::Float64,  </li> <li>  \"Int32\" or \"integer\" for DataType::Int32,  </li> <li>  \"Int64\" or \"integer64\" for DataType::Int64,  </li> <li>  \"String\" or \"character\" for DataType::String,  </li> </ul> <code>null_values</code>   Values to interpret as <code>NA</code> values. Can be:  <ul> <li>  a character vector: all values that match one of the values in this vector will be <code>NA</code>;  </li> <li>  a named list with column names and null values.  </li> </ul> <code>ignore_errors</code>  Keep reading the file even if some lines yield errors. You can also use <code>infer_schema_length = 0</code> to read all columns as UTF8 to check which values might cause an issue.  <code>cache</code>  Cache the result after reading.  <code>infer_schema_length</code>  Maximum number of rows to read to infer the column types. If set to 0, all columns will be read as UTF-8. If <code>NULL</code>, a full table scan will be done (slow).  <code>n_rows</code>  Maximum number of rows to read.  <code>encoding</code>  Either <code>\u201cutf8\u201d</code> or <code>\u201cutf8-lossy\u201d</code>. Lossy means that invalid UTF8 values are replaced with \"?\" characters.  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>rechunk</code>  Reallocate to contiguous memory when all chunks / files are parsed.  <code>skip_rows_after_header</code>  Parse the first row as headers, and then skip this number of rows.  <code>row_count_name</code>  If not <code>NULL</code>, this will insert a row count column with the given name into the DataFrame.  <code>row_count_offset</code>  Offset to start the row_count column (only used if the name is set).  <code>try_parse_dates</code>  Try to automatically parse dates. Most ISO8601-like formats can be inferred, as well as a handful of others. If this does not succeed, the column remains of data type <code>pl$String</code>.  <code>eol_char</code>  Single byte end of line character (default: <code></code>). When encountering a file with Windows line endings (<code></code>), one can go with the default <code></code>. The extra <code>/code\\&gt; will be removed when processed.  <code>raise_if_empty</code>  If <code>FALSE</code>, parsing an empty file returns an empty DataFrame or LazyFrame.  <code>truncate_ragged_lines</code>  Truncate lines that are longer than the schema.  <code>reuse_downloaded</code>  If <code>TRUE</code>(default) and a URL was provided, cache the downloaded files in session for an easy reuse."},{"location":"man/IO_read_csv/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/IO_read_ndjson/","title":"New DataFrame from NDJSON","text":""},{"location":"man/IO_read_ndjson/#description","title":"Description","text":"<p>Read a file from path into a polars DataFrame.</p>"},{"location":"man/IO_read_ndjson/#usage","title":"Usage","text":"<pre><code>pl_read_ndjson(\n  path,\n  infer_schema_length = 100,\n  batch_size = NULL,\n  n_rows = NULL,\n  low_memory = FALSE,\n  rechunk = TRUE,\n  row_count_name = NULL,\n  row_count_offset = 0\n)\n</code></pre>"},{"location":"man/IO_read_ndjson/#arguments","title":"Arguments","text":"<code>path</code>  Path to a file or URL. It is possible to provide multiple paths provided that all NDJSON files have the same schema. It is not possible to provide several URLs.  <code>infer_schema_length</code>  Maximum number of rows to read to infer the column types. If set to 0, all columns will be read as UTF-8. If <code>NULL</code>, a full table scan will be done (slow).  <code>batch_size</code>  Number of rows that will be processed per thread.  <code>n_rows</code>  Maximum number of rows to read.  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>rechunk</code>  Reallocate to contiguous memory when all chunks / files are parsed.  <code>row_count_name</code>  If not <code>NULL</code>, this will insert a row count column with the given name into the DataFrame.  <code>row_count_offset</code>  Offset to start the row_count column (only used if the name is set)."},{"location":"man/IO_read_ndjson/#value","title":"Value","text":"<p>A DataFrame</p>"},{"location":"man/IO_read_ndjson/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nif (require(\"jsonlite\", quietly = TRUE)) {\n  ndjson_filename = tempfile()\n  jsonlite::stream_out(iris, file(ndjson_filename), verbose = FALSE)\n  pl$read_ndjson(ndjson_filename)\n}\n</code></pre> <pre><code>#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_read_parquet/","title":"Read a parquet file","text":""},{"location":"man/IO_read_parquet/#description","title":"Description","text":"<p>Read a parquet file</p>"},{"location":"man/IO_read_parquet/#usage","title":"Usage","text":"<pre><code>pl_read_parquet(\n  file,\n  n_rows = NULL,\n  cache = TRUE,\n  parallel = c(\"Auto\", \"None\", \"Columns\", \"RowGroups\"),\n  rechunk = TRUE,\n  row_count_name = NULL,\n  row_count_offset = 0L,\n  low_memory = FALSE,\n  use_statistics = TRUE,\n  hive_partitioning = TRUE\n)\n</code></pre>"},{"location":"man/IO_read_parquet/#arguments","title":"Arguments","text":"<code>file</code>  Path to a file. You can use globbing with <code>\\*</code> to scan/read multiple files in the same directory (see examples).  <code>n_rows</code>  Maximum number of rows to read.  <code>cache</code>  Cache the result after reading.  <code>parallel</code>  This determines the direction of parallelism. <code>\u201cauto\u201d</code> will try to determine the optimal direction. Can be <code>\u201cauto\u201d</code>, <code>\u201cnone\u201d</code>, <code>\u201ccolumns\u201d</code>, or <code>\u201crowgroups\u201d</code>,  <code>rechunk</code>  In case of reading multiple files via a glob pattern, rechunk the final DataFrame into contiguous memory chunks.  <code>row_count_name</code>  If not <code>NULL</code>, this will insert a row count column with the given name into the DataFrame.  <code>row_count_offset</code>  Offset to start the row_count column (only used if the name is set).  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>use_statistics</code>  Use statistics in the parquet file to determine if pages can be skipped from reading.  <code>hive_partitioning</code>  Infer statistics and schema from hive partitioned URL and use them to prune reads."},{"location":"man/IO_read_parquet/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/IO_scan_csv/","title":"New LazyFrame from CSV","text":""},{"location":"man/IO_scan_csv/#description","title":"Description","text":"<p>Read a file from path into a polars LazyFrame.</p>"},{"location":"man/IO_scan_csv/#usage","title":"Usage","text":"<pre><code>pl_scan_csv(\n  path,\n  has_header = TRUE,\n  separator = \",\",\n  comment_prefix = NULL,\n  quote_char = \"\\\"\",\n  skip_rows = 0,\n  dtypes = NULL,\n  null_values = NULL,\n  ignore_errors = FALSE,\n  cache = FALSE,\n  infer_schema_length = 100,\n  n_rows = NULL,\n  encoding = \"utf8\",\n  low_memory = FALSE,\n  rechunk = TRUE,\n  skip_rows_after_header = 0,\n  row_count_name = NULL,\n  row_count_offset = 0,\n  try_parse_dates = FALSE,\n  eol_char = \"\\n\",\n  raise_if_empty = TRUE,\n  truncate_ragged_lines = FALSE,\n  reuse_downloaded = TRUE\n)\n</code></pre>"},{"location":"man/IO_scan_csv/#arguments","title":"Arguments","text":"<code>path</code>  Path to a file or URL. It is possible to provide multiple paths provided that all CSV files have the same schema. It is not possible to provide several URLs.  <code>has_header</code>  Indicate if the first row of dataset is a header or not.If <code>FALSE</code>, column names will be autogenerated in the following format: <code>\u201ccolumn_x\u201d</code> <code>x</code> being an enumeration over every column in the dataset starting at 1.  <code>separator</code>  Single byte character to use as separator in the file.  <code>comment_prefix</code>  A string, which can be up to 5 symbols in length, used to indicate the start of a comment line. For instance, it can be set to <code>\\#</code> or <code>//</code>.  <code>quote_char</code>  Single byte character used for quoting. Set to <code>NULL</code> to turn off special handling and escaping of quotes.  <code>skip_rows</code>  Start reading after a particular number of rows. The header will be parsed at this offset.  <code>dtypes</code>   Named list of column names - dtypes or dtype - column names. This list is used while reading to overwrite dtypes. Supported types so far are:  <ul> <li>  \"Boolean\" or \"logical\" for DataType::Boolean,  </li> <li>  \"Categorical\" or \"factor\" for DataType::Categorical,  </li> <li>  \"Float32\" or \"double\" for DataType::Float32,  </li> <li>  \"Float64\" or \"float64\" for DataType::Float64,  </li> <li>  \"Int32\" or \"integer\" for DataType::Int32,  </li> <li>  \"Int64\" or \"integer64\" for DataType::Int64,  </li> <li>  \"String\" or \"character\" for DataType::String,  </li> </ul> <code>null_values</code>   Values to interpret as <code>NA</code> values. Can be:  <ul> <li>  a character vector: all values that match one of the values in this vector will be <code>NA</code>;  </li> <li>  a named list with column names and null values.  </li> </ul> <code>ignore_errors</code>  Keep reading the file even if some lines yield errors. You can also use <code>infer_schema_length = 0</code> to read all columns as UTF8 to check which values might cause an issue.  <code>cache</code>  Cache the result after reading.  <code>infer_schema_length</code>  Maximum number of rows to read to infer the column types. If set to 0, all columns will be read as UTF-8. If <code>NULL</code>, a full table scan will be done (slow).  <code>n_rows</code>  Maximum number of rows to read.  <code>encoding</code>  Either <code>\u201cutf8\u201d</code> or <code>\u201cutf8-lossy\u201d</code>. Lossy means that invalid UTF8 values are replaced with \"?\" characters.  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>rechunk</code>  Reallocate to contiguous memory when all chunks / files are parsed.  <code>skip_rows_after_header</code>  Parse the first row as headers, and then skip this number of rows.  <code>row_count_name</code>  If not <code>NULL</code>, this will insert a row count column with the given name into the DataFrame.  <code>row_count_offset</code>  Offset to start the row_count column (only used if the name is set).  <code>try_parse_dates</code>  Try to automatically parse dates. Most ISO8601-like formats can be inferred, as well as a handful of others. If this does not succeed, the column remains of data type <code>pl$String</code>.  <code>eol_char</code>  Single byte end of line character (default: <code></code>). When encountering a file with Windows line endings (<code></code>), one can go with the default <code></code>. The extra <code>/code\\&gt; will be removed when processed.  <code>raise_if_empty</code>  If <code>FALSE</code>, parsing an empty file returns an empty DataFrame or LazyFrame.  <code>truncate_ragged_lines</code>  Truncate lines that are longer than the schema.  <code>reuse_downloaded</code>  If <code>TRUE</code>(default) and a URL was provided, cache the downloaded files in session for an easy reuse."},{"location":"man/IO_scan_csv/#value","title":"Value","text":"<p>scan_csv returns a LazyFrame. read_csv returns a DataFrame.</p>"},{"location":"man/IO_scan_csv/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nmy_file = tempfile()\nwrite.csv(iris, my_file)\nlazy_frame = pl$scan_csv(path = my_file)\nlazy_frame$collect()\n</code></pre> <pre><code>#&gt; shape: (150, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2506 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 --- \u2506 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 i64 \u2506 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 2   \u2506 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 3   \u2506 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4   \u2506 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 147 \u2506 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 148 \u2506 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 149 \u2506 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 150 \u2506 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>unlink(my_file)\n</code></pre>"},{"location":"man/IO_scan_ipc/","title":"Import data in Apache Arrow IPC format","text":""},{"location":"man/IO_scan_ipc/#description","title":"Description","text":"<p>Import data in Apache Arrow IPC format</p>"},{"location":"man/IO_scan_ipc/#usage","title":"Usage","text":"<pre><code>pl_scan_ipc(\n  path,\n  n_rows = NULL,\n  cache = TRUE,\n  rechunk = TRUE,\n  row_count_name = NULL,\n  row_count_offset = 0L,\n  memmap = TRUE\n)\n</code></pre>"},{"location":"man/IO_scan_ipc/#arguments","title":"Arguments","text":"<code>path</code>  Path to a file or URL. It is possible to provide multiple paths provided that all CSV files have the same schema. It is not possible to provide several URLs.  <code>n_rows</code>  Maximum number of rows to read.  <code>cache</code>  Cache the result after reading.  <code>rechunk</code>  Reallocate to contiguous memory when all chunks / files are parsed.  <code>row_count_name</code>  If not <code>NULL</code>, this will insert a row count column with the given name into the DataFrame.  <code>row_count_offset</code>  Offset to start the row_count column (only used if the name is set).  <code>memmap</code>  bool, mapped memory"},{"location":"man/IO_scan_ipc/#details","title":"Details","text":"<p>Create new LazyFrame from Apache Arrow IPC file or stream</p>"},{"location":"man/IO_scan_ipc/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/IO_scan_ndjson/","title":"New LazyFrame from NDJSON","text":""},{"location":"man/IO_scan_ndjson/#description","title":"Description","text":"<p>Read a file from path into a polars LazyFrame.</p>"},{"location":"man/IO_scan_ndjson/#usage","title":"Usage","text":"<pre><code>pl_scan_ndjson(\n  path,\n  infer_schema_length = 100,\n  batch_size = NULL,\n  n_rows = NULL,\n  low_memory = FALSE,\n  rechunk = TRUE,\n  row_count_name = NULL,\n  row_count_offset = 0,\n  reuse_downloaded = TRUE\n)\n</code></pre>"},{"location":"man/IO_scan_ndjson/#arguments","title":"Arguments","text":"<code>path</code>  Path to a file or URL. It is possible to provide multiple paths provided that all NDJSON files have the same schema. It is not possible to provide several URLs.  <code>infer_schema_length</code>  Maximum number of rows to read to infer the column types. If set to 0, all columns will be read as UTF-8. If <code>NULL</code>, a full table scan will be done (slow).  <code>batch_size</code>  Number of rows that will be processed per thread.  <code>n_rows</code>  Maximum number of rows to read.  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>rechunk</code>  Reallocate to contiguous memory when all chunks / files are parsed.  <code>row_count_name</code>  If not <code>NULL</code>, this will insert a row count column with the given name into the DataFrame.  <code>row_count_offset</code>  Offset to start the row_count column (only used if the name is set).  <code>reuse_downloaded</code>  If <code>TRUE</code>(default) and a URL was provided, cache the downloaded files in session for an easy reuse."},{"location":"man/IO_scan_ndjson/#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/IO_scan_ndjson/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nif (require(\"jsonlite\", quietly = TRUE)) {\n  ndjson_filename = tempfile()\n  jsonlite::stream_out(iris, file(ndjson_filename), verbose = FALSE)\n  pl$scan_ndjson(ndjson_filename)$collect()\n}\n</code></pre> <pre><code>#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_scan_parquet/","title":"Scan a parquet file","text":""},{"location":"man/IO_scan_parquet/#description","title":"Description","text":"<p>Scan a parquet file</p>"},{"location":"man/IO_scan_parquet/#usage","title":"Usage","text":"<pre><code>pl_scan_parquet(\n  file,\n  n_rows = NULL,\n  cache = TRUE,\n  parallel = c(\"Auto\", \"None\", \"Columns\", \"RowGroups\"),\n  rechunk = TRUE,\n  row_count_name = NULL,\n  row_count_offset = 0L,\n  low_memory = FALSE,\n  use_statistics = TRUE,\n  hive_partitioning = TRUE\n)\n</code></pre>"},{"location":"man/IO_scan_parquet/#arguments","title":"Arguments","text":"<code>file</code>  Path to a file. You can use globbing with <code>\\*</code> to scan/read multiple files in the same directory (see examples).  <code>n_rows</code>  Maximum number of rows to read.  <code>cache</code>  Cache the result after reading.  <code>parallel</code>  This determines the direction of parallelism. <code>\u201cauto\u201d</code> will try to determine the optimal direction. Can be <code>\u201cauto\u201d</code>, <code>\u201cnone\u201d</code>, <code>\u201ccolumns\u201d</code>, or <code>\u201crowgroups\u201d</code>,  <code>rechunk</code>  In case of reading multiple files via a glob pattern, rechunk the final DataFrame into contiguous memory chunks.  <code>row_count_name</code>  If not <code>NULL</code>, this will insert a row count column with the given name into the DataFrame.  <code>row_count_offset</code>  Offset to start the row_count column (only used if the name is set).  <code>low_memory</code>  Reduce memory usage (will yield a lower performance).  <code>use_statistics</code>  Use statistics in the parquet file to determine if pages can be skipped from reading.  <code>hive_partitioning</code>  Infer statistics and schema from hive partitioned URL and use them to prune reads."},{"location":"man/IO_scan_parquet/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/IO_scan_parquet/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\ntemp_dir = tempfile()\n# Write a hive-style partitioned parquet dataset\narrow::write_dataset(\n  mtcars,\n  temp_dir,\n  partitioning = c(\"cyl\", \"gear\"),\n  format = \"parquet\",\n  hive_style = TRUE\n)\nlist.files(temp_dir, recursive = TRUE)\n</code></pre> <pre><code>#&gt; [1] \"cyl=4/gear=3/part-0.parquet\" \"cyl=4/gear=4/part-0.parquet\"\n#&gt; [3] \"cyl=4/gear=5/part-0.parquet\" \"cyl=6/gear=3/part-0.parquet\"\n#&gt; [5] \"cyl=6/gear=4/part-0.parquet\" \"cyl=6/gear=5/part-0.parquet\"\n#&gt; [7] \"cyl=8/gear=3/part-0.parquet\" \"cyl=8/gear=5/part-0.parquet\"\n</code></pre> <pre><code># Read the dataset\npl$scan_parquet(\n  file.path(temp_dir, \"**/*.parquet\")\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 disp  \u2506 hp    \u2506 drat \u2506 \u2026 \u2506 am  \u2506 carb \u2506 cyl \u2506 gear \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---   \u2506 ---  \u2506   \u2506 --- \u2506 ---  \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2506 f64   \u2506 f64  \u2506   \u2506 f64 \u2506 f64  \u2506 i64 \u2506 i64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.5 \u2506 120.1 \u2506 97.0  \u2506 3.7  \u2506 \u2026 \u2506 0.0 \u2506 1.0  \u2506 4   \u2506 3    \u2502\n#&gt; \u2502 22.8 \u2506 108.0 \u2506 93.0  \u2506 3.85 \u2506 \u2026 \u2506 1.0 \u2506 1.0  \u2506 4   \u2506 4    \u2502\n#&gt; \u2502 24.4 \u2506 146.7 \u2506 62.0  \u2506 3.69 \u2506 \u2026 \u2506 0.0 \u2506 2.0  \u2506 4   \u2506 4    \u2502\n#&gt; \u2502 22.8 \u2506 140.8 \u2506 95.0  \u2506 3.92 \u2506 \u2026 \u2506 0.0 \u2506 2.0  \u2506 4   \u2506 4    \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026     \u2506 \u2026     \u2506 \u2026    \u2506 \u2026 \u2506 \u2026   \u2506 \u2026    \u2506 \u2026   \u2506 \u2026    \u2502\n#&gt; \u2502 13.3 \u2506 350.0 \u2506 245.0 \u2506 3.73 \u2506 \u2026 \u2506 0.0 \u2506 4.0  \u2506 8   \u2506 3    \u2502\n#&gt; \u2502 19.2 \u2506 400.0 \u2506 175.0 \u2506 3.08 \u2506 \u2026 \u2506 0.0 \u2506 2.0  \u2506 8   \u2506 3    \u2502\n#&gt; \u2502 15.8 \u2506 351.0 \u2506 264.0 \u2506 4.22 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 8   \u2506 5    \u2502\n#&gt; \u2502 15.0 \u2506 301.0 \u2506 335.0 \u2506 3.54 \u2506 \u2026 \u2506 1.0 \u2506 8.0  \u2506 8   \u2506 5    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_sink_csv/","title":"Stream the output of a query to a CSV file","text":""},{"location":"man/IO_sink_csv/#description","title":"Description","text":"<p>This writes the output of a query directly to a CSV file without collecting it in the R session first. This is useful if the output of the query is still larger than RAM as it would crash the R session if it was collected into R.</p>"},{"location":"man/IO_sink_csv/#usage","title":"Usage","text":"<pre><code>LazyFrame_sink_csv(\n  path,\n  include_bom = FALSE,\n  include_header = TRUE,\n  separator = \",\",\n  line_terminator = \"\\n\",\n  quote = \"\\\"\",\n  batch_size = 1024,\n  datetime_format = NULL,\n  date_format = NULL,\n  time_format = NULL,\n  float_precision = NULL,\n  null_values = \"\",\n  quote_style = \"necessary\",\n  maintain_order = TRUE,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE\n)\n</code></pre>"},{"location":"man/IO_sink_csv/#arguments","title":"Arguments","text":"<code>path</code>  File path to which the result should be written.  <code>include_bom</code>  Whether to include UTF-8 BOM (byte order mark) in the CSV output.  <code>include_header</code>  Whether to include header in the CSV output.  <code>separator</code>  Separate CSV fields with this symbol.  <code>line_terminator</code>  String used to end each row.  <code>quote</code>  Byte to use as quoting character.  <code>batch_size</code>  Number of rows that will be processed per thread.  <code>datetime_format</code>  A format string, with the specifiers defined by the chrono Rust crate. If no format specified, the default fractional-second precision is inferred from the maximum timeunit found in the frame\u2019s Datetime cols (if any).  <code>date_format</code>  A format string, with the specifiers defined by the chrono Rust crate.  <code>time_format</code>  A format string, with the specifiers defined by the chrono Rust crate.  <code>float_precision</code>  Number of decimal places to write, applied to both Float32 and Float64 datatypes.  <code>null_values</code>  A string representing null values (defaulting to the empty string).  <code>quote_style</code>   Determines the quoting strategy used.  <ul> <li> <code>\u201cnecessary\u201d</code> (default): This puts quotes around fields only when necessary. They are necessary when fields contain a quote, delimiter or record terminator. Quotes are also necessary when writing an empty record (which is indistinguishable from a record with one empty field). This is the default.  </li> <li> <code>\u201calways\u201d</code>: This puts quotes around every field.  </li> <li> <code>\u201cnon_numeric\u201d</code>: This puts quotes around all fields that are non-numeric. Namely, when writing a field that does not parse as a valid float or integer, then quotes will be used even if they aren\u2019t strictly necessary.  </li> <li> <code>\u201cnever\u201d</code>: This never puts quotes around fields, even if that results in invalid CSV data (e.g.\u00a0by not quoting strings containing the separator).  </li> </ul> <code>maintain_order</code>  Keep the same order as the original <code>DataFrame</code>. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine. The default value can be changed with <code>pl$set_options(maintain_order = TRUE)</code>.  <code>type_coercion</code>  Boolean. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Boolean. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Boolean. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Boolean. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Boolean. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>no_optimization</code>  Boolean. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Boolean. Use existing optimization settings regardless the settings specified in this function call."},{"location":"man/IO_sink_csv/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# sink table 'mtcars' from mem to CSV\ntmpf = tempfile()\npl$LazyFrame(mtcars)$sink_csv(tmpf)\n\n# stream a query end-to-end\ntmpf2 = tempfile()\npl$scan_csv(tmpf)$select(pl$col(\"cyl\") * 2)$sink_csv(tmpf2)\n\n# load parquet directly into a DataFrame / memory\npl$scan_csv(tmpf2)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl  \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 8.0  \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 \u2026    \u2502\n#&gt; \u2502 16.0 \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 16.0 \u2502\n#&gt; \u2502 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_sink_ipc/","title":"Stream the output of a query to an Arrow IPC file","text":""},{"location":"man/IO_sink_ipc/#description","title":"Description","text":"<p>This writes the output of a query directly to an Arrow IPC file without collecting it in the R session first. This is useful if the output of the query is still larger than RAM as it would crash the R session if it was collected into R.</p>"},{"location":"man/IO_sink_ipc/#usage","title":"Usage","text":"<pre><code>LazyFrame_sink_ipc(\n  path,\n  compression = \"zstd\",\n  maintain_order = TRUE,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE\n)\n</code></pre>"},{"location":"man/IO_sink_ipc/#arguments","title":"Arguments","text":"<code>path</code>  String. The path to the Arrow IPC file  <code>compression</code> <code>NULL</code> or string, the compression method. One of <code>NULL</code>, \"lz4\" or \"zstd\". Choose \"zstd\" for good compression performance. Choose \"lz4\" for fast compression/decompression.  <code>maintain_order</code>  Keep the same order as the original <code>DataFrame</code>. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine. The default value can be changed with <code>pl$set_options(maintain_order = TRUE)</code>.  <code>type_coercion</code>  Boolean. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Boolean. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Boolean. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Boolean. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Boolean. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>no_optimization</code>  Boolean. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Boolean. Use existing optimization settings regardless the settings specified in this function call."},{"location":"man/IO_sink_ipc/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# sink table 'mtcars' from mem to ipc\ntmpf = tempfile()\npl$LazyFrame(mtcars)$sink_ipc(tmpf)\n\n# stream a query end-to-end (not supported yet, https://github.com/pola-rs/polars/issues/1040)\n# tmpf2 = tempfile()\n# pl$scan_ipc(tmpf)$select(pl$col(\"cyl\") * 2)$sink_ipc(tmpf2)\n\n# load ipc directly into a DataFrame / memory\n# pl$scan_ipc(tmpf2)$collect()\n</code></pre>"},{"location":"man/IO_sink_parquet/","title":"Stream the output of a query to a Parquet file","text":""},{"location":"man/IO_sink_parquet/#description","title":"Description","text":"<p>This writes the output of a query directly to a Parquet file without collecting it in the R session first. This is useful if the output of the query is still larger than RAM as it would crash the R session if it was collected into R.</p>"},{"location":"man/IO_sink_parquet/#usage","title":"Usage","text":"<pre><code>LazyFrame_sink_parquet(\n  path,\n  compression = \"zstd\",\n  compression_level = 3,\n  statistics = FALSE,\n  row_group_size = NULL,\n  data_pagesize_limit = NULL,\n  maintain_order = TRUE,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE\n)\n</code></pre>"},{"location":"man/IO_sink_parquet/#arguments","title":"Arguments","text":"<code>path</code>  String. The path of the parquet file  <code>compression</code>   String. The compression method. One of:  <ul> <li>  \"lz4\": fast compression/decompression.  </li> <li>  \"uncompressed\"  </li> <li>  \"snappy\": this guarantees that the parquet file will be compatible with older parquet readers.  </li> <li>  \"gzip\"  </li> <li>  \"lzo\"  </li> <li>  \"brotli\"  </li> <li>  \"zstd\": good compression performance.  </li> </ul> <code>compression_level</code> <code>NULL</code> or Integer. The level of compression to use. Only used if method is one of \u2018gzip\u2019, \u2018brotli\u2019, or \u2018zstd\u2019. Higher compression means smaller files on disk:  <ul> <li>  \"gzip\": min-level: 0, max-level: 10.  </li> <li>  \"brotli\": min-level: 0, max-level: 11.  </li> <li>  \"zstd\": min-level: 1, max-level: 22.  </li> </ul> <code>statistics</code>  Boolean. Whether compute and write column statistics. This requires extra compute.  <code>row_group_size</code> <code>NULL</code> or Integer. Size of the row groups in number of rows. If <code>NULL</code> (default), the chunks of the DataFrame are used. Writing in smaller chunks may reduce memory pressure and improve writing speeds.  <code>data_pagesize_limit</code> <code>NULL</code> or Integer. If <code>NULL</code> (default), the limit will be ~1MB.  <code>maintain_order</code>  Keep the same order as the original <code>DataFrame</code>. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine. The default value can be changed with <code>pl$set_options(maintain_order = TRUE)</code>.  <code>type_coercion</code>  Boolean. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Boolean. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Boolean. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Boolean. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Boolean. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>no_optimization</code>  Boolean. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Boolean. Use existing optimization settings regardless the settings specified in this function call."},{"location":"man/IO_sink_parquet/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# sink table 'mtcars' from mem to parquet\ntmpf = tempfile()\npl$LazyFrame(mtcars)$sink_parquet(tmpf)\n\n# stream a query end-to-end\ntmpf2 = tempfile()\npl$scan_parquet(tmpf)$select(pl$col(\"cyl\") * 2)$sink_parquet(tmpf2)\n\n# load parquet directly into a DataFrame / memory\npl$scan_parquet(tmpf2)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl  \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 8.0  \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 \u2026    \u2502\n#&gt; \u2502 16.0 \u2502\n#&gt; \u2502 12.0 \u2502\n#&gt; \u2502 16.0 \u2502\n#&gt; \u2502 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_write_csv/","title":"Write to comma-separated values (CSV) file","text":""},{"location":"man/IO_write_csv/#description","title":"Description","text":"<p>Write to comma-separated values (CSV) file</p>"},{"location":"man/IO_write_csv/#usage","title":"Usage","text":"<pre><code>DataFrame_write_csv(\n  path,\n  include_bom = FALSE,\n  include_header = TRUE,\n  separator = \",\",\n  line_terminator = \"\\n\",\n  quote = \"\\\"\",\n  batch_size = 1024,\n  datetime_format = NULL,\n  date_format = NULL,\n  time_format = NULL,\n  float_precision = NULL,\n  null_values = \"\",\n  quote_style = \"necessary\"\n)\n</code></pre>"},{"location":"man/IO_write_csv/#arguments","title":"Arguments","text":"<code>path</code>  File path to which the result should be written.  <code>include_bom</code>  Whether to include UTF-8 BOM (byte order mark) in the CSV output.  <code>include_header</code>  Whether to include header in the CSV output.  <code>separator</code>  Separate CSV fields with this symbol.  <code>line_terminator</code>  String used to end each row.  <code>quote</code>  Byte to use as quoting character.  <code>batch_size</code>  Number of rows that will be processed per thread.  <code>datetime_format</code>  A format string, with the specifiers defined by the chrono Rust crate. If no format specified, the default fractional-second precision is inferred from the maximum timeunit found in the frame\u2019s Datetime cols (if any).  <code>date_format</code>  A format string, with the specifiers defined by the chrono Rust crate.  <code>time_format</code>  A format string, with the specifiers defined by the chrono Rust crate.  <code>float_precision</code>  Number of decimal places to write, applied to both Float32 and Float64 datatypes.  <code>null_values</code>  A string representing null values (defaulting to the empty string).  <code>quote_style</code>   Determines the quoting strategy used.  <ul> <li> <code>\u201cnecessary\u201d</code> (default): This puts quotes around fields only when necessary. They are necessary when fields contain a quote, delimiter or record terminator. Quotes are also necessary when writing an empty record (which is indistinguishable from a record with one empty field). This is the default.  </li> <li> <code>\u201calways\u201d</code>: This puts quotes around every field.  </li> <li> <code>\u201cnon_numeric\u201d</code>: This puts quotes around all fields that are non-numeric. Namely, when writing a field that does not parse as a valid float or integer, then quotes will be used even if they aren\u2019t strictly necessary.  </li> <li> <code>\u201cnever\u201d</code>: This never puts quotes around fields, even if that results in invalid CSV data (e.g.\u00a0by not quoting strings containing the separator).  </li> </ul>"},{"location":"man/IO_write_csv/#value","title":"Value","text":"<p>This doesn\u2019t return anything but creates a CSV file.</p>"},{"location":"man/IO_write_csv/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat = pl$DataFrame(mtcars)\n\ndestination = tempfile(fileext = \".csv\")\ndat$select(pl$col(\"drat\", \"mpg\"))$write_csv(destination)\n\npl$read_csv(destination)\n</code></pre> <pre><code>#&gt; shape: (32, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 drat \u2506 mpg  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.9  \u2506 21.0 \u2502\n#&gt; \u2502 3.9  \u2506 21.0 \u2502\n#&gt; \u2502 3.85 \u2506 22.8 \u2502\n#&gt; \u2502 3.08 \u2506 21.4 \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 4.22 \u2506 15.8 \u2502\n#&gt; \u2502 3.62 \u2506 19.7 \u2502\n#&gt; \u2502 3.54 \u2506 15.0 \u2502\n#&gt; \u2502 4.11 \u2506 21.4 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/IO_write_json/","title":"Write to JSON file","text":""},{"location":"man/IO_write_json/#description","title":"Description","text":"<p>Write to JSON file</p>"},{"location":"man/IO_write_json/#usage","title":"Usage","text":"<pre><code>DataFrame_write_json(file, pretty = FALSE, row_oriented = FALSE)\n</code></pre>"},{"location":"man/IO_write_json/#arguments","title":"Arguments","text":"<code>file</code>  File path to which the result should be written.  <code>pretty</code>  Pretty serialize JSON.  <code>row_oriented</code>  Write to row-oriented JSON. This is slower, but more common."},{"location":"man/IO_write_json/#value","title":"Value","text":"<p>This doesn\u2019t return anything.</p>"},{"location":"man/IO_write_json/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nif (require(\"jsonlite\", quiet = TRUE)) {\n  dat = pl$DataFrame(head(mtcars))\n  destination = tempfile()\n\n  dat$select(pl$col(\"drat\", \"mpg\"))$write_json(destination)\n  jsonlite::fromJSON(destination)\n\n  dat$select(pl$col(\"drat\", \"mpg\"))$write_json(destination, row_oriented = TRUE)\n  jsonlite::fromJSON(destination)\n}\n</code></pre> <pre><code>#&gt;   drat  mpg\n#&gt; 1 3.90 21.0\n#&gt; 2 3.90 21.0\n#&gt; 3 3.85 22.8\n#&gt; 4 3.08 21.4\n#&gt; 5 3.15 18.7\n#&gt; 6 2.76 18.1\n</code></pre>"},{"location":"man/IO_write_ndjson/","title":"Write to NDJSON file","text":""},{"location":"man/IO_write_ndjson/#description","title":"Description","text":"<p>Write to NDJSON file</p>"},{"location":"man/IO_write_ndjson/#usage","title":"Usage","text":"<pre><code>DataFrame_write_ndjson(file)\n</code></pre>"},{"location":"man/IO_write_ndjson/#arguments","title":"Arguments","text":"<code>file</code>  File path to which the result should be written."},{"location":"man/IO_write_ndjson/#value","title":"Value","text":"<p>This doesn\u2019t return anything.</p>"},{"location":"man/IO_write_ndjson/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndat = pl$DataFrame(head(mtcars))\n\ndestination = tempfile()\ndat$select(pl$col(\"drat\", \"mpg\"))$write_ndjson(destination)\n\npl$read_ndjson(destination)\n</code></pre> <pre><code>#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 drat \u2506 mpg  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.9  \u2506 21.0 \u2502\n#&gt; \u2502 3.9  \u2506 21.0 \u2502\n#&gt; \u2502 3.85 \u2506 22.8 \u2502\n#&gt; \u2502 3.08 \u2506 21.4 \u2502\n#&gt; \u2502 3.15 \u2506 18.7 \u2502\n#&gt; \u2502 2.76 \u2506 18.1 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_class/","title":"Inner workings of the LazyFrame-class","text":""},{"location":"man/LazyFrame_class/#description","title":"Description","text":"<p>The <code>LazyFrame</code>-class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instantiated <code>LazyFrame</code>-object is an <code>externalptr</code> to a lowlevel rust polars LazyFrame object. The pointer address is the only statefullness of the LazyFrame object on the R side. Any other state resides on the rust side. The S3 method <code>.DollarNames.RPolarsLazyFrame</code> exposes all public <code>$foobar()</code>-methods which are callable onto the object.</p> <p>Most methods return another <code>LazyFrame</code>-class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from <code>.pr$LazyFrame$methodname()</code>. Also, all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications.</p> <p><code>DataFrame</code> and <code>LazyFrame</code> can both be said to be a <code>Frame</code>. To convert use <code>DataFrame_object$lazy() -&gt; LazyFrame_object</code> and <code>LazyFrame_object$collect() -&gt; DataFrame_object</code>. You can also create a <code>LazyFrame</code> directly with <code>pl$LazyFrame()</code>. This is quite similar to the lazy-collect syntax of the dplyrpackage to interact with database connections such as SQL variants. Most SQL databases would be able to perform the same optimizations as polars such Predicate Pushdown and Projection. However polars can interact and optimize queries with both SQL DBs and other data sources such parquet files simultaneously. (#TODO implement r-polars SQL ;).</p>"},{"location":"man/LazyFrame_class/#details","title":"Details","text":"<p>Check out the source code in R/LazyFrame_lazy.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to <code>.pr</code> and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed <code>LazyFrame</code>."},{"location":"man/LazyFrame_class/#value","title":"Value","text":"<p>not applicable</p>"},{"location":"man/LazyFrame_class/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# see all exported methods\nls(.pr$env$RPolarsLazyFrame)\n</code></pre> <pre><code>#&gt;  [1] \"clone\"                   \"collect\"                \n#&gt;  [3] \"collect_in_background\"   \"columns\"                \n#&gt;  [5] \"describe_optimized_plan\" \"describe_plan\"          \n#&gt;  [7] \"drop\"                    \"drop_nulls\"             \n#&gt;  [9] \"dtypes\"                  \"explode\"                \n#&gt; [11] \"fetch\"                   \"fill_nan\"               \n#&gt; [13] \"fill_null\"               \"filter\"                 \n#&gt; [15] \"first\"                   \"get_optimization_toggle\"\n#&gt; [17] \"group_by\"                \"head\"                   \n#&gt; [19] \"join\"                    \"join_asof\"              \n#&gt; [21] \"last\"                    \"limit\"                  \n#&gt; [23] \"max\"                     \"mean\"                   \n#&gt; [25] \"median\"                  \"melt\"                   \n#&gt; [27] \"min\"                     \"print\"                  \n#&gt; [29] \"profile\"                 \"quantile\"               \n#&gt; [31] \"rename\"                  \"reverse\"                \n#&gt; [33] \"schema\"                  \"select\"                 \n#&gt; [35] \"set_optimization_toggle\" \"shift\"                  \n#&gt; [37] \"shift_and_fill\"          \"sink_csv\"               \n#&gt; [39] \"sink_ipc\"                \"sink_parquet\"           \n#&gt; [41] \"slice\"                   \"sort\"                   \n#&gt; [43] \"std\"                     \"sum\"                    \n#&gt; [45] \"tail\"                    \"unique\"                 \n#&gt; [47] \"unnest\"                  \"var\"                    \n#&gt; [49] \"width\"                   \"with_columns\"           \n#&gt; [51] \"with_context\"            \"with_row_count\"\n</code></pre> <pre><code># see all private methods (not intended for regular use)\nls(.pr$LazyFrame)\n</code></pre> <pre><code>#&gt;  [1] \"clone_in_rust\"           \"collect\"                \n#&gt;  [3] \"collect_in_background\"   \"debug_plan\"             \n#&gt;  [5] \"describe_optimized_plan\" \"describe_plan\"          \n#&gt;  [7] \"drop\"                    \"drop_nulls\"             \n#&gt;  [9] \"explode\"                 \"fetch\"                  \n#&gt; [11] \"fill_nan\"                \"fill_null\"              \n#&gt; [13] \"filter\"                  \"first\"                  \n#&gt; [15] \"get_optimization_toggle\" \"group_by\"               \n#&gt; [17] \"join\"                    \"join_asof\"              \n#&gt; [19] \"last\"                    \"limit\"                  \n#&gt; [21] \"max\"                     \"mean\"                   \n#&gt; [23] \"median\"                  \"melt\"                   \n#&gt; [25] \"min\"                     \"print\"                  \n#&gt; [27] \"profile\"                 \"quantile\"               \n#&gt; [29] \"rename\"                  \"reverse\"                \n#&gt; [31] \"schema\"                  \"select\"                 \n#&gt; [33] \"select_str_as_lit\"       \"set_optimization_toggle\"\n#&gt; [35] \"shift\"                   \"shift_and_fill\"         \n#&gt; [37] \"sink_csv\"                \"sink_ipc\"               \n#&gt; [39] \"sink_parquet\"            \"slice\"                  \n#&gt; [41] \"sort_by_exprs\"           \"std\"                    \n#&gt; [43] \"sum\"                     \"tail\"                   \n#&gt; [45] \"unique\"                  \"unnest\"                 \n#&gt; [47] \"var\"                     \"with_columns\"           \n#&gt; [49] \"with_context\"            \"with_row_count\"\n</code></pre> <pre><code># Practical example ##\n# First writing R iris dataset to disk, to illustrte a difference\ntemp_filepath = tempfile()\nwrite.csv(iris, temp_filepath, row.names = FALSE)\n\n# Following example illustrates 2 ways to obtain a LazyFrame\n\n# The-Okay-way: convert an in-memory DataFrame to LazyFrame\n\n# eager in-mem R data.frame\nRdf = read.csv(temp_filepath)\n\n# eager in-mem polars DataFrame\nPdf = pl$DataFrame(Rdf)\n\n# lazy frame starting from in-mem DataFrame\nLdf_okay = Pdf$lazy()\n\n# The-Best-Way:  LazyFrame created directly from a data source is best...\nLdf_best = pl$scan_csv(temp_filepath)\n\n# ... as if to e.g. filter the LazyFrame, that filtering also caleld predicate will be\n# pushed down in the executation stack to the csv_reader, and thereby only bringing into\n# memory the rows matching to filter.\n# apply filter:\nfilter_expr = pl$col(\"Species\") == \"setosa\" # get only rows where Species is setosa\nLdf_okay = Ldf_okay$filter(filter_expr) # overwrite LazyFrame with new\nLdf_best = Ldf_best$filter(filter_expr)\n\n# the non optimized plans are similar, on entire in-mem csv, apply filter\nLdf_okay$describe_plan()\n</code></pre> <pre><code>#&gt; FILTER [(col(\"Species\")) == (String(setosa))] FROM\n#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>Ldf_best$describe_plan()\n</code></pre> <pre><code>#&gt; FILTER [(col(\"Species\")) == (String(setosa))] FROM\n#&gt; \n#&gt;   Csv SCAN /tmp/RtmpGybaUh/file6bb04920f7d7\n#&gt;   PROJECT */5 COLUMNS\n</code></pre> <pre><code># NOTE For Ldf_okay, the full time to load csv alrady paid when creating Rdf and Pdf\n\n# The optimized plan are quite different, Ldf_best will read csv and perform filter simultaneously\nLdf_okay$describe_optimized_plan()\n</code></pre> <pre><code>#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"[(col(\\\"Species\\\")) == (String(setosa))]\"\n</code></pre> <pre><code>Ldf_best$describe_optimized_plan()\n</code></pre> <pre><code>#&gt; \n#&gt;   Csv SCAN /tmp/RtmpGybaUh/file6bb04920f7d7\n#&gt;   PROJECT */5 COLUMNS\n#&gt;   SELECTION: [(col(\"Species\")) == (String(setosa))]\n</code></pre> <pre><code># To acquire result in-mem use $colelct()\nPdf_okay = Ldf_okay$collect()\nPdf_best = Ldf_best$collect()\n\n\n# verify tables would be the same\nall.equal(\n  Pdf_okay$to_data_frame(),\n  Pdf_best$to_data_frame()\n)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># a user might write it as a one-liner like so:\nPdf_best2 = pl$scan_csv(temp_filepath)$filter(pl$col(\"Species\") == \"setosa\")\n</code></pre>"},{"location":"man/LazyFrame_clone/","title":"Clone a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_clone/#description","title":"Description","text":"<p>This makes a very cheap deep copy/clone of an existing <code>LazyFrame</code>.</p>"},{"location":"man/LazyFrame_clone/#usage","title":"Usage","text":"<pre><code>LazyFrame_clone()\n</code></pre>"},{"location":"man/LazyFrame_clone/#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_clone/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf1 = pl$LazyFrame(iris)\ndf2 = df1$clone()\ndf3 = df1\n\n# the clone and the original don't have the same address...\npl$mem_address(df1) != pl$mem_address(df2)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># ... but simply assigning df1 to df3 change the address anyway\npl$mem_address(df1) == pl$mem_address(df3)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/LazyFrame_collect/","title":"Collect a query into a DataFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_collect/#description","title":"Description","text":"<p><code>$collect()</code> performs the query on the LazyFrame. It returns a DataFrame</p>"},{"location":"man/LazyFrame_collect/#usage","title":"Usage","text":"<pre><code>LazyFrame_collect(\n  ...,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE,\n  collect_in_background = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_collect/#arguments","title":"Arguments","text":"<code>\u2026</code>  Ignored.  <code>type_coercion</code>  Boolean. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Boolean. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Boolean. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Boolean. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Boolean. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Boolean. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Boolean. Common subexpressions will be cached and reused.  <code>streaming</code>  Boolean. Run parts of the query in a streaming fashion (this is in an alpha state).  <code>no_optimization</code>  Boolean. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Boolean. Use existing optimization settings regardless the settings specified in this function call.  <code>collect_in_background</code>  Boolean. Detach this query from R session. Computation will start in background. Get a handle which later can be converted into the resulting DataFrame. Useful in interactive mode to not lock R session."},{"location":"man/LazyFrame_collect/#details","title":"Details","text":"<p>Note: use <code>$fetch(n)</code> if you want to run your query on the first <code>n</code> rows only. This can be a huge time saver in debugging queries.</p>"},{"location":"man/LazyFrame_collect/#value","title":"Value","text":"<p>A <code>DataFrame</code></p>"},{"location":"man/LazyFrame_collect/#see-also","title":"See Also","text":"<ul> <li> <code>$fetch()</code> - fast limited query check  </li> <li> <code>$profile()</code> - same as <code>$collect()</code> but also returns a table with each operation profiled.  </li> <li> <code>$collect_in_background()</code> - non-blocking collect returns a future handle. Can also just be used via <code>$collect(collect_in_background = TRUE)</code>.  </li> <li> <code>$sink_parquet()</code> streams query to a parquet file.  </li> <li> <code>$sink_ipc()</code> streams query to a arrow file.  </li> </ul>"},{"location":"man/LazyFrame_collect/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(iris)$filter(pl$col(\"Species\") == \"setosa\")$collect()\n</code></pre> <pre><code>#&gt; shape: (50, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026       \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.6          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.2         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.3          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.3         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_collect_in_background/","title":"Collect a query in background","text":"<p>Source code</p>"},{"location":"man/LazyFrame_collect_in_background/#description","title":"Description","text":"<p>This doesn\u2019t block the R session as it calls <code>$collect()</code> in a a detached thread. This can also be used via <code>$collect(collect_in_background = TRUE)</code>.</p>"},{"location":"man/LazyFrame_collect_in_background/#usage","title":"Usage","text":"<pre><code>LazyFrame_collect_in_background()\n</code></pre>"},{"location":"man/LazyFrame_collect_in_background/#details","title":"Details","text":"<p>This function immediately returns an RThreadHandle. Use <code>\\&lt;RPolarsRThreadHandle&gt;$is_finished()</code> to see if done. Use <code>\\&lt;RPolarsRThreadHandle&gt;$join()</code> to wait and get the final result.</p> <p>It is useful to not block the R session while query executes. If you use <code>\\&lt;Expr&gt;$map_batches()</code> or <code>\\&lt;Expr&gt;$map_elements()</code> to run R functions in the query, then you must pass <code>in_background = TRUE</code> in <code>$map_batches()</code> (or <code>$map_elements()</code>). Otherwise, <code>$collect_in_background()</code> will fail because the main R session is not available for polars execution. See also examples below.</p>"},{"location":"man/LazyFrame_collect_in_background/#value","title":"Value","text":"<p>RThreadHandle, a future-like thread handle for the task</p>"},{"location":"man/LazyFrame_collect_in_background/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Some expression which does contain a map\nexpr = pl$col(\"mpg\")$map(\n  \\(x) {\n    Sys.sleep(.1)\n    x * 0.43\n  },\n  in_background = TRUE # set TRUE if collecting in background queries with $map or $apply\n)$alias(\"kml\")\n\n# return is immediately a handle to another thread.\nhandle = pl$LazyFrame(mtcars)$with_columns(expr)$collect_in_background()\n\n# ask if query is done\nif (!handle$is_finished()) print(\"not done yet\")\n</code></pre> <pre><code>#&gt; [1] \"not done yet\"\n</code></pre> <pre><code># get result, blocking until polars query is done\ndf = handle$join()\ndf\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 am  \u2506 gear \u2506 carb \u2506 kml   \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 ---  \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64  \u2506 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 9.03  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 9.03  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2506 9.804 \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2506 9.202 \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2506 \u2026     \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2506 6.794 \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2506 8.471 \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2506 6.45  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2506 9.202 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_columns/","title":"Get the column names of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_columns/#description","title":"Description","text":"<p>Get the column names of a LazyFrame</p>"},{"location":"man/LazyFrame_columns/#usage","title":"Usage","text":"<pre><code>LazyFrame_columns()\n</code></pre>"},{"location":"man/LazyFrame_columns/#value","title":"Value","text":"<p>A vector of column names</p>"},{"location":"man/LazyFrame_columns/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$columns\n</code></pre> <pre><code>#&gt;  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n#&gt; [11] \"carb\"\n</code></pre>"},{"location":"man/LazyFrame_describe_plan/","title":"Print the optimized or non-optimized plans of <code>LazyFrame</code>","text":"<p>Source code</p>"},{"location":"man/LazyFrame_describe_plan/#description","title":"Description","text":"<p><code>$describe_plan()</code> shows the query in the format that <code>polars</code> understands. <code>$describe_optimized_plan()</code> shows the optimized query plan that <code>polars</code> will execute when <code>$collect()</code> is called. It is possible that both plans are identical if <code>polars</code> doesn\u2019t find any way to optimize the query.</p>"},{"location":"man/LazyFrame_describe_plan/#usage","title":"Usage","text":"<pre><code>LazyFrame_describe_optimized_plan()\n\nLazyFrame_describe_plan\n</code></pre>"},{"location":"man/LazyFrame_describe_plan/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p>"},{"location":"man/LazyFrame_describe_plan/#value","title":"Value","text":"<p>This only prints the plan in the console, it doesn\u2019t return any value.</p>"},{"location":"man/LazyFrame_describe_plan/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlazy_frame = pl$LazyFrame(iris)\n\n# Prepare your query\nlazy_query = lazy_frame$sort(\"Species\")$filter(pl$col(\"Species\") != \"setosa\")\n\n# This is the query as `polars` understands it\nlazy_query$describe_plan()\n</code></pre> <pre><code>#&gt; FILTER [(col(\"Species\")) != (String(setosa))] FROM\n#&gt; SORT BY [col(\"Species\")]\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># This is the query after `polars` optimizes it: instead of sorting first and\n# then filtering, it is faster to filter first and then sort the rest.\nlazy_query$describe_optimized_plan()\n</code></pre> <pre><code>#&gt; SORT BY [col(\"Species\")]\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"[(col(\\\"Species\\\")) != (String(setosa))]\"\n</code></pre>"},{"location":"man/LazyFrame_drop/","title":"Drop columns of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_drop/#description","title":"Description","text":"<p>Drop columns of a LazyFrame</p>"},{"location":"man/LazyFrame_drop/#usage","title":"Usage","text":"<pre><code>LazyFrame_drop(columns)\n</code></pre>"},{"location":"man/LazyFrame_drop/#arguments","title":"Arguments","text":"<code>columns</code>  A character vector with the names of the column(s) to remove."},{"location":"man/LazyFrame_drop/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_drop/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$drop(c(\"mpg\", \"hp\"))\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;  SELECT [col(\"cyl\"), col(\"disp\"), col(\"drat\"), col(\"wt\"), col(\"qsec\"), col(\"vs\"), col(\"am\"), col(\"gear\"), col(\"carb\")] FROM\n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyFrame_drop_nulls/","title":"Drop nulls (missing values)","text":"<p>Source code</p>"},{"location":"man/LazyFrame_drop_nulls/#description","title":"Description","text":"<p>Drop all rows that contain nulls (which correspond to <code>NA</code> in R).</p>"},{"location":"man/LazyFrame_drop_nulls/#usage","title":"Usage","text":"<pre><code>LazyFrame_drop_nulls(subset = NULL)\n</code></pre>"},{"location":"man/LazyFrame_drop_nulls/#arguments","title":"Arguments","text":"<code>subset</code>  A character vector with the names of the column(s) for which nulls are considered. If <code>NULL</code> (default), use all columns."},{"location":"man/LazyFrame_drop_nulls/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_drop_nulls/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ntmp = mtcars\ntmp[1:3, \"mpg\"] = NA\ntmp[4, \"hp\"] = NA\ntmp = pl$LazyFrame(tmp)\n\n# number of rows in `tmp` before dropping nulls\ntmp$collect()$height\n</code></pre> <pre><code>#&gt; [1] 32\n</code></pre> <pre><code>tmp$drop_nulls()$collect()$height\n</code></pre> <pre><code>#&gt; [1] 28\n</code></pre> <pre><code>tmp$drop_nulls(\"mpg\")$collect()$height\n</code></pre> <pre><code>#&gt; [1] 29\n</code></pre> <pre><code>tmp$drop_nulls(c(\"mpg\", \"hp\"))$collect()$height\n</code></pre> <pre><code>#&gt; [1] 28\n</code></pre>"},{"location":"man/LazyFrame_dtypes/","title":"Data types information","text":"<p>Source code</p>"},{"location":"man/LazyFrame_dtypes/#description","title":"Description","text":"<p>Get the data type of all columns. You can see all available types with <code>names(pl$dtypes)</code>. The data type of each column is also shown when printing the DataFrame.</p>"},{"location":"man/LazyFrame_dtypes/#usage","title":"Usage","text":"<pre><code>LazyFrame_schema()\n\nLazyFrame_dtypes()\n</code></pre>"},{"location":"man/LazyFrame_dtypes/#value","title":"Value","text":"<p><code>$dtypes</code> returns an unnamed list with the data type of each column. <code>$schema</code> returns a named list with the column names and the data type of each column.</p>"},{"location":"man/LazyFrame_dtypes/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(iris)$dtypes\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; DataType: Float64\n#&gt; \n#&gt; [[2]]\n#&gt; DataType: Float64\n#&gt; \n#&gt; [[3]]\n#&gt; DataType: Float64\n#&gt; \n#&gt; [[4]]\n#&gt; DataType: Float64\n#&gt; \n#&gt; [[5]]\n#&gt; DataType: Categorical(\n#&gt;     Some(\n#&gt;         local,\n#&gt;     ),\n#&gt;     Physical,\n#&gt; )\n</code></pre> <pre><code>pl$LazyFrame(iris)$schema\n</code></pre> <pre><code>#&gt; $Sepal.Length\n#&gt; DataType: Float64\n#&gt; \n#&gt; $Sepal.Width\n#&gt; DataType: Float64\n#&gt; \n#&gt; $Petal.Length\n#&gt; DataType: Float64\n#&gt; \n#&gt; $Petal.Width\n#&gt; DataType: Float64\n#&gt; \n#&gt; $Species\n#&gt; DataType: Categorical(\n#&gt;     Some(\n#&gt;         local,\n#&gt;     ),\n#&gt;     Physical,\n#&gt; )\n</code></pre>"},{"location":"man/LazyFrame_explode/","title":"Explode columns containing a list of values","text":"<p>Source code</p>"},{"location":"man/LazyFrame_explode/#description","title":"Description","text":"<p>This will take every element of a list column and add it on an additional row.</p>"},{"location":"man/LazyFrame_explode/#usage","title":"Usage","text":"<pre><code>LazyFrame_explode(...)\n</code></pre>"},{"location":"man/LazyFrame_explode/#arguments","title":"Arguments","text":"<code>\u2026</code>  Column(s) to be exploded as individual <code>Into\\ or list/vector of <code>Into\\. In a handful of places in rust-polars, only the plain variant <code>Expr::Column</code> is accepted. This is currenly one of such places. Therefore <code>pl$col(\u201cname\u201d)</code> and <code>pl$all()</code> is allowed, not <code>pl$col(\u201cname\u201d)$alias(\u201cnewname\u201d)</code>. <code>\u201cname\u201d</code> is implicitly converted to <code>pl$col(\u201cname\u201d)</code>."},{"location":"man/LazyFrame_explode/#details","title":"Details","text":"<p>Only columns of DataType <code>List</code> or <code>String</code> can be exploded.</p> <p>Named expressions like <code>$explode(a = pl$col(\u201cb\u201d))</code> will not implicitly trigger <code>$alias(\u201ca\u201d)</code> here, due to only variant <code>Expr::Column</code> is supported in rust-polars.</p>"},{"location":"man/LazyFrame_explode/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_explode/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$LazyFrame(\n  letters = c(\"aa\", \"aa\", \"bb\", \"cc\"),\n  numbers = list(1, c(2, 3), c(4, 5), c(6, 7, 8)),\n  numbers_2 = list(0, c(1, 2), c(3, 4), c(5, 6, 7)) # same structure as numbers\n)\ndf\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; DF [\"letters\", \"numbers\", \"numbers_2\"]; PROJECT */3 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># explode a single column, append others\ndf$explode(\"numbers\")$collect()\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2       \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---             \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 list[f64]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 aa      \u2506 1.0     \u2506 [0.0]           \u2502\n#&gt; \u2502 aa      \u2506 2.0     \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 aa      \u2506 3.0     \u2506 [1.0, 2.0]      \u2502\n#&gt; \u2502 bb      \u2506 4.0     \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 bb      \u2506 5.0     \u2506 [3.0, 4.0]      \u2502\n#&gt; \u2502 cc      \u2506 6.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2502 cc      \u2506 7.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2502 cc      \u2506 8.0     \u2506 [5.0, 6.0, 7.0] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># it is also possible to explode a character column to have one letter per row\ndf$explode(\"letters\")\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; EXPLODE\n#&gt;   DF [\"letters\", \"numbers\", \"numbers_2\"]; PROJECT */3 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># explode two columns of same nesting structure, by names or the common dtype\n# \"List(Float64)\"\ndf$explode(\"numbers\", \"numbers_2\")$collect()\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2 \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---       \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 aa      \u2506 1.0     \u2506 0.0       \u2502\n#&gt; \u2502 aa      \u2506 2.0     \u2506 1.0       \u2502\n#&gt; \u2502 aa      \u2506 3.0     \u2506 2.0       \u2502\n#&gt; \u2502 bb      \u2506 4.0     \u2506 3.0       \u2502\n#&gt; \u2502 bb      \u2506 5.0     \u2506 4.0       \u2502\n#&gt; \u2502 cc      \u2506 6.0     \u2506 5.0       \u2502\n#&gt; \u2502 cc      \u2506 7.0     \u2506 6.0       \u2502\n#&gt; \u2502 cc      \u2506 8.0     \u2506 7.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$explode(pl$col(pl$List(pl$Float64)))$collect()\n</code></pre> <pre><code>#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 letters \u2506 numbers \u2506 numbers_2 \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2506 ---       \u2502\n#&gt; \u2502 str     \u2506 f64     \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 aa      \u2506 1.0     \u2506 0.0       \u2502\n#&gt; \u2502 aa      \u2506 2.0     \u2506 1.0       \u2502\n#&gt; \u2502 aa      \u2506 3.0     \u2506 2.0       \u2502\n#&gt; \u2502 bb      \u2506 4.0     \u2506 3.0       \u2502\n#&gt; \u2502 bb      \u2506 5.0     \u2506 4.0       \u2502\n#&gt; \u2502 cc      \u2506 6.0     \u2506 5.0       \u2502\n#&gt; \u2502 cc      \u2506 7.0     \u2506 6.0       \u2502\n#&gt; \u2502 cc      \u2506 8.0     \u2506 7.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_fetch/","title":"Fetch <code>n</code> rows of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_fetch/#description","title":"Description","text":"<p>This is similar to <code>$collect()</code> but limit the number of rows to collect. It is mostly useful to check that a query works as expected.</p>"},{"location":"man/LazyFrame_fetch/#usage","title":"Usage","text":"<pre><code>LazyFrame_fetch(\n  n_rows = 500,\n  ...,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_fetch/#arguments","title":"Arguments","text":"<code>n_rows</code>  Integer. Maximum number of rows to fetch.  <code>\u2026</code>  Ignored.  <code>type_coercion</code>  Boolean. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Boolean. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Boolean. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Boolean. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Boolean. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Boolean. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Boolean. Common subexpressions will be cached and reused.  <code>streaming</code>  Boolean. Run parts of the query in a streaming fashion (this is in an alpha state).  <code>no_optimization</code>  Boolean. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Boolean. Use existing optimization settings regardless the settings specified in this function call."},{"location":"man/LazyFrame_fetch/#details","title":"Details","text":"<p><code>$fetch()</code> does not guarantee the final number of rows in the DataFrame output. It only guarantees that <code>n</code> rows are used at the beginning of the query. Filters, join operations and a lower number of rows available in the scanned file influence the final number of rows.</p>"},{"location":"man/LazyFrame_fetch/#value","title":"Value","text":"<p>A DataFrame of maximum n_rows</p>"},{"location":"man/LazyFrame_fetch/#see-also","title":"See Also","text":"<ul> <li> <code>$collect()</code> - regular collect.  </li> <li> <code>$profile()</code> - same as <code>$collect()</code> but also returns a table with each operation profiled.  </li> <li> <code>$collect_in_background()</code> - non-blocking collect returns a future handle. Can also just be used via <code>$collect(collect_in_background = TRUE)</code>.  </li> <li> <code>$sink_parquet()</code> streams query to a parquet file.  </li> <li> <code>$sink_ipc()</code> streams query to a arrow file.  </li> </ul>"},{"location":"man/LazyFrame_fetch/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# fetch 3 rows\npl$LazyFrame(iris)$fetch(3)\n</code></pre> <pre><code>#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># this fetch-query returns 4 rows, because we started with 3 and appended one\n# row in the query (see section 'Details')\npl$LazyFrame(iris)$\n  select(pl$col(\"Species\")$append(\"flora gigantica, alien\"))$\n  fetch(3)\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species                \u2502\n#&gt; \u2502 ---                    \u2502\n#&gt; \u2502 str                    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa                 \u2502\n#&gt; \u2502 setosa                 \u2502\n#&gt; \u2502 setosa                 \u2502\n#&gt; \u2502 flora gigantica, alien \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_fill_nan/","title":"Fill <code>NaN</code>","text":"<p>Source code</p>"},{"location":"man/LazyFrame_fill_nan/#description","title":"Description","text":"<p>Fill <code>NaN</code> values by an Expression evaluation.</p>"},{"location":"man/LazyFrame_fill_nan/#usage","title":"Usage","text":"<pre><code>LazyFrame_fill_nan(fill_value)\n</code></pre>"},{"location":"man/LazyFrame_fill_nan/#arguments","title":"Arguments","text":"<code>fill_value</code>  Value to fill <code>NaN</code> with."},{"location":"man/LazyFrame_fill_nan/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_fill_nan/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$LazyFrame(\n  a = c(1.5, 2, NaN, 4),\n  b = c(1.5, NaN, NaN, 4)\n)\ndf$fill_nan(99)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_fill_null/","title":"Fill nulls","text":"<p>Source code</p>"},{"location":"man/LazyFrame_fill_null/#description","title":"Description","text":"<p>Fill null values (which correspond to <code>NA</code> in R) using the specified value or strategy.</p>"},{"location":"man/LazyFrame_fill_null/#usage","title":"Usage","text":"<pre><code>LazyFrame_fill_null(fill_value)\n</code></pre>"},{"location":"man/LazyFrame_fill_null/#arguments","title":"Arguments","text":"<code>fill_value</code>  Value to fill nulls with."},{"location":"man/LazyFrame_fill_null/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_fill_null/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$LazyFrame(\n  a = c(1.5, 2, NA, 4),\n  b = c(1.5, NA, NA, 4)\n)\ndf$fill_null(99)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_filter/","title":"Apply filter to LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_filter/#description","title":"Description","text":"<p>Filter rows with an Expression defining a boolean column. Multiple expressions are combined with <code>&amp;</code> (AND). This is equivalent to <code>dplyr::filter()</code>.</p>"},{"location":"man/LazyFrame_filter/#usage","title":"Usage","text":"<pre><code>LazyFrame_filter(...)\n</code></pre>"},{"location":"man/LazyFrame_filter/#arguments","title":"Arguments","text":"<code>\u2026</code>  Polars expressions which will evaluate to a boolean."},{"location":"man/LazyFrame_filter/#details","title":"Details","text":"<p>Rows where the condition returns <code>NA</code> are dropped.</p>"},{"location":"man/LazyFrame_filter/#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object with add/modified column.</p>"},{"location":"man/LazyFrame_filter/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(iris)\n\nlf$filter(pl$col(\"Species\") == \"setosa\")$collect()\n</code></pre> <pre><code>#&gt; shape: (50, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026       \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.6          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.2         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.3          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.3         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># This is equivalent to\n# lf$filter(pl$col(\"Sepal.Length\") &gt; 5 &amp; pl$col(\"Petal.Width\") &lt; 1)\nlf$filter(pl$col(\"Sepal.Length\") &gt; 5, pl$col(\"Petal.Width\") &lt; 1)\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; FILTER [([(col(\"Sepal.Length\")) &gt; (5.0)]) &amp; ([(col(\"Petal.Width\")) &lt; (1.0)])] FROM\n#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyFrame_first/","title":"Get the first row of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_first/#description","title":"Description","text":"<p>Get the first row of a LazyFrame</p>"},{"location":"man/LazyFrame_first/#usage","title":"Usage","text":"<pre><code>LazyFrame_first\n</code></pre>"},{"location":"man/LazyFrame_first/#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_first/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$first()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_get_optimization_toggle/","title":"Get optimization settings","text":"<p>Source code</p>"},{"location":"man/LazyFrame_get_optimization_toggle/#description","title":"Description","text":"<p>Get the current optimization toggles for the lazy query</p>"},{"location":"man/LazyFrame_get_optimization_toggle/#usage","title":"Usage","text":"<pre><code>LazyFrame_get_optimization_toggle()\n</code></pre>"},{"location":"man/LazyFrame_get_optimization_toggle/#value","title":"Value","text":"<p>List of optimization toggles</p>"},{"location":"man/LazyFrame_get_optimization_toggle/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$get_optimization_toggle()\n</code></pre> <pre><code>#&gt; $type_coercion\n#&gt; [1] TRUE\n#&gt; \n#&gt; $predicate_pushdown\n#&gt; [1] TRUE\n#&gt; \n#&gt; $projection_pushdown\n#&gt; [1] TRUE\n#&gt; \n#&gt; $simplify_expression\n#&gt; [1] TRUE\n#&gt; \n#&gt; $slice_pushdown\n#&gt; [1] TRUE\n#&gt; \n#&gt; $comm_subplan_elim\n#&gt; [1] TRUE\n#&gt; \n#&gt; $comm_subexpr_elim\n#&gt; [1] TRUE\n#&gt; \n#&gt; $streaming\n#&gt; [1] FALSE\n#&gt; \n#&gt; $eager\n#&gt; [1] FALSE\n</code></pre>"},{"location":"man/LazyFrame_group_by/","title":"Group a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_group_by/#description","title":"Description","text":"<p>This doesn\u2019t modify the data but only stores information about the group structure. This structure can then be used by several functions (<code>$agg()</code>, <code>$filter()</code>, etc.).</p>"},{"location":"man/LazyFrame_group_by/#usage","title":"Usage","text":"<pre><code>LazyFrame_group_by(..., maintain_order = pl\\$options\\$maintain_order)\n</code></pre>"},{"location":"man/LazyFrame_group_by/#arguments","title":"Arguments","text":"<code>\u2026</code>  Any Expr(s) or string(s) naming a column.  <code>maintain_order</code>  Keep the same order as the original <code>DataFrame</code>. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine. The default value can be changed with <code>pl$set_options(maintain_order = TRUE)</code>."},{"location":"man/LazyFrame_group_by/#value","title":"Value","text":"<p>LazyGroupBy (a LazyFrame with special groupby methods like <code>$agg()</code>)</p>"},{"location":"man/LazyFrame_group_by/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(\n  foo = c(\"one\", \"two\", \"two\", \"one\", \"two\"),\n  bar = c(5, 3, 2, 4, 1)\n)$\n  group_by(\"foo\")$\n  agg(\n  pl$col(\"bar\")$sum()$name$suffix(\"_sum\"),\n  pl$col(\"bar\")$mean()$alias(\"bar_tail_sum\")\n)$\n  collect()\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar_sum \u2506 bar_tail_sum \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---          \u2502\n#&gt; \u2502 str \u2506 f64     \u2506 f64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one \u2506 9.0     \u2506 4.5          \u2502\n#&gt; \u2502 two \u2506 6.0     \u2506 2.0          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_head/","title":"Head of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_head/#description","title":"Description","text":"<p>Get the first <code>n</code> rows of the query.</p>"},{"location":"man/LazyFrame_head/#usage","title":"Usage","text":"<pre><code>LazyFrame_head(n)\n</code></pre>"},{"location":"man/LazyFrame_head/#arguments","title":"Arguments","text":"<code>n</code>  Positive number not larger than 2^32."},{"location":"man/LazyFrame_head/#details","title":"Details","text":"<p>Any number will converted to u32. Negative raises error.</p>"},{"location":"man/LazyFrame_head/#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object with applied filter.</p>"},{"location":"man/LazyFrame_head/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$head(4)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_join/","title":"Join LazyFrames","text":"<p>Source code</p>"},{"location":"man/LazyFrame_join/#description","title":"Description","text":"<p>This function can do both mutating joins (adding columns based on matching observations, for example with <code>how = \u201cleft\u201d</code>) and filtering joins (keeping observations based on matching observations, for example with <code>how = \u201cinner\u201d</code>).</p>"},{"location":"man/LazyFrame_join/#usage","title":"Usage","text":"<pre><code>LazyFrame_join(\n  other,\n  left_on = NULL,\n  right_on = NULL,\n  on = NULL,\n  how = c(\"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\"),\n  suffix = \"_right\",\n  allow_parallel = TRUE,\n  force_parallel = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_join/#arguments","title":"Arguments","text":"<code>other</code>  DataFrame  <code>left_on</code>, <code>right_on</code>  Same as <code>on</code> but only for the left or the right DataFrame. They must have the same length.  <code>on</code>  Either a vector of column names or a list of expressions and/or strings. Use <code>left_on</code> and <code>right_on</code> if the column names to match on are different between the two DataFrames.  <code>how</code>  One of the following methods: \"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\".  <code>suffix</code>  Suffix to add to duplicated column names.  <code>allow_parallel</code>  Boolean.  <code>force_parallel</code>  Boolean."},{"location":"man/LazyFrame_join/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_join/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# inner join by default\ndf1 = pl$LazyFrame(list(key = 1:3, payload = c(\"f\", \"i\", NA)))\ndf2 = pl$LazyFrame(list(key = c(3L, 4L, 5L, NA_integer_)))\ndf1$join(other = df2, on = \"key\")\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; INNER JOIN:\n#&gt; LEFT PLAN ON: [col(\"key\")]\n#&gt;   DF [\"key\", \"payload\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n#&gt; RIGHT PLAN ON: [col(\"key\")]\n#&gt;   DF [\"key\"]; PROJECT */1 COLUMNS; SELECTION: \"None\"\n#&gt; END INNER JOIN\n</code></pre> <pre><code># cross join\ndf1 = pl$LazyFrame(x = letters[1:3])\ndf2 = pl$LazyFrame(y = 1:4)\ndf1$join(other = df2, how = \"cross\")\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; CROSS JOIN:\n#&gt; LEFT PLAN ON: [col(\"x\")]\n#&gt;   DF [\"x\"]; PROJECT */1 COLUMNS; SELECTION: \"None\"\n#&gt; RIGHT PLAN ON: [col(\"y\")]\n#&gt;   DF [\"y\"]; PROJECT */1 COLUMNS; SELECTION: \"None\"\n#&gt; END CROSS JOIN\n</code></pre>"},{"location":"man/LazyFrame_join_asof/","title":"Perform joins on nearest keys","text":"<p>Source code</p>"},{"location":"man/LazyFrame_join_asof/#description","title":"Description","text":"<p>This is similar to a left-join except that we match on nearest key rather than equal keys.</p>"},{"location":"man/LazyFrame_join_asof/#usage","title":"Usage","text":"<pre><code>LazyFrame_join_asof(\n  other,\n  ...,\n  left_on = NULL,\n  right_on = NULL,\n  on = NULL,\n  by_left = NULL,\n  by_right = NULL,\n  by = NULL,\n  strategy = \"backward\",\n  suffix = \"_right\",\n  tolerance = NULL,\n  allow_parallel = TRUE,\n  force_parallel = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_join_asof/#arguments","title":"Arguments","text":"<code>other</code>  LazyFrame  <code>\u2026</code>  Not used, blocks use of further positional arguments  <code>left_on</code>, <code>right_on</code>  Same as <code>on</code> but only for the left or the right DataFrame. They must have the same length.  <code>on</code>  Either a vector of column names or a list of expressions and/or strings. Use <code>left_on</code> and <code>right_on</code> if the column names to match on are different between the two DataFrames.  <code>by_left</code>, <code>by_right</code>  Same as <code>by</code> but only for the left or the right table. They must have the same length.  <code>by</code>  Join on these columns before performing asof join. Either a vector of column names or a list of expressions and/or strings. Use <code>left_by</code> and <code>right_by</code> if the column names to match on are different between the two tables.  <code>strategy</code>   Strategy for where to find match:  <ul> <li>  \"backward\" (default): search for the last row in the right table whose <code>on</code> key is less than or equal to the left key.  </li> <li>  \"forward\": search for the first row in the right table whose <code>on</code> key is greater than or equal to the left key.  </li> <li>  \"nearest\": search for the last row in the right table whose value is nearest to the left key. String keys are not currently supported for a nearest search.  </li> </ul> <code>suffix</code>  Suffix to add to duplicated column names.  <code>tolerance</code>   Numeric tolerance. By setting this the join will only be done if the near keys are within this distance. If an asof join is done on columns of dtype \"Date\", \"Datetime\", \"Duration\" or \"Time\" you can use the following values:  <pre>- 1ns   (1 nanosecond)\n- 1us   (1 microsecond)\n- 1ms   (1 millisecond)\n- 1s    (1 second)\n- 1m    (1 minute)\n- 1h    (1 hour)\n- 1d    (1 day)\n- 1w    (1 week)\n- 1mo   (1 calendar month) // currently not available, as interval is not fixed\n- 1y    (1 calendar year)  // currently not available, as interval is not fixed\n- 1i    (1 index count)\n</pre>  Or combine them: \"3d12h4m25s\" \\# 3 days, 12 hours, 4 minutes, and 25 seconds  There may be a circumstance where R types are not sufficient to express a numeric tolerance. In that case, you can use the expression syntax like <code>tolerance = pl$lit(42)$cast(pl$Uint64)</code> <code>allow_parallel</code>  Boolean.  <code>force_parallel</code>  Boolean."},{"location":"man/LazyFrame_join_asof/#details","title":"Details","text":"<p>Both tables (DataFrames or LazyFrames) must be sorted by the asof_join key.</p>"},{"location":"man/LazyFrame_join_asof/#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_join_asof/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n#\n# create two LazyFrame to join asof\ngdp = pl$LazyFrame(\n  date = as.Date(c(\"2015-1-1\", \"2016-1-1\", \"2017-5-1\", \"2018-1-1\", \"2019-1-1\")),\n  gdp = c(4321, 4164, 4411, 4566, 4696),\n  group = c(\"b\", \"a\", \"a\", \"b\", \"b\")\n)\n\npop = pl$LazyFrame(\n  date = as.Date(c(\"2016-5-12\", \"2017-5-12\", \"2018-5-12\", \"2019-5-12\")),\n  population = c(82.19, 82.66, 83.12, 83.52),\n  group = c(\"b\", \"b\", \"a\", \"a\")\n)\n\n# optional make sure tables are already sorted with \"on\" join-key\ngdp = gdp$sort(\"date\")\npop = pop$sort(\"date\")\n\n\n# Left-join_asof LazyFrame pop with gdp on \"date\"\n# Look backward in gdp to find closest matching date\npop$join_asof(gdp, on = \"date\", strategy = \"backward\")$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4164.0 \u2506 a           \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4566.0 \u2506 b           \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 4696.0 \u2506 b           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># .... and forward\npop$join_asof(gdp, on = \"date\", strategy = \"forward\")$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4566.0 \u2506 b           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4696.0 \u2506 b           \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># join by a group: \"only look within groups\"\npop$join_asof(gdp, on = \"date\", by = \"group\", strategy = \"backward\")$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 4321.0 \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4321.0 \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 4411.0 \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 4411.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># only look 2 weeks and 2 days back\npop$join_asof(gdp, on = \"date\", strategy = \"backward\", tolerance = \"2w2d\")$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># only look 11 days back (numeric tolerance depends on polars type, &lt;date&gt; is in days)\npop$join_asof(gdp, on = \"date\", strategy = \"backward\", tolerance = 11)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2506 population \u2506 group \u2506 gdp    \u2506 group_right \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---   \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 date       \u2506 f64        \u2506 str   \u2506 f64    \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2016-05-12 \u2506 82.19      \u2506 b     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2017-05-12 \u2506 82.66      \u2506 b     \u2506 4411.0 \u2506 a           \u2502\n#&gt; \u2502 2018-05-12 \u2506 83.12      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2502 2019-05-12 \u2506 83.52      \u2506 a     \u2506 null   \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_last/","title":"Get the last row of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_last/#description","title":"Description","text":"<p>Aggregate the columns in the LazyFrame to their maximum value.</p>"},{"location":"man/LazyFrame_last/#usage","title":"Usage","text":"<pre><code>LazyFrame_last\n</code></pre>"},{"location":"man/LazyFrame_last/#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_last/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$last()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_limit/","title":"Limit a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_limit/#description","title":"Description","text":"<p>Take some maximum number of rows.</p>"},{"location":"man/LazyFrame_limit/#usage","title":"Usage","text":"<pre><code>LazyFrame_limit(n)\n</code></pre>"},{"location":"man/LazyFrame_limit/#arguments","title":"Arguments","text":"<code>n</code>  Positive number not larger than 2^32."},{"location":"man/LazyFrame_limit/#details","title":"Details","text":"<p>Any number will converted to u32. Negative raises error.</p>"},{"location":"man/LazyFrame_limit/#value","title":"Value","text":"<p>A <code>LazyFrame</code></p>"},{"location":"man/LazyFrame_limit/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$limit(4)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_max/","title":"Max","text":"<p>Source code</p>"},{"location":"man/LazyFrame_max/#description","title":"Description","text":"<p>Aggregate the columns in the LazyFrame to their maximum value.</p>"},{"location":"man/LazyFrame_max/#usage","title":"Usage","text":"<pre><code>LazyFrame_max()\n</code></pre>"},{"location":"man/LazyFrame_max/#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$max()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 33.9 \u2506 8.0 \u2506 472.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_mean/","title":"Mean","text":"<p>Source code</p>"},{"location":"man/LazyFrame_mean/#description","title":"Description","text":"<p>Aggregate the columns in the LazyFrame to their mean value.</p>"},{"location":"man/LazyFrame_mean/#usage","title":"Usage","text":"<pre><code>LazyFrame_mean()\n</code></pre>"},{"location":"man/LazyFrame_mean/#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_mean/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$mean()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl    \u2506 disp       \u2506 hp       \u2506 \u2026 \u2506 vs     \u2506 am      \u2506 gear   \u2506 carb   \u2502\n#&gt; \u2502 ---       \u2506 ---    \u2506 ---        \u2506 ---      \u2506   \u2506 ---    \u2506 ---     \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 f64       \u2506 f64    \u2506 f64        \u2506 f64      \u2506   \u2506 f64    \u2506 f64     \u2506 f64    \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 20.090625 \u2506 6.1875 \u2506 230.721875 \u2506 146.6875 \u2506 \u2026 \u2506 0.4375 \u2506 0.40625 \u2506 3.6875 \u2506 2.8125 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_median/","title":"Median","text":"<p>Source code</p>"},{"location":"man/LazyFrame_median/#description","title":"Description","text":"<p>Aggregate the columns in the LazyFrame to their median value.</p>"},{"location":"man/LazyFrame_median/#usage","title":"Usage","text":"<pre><code>LazyFrame_median()\n</code></pre>"},{"location":"man/LazyFrame_median/#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_median/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$median()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 6.0 \u2506 196.3 \u2506 123.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_melt/","title":"Unpivot a Frame from wide to long format","text":"<p>Source code</p>"},{"location":"man/LazyFrame_melt/#description","title":"Description","text":"<p>Unpivot a Frame from wide to long format</p>"},{"location":"man/LazyFrame_melt/#usage","title":"Usage","text":"<pre><code>LazyFrame_melt(\n  id_vars = NULL,\n  value_vars = NULL,\n  variable_name = NULL,\n  value_name = NULL,\n  ...,\n  streamable = TRUE\n)\n</code></pre>"},{"location":"man/LazyFrame_melt/#arguments","title":"Arguments","text":"<code>id_vars</code>  Columns to use as identifier variables.  <code>value_vars</code>  Values to use as identifier variables. If <code>value_vars</code> is empty all columns that are not in <code>id_vars</code> will be used.  <code>variable_name</code>  Name to give to the new column containing the names of the melted columns. Defaults to \"variable\".  <code>value_name</code>  Name to give to the new column containing the values of the melted columns. Defaults to \"value\"  <code>\u2026</code>  Not used.  <code>streamable</code>  Allow this node to run in the streaming engine. If this runs in streaming, the output of the melt operation will not have a stable ordering."},{"location":"man/LazyFrame_melt/#details","title":"Details","text":"<p>Optionally leaves identifiers set.</p> <p>This function is useful to massage a Frame into a format where one or more columns are identifier variables (id_vars), while all other columns, considered measured variables (value_vars), are \"unpivoted\" to the row axis, leaving just two non-identifier columns, \u2018variable\u2019 and \u2018value\u2019.</p>"},{"location":"man/LazyFrame_melt/#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_melt/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(\n  a = c(\"x\", \"y\", \"z\"),\n  b = c(1, 3, 5),\n  c = c(2, 4, 6)\n)\nlf$melt(id_vars = \"a\", value_vars = c(\"b\", \"c\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (6, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 variable \u2506 value \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 str      \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 x   \u2506 b        \u2506 1.0   \u2502\n#&gt; \u2502 y   \u2506 b        \u2506 3.0   \u2502\n#&gt; \u2502 z   \u2506 b        \u2506 5.0   \u2502\n#&gt; \u2502 x   \u2506 c        \u2506 2.0   \u2502\n#&gt; \u2502 y   \u2506 c        \u2506 4.0   \u2502\n#&gt; \u2502 z   \u2506 c        \u2506 6.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_min/","title":"Min","text":"<p>Source code</p>"},{"location":"man/LazyFrame_min/#description","title":"Description","text":"<p>Aggregate the columns in the LazyFrame to their minimum value.</p>"},{"location":"man/LazyFrame_min/#usage","title":"Usage","text":"<pre><code>LazyFrame_min()\n</code></pre>"},{"location":"man/LazyFrame_min/#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$min()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp \u2506 hp   \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---  \u2506 ---  \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64  \u2506 f64  \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 4.0 \u2506 71.1 \u2506 52.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_print/","title":"print LazyFrame internal method","text":"<p>Source code</p>"},{"location":"man/LazyFrame_print/#description","title":"Description","text":"<p>can be used i the middle of a method chain</p>"},{"location":"man/LazyFrame_print/#usage","title":"Usage","text":"<pre><code>LazyFrame_print(x)\n</code></pre>"},{"location":"man/LazyFrame_print/#arguments","title":"Arguments","text":"<code>x</code>  LazyFrame"},{"location":"man/LazyFrame_print/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p>"},{"location":"man/LazyFrame_print/#value","title":"Value","text":"<p>self</p>"},{"location":"man/LazyFrame_print/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(iris)$print()\n</code></pre> <pre><code>#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyFrame_profile/","title":"Collect and profile a lazy query.","text":"<p>Source code</p>"},{"location":"man/LazyFrame_profile/#description","title":"Description","text":"<p>This will run the query and return a list containing the materialized DataFrame and a DataFrame that contains profiling information of each node that is executed.</p>"},{"location":"man/LazyFrame_profile/#usage","title":"Usage","text":"<pre><code>LazyFrame_profile(\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE,\n  collect_in_background = FALSE,\n  show_plot = FALSE,\n  truncate_nodes = 0\n)\n</code></pre>"},{"location":"man/LazyFrame_profile/#arguments","title":"Arguments","text":"<code>type_coercion</code>  Boolean. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Boolean. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Boolean. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Boolean. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Boolean. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Boolean. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Boolean. Common subexpressions will be cached and reused.  <code>streaming</code>  Boolean. Run parts of the query in a streaming fashion (this is in an alpha state).  <code>no_optimization</code>  Boolean. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Boolean. Use existing optimization settings regardless the settings specified in this function call.  <code>collect_in_background</code>  Boolean. Detach this query from R session. Computation will start in background. Get a handle which later can be converted into the resulting DataFrame. Useful in interactive mode to not lock R session.  <code>show_plot</code>  Show a Gantt chart of the profiling result  <code>truncate_nodes</code>  Truncate the label lengths in the Gantt chart to this number of characters. If <code>0</code> (default), do not truncate."},{"location":"man/LazyFrame_profile/#details","title":"Details","text":"<p>The units of the timings are microseconds.</p>"},{"location":"man/LazyFrame_profile/#value","title":"Value","text":"<p>List of two <code>DataFrame</code>s: one with the collected result, the other with the timings of each step. If <code>show_graph = TRUE</code>, then the plot is also stored in the list.</p>"},{"location":"man/LazyFrame_profile/#see-also","title":"See Also","text":"<ul> <li> <code>$collect()</code> - regular collect.  </li> <li> <code>$fetch()</code> - fast limited query check  </li> <li> <code>$collect_in_background()</code> - non-blocking collect returns a future handle. Can also just be used via <code>$collect(collect_in_background = TRUE)</code>.  </li> <li> <code>$sink_parquet()</code> streams query to a parquet file.  </li> <li> <code>$sink_ipc()</code> streams query to a arrow file.  </li> </ul>"},{"location":"man/LazyFrame_profile/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Simplest use case\npl$LazyFrame()$select(pl$lit(2) + 2)$profile()\n</code></pre> <pre><code>#&gt; $result\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; $profile\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 node                \u2506 start \u2506 end \u2502\n#&gt; \u2502 ---                 \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 str                 \u2506 u64   \u2506 u64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 optimization        \u2506 0     \u2506 23  \u2502\n#&gt; \u2502 projection(literal) \u2506 23    \u2506 95  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Use $profile() to compare two queries\n\n# -1-  map each Species-group with native polars, takes ~120us only\npl$LazyFrame(iris)$\n  sort(\"Sepal.Length\")$\n  group_by(\"Species\", maintain_order = TRUE)$\n  agg(pl$col(pl$Float64)$first() + 5)$\n  profile()\n</code></pre> <pre><code>#&gt; $result\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species    \u2506 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2502\n#&gt; \u2502 ---        \u2506 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 cat        \u2506 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2506 9.3          \u2506 8.0         \u2506 6.1          \u2506 5.1         \u2502\n#&gt; \u2502 versicolor \u2506 9.9          \u2506 7.4         \u2506 8.3          \u2506 6.0         \u2502\n#&gt; \u2502 virginica  \u2506 9.9          \u2506 7.5         \u2506 9.5          \u2506 6.7         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; $profile\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 node               \u2506 start \u2506 end \u2502\n#&gt; \u2502 ---                \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 str                \u2506 u64   \u2506 u64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 optimization       \u2506 0     \u2506 15  \u2502\n#&gt; \u2502 sort(Sepal.Length) \u2506 15    \u2506 408 \u2502\n#&gt; \u2502 group_by(Species)  \u2506 411   \u2506 699 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># -2-  map each Species-group of each numeric column with an R function, takes ~7000us (slow!)\n\n# some R function, prints `.` for each time called by polars\nr_func = \\(s) {\n  cat(\".\")\n  s$to_r()[1] + 5\n}\n\npl$LazyFrame(iris)$\n  sort(\"Sepal.Length\")$\n  group_by(\"Species\", maintain_order = TRUE)$\n  agg(pl$col(pl$Float64)$map_elements(r_func))$\n  profile()\n</code></pre> <pre><code>#&gt; ............\n\n#&gt; $result\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species    \u2506 Sepal.Length_apply \u2506 Sepal.Width_apply \u2506 Petal.Length_apply \u2506 Petal.Width_apply \u2502\n#&gt; \u2502 ---        \u2506 ---                \u2506 ---               \u2506 ---                \u2506 ---               \u2502\n#&gt; \u2502 cat        \u2506 f64                \u2506 f64               \u2506 f64                \u2506 f64               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2506 9.3                \u2506 8.0               \u2506 6.1                \u2506 5.1               \u2502\n#&gt; \u2502 versicolor \u2506 9.9                \u2506 7.4               \u2506 8.3                \u2506 6.0               \u2502\n#&gt; \u2502 virginica  \u2506 9.9                \u2506 7.5               \u2506 9.5                \u2506 6.7               \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; \n#&gt; $profile\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 node               \u2506 start \u2506 end   \u2502\n#&gt; \u2502 ---                \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 str                \u2506 u64   \u2506 u64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 optimization       \u2506 0     \u2506 10    \u2502\n#&gt; \u2502 sort(Sepal.Length) \u2506 10    \u2506 723   \u2502\n#&gt; \u2502 group_by(Species)  \u2506 726   \u2506 16822 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_quantile/","title":"Quantile","text":"<p>Source code</p>"},{"location":"man/LazyFrame_quantile/#description","title":"Description","text":"<p>Aggregate the columns in the DataFrame to a unique quantile value. Use <code>$describe()</code> to specify several quantiles.</p>"},{"location":"man/LazyFrame_quantile/#usage","title":"Usage","text":"<pre><code>LazyFrame_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"man/LazyFrame_quantile/#arguments","title":"Arguments","text":"<code>quantile</code>  Numeric of length 1 between 0 and 1.  <code>interpolation</code>  Interpolation method: \"nearest\", \"higher\", \"lower\", \"midpoint\", or \"linear\"."},{"location":"man/LazyFrame_quantile/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_quantile/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$quantile(.4)$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_rename/","title":"Rename columns of a DataFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_rename/#description","title":"Description","text":"<p>Rename columns of a DataFrame</p>"},{"location":"man/LazyFrame_rename/#usage","title":"Usage","text":"<pre><code>LazyFrame_rename(...)\n</code></pre>"},{"location":"man/LazyFrame_rename/#arguments","title":"Arguments","text":"<code>\u2026</code>   One of the following:  <ul> <li>  params like <code>new_name = \u201cold_name\u201d</code> to rename selected variables.  </li> <li>  as above but with params wrapped in a list  </li> </ul>"},{"location":"man/LazyFrame_rename/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_rename/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$\n  rename(miles_per_gallon = \"mpg\", horsepower = \"hp\")$\n  collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 miles_per_gallon \u2506 cyl \u2506 disp  \u2506 horsepower \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---              \u2506 --- \u2506 ---   \u2506 ---        \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64              \u2506 f64 \u2506 f64   \u2506 f64        \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0             \u2506 6.0 \u2506 160.0 \u2506 110.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8             \u2506 4.0 \u2506 108.0 \u2506 93.0       \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4             \u2506 6.0 \u2506 258.0 \u2506 110.0      \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026                \u2506 \u2026   \u2506 \u2026     \u2506 \u2026          \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8             \u2506 8.0 \u2506 351.0 \u2506 264.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7             \u2506 6.0 \u2506 145.0 \u2506 175.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0             \u2506 8.0 \u2506 301.0 \u2506 335.0      \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4             \u2506 4.0 \u2506 121.0 \u2506 109.0      \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_reverse/","title":"Reverse","text":"<p>Source code</p>"},{"location":"man/LazyFrame_reverse/#description","title":"Description","text":"<p>Reverse the LazyFrame (the last row becomes the first one, etc.).</p>"},{"location":"man/LazyFrame_reverse/#usage","title":"Usage","text":"<pre><code>LazyFrame_reverse\n</code></pre>"},{"location":"man/LazyFrame_reverse/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p>"},{"location":"man/LazyFrame_reverse/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_reverse/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$reverse()$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_select/","title":"Select and modify columns of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_select/#description","title":"Description","text":"<p>Similar to <code>dplyr::mutate()</code>. However, it discards unmentioned columns (like <code>.()</code> in <code>data.table</code>).</p>"},{"location":"man/LazyFrame_select/#usage","title":"Usage","text":"<pre><code>LazyFrame_select(...)\n</code></pre>"},{"location":"man/LazyFrame_select/#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to keep. Those can be expressions (e.g <code>pl$col(\u201ca\u201d)</code>), column names (e.g <code>\u201ca\u201d</code>), or list containing expressions or column names (e.g <code>list(pl$col(\u201ca\u201d))</code>)."},{"location":"man/LazyFrame_select/#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_select/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(iris)$select(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;  SELECT [col(\"Sepal.Length\").abs().alias(\"abs_SL\"), [(col(\"Sepal.Length\")) + (2.0)].alias(\"add_2_SL\")] FROM\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyFrame_set_optimization_toggle/","title":"Configure optimization toggles","text":"<p>Source code</p>"},{"location":"man/LazyFrame_set_optimization_toggle/#description","title":"Description","text":"<p>Configure the optimization toggles for the lazy query</p>"},{"location":"man/LazyFrame_set_optimization_toggle/#usage","title":"Usage","text":"<pre><code>LazyFrame_set_optimization_toggle(\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE,\n  eager = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_set_optimization_toggle/#arguments","title":"Arguments","text":"<code>type_coercion</code>  Boolean. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Boolean. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Boolean. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Boolean. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Boolean. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Boolean. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Boolean. Common subexpressions will be cached and reused.  <code>streaming</code>  Boolean. Run parts of the query in a streaming fashion (this is in an alpha state).  <code>eager</code>  Boolean. Run the query eagerly."},{"location":"man/LazyFrame_set_optimization_toggle/#value","title":"Value","text":"<p>LazyFrame with specified optimization toggles</p>"},{"location":"man/LazyFrame_set_optimization_toggle/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$set_optimization_toggle(type_coercion = FALSE)\n</code></pre> <pre><code>#&gt; $ok\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n#&gt; \n#&gt; $err\n#&gt; NULL\n#&gt; \n#&gt; attr(,\"class\")\n#&gt; [1] \"extendr_result\"\n</code></pre>"},{"location":"man/LazyFrame_shift/","title":"Shift","text":"<p>Source code</p>"},{"location":"man/LazyFrame_shift/#description","title":"Description","text":"<p>Shift the values by a given period.</p>"},{"location":"man/LazyFrame_shift/#usage","title":"Usage","text":"<pre><code>LazyFrame_shift(periods = 1)\n</code></pre>"},{"location":"man/LazyFrame_shift/#arguments","title":"Arguments","text":"<code>periods</code>  integer Number of periods to shift (may be negative)."},{"location":"man/LazyFrame_shift/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_shift/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$shift(2)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl  \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs   \u2506 am   \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2506   \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64   \u2506 f64   \u2506   \u2506 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026    \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 26.0 \u2506 4.0  \u2506 120.3 \u2506 91.0  \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0  \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0  \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0  \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_shift_and_fill/","title":"Shift a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_shift_and_fill/#description","title":"Description","text":"<p>Shift the values by a given period. If the period (<code>n</code>) is positive, then <code>n</code> rows will be inserted at the top of the LazyFrame and the last <code>n</code> rows will be discarded. Vice-versa if the period is negative. In the end, the total number of rows of the LazyFrame doesn\u2019t change.</p>"},{"location":"man/LazyFrame_shift_and_fill/#usage","title":"Usage","text":"<pre><code>LazyFrame_shift_and_fill(fill_value, periods = 1)\n</code></pre>"},{"location":"man/LazyFrame_shift_and_fill/#arguments","title":"Arguments","text":"<code>fill_value</code>  Fill new <code>NULL</code> values with this value. Must of length 1. A logical value will be converted to numeric.  <code>periods</code>  Number of periods to shift (can be negative)."},{"location":"man/LazyFrame_shift_and_fill/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_shift_and_fill/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$shift_and_fill(0., 2.)$collect()$to_data_frame()\n</code></pre> <pre><code>#&gt;     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#&gt; 1   0.0   0   0.0   0 0.00 0.000  0.00  0  0    0    0\n#&gt; 2   0.0   0   0.0   0 0.00 0.000  0.00  0  0    0    0\n#&gt; 3  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#&gt; 4  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#&gt; 5  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#&gt; 6  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#&gt; 7  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#&gt; 8  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n#&gt; 9  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n#&gt; 10 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n#&gt; 11 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n#&gt; 12 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n#&gt; 13 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n#&gt; 14 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n#&gt; 15 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n#&gt; 16 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n#&gt; 17 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n#&gt; 18 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n#&gt; 19 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n#&gt; 20 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n#&gt; 21 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n#&gt; 22 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n#&gt; 23 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n#&gt; 24 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n#&gt; 25 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n#&gt; 26 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n#&gt; 27 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n#&gt; 28 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n#&gt; 29 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n#&gt; 30 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n#&gt; 31 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n#&gt; 32 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n</code></pre>"},{"location":"man/LazyFrame_slice/","title":"Slice","text":"<p>Source code</p>"},{"location":"man/LazyFrame_slice/#description","title":"Description","text":"<p>Get a slice of the LazyFrame.</p>"},{"location":"man/LazyFrame_slice/#usage","title":"Usage","text":"<pre><code>LazyFrame_slice(offset, length = NULL)\n</code></pre>"},{"location":"man/LazyFrame_slice/#arguments","title":"Arguments","text":"<code>offset</code>  Start index, can be a negative value. This is 0-indexed, so <code>offset = 1</code> doesn\u2019t include the first row.  <code>length</code>  Length of the slice. If <code>NULL</code> (default), all rows starting at the offset will be selected."},{"location":"man/LazyFrame_slice/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$slice(2, 4)$collect()\n</code></pre> <pre><code>#&gt; shape: (4, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 225.0 \u2506 105.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$LazyFrame(mtcars)$slice(30)$collect()\n</code></pre> <pre><code>#&gt; shape: (2, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>mtcars[2:6, ]\n</code></pre> <pre><code>#&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#&gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n</code></pre>"},{"location":"man/LazyFrame_sort/","title":"Sort a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_sort/#description","title":"Description","text":"<p>Sort by one or more Expressions.</p>"},{"location":"man/LazyFrame_sort/#usage","title":"Usage","text":"<pre><code>LazyFrame_sort(\n  by,\n  ...,\n  descending = FALSE,\n  nulls_last = FALSE,\n  maintain_order = FALSE\n)\n</code></pre>"},{"location":"man/LazyFrame_sort/#arguments","title":"Arguments","text":"<code>by</code>  Column(s) to sort by. Can be character vector of column names, a list of Expr(s) or a list with a mix of Expr(s) and column names.  <code>\u2026</code>  More columns to sort by as above but provided one Expr per argument.  <code>descending</code>  Boolean. Sort in descending order (default is <code>FALSE</code>). This must be either of length 1 or a logical vector of the same length as the number of Expr(s) specified in <code>by</code> and <code>\u2026</code>.  <code>nulls_last</code>  Boolean. Place <code>NULL</code>s at the end? Default is <code>FALSE</code>.  <code>maintain_order</code>  Keep the same order as the original <code>DataFrame</code>. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine. The default value can be changed with <code>pl$set_options(maintain_order = TRUE)</code>."},{"location":"man/LazyFrame_sort/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_sort/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = mtcars\ndf$mpg[1] = NA\ndf = pl$LazyFrame(df)\ndf$sort(\"mpg\")$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(\"mpg\", nulls_last = TRUE)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(\"cyl\", \"mpg\")$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"), descending = TRUE)$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(c(\"cyl\", \"mpg\"), descending = c(TRUE, FALSE))$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$sort(pl$col(\"cyl\"), pl$col(\"mpg\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_std/","title":"Std","text":"<p>Source code</p>"},{"location":"man/LazyFrame_std/#description","title":"Description","text":"<p>Aggregate the columns of this LazyFrame to their standard deviation values.</p>"},{"location":"man/LazyFrame_std/#usage","title":"Usage","text":"<pre><code>LazyFrame_std(ddof = 1)\n</code></pre>"},{"location":"man/LazyFrame_std/#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/LazyFrame_std/#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_std/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$std()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg      \u2506 cyl      \u2506 disp       \u2506 hp        \u2506 \u2026 \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb   \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2506 ---        \u2506 ---       \u2506   \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---    \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2506 f64        \u2506 f64       \u2506   \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.026948 \u2506 1.785922 \u2506 123.938694 \u2506 68.562868 \u2506 \u2026 \u2506 0.504016 \u2506 0.498991 \u2506 0.737804 \u2506 1.6152 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_sum/","title":"Sum","text":"<p>Source code</p>"},{"location":"man/LazyFrame_sum/#description","title":"Description","text":"<p>Aggregate the columns of this LazyFrame to their sum values.</p>"},{"location":"man/LazyFrame_sum/#usage","title":"Usage","text":"<pre><code>LazyFrame_sum()\n</code></pre>"},{"location":"man/LazyFrame_sum/#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_sum/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$sum()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg   \u2506 cyl   \u2506 disp   \u2506 hp     \u2506 \u2026 \u2506 vs   \u2506 am   \u2506 gear  \u2506 carb \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---    \u2506 ---    \u2506   \u2506 ---  \u2506 ---  \u2506 ---   \u2506 ---  \u2502\n#&gt; \u2502 f64   \u2506 f64   \u2506 f64    \u2506 f64    \u2506   \u2506 f64  \u2506 f64  \u2506 f64   \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 642.9 \u2506 198.0 \u2506 7383.1 \u2506 4694.0 \u2506 \u2026 \u2506 14.0 \u2506 13.0 \u2506 118.0 \u2506 90.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_tail/","title":"Tail of a DataFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_tail/#description","title":"Description","text":"<p>Get the last <code>n</code> rows.</p>"},{"location":"man/LazyFrame_tail/#usage","title":"Usage","text":"<pre><code>LazyFrame_tail(n)\n</code></pre>"},{"location":"man/LazyFrame_tail/#arguments","title":"Arguments","text":"<code>n</code>  Positive number not larger than 2^32."},{"location":"man/LazyFrame_tail/#details","title":"Details","text":"<p>Any number will converted to u32. Negative raises error.</p>"},{"location":"man/LazyFrame_tail/#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_tail/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$tail(2)$collect()\n</code></pre> <pre><code>#&gt; shape: (2, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_unique/","title":"Drop duplicated rows","text":"<p>Source code</p>"},{"location":"man/LazyFrame_unique/#description","title":"Description","text":"<p>Drop duplicated rows</p>"},{"location":"man/LazyFrame_unique/#usage","title":"Usage","text":"<pre><code>LazyFrame_unique(subset = NULL, keep = \"first\", maintain_order = FALSE)\n</code></pre>"},{"location":"man/LazyFrame_unique/#arguments","title":"Arguments","text":"<code>subset</code>  A character vector with the names of the column(s) to use to identify duplicates. If <code>NULL</code> (default), use all columns.  <code>keep</code>   Which of the duplicate rows to keep:  <ul> <li>  \"first\": Keep first unique row.  </li> <li>  \"last\": Keep last unique row.  </li> <li>  \"none\": Don\u2019t keep duplicate rows.  </li> </ul> <code>maintain_order</code>  Keep the same order as the original <code>DataFrame</code>. Setting this to <code>TRUE</code> makes it more expensive to compute and blocks the possibility to run on the streaming engine. The default value can be changed with <code>pl$set_options(maintain_order = TRUE)</code>."},{"location":"man/LazyFrame_unique/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/LazyFrame_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$LazyFrame(\n  x = sample(10, 100, rep = TRUE),\n  y = sample(10, 100, rep = TRUE)\n)\ndf$collect()$height\n</code></pre> <pre><code>#&gt; [1] 100\n</code></pre> <pre><code>df$unique()$collect()$height\n</code></pre> <pre><code>#&gt; [1] 67\n</code></pre> <pre><code>df$unique(subset = \"x\")$collect()$height\n</code></pre> <pre><code>#&gt; [1] 10\n</code></pre> <pre><code>df$unique(keep = \"last\")\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; UNIQUE BY None\n#&gt;   DF [\"x\", \"y\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># only keep unique rows\ndf$unique(keep = \"none\")\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; UNIQUE BY None\n#&gt;   DF [\"x\", \"y\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyFrame_unnest/","title":"Unnest the Struct columns of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_unnest/#description","title":"Description","text":"<p>Unnest the Struct columns of a LazyFrame</p>"},{"location":"man/LazyFrame_unnest/#usage","title":"Usage","text":"<pre><code>LazyFrame_unnest(names = NULL)\n</code></pre>"},{"location":"man/LazyFrame_unnest/#arguments","title":"Arguments","text":"<code>names</code>  Names of the struct columns to unnest. If <code>NULL</code> (default), then all \"struct\" columns are unnested."},{"location":"man/LazyFrame_unnest/#value","title":"Value","text":"<p>A LazyFrame where all \"struct\" columns are unnested. Non-struct columns are not modified.</p>"},{"location":"man/LazyFrame_unnest/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(\n  a = 1:5,\n  b = c(\"one\", \"two\", \"three\", \"four\", \"five\"),\n  c = 6:10\n)$\n  select(\n  pl$col(\"b\")$to_struct(),\n  pl$col(\"a\", \"c\")$to_struct()$alias(\"a_and_c\")\n)\nlf$collect()\n</code></pre> <pre><code>#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b         \u2506 a_and_c   \u2502\n#&gt; \u2502 ---       \u2506 ---       \u2502\n#&gt; \u2502 struct[1] \u2506 struct[2] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"one\"}   \u2506 {1,6}     \u2502\n#&gt; \u2502 {\"two\"}   \u2506 {2,7}     \u2502\n#&gt; \u2502 {\"three\"} \u2506 {3,8}     \u2502\n#&gt; \u2502 {\"four\"}  \u2506 {4,9}     \u2502\n#&gt; \u2502 {\"five\"}  \u2506 {5,10}    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># by default, all struct columns are unnested\nlf$unnest()$collect()\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b     \u2506 a   \u2506 c   \u2502\n#&gt; \u2502 ---   \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str   \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one   \u2506 1   \u2506 6   \u2502\n#&gt; \u2502 two   \u2506 2   \u2506 7   \u2502\n#&gt; \u2502 three \u2506 3   \u2506 8   \u2502\n#&gt; \u2502 four  \u2506 4   \u2506 9   \u2502\n#&gt; \u2502 five  \u2506 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># we can specify specific columns to unnest\nlf$unnest(\"a_and_c\")$collect()\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b         \u2506 a   \u2506 c   \u2502\n#&gt; \u2502 ---       \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 struct[1] \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"one\"}   \u2506 1   \u2506 6   \u2502\n#&gt; \u2502 {\"two\"}   \u2506 2   \u2506 7   \u2502\n#&gt; \u2502 {\"three\"} \u2506 3   \u2506 8   \u2502\n#&gt; \u2502 {\"four\"}  \u2506 4   \u2506 9   \u2502\n#&gt; \u2502 {\"five\"}  \u2506 5   \u2506 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_var/","title":"Var","text":"<p>Source code</p>"},{"location":"man/LazyFrame_var/#description","title":"Description","text":"<p>Aggregate the columns of this LazyFrame to their variance values.</p>"},{"location":"man/LazyFrame_var/#usage","title":"Usage","text":"<pre><code>LazyFrame_var(ddof = 1)\n</code></pre>"},{"location":"man/LazyFrame_var/#arguments","title":"Arguments","text":"<code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/LazyFrame_var/#value","title":"Value","text":"<p>A LazyFrame with one row</p>"},{"location":"man/LazyFrame_var/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$var()$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl      \u2506 disp        \u2506 hp          \u2506 \u2026 \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb     \u2502\n#&gt; \u2502 ---       \u2506 ---      \u2506 ---         \u2506 ---         \u2506   \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64       \u2506 f64      \u2506 f64         \u2506 f64         \u2506   \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 36.324103 \u2506 3.189516 \u2506 15360.79982 \u2506 4700.866935 \u2506 \u2026 \u2506 0.254032 \u2506 0.248992 \u2506 0.544355 \u2506 2.608871 \u2502\n#&gt; \u2502           \u2506          \u2506 9           \u2506             \u2506   \u2506          \u2506          \u2506          \u2506          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_width/","title":"Number of columns of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_width/#description","title":"Description","text":"<p>Get the number of columns (width) of a LazyFrame</p>"},{"location":"man/LazyFrame_width/#usage","title":"Usage","text":"<pre><code>LazyFrame_width()\n</code></pre>"},{"location":"man/LazyFrame_width/#value","title":"Value","text":"<p>The number of columns of a DataFrame</p>"},{"location":"man/LazyFrame_width/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(mtcars)$width\n</code></pre> <pre><code>#&gt; [1] 11\n</code></pre>"},{"location":"man/LazyFrame_with_columns/","title":"Select and modify columns of a LazyFrame","text":"<p>Source code</p>"},{"location":"man/LazyFrame_with_columns/#description","title":"Description","text":"<p>Add columns or modify existing ones with expressions. This is the equivalent of <code>dplyr::mutate()</code> as it keeps unmentioned columns (unlike <code>$select()</code>).</p>"},{"location":"man/LazyFrame_with_columns/#usage","title":"Usage","text":"<pre><code>LazyFrame_with_columns(...)\n</code></pre>"},{"location":"man/LazyFrame_with_columns/#arguments","title":"Arguments","text":"<code>\u2026</code>  Any expressions or string column name, or same wrapped in a list. If first and only element is a list, it is unwrapped as a list of args."},{"location":"man/LazyFrame_with_columns/#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_with_columns/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(iris)$with_columns(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;  WITH_COLUMNS:\n#&gt;  [col(\"Sepal.Length\").abs().alias(\"abs_SL\"), [(col(\"Sepal.Length\")) + (2.0)].alias(\"add_2_SL\")]\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># same query\nl_expr = list(\n  pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n  (pl$col(\"Sepal.Length\") + 2)$alias(\"add_2_SL\")\n)\npl$LazyFrame(iris)$with_columns(l_expr)\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;  WITH_COLUMNS:\n#&gt;  [col(\"Sepal.Length\").abs().alias(\"abs_SL\"), [(col(\"Sepal.Length\")) + (2.0)].alias(\"add_2_SL\")]\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>pl$LazyFrame(iris)$with_columns(\n  pl$col(\"Sepal.Length\")$abs(), # not named expr will keep name \"Sepal.Length\"\n  SW_add_2 = (pl$col(\"Sepal.Width\") + 2)\n)\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;  WITH_COLUMNS:\n#&gt;  [col(\"Sepal.Length\").abs(), [(col(\"Sepal.Width\")) + (2.0)].alias(\"SW_add_2\")]\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyFrame_with_context/","title":"Add an external context to the computation graph","text":"<p>Source code</p>"},{"location":"man/LazyFrame_with_context/#description","title":"Description","text":"<p>This allows expressions to also access columns from DataFrames or LazyFrames that are not part of this one.</p>"},{"location":"man/LazyFrame_with_context/#usage","title":"Usage","text":"<pre><code>LazyFrame_with_context(other)\n</code></pre>"},{"location":"man/LazyFrame_with_context/#arguments","title":"Arguments","text":"<code>other</code>  Data/LazyFrame to have access to. This can be a list of DataFrames and LazyFrames."},{"location":"man/LazyFrame_with_context/#value","title":"Value","text":"<p>A LazyFrame</p>"},{"location":"man/LazyFrame_with_context/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(a = c(1, 2, 3), b = c(\"a\", \"c\", NA))\nlf_other = pl$LazyFrame(c = c(\"foo\", \"ham\"))\n\nlf$with_context(lf_other)$select(\n  pl$col(\"b\") + pl$col(\"c\")$first()\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 afoo \u2502\n#&gt; \u2502 cfoo \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Fill nulls with the median from another lazyframe:\ntrain_lf = pl$LazyFrame(\n  feature_0 = c(-1.0, 0, 1), feature_1 = c(-1.0, 0, 1)\n)\ntest_lf = pl$LazyFrame(\n  feature_0 = c(-1.0, NA, 1), feature_1 = c(-1.0, 0, 1)\n)\n\ntest_lf$with_context(train_lf$select(pl$all()$name$suffix(\"_train\")))$select(\n  pl$col(\"feature_0\")$fill_null(pl$col(\"feature_0_train\")$median())\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 feature_0 \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0      \u2502\n#&gt; \u2502 0.0       \u2502\n#&gt; \u2502 1.0       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/LazyFrame_with_row_count/","title":"Add a column for row indices","text":"<p>Source code</p>"},{"location":"man/LazyFrame_with_row_count/#description","title":"Description","text":"<p>Add a new column at index 0 that counts the rows</p>"},{"location":"man/LazyFrame_with_row_count/#usage","title":"Usage","text":"<pre><code>LazyFrame_with_row_count(name, offset = NULL)\n</code></pre>"},{"location":"man/LazyFrame_with_row_count/#arguments","title":"Arguments","text":"<code>name</code>  string name of the created column  <code>offset</code>  positive integer offset for the start of the counter"},{"location":"man/LazyFrame_with_row_count/#value","title":"Value","text":"<p>A new LazyFrame with a counter column in front</p>"},{"location":"man/LazyFrame_with_row_count/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$LazyFrame(mtcars)\n\n# by default, the index starts at 0 (to mimic the behavior of Python Polars)\ndf$with_row_count(\"idx\")\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; WITH ROW COUNT\n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># but in R, we use a 1-index\ndf$with_row_count(\"idx\", offset = 1)\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; WITH ROW COUNT\n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyGroupBy_agg/","title":"LazyGroupBy_agg","text":"<p>Source code</p>"},{"location":"man/LazyGroupBy_agg/#description","title":"Description","text":"<p>aggregate a polar_lazy_group_by</p>"},{"location":"man/LazyGroupBy_agg/#usage","title":"Usage","text":"<pre><code>LazyGroupBy_agg(...)\n</code></pre>"},{"location":"man/LazyGroupBy_agg/#arguments","title":"Arguments","text":"<code>\u2026</code>  exprs to aggregate over. \u2026 args can also be passed wrapped in a list <code>$agg(list(e1,e2,e3))</code>"},{"location":"man/LazyGroupBy_agg/#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object.</p>"},{"location":"man/LazyGroupBy_agg/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlgb = pl$DataFrame(\n  foo = c(\"one\", \"two\", \"two\", \"one\", \"two\"),\n  bar = c(5, 3, 2, 4, 1)\n)$\n  lazy()$\n  group_by(\"foo\")\n\n\nprint(lgb)\n</code></pre> <pre><code>#&gt; polars LazyGroupBy: \n#&gt; LazyGroupBy (internals are opaque)\n</code></pre> <pre><code>lgb$\n  agg(\n  pl$col(\"bar\")$sum()$name$suffix(\"_sum\"),\n  pl$col(\"bar\")$mean()$alias(\"bar_tail_sum\")\n)\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; AGGREGATE\n#&gt;  [col(\"bar\").sum().alias(\"bar_sum\"), col(\"bar\").mean().alias(\"bar_tail_sum\")] BY [col(\"foo\")] FROM\n#&gt;   DF [\"foo\", \"bar\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/LazyGroupBy_apply/","title":"LazyGroupBy_apply","text":"<p>Source code</p>"},{"location":"man/LazyGroupBy_apply/#description","title":"Description","text":"<p>one day this will apply</p>"},{"location":"man/LazyGroupBy_apply/#usage","title":"Usage","text":"<pre><code>LazyGroupBy_apply(f)\n</code></pre>"},{"location":"man/LazyGroupBy_apply/#arguments","title":"Arguments","text":"<code>f</code>  R function to apply"},{"location":"man/LazyGroupBy_apply/#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object.</p>"},{"location":"man/LazyGroupBy_head/","title":"LazyGroupBy_head","text":"<p>Source code</p>"},{"location":"man/LazyGroupBy_head/#description","title":"Description","text":"<p>get n rows of head of group</p>"},{"location":"man/LazyGroupBy_head/#usage","title":"Usage","text":"<pre><code>LazyGroupBy_head(n = 1L)\n</code></pre>"},{"location":"man/LazyGroupBy_head/#arguments","title":"Arguments","text":"<code>n</code>  integer number of rows to get"},{"location":"man/LazyGroupBy_head/#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object.</p>"},{"location":"man/LazyGroupBy_print/","title":"LazyGroupBy_print","text":"<p>Source code</p>"},{"location":"man/LazyGroupBy_print/#description","title":"Description","text":"<p>prints opaque groupby, not much to show</p>"},{"location":"man/LazyGroupBy_print/#usage","title":"Usage","text":"<pre><code>LazyGroupBy_print()\n</code></pre>"},{"location":"man/LazyGroupBy_print/#value","title":"Value","text":"<p>invisible self</p>"},{"location":"man/LazyGroupBy_tail/","title":"LazyGroupBy_tail","text":"<p>Source code</p>"},{"location":"man/LazyGroupBy_tail/#description","title":"Description","text":"<p>get n tail rows of group</p>"},{"location":"man/LazyGroupBy_tail/#usage","title":"Usage","text":"<pre><code>LazyGroupBy_tail(n = 1L)\n</code></pre>"},{"location":"man/LazyGroupBy_tail/#arguments","title":"Arguments","text":"<code>n</code>  integer number of rows to get"},{"location":"man/LazyGroupBy_tail/#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object.</p>"},{"location":"man/LazyGroupBy_ungroup/","title":"LazyGroupBy_ungroup","text":"<p>Source code</p>"},{"location":"man/LazyGroupBy_ungroup/#description","title":"Description","text":"<p>Revert the group by operation.</p>"},{"location":"man/LazyGroupBy_ungroup/#usage","title":"Usage","text":"<pre><code>LazyGroupBy_ungroup()\n</code></pre>"},{"location":"man/LazyGroupBy_ungroup/#value","title":"Value","text":"<p>A new <code>LazyFrame</code> object.</p>"},{"location":"man/LazyGroupBy_ungroup/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(mtcars)\nlf\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>lgb = lf$group_by(\"cyl\")\nlgb\n</code></pre> <pre><code>#&gt; polars LazyGroupBy: \n#&gt; LazyGroupBy (internals are opaque)\n</code></pre> <pre><code>lgb$ungroup()\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/RField_class/","title":"Create Field","text":""},{"location":"man/RField_class/#description","title":"Description","text":"<p>A Field is composed of a name and a DataType. Fields are used in Structs- datatypes and Schemas to represent everything of the Series/Column except the raw values.</p>"},{"location":"man/RField_class/#usage","title":"Usage","text":"<pre><code>pl_Field(name, datatype)\n</code></pre>"},{"location":"man/RField_class/#arguments","title":"Arguments","text":"<code>name</code>  Field name  <code>datatype</code>  DataType"},{"location":"man/RField_class/#value","title":"Value","text":"<p>A object of with DataType <code>\u201cRField\u201d</code> containing its name and its DataType.</p>"},{"location":"man/RField_class/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Field(\"city_names\", pl$String)\n</code></pre> <pre><code>#&gt; Field {\n#&gt;     name: \"city_names\",\n#&gt;     dtype: String,\n#&gt; }\n</code></pre>"},{"location":"man/RField_datatype/","title":"Get/set Field datatype","text":"<p>Source code</p>"},{"location":"man/RField_datatype/#description","title":"Description","text":"<p>Get/set Field datatype</p>"},{"location":"man/RField_datatype/#usage","title":"Usage","text":"<pre><code>RField_datatype()\n</code></pre>"},{"location":"man/RField_datatype/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nfield = pl$Field(\"Cities\", pl$String)\nfield$datatype\n</code></pre> <pre><code>#&gt; DataType: String\n</code></pre> <pre><code>field$datatype = pl$Categorical #&lt;- is fine too\nfield$datatype\n</code></pre> <pre><code>#&gt; DataType: Categorical(\n#&gt;     None,\n#&gt;     Physical,\n#&gt; )\n</code></pre>"},{"location":"man/RField_name/","title":"Get/set Field name","text":"<p>Source code</p>"},{"location":"man/RField_name/#description","title":"Description","text":"<p>Get/set Field name</p>"},{"location":"man/RField_name/#usage","title":"Usage","text":"<pre><code>RField_name()\n</code></pre>"},{"location":"man/RField_name/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nfield = pl$Field(\"Cities\", pl$String)\nfield$name\n</code></pre> <pre><code>#&gt; [1] \"Cities\"\n</code></pre> <pre><code>field$name = \"CityPoPulations\" #&lt;- is fine too\nfield\n</code></pre> <pre><code>#&gt; Field {\n#&gt;     name: \"CityPoPulations\",\n#&gt;     dtype: String,\n#&gt; }\n</code></pre>"},{"location":"man/RThreadHandle_class/","title":"The RPolarsRThreadHandle class","text":""},{"location":"man/RThreadHandle_class/#description","title":"Description","text":"<p>A handle to some polars query running in a background thread.</p>"},{"location":"man/RThreadHandle_class/#details","title":"Details","text":"<p><code>\\&lt;LazyFrame&gt;$collect_in_background()</code> will execute a polars query detached from the R session and return an <code>RPolarsRThreadHandle</code> immediately. This <code>RPolarsRThreadHandle</code>-class has the methods <code>is_finished()</code> and <code>join()</code>.</p> <p>NOTICE: The background thread cannot use the main R session, but can access the pool of extra R sessions to process R code embedded in polars query via <code>$map_batches(\u2026, background = TRUE)</code> or <code>$map_elements(background=TRUE)</code>. Use <code>pl$set_options(rpool_cap = XX)</code> to limit number of parallel R sessions. Starting polars <code>\\&lt;LazyFrame&gt;$collect_in_background()</code> with e.g.\u00a0some <code>$map_batches(\u2026, background = FALSE)</code> will raise an Error as the main R session is not available to process the R part of the polars query. Native polars query does not need any R session.</p>"},{"location":"man/RThreadHandle_class/#value","title":"Value","text":"<p>see methods: <code>is_finished()</code> <code>join()</code></p>"},{"location":"man/RThreadHandle_class/#see-also","title":"See Also","text":"<p><code>\\&lt;LazyFrame&gt;$collect_in_background()</code> <code>\\&lt;Expr&gt;$map_batches()</code> <code>\\&lt;Expr&gt;$map_elements()</code></p>"},{"location":"man/RThreadHandle_class/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nprexpr = pl$col(\"mpg\")$map_batches(\\(x) {\n  Sys.sleep(.1)\n  x * 0.43\n}, in_background = TRUE)$alias(\"kml\")\nhandle = pl$LazyFrame(mtcars)$with_columns(prexpr)$collect_in_background()\nif (!handle$is_finished()) print(\"not done yet\")\n</code></pre> <pre><code>#&gt; [1] \"not done yet\"\n</code></pre> <pre><code>df = handle$join() # get result\ndf\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 am  \u2506 gear \u2506 carb \u2506 kml   \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 ---  \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64  \u2506 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 9.03  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 9.03  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2506 9.804 \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2506 9.202 \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2506 \u2026     \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2506 6.794 \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2506 8.471 \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2506 6.45  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2506 9.202 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/RThreadHandle_is_finished/","title":"Ask if RThreadHandle is finished?","text":"<p>Source code</p>"},{"location":"man/RThreadHandle_is_finished/#description","title":"Description","text":"<p>Ask if RThreadHandle is finished?</p>"},{"location":"man/RThreadHandle_is_finished/#usage","title":"Usage","text":"<pre><code>RThreadHandle_is_finished()\n</code></pre>"},{"location":"man/RThreadHandle_is_finished/#value","title":"Value","text":"<p>trinary value: <code>TRUE</code> if finished, <code>FALSE</code> if not, and <code>NULL</code> if the handle was exhausted with <code>\\&lt;RThreadHandle&gt;$join()</code>.</p>"},{"location":"man/RThreadHandle_join/","title":"Join a RThreadHandle","text":"<p>Source code</p>"},{"location":"man/RThreadHandle_join/#description","title":"Description","text":"<p>Join a RThreadHandle</p>"},{"location":"man/RThreadHandle_join/#usage","title":"Usage","text":"<pre><code>RThreadHandle_join()\n</code></pre>"},{"location":"man/RThreadHandle_join/#details","title":"Details","text":"<p>method <code>\\&lt;RThreadHandle&gt;$join()</code>: will block until job is done and then return some value or raise an error from the thread. Calling <code>\\&lt;RThreadHandle&gt;$join()</code> a second time will raise an error because handle is already exhausted.</p>"},{"location":"man/RThreadHandle_join/#value","title":"Value","text":"<p>return value from background thread</p>"},{"location":"man/RThreadHandle_join/#see-also","title":"See Also","text":"<p>RThreadHandle_class</p>"},{"location":"man/S3_as.character/","title":"Convert to a character vector","text":""},{"location":"man/S3_as.character/#description","title":"Description","text":"<p>Convert to a character vector</p>"},{"location":"man/S3_as.character/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsSeries'\nas.character(x, ..., str_length = NULL)\n</code></pre>"},{"location":"man/S3_as.character/#arguments","title":"Arguments","text":"<code>x</code>  A Polars Series  <code>\u2026</code>  Not used.  <code>str_length</code>  An integer. If specified, utf8 or categorical type Series will be formatted to a string of this length."},{"location":"man/S3_as.character/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = pl$Series(c(\"foo\", \"barbaz\"))\nas.character(s)\n</code></pre> <pre><code>#&gt; [1] \"foo\"    \"barbaz\"\n</code></pre> <pre><code>as.character(s, str_length = 3)\n</code></pre> <pre><code>#&gt; [1] \"\\\"fo\u2026\" \"\\\"ba\u2026\"\n</code></pre>"},{"location":"man/S3_as.data.frame/","title":"Convert to a data.frame","text":""},{"location":"man/S3_as.data.frame/#description","title":"Description","text":"<p>Convert to a data.frame</p>"},{"location":"man/S3_as.data.frame/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nas.data.frame(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nas.data.frame(x, ...)\n</code></pre>"},{"location":"man/S3_as.data.frame/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame  <code>\u2026</code>  Any arguments passed to <code>data.frame()</code>."},{"location":"man/S3_as.matrix/","title":"Convert to a matrix","text":""},{"location":"man/S3_as.matrix/#description","title":"Description","text":"<p>Convert to a matrix</p>"},{"location":"man/S3_as.matrix/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nas.matrix(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nas.matrix(x, ...)\n</code></pre>"},{"location":"man/S3_as.matrix/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame  <code>\u2026</code>  Any arguments passed to <code>data.frame()</code>."},{"location":"man/S3_as.vector/","title":"Convert to a vector","text":""},{"location":"man/S3_as.vector/#description","title":"Description","text":"<p>Convert to a vector</p>"},{"location":"man/S3_as.vector/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsSeries'\nas.vector(x, mode)\n</code></pre>"},{"location":"man/S3_as.vector/#arguments","title":"Arguments","text":"<code>x</code>  A Polars Series  <code>mode</code>  Not used."},{"location":"man/S3_c/","title":"Combine to a Series","text":""},{"location":"man/S3_c/#description","title":"Description","text":"<p>Combine to a Series</p>"},{"location":"man/S3_c/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsSeries'\nc(x, ...)\n</code></pre>"},{"location":"man/S3_c/#arguments","title":"Arguments","text":"<code>x</code>  A Polars Series  <code>\u2026</code>  Series(s) or any object that can be converted to a Series."},{"location":"man/S3_c/#details","title":"Details","text":"<p>All objects must have the same datatype. Combining does not rechunk. Read more about R vectors, Series and chunks in <code>docs_translations</code>:</p>"},{"location":"man/S3_c/#value","title":"Value","text":"<p>a combined Series</p>"},{"location":"man/S3_c/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = c(pl$Series(1:5), 3:1, NA_integer_)\ns$chunk_lengths() # the series contain three unmerged chunks\n</code></pre> <pre><code>#&gt; [1] 5 3 1\n</code></pre>"},{"location":"man/S3_dim/","title":"Get the dimensions","text":""},{"location":"man/S3_dim/#description","title":"Description","text":"<p>Get the dimensions</p>"},{"location":"man/S3_dim/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\ndim(x)\n\n# S3 method for class 'RPolarsLazyFrame'\ndim(x)\n</code></pre>"},{"location":"man/S3_dim/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame"},{"location":"man/S3_dimnames/","title":"Get the row and column names","text":""},{"location":"man/S3_dimnames/#description","title":"Description","text":"<p>Get the row and column names</p>"},{"location":"man/S3_dimnames/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\ndimnames(x)\n\n# S3 method for class 'RPolarsLazyFrame'\ndimnames(x)\n</code></pre>"},{"location":"man/S3_dimnames/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame"},{"location":"man/S3_extract/","title":"Extract Parts of a Polars Object","text":""},{"location":"man/S3_extract/#description","title":"Description","text":"<p>Mimics the behavior of [<code>x[i, j, drop = TRUE]</code>][Extract] for data.frame or R vector.</p>"},{"location":"man/S3_extract/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nx[i, j, drop = TRUE]\n\n# S3 method for class 'RPolarsLazyFrame'\nx[i, j, drop = TRUE]\n\n# S3 method for class 'RPolarsSeries'\nx[i]\n</code></pre>"},{"location":"man/S3_extract/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>i</code>  Rows to select. Integer vector, logical vector, or an Expression.  <code>j</code>  Columns to select. Integer vector, logical vector, character vector, or an Expression. For LazyFrames, only an Expression can be used.  <code>drop</code>  Convert to a Polars Series if only one column is selected. For LazyFrames, if the result has one column and <code>drop = TRUE</code>, an error will occur."},{"location":"man/S3_extract/#details","title":"Details","text":"<p><code>\\&lt;Series&gt;[i]</code> is equivalent to <code>pl$select(\\&lt;Series&gt;)[i, , drop = TRUE]</code>.</p>"},{"location":"man/S3_extract/#see-also","title":"See Also","text":"<p><code>\\&lt;DataFrame&gt;$select()</code>, <code>\\&lt;LazyFrame&gt;$select()</code>, <code>\\&lt;DataFrame&gt;$filter()</code>, <code>\\&lt;LazyFrame&gt;$filter()</code></p>"},{"location":"man/S3_extract/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(data.frame(a = 1:3, b = letters[1:3]))\nlf = df$lazy()\n\n# Select a row\ndf[1, ]\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 a   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># If only `i` is specified, it is treated as `j`\n# Select a column\ndf[1]\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Select a column by name (and convert to a Series)\ndf[, \"b\"]\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'b' [str]\n#&gt; [\n#&gt;  \"a\"\n#&gt;  \"b\"\n#&gt;  \"c\"\n#&gt; ]\n</code></pre> <pre><code># Can use Expression for filtering and column selection\nlf[pl$col(\"a\") &gt;= 2, pl$col(\"b\")$alias(\"new\"), drop = FALSE] |&gt;\n  as.data.frame()\n</code></pre> <pre><code>#&gt;   new\n#&gt; 1   b\n#&gt; 2   c\n</code></pre>"},{"location":"man/S3_head/","title":"Take the first n rows","text":""},{"location":"man/S3_head/#description","title":"Description","text":"<p>Take the first n rows</p>"},{"location":"man/S3_head/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nhead(x, n = 6L, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nhead(x, n = 6L, ...)\n</code></pre>"},{"location":"man/S3_head/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame  <code>n</code>  Number of rows  <code>\u2026</code>  Not used"},{"location":"man/S3_knit_print/","title":"knit print polars DataFrame","text":""},{"location":"man/S3_knit_print/#description","title":"Description","text":"<p>Mimics python-polars\u2019 NotebookFormatter for HTML outputs.</p>"},{"location":"man/S3_knit_print/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nknit_print(x, ...)\n</code></pre>"},{"location":"man/S3_knit_print/#arguments","title":"Arguments","text":"<code>x</code>  a polars DataFrame to knit_print  <code>\u2026</code>  additional arguments, not used"},{"location":"man/S3_knit_print/#details","title":"Details","text":"<p>Outputs HTML tables if the output format is HTML and the document\u2019s <code>df_print</code> option is not <code>\u201cdefault\u201d</code> or <code>\u201ctibble\u201d</code>.</p> <p>Or, the output format can be enforced with R\u2019s <code>options</code> function as follows:</p> <ul> <li> <code>options(polars.df_print = \u201cdefault\u201d)</code> for the default print method.  </li> <li> <code>options(polars.df_print = \u201chtml\u201d)</code> for the HTML table.  </li> </ul>"},{"location":"man/S3_knit_print/#value","title":"Value","text":"<p>invisible x or NULL</p>"},{"location":"man/S3_length/","title":"Get the length","text":""},{"location":"man/S3_length/#description","title":"Description","text":"<p>Get the length</p>"},{"location":"man/S3_length/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nlength(x)\n\n# S3 method for class 'RPolarsLazyFrame'\nlength(x)\n\n# S3 method for class 'RPolarsSeries'\nlength(x)\n</code></pre>"},{"location":"man/S3_length/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series"},{"location":"man/S3_max/","title":"Compute the maximum value","text":""},{"location":"man/S3_max/#description","title":"Description","text":"<p>Compute the maximum value</p>"},{"location":"man/S3_max/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nmax(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nmax(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nmax(x, ...)\n</code></pre>"},{"location":"man/S3_max/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>\u2026</code>  Not used."},{"location":"man/S3_mean/","title":"Compute the mean","text":""},{"location":"man/S3_mean/#description","title":"Description","text":"<p>Compute the mean</p>"},{"location":"man/S3_mean/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nmean(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nmean(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nmean(x, ...)\n</code></pre>"},{"location":"man/S3_mean/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>\u2026</code>  Not used."},{"location":"man/S3_median/","title":"Compute the median","text":""},{"location":"man/S3_median/#description","title":"Description","text":"<p>Compute the median</p>"},{"location":"man/S3_median/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nmedian(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nmedian(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nmedian(x, ...)\n</code></pre>"},{"location":"man/S3_median/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>\u2026</code>  Not used."},{"location":"man/S3_min/","title":"Compute the minimum value","text":""},{"location":"man/S3_min/#description","title":"Description","text":"<p>Compute the minimum value</p>"},{"location":"man/S3_min/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nmin(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nmin(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nmin(x, ...)\n</code></pre>"},{"location":"man/S3_min/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>\u2026</code>  Not used."},{"location":"man/S3_na.omit/","title":"Drop missing values","text":""},{"location":"man/S3_na.omit/#description","title":"Description","text":"<p>Drop missing values</p>"},{"location":"man/S3_na.omit/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsLazyFrame'\nna.omit(object, subset = NULL, ...)\n\n# S3 method for class 'RPolarsDataFrame'\nna.omit(object, subset = NULL, ...)\n</code></pre>"},{"location":"man/S3_na.omit/#arguments","title":"Arguments","text":"<code>object</code>  A DataFrame or LazyFrame  <code>subset</code>  Character vector of column names to drop missing values from.  <code>\u2026</code>  Not used."},{"location":"man/S3_na.omit/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(data.frame(a = c(NA, 2:10), b = c(1, NA, 3:10)))$lazy()\nna.omit(df)\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; FILTER col(\"a\").is_not_null().all_horizontal([col(\"b\").is_not_null()]) FROM\n#&gt; DF [\"a\", \"b\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>na.omit(df, subset = \"a\")\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; FILTER col(\"a\").is_not_null().all_horizontal() FROM\n#&gt; DF [\"a\", \"b\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>na.omit(df, subset = c(\"a\", \"b\"))\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; FILTER [(col(\"a\").is_not_null()) &amp; (col(\"b\").is_not_null())] FROM\n#&gt; DF [\"a\", \"b\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/S3_names/","title":"Get the column names","text":""},{"location":"man/S3_names/#description","title":"Description","text":"<p>Get the column names</p>"},{"location":"man/S3_names/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nnames(x)\n\n# S3 method for class 'RPolarsLazyFrame'\nnames(x)\n</code></pre>"},{"location":"man/S3_names/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame"},{"location":"man/S3_print/","title":"Print values","text":""},{"location":"man/S3_print/#description","title":"Description","text":"<p>Print values</p>"},{"location":"man/S3_print/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsSeries'\nprint(x, ...)\n</code></pre>"},{"location":"man/S3_print/#arguments","title":"Arguments","text":"<code>x</code>  A Polars Series  <code>\u2026</code>  Not used"},{"location":"man/S3_rownames/","title":"Get the row names","text":""},{"location":"man/S3_rownames/#description","title":"Description","text":"<p>Get the row names</p>"},{"location":"man/S3_rownames/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nrow.names(x)\n</code></pre>"},{"location":"man/S3_rownames/#arguments","title":"Arguments","text":"<code>x</code>  A Polars DataFrame"},{"location":"man/S3_sum/","title":"Compute the sum","text":""},{"location":"man/S3_sum/#description","title":"Description","text":"<p>Compute the sum</p>"},{"location":"man/S3_sum/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nsum(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nsum(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nsum(x, ...)\n</code></pre>"},{"location":"man/S3_sum/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame, LazyFrame, or Series  <code>\u2026</code>  Not used."},{"location":"man/S3_tail/","title":"Take the last n rows","text":""},{"location":"man/S3_tail/#description","title":"Description","text":"<p>Take the last n rows</p>"},{"location":"man/S3_tail/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\ntail(x, n = 6L, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\ntail(x, n = 6L, ...)\n</code></pre>"},{"location":"man/S3_tail/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame  <code>n</code>  Number of rows  <code>\u2026</code>  Not used"},{"location":"man/S3_unique/","title":"Drop duplicated rows","text":""},{"location":"man/S3_unique/#description","title":"Description","text":"<p>Drop duplicated rows</p>"},{"location":"man/S3_unique/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nunique(x, incomparables = FALSE, subset = NULL, keep = \"first\", ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nunique(x, incomparables = FALSE, subset = NULL, keep = \"first\", ...)\n</code></pre>"},{"location":"man/S3_unique/#arguments","title":"Arguments","text":"<code>x</code>  A DataFrame or LazyFrame  <code>incomparables</code>  Not used.  <code>subset</code>  Character vector of column names to drop duplicated values from.  <code>keep</code>  Either <code>\u201cfirst\u201d</code>, <code>\u201clast\u201d</code>, or <code>\u201cnone\u201d</code>.  <code>\u2026</code>  Not used."},{"location":"man/S3_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  x = as.numeric(c(1, 1:5)),\n  y = as.numeric(c(1, 1:5)),\n  z = as.numeric(c(1, 1, 1:4))\n)\nunique(df)\n</code></pre> <pre><code>#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2506 y   \u2506 z   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0 \u2506 4.0 \u2506 3.0 \u2502\n#&gt; \u2502 2.0 \u2506 2.0 \u2506 1.0 \u2502\n#&gt; \u2502 3.0 \u2506 3.0 \u2506 2.0 \u2502\n#&gt; \u2502 5.0 \u2506 5.0 \u2506 4.0 \u2502\n#&gt; \u2502 1.0 \u2506 1.0 \u2506 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/SQLContext_class/","title":"Run SQL queries against DataFrame/LazyFrame data.","text":""},{"location":"man/SQLContext_class/#description","title":"Description","text":"<p>Run SQL queries against DataFrame/LazyFrame data.</p>"},{"location":"man/SQLContext_class/#details","title":"Details","text":"<p>Currently, only available when built with the <code>full</code> feature. See polars_info for more information.</p>"},{"location":"man/SQLContext_class/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nlf = pl$LazyFrame(a = 1:3, b = c(\"x\", NA, \"z\"))\nres = pl$SQLContext(frame = lf)$execute(\n  \"SELECT b, a*2 AS two_a FROM frame WHERE b IS NOT NULL\"\n)\nres$collect()\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2506 two_a \u2502\n#&gt; \u2502 --- \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 x   \u2506 2     \u2502\n#&gt; \u2502 z   \u2506 6     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/SQLContext_execute/","title":"Execute SQL query against the registered data","text":"<p>Source code</p>"},{"location":"man/SQLContext_execute/#description","title":"Description","text":"<p>Parse the given SQL query and execute it against the registered frame data.</p>"},{"location":"man/SQLContext_execute/#usage","title":"Usage","text":"<pre><code>SQLContext_execute(query, eager = FALSE)\n</code></pre>"},{"location":"man/SQLContext_execute/#arguments","title":"Arguments","text":"<code>query</code>  A valid string SQL query.  <code>eager</code>  A logical flag indicating whether to collect the result immediately. If FALSE (default), a LazyFrame is returned. If TRUE, a DataFrame is returned."},{"location":"man/SQLContext_execute/#value","title":"Value","text":"<p>A LazyFrame or DataFrame depending on the value of <code>eager</code>.</p>"},{"location":"man/SQLContext_execute/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nquery = \"SELECT * FROM mtcars WHERE cyl = 4\"\npl$SQLContext(mtcars = mtcars)$execute(query)\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;  SELECT [col(\"mpg\"), col(\"cyl\"), col(\"disp\"), col(\"hp\"), col(\"drat\"), col(\"wt\"), col(\"qsec\"), col(\"vs\"), col(\"am\"), col(\"gear\"), col(\"carb\")] FROM\n#&gt;   FILTER [(col(\"cyl\")) == (4)] FROM\n#&gt; \n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code>pl$SQLContext(mtcars = mtcars)$execute(query, eager = TRUE)\n</code></pre> <pre><code>#&gt; shape: (11, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 24.4 \u2506 4.0 \u2506 146.7 \u2506 62.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 27.3 \u2506 4.0 \u2506 79.0  \u2506 66.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 26.0 \u2506 4.0 \u2506 120.3 \u2506 91.0  \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/SQLContext_register/","title":"Register a single data as a table","text":"<p>Source code</p>"},{"location":"man/SQLContext_register/#description","title":"Description","text":"<p>Register a single frame as a table, using the given name.</p>"},{"location":"man/SQLContext_register/#usage","title":"Usage","text":"<pre><code>SQLContext_register(name, frame)\n</code></pre>"},{"location":"man/SQLContext_register/#arguments","title":"Arguments","text":"<code>name</code>  A string name to register the frame as.  <code>frame</code>  A LazyFrame like object to register."},{"location":"man/SQLContext_register/#value","title":"Value","text":"<p>Returns the SQLContext_class object invisibly.</p>"},{"location":"man/SQLContext_register/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nctx = pl$SQLContext()\nctx$register(\"mtcars\", mtcars)\n\nctx$execute(\"SELECT * FROM mtcars LIMIT 5\")$collect()\n</code></pre> <pre><code>#&gt; shape: (5, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/SQLContext_register_many/","title":"Register multiple data as tables","text":"<p>Source code</p>"},{"location":"man/SQLContext_register_many/#description","title":"Description","text":"<p>Register multiple frames as tables.</p>"},{"location":"man/SQLContext_register_many/#usage","title":"Usage","text":"<pre><code>SQLContext_register_many(...)\n</code></pre>"},{"location":"man/SQLContext_register_many/#arguments","title":"Arguments","text":"<code>\u2026</code>  Name-value pairs of LazyFrame like objects to register."},{"location":"man/SQLContext_register_many/#value","title":"Value","text":"<p>Returns the SQLContext_class object invisibly.</p>"},{"location":"man/SQLContext_register_many/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nctx = pl$SQLContext()\nr_df = mtcars\npl_df = pl$DataFrame(mtcars)\npl_lf = pl$LazyFrame(mtcars)\n\nctx$register_many(r_df = r_df, pl_df = pl_df, pl_lf = pl_lf)\n\nctx$execute(\n  \"SELECT * FROM r_df\n  UNION ALL\n  SELECT * FROM pl_df\n  UNION ALL\n  SELECT * FROM pl_lf\"\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (96, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/SQLContext_tables/","title":"List registered tables","text":"<p>Source code</p>"},{"location":"man/SQLContext_tables/#description","title":"Description","text":"<p>Return a character vector of the registered table names.</p>"},{"location":"man/SQLContext_tables/#usage","title":"Usage","text":"<pre><code>SQLContext_tables()\n</code></pre>"},{"location":"man/SQLContext_tables/#value","title":"Value","text":"<p>A character vector of the registered table names.</p>"},{"location":"man/SQLContext_tables/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nctx = pl$SQLContext()\nctx$tables()\n</code></pre> <pre><code>#&gt; character(0)\n</code></pre> <pre><code>ctx$register(\"df1\", mtcars)\nctx$tables()\n</code></pre> <pre><code>#&gt; [1] \"df1\"\n</code></pre> <pre><code>ctx$register(\"df2\", mtcars)\nctx$tables()\n</code></pre> <pre><code>#&gt; [1] \"df1\" \"df2\"\n</code></pre>"},{"location":"man/SQLContext_unregister/","title":"Unregister tables by name","text":"<p>Source code</p>"},{"location":"man/SQLContext_unregister/#description","title":"Description","text":"<p>Unregister tables by name.</p>"},{"location":"man/SQLContext_unregister/#usage","title":"Usage","text":"<pre><code>SQLContext_unregister(names)\n</code></pre>"},{"location":"man/SQLContext_unregister/#arguments","title":"Arguments","text":"<code>names</code>  A character vector of table names to unregister."},{"location":"man/SQLContext_unregister/#value","title":"Value","text":"<p>Returns the SQLContext_class object invisibly.</p>"},{"location":"man/SQLContext_unregister/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# Initialise a new SQLContext and register the given tables.\nctx = pl$SQLContext(x = mtcars, y = mtcars, z = mtcars)\nctx$tables()\n</code></pre> <pre><code>#&gt; [1] \"x\" \"y\" \"z\"\n</code></pre> <pre><code># Unregister some tables.\nctx$unregister(c(\"x\", \"y\"))\nctx$tables()\n</code></pre> <pre><code>#&gt; [1] \"z\"\n</code></pre>"},{"location":"man/Series_abs/","title":"Take absolute value of Series","text":"<p>Source code</p>"},{"location":"man/Series_abs/#description","title":"Description","text":"<p>Take absolute value of Series</p>"},{"location":"man/Series_abs/#usage","title":"Usage","text":"<pre><code>Series_abs()\n</code></pre>"},{"location":"man/Series_abs/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_abs/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(-2:2)$abs()\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  1\n#&gt;  0\n#&gt;  1\n#&gt;  2\n#&gt; ]\n</code></pre>"},{"location":"man/Series_add/","title":"add Series","text":"<p>Source code</p>"},{"location":"man/Series_add/#description","title":"Description","text":"<p>Series arithmetics</p>"},{"location":"man/Series_add/#usage","title":"Usage","text":"<pre><code>Series_add(other)\n\n# S3 method for class 'RPolarsSeries'\ns1 + s2\n</code></pre>"},{"location":"man/Series_add/#arguments","title":"Arguments","text":"<code>other</code>  Series or into Series  <code>s1</code>  lhs Series  <code>s2</code>  rhs Series or any into Series"},{"location":"man/Series_add/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_add/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:3)$add(11:13)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  12\n#&gt;  14\n#&gt;  16\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3)$add(pl$Series(11:13))\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  12\n#&gt;  14\n#&gt;  16\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3)$add(1L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre> <pre><code>1L + pl$Series(1:3)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3) + 1L\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre>"},{"location":"man/Series_alias/","title":"Alias","text":"<p>Source code</p>"},{"location":"man/Series_alias/#description","title":"Description","text":"<p>Change name of Series</p>"},{"location":"man/Series_alias/#usage","title":"Usage","text":"<pre><code>Series_alias(name)\n</code></pre>"},{"location":"man/Series_alias/#arguments","title":"Arguments","text":"<code>name</code>  a String as the new name"},{"location":"man/Series_alias/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_alias/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:3, name = \"alice\")$alias(\"bob\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'bob' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre>"},{"location":"man/Series_all/","title":"Reduce Boolean Series with ALL","text":"<p>Source code</p>"},{"location":"man/Series_all/#description","title":"Description","text":"<p>Reduce Boolean Series with ALL</p>"},{"location":"man/Series_all/#usage","title":"Usage","text":"<pre><code>Series_all()\n</code></pre>"},{"location":"man/Series_all/#value","title":"Value","text":"<p>bool</p>"},{"location":"man/Series_all/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(TRUE, TRUE, NA))$all()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/Series_any/","title":"Reduce Boolean Series with ANY","text":"<p>Source code</p>"},{"location":"man/Series_any/#description","title":"Description","text":"<p>Reduce Boolean Series with ANY</p>"},{"location":"man/Series_any/#usage","title":"Usage","text":"<pre><code>Series_any()\n</code></pre>"},{"location":"man/Series_any/#value","title":"Value","text":"<p>bool</p>"},{"location":"man/Series_any/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(TRUE, FALSE, NA))$any()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/Series_append/","title":"append (default immutable)","text":"<p>Source code</p>"},{"location":"man/Series_append/#description","title":"Description","text":"<p>append two Series, see details for mutability</p>"},{"location":"man/Series_append/#usage","title":"Usage","text":"<pre><code>Series_append(other, immutable = TRUE)\n</code></pre>"},{"location":"man/Series_append/#arguments","title":"Arguments","text":"<code>other</code>  Series to append  <code>immutable</code>  bool should append be immutable, default TRUE as mutable operations should be avoided in plain R API\u2019s."},{"location":"man/Series_append/#details","title":"Details","text":"<p>if immutable = FLASE, the Series object will not behave as immutable. This mean appending to this Series will affect any variable pointing to this memory location. This will break normal scoping rules of R. Polars-clones are cheap. Mutable operations are likely never needed in any sense.</p>"},{"location":"man/Series_append/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_append/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# default immutable behavior, s_imut and s_imut_copy stay the same\ns_imut = pl$Series(1:3)\ns_imut_copy = s_imut\ns_new = s_imut$append(pl$Series(1:3))\nidentical(s_imut$to_vector(), s_imut_copy$to_vector())\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># pypolars-like mutable behavior,s_mut_copy become the same as s_new\ns_mut = pl$Series(1:3)\ns_mut_copy = s_mut\n# must deactivate this to allow to use immutable=FALSE\npl$set_options(strictly_immutable = FALSE)\ns_new = s_mut$append(pl$Series(1:3), immutable = FALSE)\nidentical(s_new$to_vector(), s_mut_copy$to_vector())\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/Series_arg_max/","title":"idx to max value","text":"<p>Source code</p>"},{"location":"man/Series_arg_max/#description","title":"Description","text":"<p>idx to max value</p>"},{"location":"man/Series_arg_max/#usage","title":"Usage","text":"<pre><code>Series_arg_max\n</code></pre>"},{"location":"man/Series_arg_max/#value","title":"Value","text":"<p>bool</p>"},{"location":"man/Series_arg_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(5, 1))$arg_max()\n</code></pre> <pre><code>#&gt; [1] 0\n</code></pre>"},{"location":"man/Series_arg_min/","title":"idx to min value","text":"<p>Source code</p>"},{"location":"man/Series_arg_min/#description","title":"Description","text":"<p>idx to min value</p>"},{"location":"man/Series_arg_min/#usage","title":"Usage","text":"<pre><code>Series_arg_min\n</code></pre>"},{"location":"man/Series_arg_min/#value","title":"Value","text":"<p>bool</p>"},{"location":"man/Series_arg_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(5, 1))$arg_min()\n</code></pre> <pre><code>#&gt; [1] 1\n</code></pre>"},{"location":"man/Series_ceil/","title":"Series_ceil","text":"<p>Source code</p>"},{"location":"man/Series_ceil/#description","title":"Description","text":"<p>Ceil of this Series</p>"},{"location":"man/Series_ceil/#usage","title":"Usage","text":"<pre><code>Series_ceil()\n</code></pre>"},{"location":"man/Series_ceil/#value","title":"Value","text":"<p>bool</p>"},{"location":"man/Series_ceil/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(.5, 1.999))$ceil()\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  2.0\n#&gt; ]\n</code></pre>"},{"location":"man/Series_chunk_lengths/","title":"Lengths of Series memory chunks","text":"<p>Source code</p>"},{"location":"man/Series_chunk_lengths/#description","title":"Description","text":"<p>Get the Lengths of Series memory chunks as vector.</p>"},{"location":"man/Series_chunk_lengths/#usage","title":"Usage","text":"<pre><code>Series_chunk_lengths\n</code></pre>"},{"location":"man/Series_chunk_lengths/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p>"},{"location":"man/Series_chunk_lengths/#value","title":"Value","text":"<p>numeric vector. Length is number of chunks. Sum of lengths is equal to size of Series.</p>"},{"location":"man/Series_chunk_lengths/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nchunked_series = c(pl$Series(1:3), pl$Series(1:10))\nchunked_series$chunk_lengths()\n</code></pre> <pre><code>#&gt; [1]  3 10\n</code></pre>"},{"location":"man/Series_class/","title":"Inner workings of the Series-class","text":""},{"location":"man/Series_class/#description","title":"Description","text":"<p>The <code>Series</code>-class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instantiated <code>Series</code>-object is an <code>externalptr</code> to a lowlevel rust polars Series object. The pointer address is the only statefullness of the Series object on the R side. Any other state resides on the rust side. The S3 method <code>.DollarNames.RPolarsSeries</code> exposes all public <code>$foobar()</code>-methods which are callable onto the object. Most methods return another <code>Series</code>-class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from <code>.pr$Series$methodname()</code>, also all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications.</p>"},{"location":"man/Series_class/#details","title":"Details","text":"<p>Check out the source code in R/Series_frame.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to .pr and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed <code>Series_</code>.</p>"},{"location":"man/Series_class/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$show_all_public_methods(\"RPolarsSeries\")\n</code></pre> <pre><code>#&gt; \n#&gt; \n#&gt;     RPolarsSeries class methods, access via object$method() ( environment ):\n#&gt; \n#&gt;        RPolarsSeries ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ apply ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ chunk_lengths ; function ]\n#&gt;           [ clone ; function ]\n#&gt;           [ compare ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dtype ; property function ]\n#&gt;           [ equals ; function ]\n#&gt;           [ expr ; property function ]\n#&gt;           [ flags ; property function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ is_numeric ; function ]\n#&gt;           [ is_sorted ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ print ; function ]\n#&gt;           [ rem ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ to_frame ; function ]\n#&gt;           [ to_lit ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_r_list ; function ]\n#&gt;           [ to_r_vector ; function ]\n#&gt;           [ to_vector ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n</code></pre> <pre><code># see all private methods (not intended for regular use)\nls(.pr$Series)\n</code></pre> <pre><code>#&gt;  [1] \"abs\"                    \"add\"                    \"alias\"                 \n#&gt;  [4] \"all\"                    \"any\"                    \"append_mut\"            \n#&gt;  [7] \"arg_max\"                \"arg_min\"                \"ceil\"                  \n#&gt; [10] \"chunk_lengths\"          \"clone\"                  \"compare\"               \n#&gt; [13] \"cum_sum\"                \"div\"                    \"dtype\"                 \n#&gt; [16] \"equals\"                 \"floor\"                  \"from_arrow\"            \n#&gt; [19] \"get_fmt\"                \"is_sorted\"              \"is_sorted_flag\"        \n#&gt; [22] \"is_sorted_reverse_flag\" \"len\"                    \"map_elements\"          \n#&gt; [25] \"max\"                    \"mean\"                   \"median\"                \n#&gt; [28] \"min\"                    \"mul\"                    \"n_unique\"              \n#&gt; [31] \"name\"                   \"new\"                    \"panic\"                 \n#&gt; [34] \"print\"                  \"rem\"                    \"rename_mut\"            \n#&gt; [37] \"rep\"                    \"set_sorted_mut\"         \"shape\"                 \n#&gt; [40] \"sleep\"                  \"sort_mut\"               \"std\"                   \n#&gt; [43] \"sub\"                    \"sum\"                    \"to_fmt_char\"           \n#&gt; [46] \"to_frame\"               \"to_r\"                   \"value_counts\"          \n#&gt; [49] \"var\"\n</code></pre> <pre><code># make an object\ns = pl$Series(1:3)\n\n# use a public method/property\ns$shape\n</code></pre> <pre><code>#&gt; [1] 3 1\n</code></pre> <pre><code># use a private method (mutable append not allowed in public api)\ns_copy = s\n.pr$Series$append_mut(s, pl$Series(5:1))\n</code></pre> <pre><code>#&gt; $ok\n#&gt; NULL\n#&gt; \n#&gt; $err\n#&gt; NULL\n#&gt; \n#&gt; attr(,\"class\")\n#&gt; [1] \"extendr_result\"\n</code></pre> <pre><code>identical(s_copy$to_r(), s$to_r()) # s_copy was modified when s was modified\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/Series_clone/","title":"Clone a Series","text":"<p>Source code</p>"},{"location":"man/Series_clone/#description","title":"Description","text":"<p>Rarely useful as Series are nearly 100% immutable Any modification of a Series should lead to a clone anyways.</p>"},{"location":"man/Series_clone/#usage","title":"Usage","text":"<pre><code>Series_clone\n</code></pre>"},{"location":"man/Series_clone/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_clone/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns1 = pl$Series(1:3)\ns2 = s1$clone()\ns3 = s1\npl$mem_address(s1) != pl$mem_address(s2)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$mem_address(s1) == pl$mem_address(s3)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/Series_compare/","title":"Compare Series","text":"<p>Source code</p>"},{"location":"man/Series_compare/#description","title":"Description","text":"<p>compare two Series</p>"},{"location":"man/Series_compare/#usage","title":"Usage","text":"<pre><code>Series_compare(other, op)\n\n# S3 method for class 'RPolarsSeries'\ns1 == s2\n\n# S3 method for class 'RPolarsSeries'\ns1 != s2\n\n# S3 method for class 'RPolarsSeries'\ns1 &lt; s2\n\n# S3 method for class 'RPolarsSeries'\ns1 &gt; s2\n\n# S3 method for class 'RPolarsSeries'\ns1 &lt;= s2\n\n# S3 method for class 'RPolarsSeries'\ns1 &gt;= s2\n</code></pre>"},{"location":"man/Series_compare/#arguments","title":"Arguments","text":"<code>other</code>  A Series or something a Series can be created from  <code>op</code>  the chosen operator a String either: \u2018equal\u2019, \u2018not_equal\u2019, \u2018lt\u2019, \u2018gt\u2019, \u2018lt_eq\u2019 or \u2018gt_eq\u2019  <code>s1</code>  lhs Series  <code>s2</code>  rhs Series or any into Series"},{"location":"man/Series_compare/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_compare/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:5) == pl$Series(c(1:3, NA_integer_, 10L))\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [bool]\n#&gt; [\n#&gt;  true\n#&gt;  true\n#&gt;  true\n#&gt;  null\n#&gt;  false\n#&gt; ]\n</code></pre>"},{"location":"man/Series_cumsum/","title":"Cumulative sum","text":""},{"location":"man/Series_cumsum/#description","title":"Description","text":"<p>Get an array with the cumulative sum computed at every element.</p>"},{"location":"man/Series_cumsum/#usage","title":"Usage","text":"<pre><code>Series_cum_sum(reverse = FALSE)\n</code></pre>"},{"location":"man/Series_cumsum/#arguments","title":"Arguments","text":"<code>reverse</code>  bool, default FALSE, if true roll over vector from back to forth"},{"location":"man/Series_cumsum/#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Series_cumsum/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_cumsum/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(1:2, NA, 3, NaN, 4, Inf))$cum_sum()\n</code></pre> <pre><code>#&gt; polars Series: shape: (7,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  3.0\n#&gt;  null\n#&gt;  6.0\n#&gt;  NaN\n#&gt;  NaN\n#&gt;  NaN\n#&gt; ]\n</code></pre> <pre><code>pl$Series(c(1:2, NA, 3, Inf, 4, -Inf, 5))$cum_sum()\n</code></pre> <pre><code>#&gt; polars Series: shape: (8,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  3.0\n#&gt;  null\n#&gt;  6.0\n#&gt;  inf\n#&gt;  inf\n#&gt;  NaN\n#&gt;  NaN\n#&gt; ]\n</code></pre>"},{"location":"man/Series_div/","title":"div Series","text":"<p>Source code</p>"},{"location":"man/Series_div/#description","title":"Description","text":"<p>Series arithmetics</p>"},{"location":"man/Series_div/#usage","title":"Usage","text":"<pre><code>Series_div(other)\n\n# S3 method for class 'RPolarsSeries'\ns1 / s2\n</code></pre>"},{"location":"man/Series_div/#arguments","title":"Arguments","text":"<code>other</code>  Series or into Series  <code>s1</code>  lhs Series  <code>s2</code>  rhs Series or any into Series"},{"location":"man/Series_div/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_div/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:3)$div(11:13)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  0\n#&gt;  0\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3)$div(pl$Series(11:13))\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  0\n#&gt;  0\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3)$div(1L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre> <pre><code>2L / pl$Series(1:3)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  1\n#&gt;  0\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3) / 2L\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  1\n#&gt;  1\n#&gt; ]\n</code></pre>"},{"location":"man/Series_dtype/","title":"Get data type of Series","text":"<p>Source code</p>"},{"location":"man/Series_dtype/#description","title":"Description","text":"<p>Get data type of Series</p>"},{"location":"man/Series_dtype/#usage","title":"Usage","text":"<pre><code>Series_dtype()\n</code></pre>"},{"location":"man/Series_dtype/#value","title":"Value","text":"<p>DataType</p>"},{"location":"man/Series_dtype/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:4)$dtype\n</code></pre> <pre><code>#&gt; DataType: Int32\n</code></pre> <pre><code>pl$Series(c(1, 2))$dtype\n</code></pre> <pre><code>#&gt; DataType: Float64\n</code></pre> <pre><code>pl$Series(letters)$dtype\n</code></pre> <pre><code>#&gt; DataType: String\n</code></pre>"},{"location":"man/Series_equals/","title":"Are Series\u2019s equal?","text":"<p>Source code</p>"},{"location":"man/Series_equals/#description","title":"Description","text":"<p>Check if series is equal with another Series.</p>"},{"location":"man/Series_equals/#usage","title":"Usage","text":"<pre><code>Series_equals(other, null_equal = FALSE, strict = FALSE)\n</code></pre>"},{"location":"man/Series_equals/#arguments","title":"Arguments","text":"<code>other</code>  Series to compare with  <code>null_equal</code>  bool if TRUE, (Null==Null) is true and not Null/NA. Overridden by strict.  <code>strict</code>  bool if TRUE, do not allow similar DataType comparison. Overrides null_equal."},{"location":"man/Series_equals/#format","title":"Format","text":"<p>method</p>"},{"location":"man/Series_equals/#value","title":"Value","text":"<p>bool</p>"},{"location":"man/Series_equals/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:4, \"bob\")$equals(pl$Series(1:4))\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/Series_expr/","title":"Any expr method on a Series","text":"<p>Source code</p>"},{"location":"man/Series_expr/#description","title":"Description","text":"<p>Call an expression on a Series See the individual Expr method pages for full details</p>"},{"location":"man/Series_expr/#usage","title":"Usage","text":"<pre><code>Series_expr()\n</code></pre>"},{"location":"man/Series_expr/#details","title":"Details","text":"<p>This is a shorthand of writing something like <code>pl$DataFrame(s)$select(pl$col(\u201csname\u201d)$expr)$to_series(0)</code></p> <p>This subnamespace is experimental. Submit an issue if anything unexpected happened.</p>"},{"location":"man/Series_expr/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Series_expr/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = pl$Series(list(1:3, 1:2, NULL))\ns$expr$first()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [list[i32]]\n#&gt; [\n#&gt;  [1, 2, 3]\n#&gt; ]\n</code></pre> <pre><code>s$expr$alias(\"alice\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: 'alice' [list[i32]]\n#&gt; [\n#&gt;  [1, 2, 3]\n#&gt;  [1, 2]\n#&gt;  []\n#&gt; ]\n</code></pre>"},{"location":"man/Series_flags/","title":"Get data type of Series","text":"<p>Source code</p>"},{"location":"man/Series_flags/#description","title":"Description","text":"<p>Get data type of Series</p>"},{"location":"man/Series_flags/#usage","title":"Usage","text":"<pre><code>Series_flags()\n</code></pre>"},{"location":"man/Series_flags/#details","title":"Details","text":"<p>property sorted flags are not settable, use set_sorted</p>"},{"location":"man/Series_flags/#value","title":"Value","text":"<p>DataType</p>"},{"location":"man/Series_flags/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:4)$sort()$flags\n</code></pre> <pre><code>#&gt; $SORTED_ASC\n#&gt; [1] TRUE\n#&gt; \n#&gt; $SORTED_DESC\n#&gt; [1] FALSE\n</code></pre>"},{"location":"man/Series_floor/","title":"Series_floor","text":"<p>Source code</p>"},{"location":"man/Series_floor/#description","title":"Description","text":"<p>Floor of this Series</p>"},{"location":"man/Series_floor/#usage","title":"Usage","text":"<pre><code>Series_floor()\n</code></pre>"},{"location":"man/Series_floor/#value","title":"Value","text":"<p>numeric</p>"},{"location":"man/Series_floor/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(.5, 1.999))$floor()\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  0.0\n#&gt;  1.0\n#&gt; ]\n</code></pre>"},{"location":"man/Series_is_numeric/","title":"is_numeric","text":"<p>Source code</p>"},{"location":"man/Series_is_numeric/#description","title":"Description","text":"<p>return bool whether series is numeric</p>"},{"location":"man/Series_is_numeric/#usage","title":"Usage","text":"<pre><code>Series_is_numeric()\n</code></pre>"},{"location":"man/Series_is_numeric/#format","title":"Format","text":"<p>method</p>"},{"location":"man/Series_is_numeric/#details","title":"Details","text":"<p>true of series dtype is member of pl$numeric_dtypes</p>"},{"location":"man/Series_is_numeric/#value","title":"Value","text":"<p>bool</p>"},{"location":"man/Series_is_numeric/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:4)$is_numeric()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$Series(c(\"a\", \"b\", \"c\"))$is_numeric()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>pl$numeric_dtypes\n</code></pre> <pre><code>#&gt; $Int8\n#&gt; DataType: Int8\n#&gt; \n#&gt; $Int16\n#&gt; DataType: Int16\n#&gt; \n#&gt; $Int32\n#&gt; DataType: Int32\n#&gt; \n#&gt; $Int64\n#&gt; DataType: Int64\n#&gt; \n#&gt; $Float32\n#&gt; DataType: Float32\n#&gt; \n#&gt; $Float64\n#&gt; DataType: Float64\n</code></pre>"},{"location":"man/Series_is_sorted/","title":"is_sorted","text":"<p>Source code</p>"},{"location":"man/Series_is_sorted/#description","title":"Description","text":"<p>is_sorted</p>"},{"location":"man/Series_is_sorted/#usage","title":"Usage","text":"<pre><code>Series_is_sorted(descending = FALSE)\n</code></pre>"},{"location":"man/Series_is_sorted/#arguments","title":"Arguments","text":"<code>descending</code>  Check if the Series is sorted in descending order."},{"location":"man/Series_is_sorted/#details","title":"Details","text":"<p>property sorted flags are not settable, use set_sorted</p>"},{"location":"man/Series_is_sorted/#value","title":"Value","text":"<p>DataType</p>"},{"location":"man/Series_is_sorted/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:4)$sort()$is_sorted()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/Series_len/","title":"Series_len","text":"<p>Source code</p>"},{"location":"man/Series_len/#description","title":"Description","text":"<p>Length of this Series.</p>"},{"location":"man/Series_len/#usage","title":"Usage","text":"<pre><code>Series_len\n</code></pre>"},{"location":"man/Series_len/#value","title":"Value","text":"<p>numeric</p>"},{"location":"man/Series_len/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:10)$len()\n</code></pre> <pre><code>#&gt; [1] 10\n</code></pre>"},{"location":"man/Series_list/","title":"list: list related methods on Series of dtype List","text":"<p>Source code</p>"},{"location":"man/Series_list/#description","title":"Description","text":"<p>Create an object namespace of all list related methods. See the individual method pages for full details</p>"},{"location":"man/Series_list/#usage","title":"Usage","text":"<pre><code>Series_list()\n</code></pre>"},{"location":"man/Series_list/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_list/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = pl$Series(list(1:3, 1:2, NULL))\ns\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [list[i32]]\n#&gt; [\n#&gt;  [1, 2, 3]\n#&gt;  [1, 2]\n#&gt;  []\n#&gt; ]\n</code></pre> <pre><code>s$list$first()\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502      \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Series_map_elements/","title":"Apply every value with an R fun","text":"<p>Source code</p>"},{"location":"man/Series_map_elements/#description","title":"Description","text":"<p>About as slow as regular non-vectorized R. Similar to using R sapply on a vector.</p>"},{"location":"man/Series_map_elements/#usage","title":"Usage","text":"<pre><code>Series_map_elements(\n  fun,\n  datatype = NULL,\n  strict_return_type = TRUE,\n  allow_fail_eval = FALSE\n)\n</code></pre>"},{"location":"man/Series_map_elements/#arguments","title":"Arguments","text":"<code>fun</code>  r function, should take a scalar value as input and return one.  <code>datatype</code>  DataType of return value. Default NULL means same as input.  <code>strict_return_type</code>  bool, default TRUE: fail on wrong return type, FALSE: convert to polars Null  <code>allow_fail_eval</code>  bool, default FALSE: raise R fun error, TRUE: convert to polars Null"},{"location":"man/Series_map_elements/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_map_elements/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = pl$Series(letters[1:5], \"ltrs\")\nf = \\(x) paste(x, \":\", as.integer(charToRaw(x)))\ns$map_elements(f, pl$String)\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: 'ltrs_apply' [str]\n#&gt; [\n#&gt;  \"a : 97\"\n#&gt;  \"b : 98\"\n#&gt;  \"c : 99\"\n#&gt;  \"d : 100\"\n#&gt;  \"e : 101\"\n#&gt; ]\n</code></pre> <pre><code># same as\npl$Series(sapply(s$to_r(), f), s$name)\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: 'ltrs' [str]\n#&gt; [\n#&gt;  \"a : 97\"\n#&gt;  \"b : 98\"\n#&gt;  \"c : 99\"\n#&gt;  \"d : 100\"\n#&gt;  \"e : 101\"\n#&gt; ]\n</code></pre>"},{"location":"man/Series_max/","title":"max","text":"<p>Source code</p>"},{"location":"man/Series_max/#description","title":"Description","text":"<p>Reduce Series with max</p>"},{"location":"man/Series_max/#usage","title":"Usage","text":"<pre><code>Series_max()\n</code></pre>"},{"location":"man/Series_max/#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before maxming to prevent overflow issues.</p>"},{"location":"man/Series_max/#value","title":"Value","text":"<p>R scalar value</p>"},{"location":"man/Series_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(1:2, NA, 3, 5))$max() # a NA is dropped always\n</code></pre> <pre><code>#&gt; [1] 5\n</code></pre> <pre><code>pl$Series(c(1:2, NA, 3, NaN, 4, Inf))$max() # NaN carries / poisons\n</code></pre> <pre><code>#&gt; [1] Inf\n</code></pre> <pre><code>pl$Series(c(1:2, 3, Inf, 4, -Inf, 5))$max() # Inf-Inf is NaN\n</code></pre> <pre><code>#&gt; [1] Inf\n</code></pre>"},{"location":"man/Series_mean/","title":"Mean","text":"<p>Source code</p>"},{"location":"man/Series_mean/#description","title":"Description","text":"<p>Reduce Series with mean</p>"},{"location":"man/Series_mean/#usage","title":"Usage","text":"<pre><code>Series_mean()\n</code></pre>"},{"location":"man/Series_mean/#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before meanming to prevent overflow issues.</p>"},{"location":"man/Series_mean/#value","title":"Value","text":"<p>R scalar value</p>"},{"location":"man/Series_mean/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(1:2, NA, 3, 5))$mean() # a NA is dropped always\n</code></pre> <pre><code>#&gt; [1] 2.75\n</code></pre> <pre><code>pl$Series(c(1:2, NA, 3, NaN, 4, Inf))$mean() # NaN carries / poisons\n</code></pre> <pre><code>#&gt; [1] NaN\n</code></pre> <pre><code>pl$Series(c(1:2, 3, Inf, 4, -Inf, 5))$mean() # Inf-Inf is NaN\n</code></pre> <pre><code>#&gt; [1] NaN\n</code></pre>"},{"location":"man/Series_median/","title":"Median","text":"<p>Source code</p>"},{"location":"man/Series_median/#description","title":"Description","text":"<p>Reduce Series with median</p>"},{"location":"man/Series_median/#usage","title":"Usage","text":"<pre><code>Series_median()\n</code></pre>"},{"location":"man/Series_median/#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before medianming to prevent overflow issues.</p>"},{"location":"man/Series_median/#value","title":"Value","text":"<p>R scalar value</p>"},{"location":"man/Series_median/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(1:2, NA, 3, 5))$median() # a NA is dropped always\n</code></pre> <pre><code>#&gt; [1] 2.5\n</code></pre> <pre><code>pl$Series(c(1:2, NA, 3, NaN, 4, Inf))$median() # NaN carries / poisons\n</code></pre> <pre><code>#&gt; [1] 3.5\n</code></pre> <pre><code>pl$Series(c(1:2, 3, Inf, 4, -Inf, 5))$median() # Inf-Inf is NaN\n</code></pre> <pre><code>#&gt; [1] 3\n</code></pre>"},{"location":"man/Series_min/","title":"min","text":"<p>Source code</p>"},{"location":"man/Series_min/#description","title":"Description","text":"<p>Reduce Series with min</p>"},{"location":"man/Series_min/#usage","title":"Usage","text":"<pre><code>Series_min()\n</code></pre>"},{"location":"man/Series_min/#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before taking the min to prevent overflow issues.</p>"},{"location":"man/Series_min/#value","title":"Value","text":"<p>R scalar value</p>"},{"location":"man/Series_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(1:2, NA, 3, 5))$min() # a NA is dropped always\n</code></pre> <pre><code>#&gt; [1] 1\n</code></pre> <pre><code>pl$Series(c(1:2, NA, 3, NaN, 4, Inf))$min() # NaN carries / poisons\n</code></pre> <pre><code>#&gt; [1] 1\n</code></pre> <pre><code>pl$Series(c(1:2, 3, Inf, 4, -Inf, 5))$min() # Inf-Inf is NaN\n</code></pre> <pre><code>#&gt; [1] -Inf\n</code></pre>"},{"location":"man/Series_mul/","title":"mul Series","text":"<p>Source code</p>"},{"location":"man/Series_mul/#description","title":"Description","text":"<p>Series arithmetics</p>"},{"location":"man/Series_mul/#usage","title":"Usage","text":"<pre><code>Series_mul(other)\n\n# S3 method for class 'RPolarsSeries'\ns1 * s2\n</code></pre>"},{"location":"man/Series_mul/#arguments","title":"Arguments","text":"<code>other</code>  Series or into Series  <code>s1</code>  lhs Series  <code>s2</code>  rhs Series or any into Series"},{"location":"man/Series_mul/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_mul/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:3)$mul(11:13)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  11\n#&gt;  24\n#&gt;  39\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3)$mul(pl$Series(11:13))\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  11\n#&gt;  24\n#&gt;  39\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3)$mul(1L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre> <pre><code>2L * pl$Series(1:3)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  4\n#&gt;  6\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3) * 2L\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  4\n#&gt;  6\n#&gt; ]\n</code></pre>"},{"location":"man/Series_n_unique/","title":"Count unique values in Series","text":"<p>Source code</p>"},{"location":"man/Series_n_unique/#description","title":"Description","text":"<p>Return count of unique values in Series</p>"},{"location":"man/Series_n_unique/#usage","title":"Usage","text":"<pre><code>Series_n_unique()\n</code></pre>"},{"location":"man/Series_n_unique/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Series_n_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:4)$n_unique()\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre>"},{"location":"man/Series_name/","title":"Property: Name","text":"<p>Source code</p>"},{"location":"man/Series_name/#description","title":"Description","text":"<p>Get name of Series</p>"},{"location":"man/Series_name/#usage","title":"Usage","text":"<pre><code>Series_name()\n</code></pre>"},{"location":"man/Series_name/#value","title":"Value","text":"<p>String the name</p>"},{"location":"man/Series_name/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:3, name = \"alice\")$name\n</code></pre> <pre><code>#&gt; [1] \"alice\"\n</code></pre>"},{"location":"man/Series_print/","title":"Print Series","text":"<p>Source code</p>"},{"location":"man/Series_print/#description","title":"Description","text":"<p>Print Series</p>"},{"location":"man/Series_print/#usage","title":"Usage","text":"<pre><code>Series_print()\n</code></pre>"},{"location":"man/Series_print/#value","title":"Value","text":"<p>self</p>"},{"location":"man/Series_print/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:3)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre>"},{"location":"man/Series_rem/","title":"rem Series","text":"<p>Source code</p>"},{"location":"man/Series_rem/#description","title":"Description","text":"<p>Series arithmetics, remainder</p>"},{"location":"man/Series_rem/#usage","title":"Usage","text":"<pre><code>Series_rem(other)\n</code></pre>"},{"location":"man/Series_rem/#arguments","title":"Arguments","text":"<code>other</code>  Series or into Series"},{"location":"man/Series_rem/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_rem/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:4)$rem(2L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  0\n#&gt;  1\n#&gt;  0\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3)$rem(pl$Series(11:13))\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3)$rem(1L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  0\n#&gt;  0\n#&gt; ]\n</code></pre>"},{"location":"man/Series_rename/","title":"Rename a series","text":"<p>Source code</p>"},{"location":"man/Series_rename/#description","title":"Description","text":"<p>Rename a series</p>"},{"location":"man/Series_rename/#usage","title":"Usage","text":"<pre><code>Series_rename(name, in_place = FALSE)\n</code></pre>"},{"location":"man/Series_rename/#arguments","title":"Arguments","text":"<code>name</code>  string the new name  <code>in_place</code>  bool rename in-place, breaks immutability If true will throw an error unless this option has been set: <code>pl$set_options(strictly_immutable = FALSE)</code>"},{"location":"man/Series_rename/#format","title":"Format","text":"<p>method</p>"},{"location":"man/Series_rename/#value","title":"Value","text":"<p>bool</p>"},{"location":"man/Series_rename/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:4, \"bob\")$rename(\"alice\")\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: 'alice' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre>"},{"location":"man/Series_rep/","title":"duplicate and concatenate a series","text":"<p>Source code</p>"},{"location":"man/Series_rep/#description","title":"Description","text":"<p>duplicate and concatenate a series</p>"},{"location":"man/Series_rep/#usage","title":"Usage","text":"<pre><code>Series_rep(n, rechunk = TRUE)\n</code></pre>"},{"location":"man/Series_rep/#arguments","title":"Arguments","text":"<code>n</code>  number of times to repeat  <code>rechunk</code>  bool default true, reallocate object in memory. If FALSE the Series will take up less space, If TRUE calculations might be faster."},{"location":"man/Series_rep/#format","title":"Format","text":"<p>method</p>"},{"location":"man/Series_rep/#details","title":"Details","text":"<p>This function in not implemented in pypolars</p>"},{"location":"man/Series_rep/#value","title":"Value","text":"<p>bool</p>"},{"location":"man/Series_rep/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:2, \"bob\")$rep(3)\n</code></pre> <pre><code>#&gt; polars Series: shape: (6,)\n#&gt; Series: 'bob' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  1\n#&gt;  2\n#&gt;  1\n#&gt;  2\n#&gt; ]\n</code></pre>"},{"location":"man/Series_set_sorted/","title":"Set sorted","text":"<p>Source code</p>"},{"location":"man/Series_set_sorted/#description","title":"Description","text":"<p>Set sorted</p>"},{"location":"man/Series_set_sorted/#usage","title":"Usage","text":"<pre><code>Series_set_sorted(descending = FALSE, in_place = FALSE)\n</code></pre>"},{"location":"man/Series_set_sorted/#arguments","title":"Arguments","text":"<code>descending</code>  Sort the columns in descending order.  <code>in_place</code>  if TRUE, will set flag mutably and return NULL. Remember to use pl$set_options(strictly_immutable = FALSE) otherwise an error will be thrown. If FALSE will return a cloned Series with set_flag which in the very most cases should be just fine."},{"location":"man/Series_set_sorted/#value","title":"Value","text":"<p>Series invisible</p>"},{"location":"man/Series_set_sorted/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ns = pl$Series(1:4)$set_sorted()\ns$flags\n</code></pre> <pre><code>#&gt; $SORTED_ASC\n#&gt; [1] TRUE\n#&gt; \n#&gt; $SORTED_DESC\n#&gt; [1] FALSE\n</code></pre>"},{"location":"man/Series_shape/","title":"Shape of series","text":"<p>Source code</p>"},{"location":"man/Series_shape/#description","title":"Description","text":"<p>Shape of series</p>"},{"location":"man/Series_shape/#usage","title":"Usage","text":"<pre><code>Series_shape()\n</code></pre>"},{"location":"man/Series_shape/#value","title":"Value","text":"<p>dimension vector of Series</p>"},{"location":"man/Series_shape/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nidentical(pl$Series(1:2)$shape, 2:1)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/Series_sort/","title":"Sort this Series","text":"<p>Source code</p>"},{"location":"man/Series_sort/#description","title":"Description","text":"<p>Sort this Series</p>"},{"location":"man/Series_sort/#usage","title":"Usage","text":"<pre><code>Series_sort(descending = FALSE, in_place = FALSE)\n</code></pre>"},{"location":"man/Series_sort/#arguments","title":"Arguments","text":"<code>descending</code>  Sort in descending order..  <code>in_place</code>  bool sort mutable in-place, breaks immutability If true will throw an error unless this option has been set: <code>pl$set_options(strictly_immutable = FALSE)</code>"},{"location":"man/Series_sort/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_sort/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(1, NA, NaN, Inf, -Inf))$sort()\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  null\n#&gt;  -inf\n#&gt;  1.0\n#&gt;  inf\n#&gt;  NaN\n#&gt; ]\n</code></pre>"},{"location":"man/Series_std/","title":"Std","text":"<p>Source code</p>"},{"location":"man/Series_std/#description","title":"Description","text":"<p>Aggregate the columns of this Series to their standard deviation.</p>"},{"location":"man/Series_std/#usage","title":"Usage","text":"<pre><code>Series_std(ddof = 1)\n</code></pre>"},{"location":"man/Series_std/#arguments","title":"Arguments","text":"<code>ddof</code>  integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/Series_std/#value","title":"Value","text":"<p>A new <code>Series</code> object with applied aggregation.</p>"},{"location":"man/Series_std/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:10)$std()\n</code></pre> <pre><code>#&gt; [1] 3.02765\n</code></pre>"},{"location":"man/Series_sub/","title":"sub Series","text":"<p>Source code</p>"},{"location":"man/Series_sub/#description","title":"Description","text":"<p>Series arithmetics</p>"},{"location":"man/Series_sub/#usage","title":"Usage","text":"<pre><code>Series_sub(other)\n\n# S3 method for class 'RPolarsSeries'\ns1 - s2\n</code></pre>"},{"location":"man/Series_sub/#arguments","title":"Arguments","text":"<code>other</code>  Series or into Series  <code>s1</code>  lhs Series  <code>s2</code>  rhs Series or any into Series"},{"location":"man/Series_sub/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_sub/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:3)$sub(11:13)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  -10\n#&gt;  -10\n#&gt;  -10\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3)$sub(pl$Series(11:13))\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  -10\n#&gt;  -10\n#&gt;  -10\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3)$sub(1L)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  1\n#&gt;  2\n#&gt; ]\n</code></pre> <pre><code>1L - pl$Series(1:3)\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  -1\n#&gt;  -2\n#&gt; ]\n</code></pre> <pre><code>pl$Series(1:3) - 1L\n</code></pre> <pre><code>#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  1\n#&gt;  2\n#&gt; ]\n</code></pre>"},{"location":"man/Series_sum/","title":"Sum","text":"<p>Source code</p>"},{"location":"man/Series_sum/#description","title":"Description","text":"<p>Reduce Series with sum</p>"},{"location":"man/Series_sum/#usage","title":"Usage","text":"<pre><code>Series_sum()\n</code></pre>"},{"location":"man/Series_sum/#details","title":"Details","text":"<p>The Dtypes Int8, UInt8, Int16 and UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"man/Series_sum/#value","title":"Value","text":"<p>R scalar value</p>"},{"location":"man/Series_sum/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(c(1:2, NA, 3, 5))$sum() # a NA is dropped always\n</code></pre> <pre><code>#&gt; [1] 11\n</code></pre> <pre><code>pl$Series(c(1:2, NA, 3, NaN, 4, Inf))$sum() # NaN carries / poisons\n</code></pre> <pre><code>#&gt; [1] NaN\n</code></pre> <pre><code>pl$Series(c(1:2, 3, Inf, 4, -Inf, 5))$sum() # Inf-Inf is NaN\n</code></pre> <pre><code>#&gt; [1] NaN\n</code></pre>"},{"location":"man/Series_to_frames/","title":"Series to DataFrame","text":""},{"location":"man/Series_to_frames/#description","title":"Description","text":"<p>Series to DataFrame</p>"},{"location":"man/Series_to_frames/#usage","title":"Usage","text":"<pre><code>Series_to_frame()\n</code></pre>"},{"location":"man/Series_to_frames/#format","title":"Format","text":"<p>method</p>"},{"location":"man/Series_to_frames/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/Series_to_frames/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:4, \"bob\")$to_frame()\n</code></pre> <pre><code>#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bob \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Series_to_lit/","title":"Series to Literal","text":"<p>Source code</p>"},{"location":"man/Series_to_lit/#description","title":"Description","text":"<p>convert Series to literal to perform modification and return</p>"},{"location":"man/Series_to_lit/#usage","title":"Usage","text":"<pre><code>Series_to_lit()\n</code></pre>"},{"location":"man/Series_to_lit/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/Series_to_lit/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n(\n  pl$Series(list(1:1, 1:2, 1:3, 1:4))\n  $print()\n  $to_lit()\n  $list$lengths()\n  $sum()\n  $cast(pl$dtypes$Int8)\n  $to_series()\n)\n</code></pre> <pre><code>#&gt; shape: (4,)\n#&gt; Series: '' [list[i32]]\n#&gt; [\n#&gt;  [1]\n#&gt;  [1, 2]\n#&gt;  [1, 2, 3]\n#&gt;  [1, 2, \u2026 4]\n#&gt; ]\n\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i8]\n#&gt; [\n#&gt;  10\n#&gt; ]\n</code></pre>"},{"location":"man/Series_to_r/","title":"Get r vector/list","text":"<p>Source code</p>"},{"location":"man/Series_to_r/#description","title":"Description","text":"<p>return R list (if polars Series is list) or vector (any other polars Series type)</p> <p>return R vector (implicit unlist)</p> <p>return R list (implicit as.list)</p>"},{"location":"man/Series_to_r/#usage","title":"Usage","text":"<pre><code>Series_to_r()\n\nSeries_to_vector()\n\nSeries_to_r_list()\n</code></pre>"},{"location":"man/Series_to_r/#details","title":"Details","text":"<p>Fun fact: Nested polars Series list must have same inner type, e.g.\u00a0List(List(Int32)) Thus every leaf(non list type) will be placed on the same depth of the tree, and be the same type.</p>"},{"location":"man/Series_to_r/#value","title":"Value","text":"<p>R list or vector</p> <p>R vector</p> <p>R list</p>"},{"location":"man/Series_to_r/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nseries_vec = pl$Series(letters[1:3])\n\n# Series_non_list\nseries_vec$to_r() # as vector because Series DataType is not list (is String)\n</code></pre> <pre><code>#&gt; [1] \"a\" \"b\" \"c\"\n</code></pre> <pre><code>series_vec$to_r_list() # implicit call as.list(), convert to list\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] \"a\"\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"b\"\n#&gt; \n#&gt; [[3]]\n#&gt; [1] \"c\"\n</code></pre> <pre><code>series_vec$to_vector() # implicit call unlist(), same as to_r() as already vector\n</code></pre> <pre><code>#&gt; [1] \"a\" \"b\" \"c\"\n</code></pre> <pre><code># make nested Series_list of Series_list of Series_Int32\n# using Expr syntax because currently more complete translated\nseries_list = pl$DataFrame(list(a = c(1:5, NA_integer_)))$select(\n  pl$col(\"a\")$implode()$implode()$append(\n    (\n      pl$col(\"a\")$head(2)$implode()$append(\n        pl$col(\"a\")$tail(1)$implode()\n      )\n    )$implode()\n  )\n)$get_column(\"a\") # get series from DataFrame\n\n# Series_list\nseries_list$to_r() # as list because Series DataType is list\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [[1]][[1]]\n#&gt; [1]  1  2  3  4  5 NA\n#&gt; \n#&gt; \n#&gt; [[2]]\n#&gt; [[2]][[1]]\n#&gt; [1] 1 2\n#&gt; \n#&gt; [[2]][[2]]\n#&gt; [1] NA\n</code></pre> <pre><code>series_list$to_r_list() # implicit call as.list(), same as to_r() as already list\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [[1]][[1]]\n#&gt; [1]  1  2  3  4  5 NA\n#&gt; \n#&gt; \n#&gt; [[2]]\n#&gt; [[2]][[1]]\n#&gt; [1] 1 2\n#&gt; \n#&gt; [[2]][[2]]\n#&gt; [1] NA\n</code></pre> <pre><code>series_list$to_vector() # implicit call unlist(), append into a vector\n</code></pre> <pre><code>#&gt; [1]  1  2  3  4  5 NA  1  2 NA\n</code></pre> <pre><code>#\n</code></pre>"},{"location":"man/Series_value_count/","title":"Value Counts as DataFrame","text":""},{"location":"man/Series_value_count/#description","title":"Description","text":"<p>Value Counts as DataFrame</p>"},{"location":"man/Series_value_count/#usage","title":"Usage","text":"<pre><code>Series_value_counts(sort = TRUE, parallel = FALSE)\n</code></pre>"},{"location":"man/Series_value_count/#arguments","title":"Arguments","text":"<code>sort</code>  bool, default TRUE: sort table by value; FALSE: random  <code>parallel</code>  bool, default FALSE, process multithreaded. Likely faster to have TRUE for a big Series. If called within an already multithreaded context such calling apply on a GroupBy with many groups, then likely slightly faster to leave FALSE."},{"location":"man/Series_value_count/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/Series_value_count/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(iris$Species, \"flower species\")$value_counts()\n</code></pre> <pre><code>#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 flower species \u2506 count \u2502\n#&gt; \u2502 ---            \u2506 ---   \u2502\n#&gt; \u2502 cat            \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa         \u2506 50    \u2502\n#&gt; \u2502 versicolor     \u2506 50    \u2502\n#&gt; \u2502 virginica      \u2506 50    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/Series_var/","title":"Var","text":"<p>Source code</p>"},{"location":"man/Series_var/#description","title":"Description","text":"<p>Aggregate the columns of this Series to their variance values.</p>"},{"location":"man/Series_var/#usage","title":"Usage","text":"<pre><code>Series_var(ddof = 1)\n</code></pre>"},{"location":"man/Series_var/#arguments","title":"Arguments","text":"<code>ddof</code>  integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/Series_var/#value","title":"Value","text":"<p>A new <code>Series</code> object with applied aggregation.</p>"},{"location":"man/Series_var/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Series(1:10)$var()\n</code></pre> <pre><code>#&gt; [1] 9.166667\n</code></pre>"},{"location":"man/as_polars_df/","title":"To polars DataFrame","text":"<p>Source code</p>"},{"location":"man/as_polars_df/#description","title":"Description","text":"<p><code>as_polars_df()</code> is a generic function that converts an R object to a polars DataFrame. It is basically a wrapper for pl$DataFrame(), but has special implementations for Apache Arrow-based objects such as polars LazyFrame and arrow::Table.</p>"},{"location":"man/as_polars_df/#usage","title":"Usage","text":"<pre><code>as_polars_df(x, ...)\n\n# Default S3 method:\nas_polars_df(x, ...)\n\n# S3 method for class 'data.frame'\nas_polars_df(x, ..., rownames = NULL, make_names_unique = TRUE)\n\n# S3 method for class 'RPolarsDataFrame'\nas_polars_df(x, ...)\n\n# S3 method for class 'RPolarsGroupBy'\nas_polars_df(x, ...)\n\n# S3 method for class 'RPolarsSeries'\nas_polars_df(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nas_polars_df(\n  x,\n  n_rows = Inf,\n  ...,\n  type_coercion = TRUE,\n  predicate_pushdown = TRUE,\n  projection_pushdown = TRUE,\n  simplify_expression = TRUE,\n  slice_pushdown = TRUE,\n  comm_subplan_elim = TRUE,\n  comm_subexpr_elim = TRUE,\n  streaming = FALSE,\n  no_optimization = FALSE,\n  inherit_optimization = FALSE,\n  collect_in_background = FALSE\n)\n\n# S3 method for class 'RPolarsLazyGroupBy'\nas_polars_df(x, ...)\n\n# S3 method for class 'ArrowTabular'\nas_polars_df(x, ..., rechunk = TRUE, schema = NULL, schema_overrides = NULL)\n</code></pre>"},{"location":"man/as_polars_df/#arguments","title":"Arguments","text":"<code>x</code>  Object to convert to a polars DataFrame.  <code>\u2026</code>  Additional arguments passed to methods.  <code>rownames</code>   How to treat existing row names of a data frame:  <ul> <li> <code>NULL</code>: Remove row names. This is the default.  </li> <li>  A string: The name of a new column, which will contain the row names. If <code>x</code> already has a column with that name, an error is thrown.  </li> </ul> <code>make_names_unique</code>  A logical flag to replace duplicated column names with unique names. If <code>FALSE</code> and there are duplicated column names, an error is thrown.  <code>n_rows</code>  Number of rows to fetch. Defaults to <code>Inf</code>, meaning all rows.  <code>type_coercion</code>  Boolean. Coerce types such that operations succeed and run on minimal required memory.  <code>predicate_pushdown</code>  Boolean. Applies filters as early as possible at scan level.  <code>projection_pushdown</code>  Boolean. Select only the columns that are needed at the scan level.  <code>simplify_expression</code>  Boolean. Various optimizations, such as constant folding and replacing expensive operations with faster alternatives.  <code>slice_pushdown</code>  Boolean. Only load the required slice from the scan level. Don\u2019t materialize sliced outputs (e.g.\u00a0<code>join$head(10)</code>).  <code>comm_subplan_elim</code>  Boolean. Will try to cache branching subplans that occur on self-joins or unions.  <code>comm_subexpr_elim</code>  Boolean. Common subexpressions will be cached and reused.  <code>streaming</code>  Boolean. Run parts of the query in a streaming fashion (this is in an alpha state).  <code>no_optimization</code>  Boolean. Sets the following parameters to <code>FALSE</code>: <code>predicate_pushdown</code>, <code>projection_pushdown</code>, <code>slice_pushdown</code>, <code>comm_subplan_elim</code>, <code>comm_subexpr_elim</code>.  <code>inherit_optimization</code>  Boolean. Use existing optimization settings regardless the settings specified in this function call.  <code>collect_in_background</code>  Boolean. Detach this query from R session. Computation will start in background. Get a handle which later can be converted into the resulting DataFrame. Useful in interactive mode to not lock R session.  <code>rechunk</code>  bool rewrite in one array per column, Implemented for ChunkedArray Array is already contiguous. Not implemented for Table. C  <code>schema</code>  named list of DataTypes or char vec of names. Same length as arrow table. If schema names or types do not match arrow table, the columns will be renamed/recast. NULL default is to import columns as is. Takes no effect for Array or ChunkedArray  <code>schema_overrides</code>  named list of DataTypes. Name some columns to recast by the DataType. Takes not effect for Array or ChunkedArray"},{"location":"man/as_polars_df/#details","title":"Details","text":"<p>For LazyFrame objects, this function is a shortcut for $collect() or $fetch(), depending on whether the number of rows to fetch is infinite or not.</p>"},{"location":"man/as_polars_df/#value","title":"Value","text":"<p>a DataFrame</p>"},{"location":"man/as_polars_df/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# Convert the row names of a data frame to a column\nas_polars_df(mtcars, rownames = \"car\")\n</code></pre> <pre><code>#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 car            \u2506 mpg  \u2506 cyl \u2506 disp  \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---            \u2506 ---  \u2506 --- \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 str            \u2506 f64  \u2506 f64 \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Mazda RX4      \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 Mazda RX4 Wag  \u2506 21.0 \u2506 6.0 \u2506 160.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 Datsun 710     \u2506 22.8 \u2506 4.0 \u2506 108.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 Hornet 4 Drive \u2506 21.4 \u2506 6.0 \u2506 258.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026              \u2506 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 Ford Pantera L \u2506 15.8 \u2506 8.0 \u2506 351.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 Ferrari Dino   \u2506 19.7 \u2506 6.0 \u2506 145.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 Maserati Bora  \u2506 15.0 \u2506 8.0 \u2506 301.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 Volvo 142E     \u2506 21.4 \u2506 4.0 \u2506 121.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Convert an arrow Table to a polars LazyFrame\nlf = as_polars_df(\n  arrow::as_arrow_table(mtcars)\n)$lazy()\n\n# Collect all rows\nas_polars_df(lf)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Fetch 5 rows\nas_polars_df(lf, 5)\n</code></pre> <pre><code>#&gt; shape: (5, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/as_polars_lf/","title":"To polars LazyFrame","text":"<p>Source code</p>"},{"location":"man/as_polars_lf/#description","title":"Description","text":"<p><code>as_polars_lf()</code> is a generic function that converts an R object to a polars LazyFrame. It is basically a shortcut for as_polars_df(x, \u2026) with the $lazy() method.</p>"},{"location":"man/as_polars_lf/#usage","title":"Usage","text":"<pre><code>as_polars_lf(x, ...)\n\n# Default S3 method:\nas_polars_lf(x, ...)\n\n# S3 method for class 'RPolarsLazyFrame'\nas_polars_lf(x, ...)\n\n# S3 method for class 'RPolarsLazyGroupBy'\nas_polars_lf(x, ...)\n</code></pre>"},{"location":"man/as_polars_lf/#arguments","title":"Arguments","text":"<code>x</code>  Object to convert to a polars DataFrame.  <code>\u2026</code>  Additional arguments passed to methods."},{"location":"man/as_polars_lf/#value","title":"Value","text":"<p>a LazyFrame</p>"},{"location":"man/as_polars_lf/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_lf(mtcars)\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"man/as_polars_series/","title":"To polars Series","text":"<p>Source code</p>"},{"location":"man/as_polars_series/#description","title":"Description","text":"<p><code>as_polars_series()</code> is a generic function that converts an R object to a polars Series. It is basically a wrapper for pl$Series().</p>"},{"location":"man/as_polars_series/#usage","title":"Usage","text":"<pre><code>as_polars_series(x, name = NULL, ...)\n\n# Default S3 method:\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'RPolarsSeries'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'RPolarsExpr'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'POSIXlt'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'data.frame'\nas_polars_series(x, name = NULL, ...)\n\n# S3 method for class 'vctrs_rcrd'\nas_polars_series(x, name = NULL, ...)\n</code></pre>"},{"location":"man/as_polars_series/#arguments","title":"Arguments","text":"<code>x</code>  Object to convert into a polars Series  <code>name</code>  A string to use as the name of the Series. If <code>NULL</code> (default), the name of <code>x</code> is used or an unnamed Series is created.  <code>\u2026</code>  Additional arguments passed to methods."},{"location":"man/as_polars_series/#value","title":"Value","text":"<p>a Series</p>"},{"location":"man/as_polars_series/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nas_polars_series(1:4)\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(list(1:4))\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [list[i32]]\n#&gt; [\n#&gt;  [1, 2, \u2026 4]\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(data.frame(a = 1:4))\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [struct[1]]\n#&gt; [\n#&gt;  {1}\n#&gt;  {2}\n#&gt;  {3}\n#&gt;  {4}\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(pl$Series(1:4, name = \"foo\"))\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: 'foo' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre> <pre><code>as_polars_series(pl$lit(1:4))\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre>"},{"location":"man/docs_translations/","title":"Translation definitions across python, R and polars.","text":""},{"location":"man/docs_translations/#description","title":"Description","text":""},{"location":"man/docs_translations/#comments-for-how-the-r-and-python-world-translates-into-polars","title":"Comments for how the R and python world translates into polars:","text":"<p>R and python are both high-level glue languages great for Data Science. Rust is a pedantic low-level language with similar use cases as C and C++. Polars is written in ~100k lines of rust and has a rust API. Py-polars the python API for polars, is implemented as an interface with the rust API. r-polars is very parallel to py-polars except it interfaces with R. The performance and behavior are unexpectedly quite similar as the \u2018engine\u2019 is the exact same rust code and data structures.</p>"},{"location":"man/docs_translations/#format","title":"Format","text":"<p>info</p>"},{"location":"man/docs_translations/#value","title":"Value","text":"<p>Not applicable</p>"},{"location":"man/docs_translations/#translation-details","title":"Translation details","text":"R and the integerish  <p>R only has a native Int32 type, no Uint32, Int64, UInt64 , \u2026 types. These days Int32 is getting a bit small, to refer to more rows than ~ 2^31-1. There are packages which provide int64, but the most normal hack\u2019 is to just use floats as \u2018integerish\u2019. There is an unique float64 value for every integer up to about 2^52 which is plenty for all practical concerns. Some polars methods may accept or return a floats even though an integer ideally would be more accurate. Most R functions intermix Int32 (integer) and Float64 (double) seamlessly.</p>  Missingness  <p>R has allocated a value in every vector type to signal missingness, these are collectively called <code>NAs</code>. Polars uses a bool bitmask to signal <code>NA</code>-like missing value and it is called <code>Null</code> and <code>Nulls</code> in plural. Not to confuse with R <code>NULL</code> (see paragraph below). Polars supports missingness for any possible type as it kept separately in the bitmask. In python lists the symbol <code>None</code> can carry a similar meaning. R <code>NA</code> ~ polars <code>Null</code> ~ py-polars <code>[None]</code> (in a py list)</p>  Sorting and comparisons  <p>From writing a lot of tests for all implementations, it appears polars does not have a fully consistent nor well documented behavior, when it comes to comparisons and sorting of floats. Though some general thumb rules do apply: Polars have chosen to define in sorting that <code>Null</code> is a value lower than <code>-Inf</code> as in <code>Expr.arg_min()</code> However except when <code>Null</code> is ignored <code>Expr.min()</code>, there is a <code>Expr.nan_min()</code> but no <code>Expr.nan_min()</code>. <code>NaN</code> is sometimes a value higher than Inf and sometimes regarded as a <code>Null</code>. Polars conventions <code>NaN</code> &gt; <code>Inf</code> &gt; <code>99</code> &gt; <code>-99</code> &gt; <code>-Inf</code> &gt; <code>Null</code> <code>Null == Null</code> yields often times false, sometimes true, sometimes <code>Null</code>. The documentation or examples do not reveal this variations. The best to do, when in doubt, is to do test sort on a small Series/Column of all values.</p>"},{"location":"man/docs_translations/#r-nan-polars-nan-python","title":"\u2019 R <code>NaN</code> ~ polars <code>NaN</code> ~ python","text":"<p><code>[float(\u201cNaN\u201d)]</code> #only floats have <code>NaN</code>s</p> <p>R <code>Inf</code> ~ polars <code>inf</code> ~ python <code>[float(\u201cinf\u201d)]</code> #only floats have <code>Inf</code></p>  NULL IS NOT Null is not NULL  <p>The R NULL does not exist inside polars frames and series and so on. It resembles the Option::None in the hidden rust code. It resembles the python <code>None</code>. In all three languages the <code>NULL</code>/<code>None</code>/<code>None</code> are used in this context as function argument to signal default behavior or perhaps a deactivated feature. R <code>NULL</code> does NOT translate into the polars bitmask <code>Null</code>, that is <code>NA</code>. R <code>NULL</code> ~ rust-polars <code>Option::None</code> ~ pypolars <code>None</code> #typically used for function arguments</p>  LISTS, FRAMES AND DICTS  <p>The following translations are relevant when loading data into polars. The R list appears similar to python dictionary (hashmap), but is implemented more similar to the python list (array of pointers). R list do support string naming elements via a string vector. In polars both lists (of vectors or series) and data.frames can be used to construct a polars DataFrame, just a as dictionaries would be used in python. In terms of loading in/out data the follow translation holds: R <code>data.frame</code>/<code>list</code> ~ polars <code>DataFrame</code> ~ python <code>dictonary</code></p>  Series and Vectors  <p>The R vector (Integer, Double, Character, \u2026) resembles the Series as both are external from any frame and can be of any length. The implementation is quite different. E.g. <code>for</code>-loop appending to an R vector is considered quite bad for performance. The vector will be fully rewritten in memory for every append. The polars Series has chunked memory allocation, which allows any append data to be written only. However fragmented memory is not great for fast computations and polars objects have a <code>rechunk</code>()-method, to reallocate chunks into one. Rechunk might be called implicitly by polars. In the context of constructing. Series and extracting data , the following translation holds: R <code>vector</code> ~ polars <code>Series</code>/<code>column</code> ~ python <code>list</code></p>  Expressions  <p>The polars Expr do not have any base R counterpart. Expr are analogous to how ggplot split plotting instructions from the rendering. Base R plot immediately pushes any instruction by adding e.g.\u00a0pixels to a .png canvas. <code>ggplot</code> collects instructions and in the end when executed the rendering can be performed with optimization across all instructions. Btw <code>ggplot</code> command-syntax is a monoid meaning the order does not matter, that is not the case for polars Expr. Polars Expr\u2019s can be understood as a DSL (domain specific language) that expresses syntax trees of instructions. R expressions evaluate to syntax trees also, but it difficult to optimize the execution order automatically, without rewriting the code. A great selling point of Polars is that any query will be optimized. Expr are very light-weight symbols chained together.</p>"},{"location":"man/global_rpool_cap/","title":"Get/set global R session pool capacity (DEPRECATED)","text":""},{"location":"man/global_rpool_cap/#description","title":"Description","text":"<p>Deprecated. Use pl$options to get, and pl$set_options() to set.</p>"},{"location":"man/global_rpool_cap/#usage","title":"Usage","text":"<pre><code>pl_get_global_rpool_cap()\n\npl_set_global_rpool_cap(n)\n</code></pre>"},{"location":"man/global_rpool_cap/#arguments","title":"Arguments","text":"<code>n</code>  Integer, the capacity limit R sessions to process R code."},{"location":"man/global_rpool_cap/#details","title":"Details","text":"<p>Background R sessions communicate via polars arrow IPC (series/vectors) or R serialize + shared memory buffers via the rust crate <code>ipc-channel</code>. Multi-process communication has overhead because all data must be serialized/de-serialized and sent via buffers. Using multiple R sessions will likely only give a speed-up in a <code>low io - high cpu</code> scenario. Native polars query syntax runs in threads and have no overhead. Polars has as default double as many thread workers as cores. If any worker are queuing for or using R sessions, other workers can still continue any native polars parts as much as possible.</p>"},{"location":"man/global_rpool_cap/#value","title":"Value","text":"<p><code>pl$options$rpool_cap</code> returns the capacity (\"limit\") of co-running external R sessions / processes. <code>pl$options$rpool_active</code> is the number of R sessions are already spawned in the pool. <code>rpool_cap</code> is the limit of new R sessions to spawn. Anytime a polars thread worker needs a background R session specifically to run R code embedded in a query via <code>$map(\u2026, in_background = TRUE)</code> or <code>$map_elements(\u2026, in_background = TRUE)</code>, it will obtain any R session idling in rpool, or spawn a new R session (process) if <code>capacity</code> is not already reached. If <code>capacity</code> is already reached, the thread worker will sleep and in a R job queue until an R session is idle.</p>"},{"location":"man/global_rpool_cap/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndefault = pl$options$rpool_cap |&gt; print()\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre> <pre><code>pl$set_options(rpool_cap = 8)\npl$options$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 8\n</code></pre> <pre><code>pl$set_options(rpool_cap = default)\npl$options$rpool_cap\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre>"},{"location":"man/is_polars_df/","title":"Test if the object is a polars DataFrame","text":"<p>Source code</p>"},{"location":"man/is_polars_df/#description","title":"Description","text":"<p>These functions test if the object is a polars DataFrame.</p>"},{"location":"man/is_polars_df/#usage","title":"Usage","text":"<pre><code>is_polars_df(x)\n</code></pre>"},{"location":"man/is_polars_df/#arguments","title":"Arguments","text":"<code>x</code>  An object"},{"location":"man/is_polars_df/#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/is_polars_df/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nis_polars_df(mtcars)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>is_polars_df(as_polars_df(mtcars))\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/is_polars_lf/","title":"Test if the object is a polars LazyFrame","text":"<p>Source code</p>"},{"location":"man/is_polars_lf/#description","title":"Description","text":"<p>These functions test if the object is a polars LazyFrame.</p>"},{"location":"man/is_polars_lf/#usage","title":"Usage","text":"<pre><code>is_polars_lf(x)\n</code></pre>"},{"location":"man/is_polars_lf/#arguments","title":"Arguments","text":"<code>x</code>  An object"},{"location":"man/is_polars_lf/#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/is_polars_lf/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nis_polars_lf(mtcars)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>is_polars_lf(as_polars_lf(mtcars))\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/is_polars_series/","title":"Test if the object is a polars Series","text":"<p>Source code</p>"},{"location":"man/is_polars_series/#description","title":"Description","text":"<p>These functions test if the object is a polars Series.</p>"},{"location":"man/is_polars_series/#usage","title":"Usage","text":"<pre><code>is_polars_series(x)\n</code></pre>"},{"location":"man/is_polars_series/#arguments","title":"Arguments","text":"<code>x</code>  An object"},{"location":"man/is_polars_series/#value","title":"Value","text":"<p>A logical value</p>"},{"location":"man/is_polars_series/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nis_polars_series(1:3)\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre> <pre><code>is_polars_series(as_polars_series(1:3))\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/nanoarrow/","title":"polars to nanoarrow and arrow","text":""},{"location":"man/nanoarrow/#description","title":"Description","text":"<p>Conversion via native apache arrow array stream (fast), THIS REQUIRES \u00b4nanoarrow\u00b4</p>"},{"location":"man/nanoarrow/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'RPolarsDataFrame'\nas_nanoarrow_array_stream(x, ..., schema = NULL)\n\n# S3 method for class 'RPolarsDataFrame'\ninfer_nanoarrow_schema(x, ...)\n\n# S3 method for class 'RPolarsDataFrame'\nas_arrow_table(x, ...)\n\n# S3 method for class 'RPolarsDataFrame'\nas_record_batch_reader(x, ..., schema = NULL)\n</code></pre>"},{"location":"man/nanoarrow/#arguments","title":"Arguments","text":"<code>x</code>  a polars DataFrame  <code>\u2026</code>  not used right now  <code>schema</code>  must stay at default value NULL"},{"location":"man/nanoarrow/#details","title":"Details","text":"<p>The following functions enable conversion to <code>nanoarrow</code> and <code>arrow</code>. Conversion kindly provided by \"paleolimbot / Dewey Dunnington\" Author of <code>nanoarrow</code>. Currently these conversions are the fastest way to convert from polars to R.</p>"},{"location":"man/nanoarrow/#value","title":"Value","text":"<ul> <li>  a nanoarrow array stream  </li> </ul> <ul> <li>  a nanoarrow array schema  </li> </ul> <ul> <li>  an arrow table  </li> </ul> <ul> <li>  an arrow record batch reader  </li> </ul>"},{"location":"man/nanoarrow/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlibrary(nanoarrow)\ndf = pl$DataFrame(mtcars)\nnanoarrow_array_stream = as_nanoarrow_array_stream(df)\nrdf = as.data.frame(nanoarrow_array_stream)\nprint(head(rdf))\n</code></pre> <pre><code>#&gt;    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#&gt; 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#&gt; 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#&gt; 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#&gt; 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#&gt; 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#&gt; 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n</code></pre> <pre><code>nanoarrow_array_schema = infer_nanoarrow_schema(df)\nprint(nanoarrow_array_schema)\n</code></pre> <pre><code>#&gt; &lt;nanoarrow_schema struct&gt;\n#&gt;  $ format    : chr \"+s\"\n#&gt;  $ name      : chr \"\"\n#&gt;  $ metadata  : list()\n#&gt;  $ flags     : int 0\n#&gt;  $ children  :List of 11\n#&gt;   ..$ mpg :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"mpg\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ cyl :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"cyl\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ disp:&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"disp\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ hp  :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"hp\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ drat:&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"drat\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ wt  :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"wt\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ qsec:&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"qsec\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ vs  :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"vs\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ am  :&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"am\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ gear:&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"gear\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;   ..$ carb:&lt;nanoarrow_schema double&gt;\n#&gt;   .. ..$ format    : chr \"g\"\n#&gt;   .. ..$ name      : chr \"carb\"\n#&gt;   .. ..$ metadata  : list()\n#&gt;   .. ..$ flags     : int 2\n#&gt;   .. ..$ children  : list()\n#&gt;   .. ..$ dictionary: NULL\n#&gt;  $ dictionary: NULL\n</code></pre> <pre><code>library(arrow)\narrow_table = as_arrow_table(df)\nprint(arrow_table)\n</code></pre> <pre><code>#&gt; Table\n#&gt; 32 rows x 11 columns\n#&gt; $mpg &lt;double&gt;\n#&gt; $cyl &lt;double&gt;\n#&gt; $disp &lt;double&gt;\n#&gt; $hp &lt;double&gt;\n#&gt; $drat &lt;double&gt;\n#&gt; $wt &lt;double&gt;\n#&gt; $qsec &lt;double&gt;\n#&gt; $vs &lt;double&gt;\n#&gt; $am &lt;double&gt;\n#&gt; $gear &lt;double&gt;\n#&gt; $carb &lt;double&gt;\n</code></pre> <pre><code>arrow_record_batch_reader = as_record_batch_reader(df) # requires arrow\nprint(arrow_record_batch_reader)\n</code></pre> <pre><code>#&gt; RecordBatchReader\n#&gt; mpg: double\n#&gt; cyl: double\n#&gt; disp: double\n#&gt; hp: double\n#&gt; drat: double\n#&gt; wt: double\n#&gt; qsec: double\n#&gt; vs: double\n#&gt; am: double\n#&gt; gear: double\n#&gt; carb: double\n</code></pre>"},{"location":"man/pl_DataFrame/","title":"Create new DataFrame","text":"<p>Source code</p>"},{"location":"man/pl_DataFrame/#description","title":"Description","text":"<p>Create new DataFrame</p>"},{"location":"man/pl_DataFrame/#usage","title":"Usage","text":"<pre><code>pl_DataFrame(..., make_names_unique = TRUE, schema = NULL)\n</code></pre>"},{"location":"man/pl_DataFrame/#arguments","title":"Arguments","text":"<code>\u2026</code>   One of the following:  <ul> <li>  a data.frame or something that inherits data.frame or DataFrame  </li> <li>  a list of mixed vectors and Series of equal length  </li> <li>  mixed vectors and/or Series of equal length  </li> </ul> Columns will be named as of named arguments or alternatively by names of Series or given a placeholder name.  <code>make_names_unique</code>  If <code>TRUE</code> (default), any duplicated names will be prefixed a running number.  <code>schema</code>  A named list that will be used to convert a variable to a specific DataType. See Examples."},{"location":"man/pl_DataFrame/#value","title":"Value","text":"<p>DataFrame</p>"},{"location":"man/pl_DataFrame/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(\n  a = list(c(1, 2, 3, 4, 5)), # NB if first column should be a list, wrap it in a Series\n  b = 1:5,\n  c = letters[1:5],\n  d = list(1:1, 1:2, 1:3, 1:4, 1:5)\n) # directly from vectors\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a                 \u2506 b   \u2506 c   \u2506 d           \u2502\n#&gt; \u2502 ---               \u2506 --- \u2506 --- \u2506 ---         \u2502\n#&gt; \u2502 list[f64]         \u2506 i32 \u2506 str \u2506 list[i32]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0, \u2026 5.0] \u2506 1   \u2506 a   \u2506 [1]         \u2502\n#&gt; \u2502 [1.0, 2.0, \u2026 5.0] \u2506 2   \u2506 b   \u2506 [1, 2]      \u2502\n#&gt; \u2502 [1.0, 2.0, \u2026 5.0] \u2506 3   \u2506 c   \u2506 [1, 2, 3]   \u2502\n#&gt; \u2502 [1.0, 2.0, \u2026 5.0] \u2506 4   \u2506 d   \u2506 [1, 2, \u2026 4] \u2502\n#&gt; \u2502 [1.0, 2.0, \u2026 5.0] \u2506 5   \u2506 e   \u2506 [1, 2, \u2026 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># from a list of vectors\npl$DataFrame(list(\n  a = c(1, 2, 3, 4, 5),\n  b = 1:5,\n  c = letters[1:5],\n  d = list(1L, 1:2, 1:3, 1:4, 1:5)\n))\n</code></pre> <pre><code>#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 d           \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---         \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2506 str \u2506 list[i32]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1   \u2506 a   \u2506 [1]         \u2502\n#&gt; \u2502 2.0 \u2506 2   \u2506 b   \u2506 [1, 2]      \u2502\n#&gt; \u2502 3.0 \u2506 3   \u2506 c   \u2506 [1, 2, 3]   \u2502\n#&gt; \u2502 4.0 \u2506 4   \u2506 d   \u2506 [1, 2, \u2026 4] \u2502\n#&gt; \u2502 5.0 \u2506 5   \u2506 e   \u2506 [1, 2, \u2026 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># from a data.frame\npl$DataFrame(mtcars)\n</code></pre> <pre><code>#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># custom schema\npl$DataFrame(iris, schema = list(Sepal.Length = pl$Float32, Species = pl$String))\n</code></pre> <pre><code>#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f32          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_Datetime/","title":"Create Datetime DataType","text":""},{"location":"man/pl_Datetime/#description","title":"Description","text":"<p>Datetime DataType constructor</p>"},{"location":"man/pl_Datetime/#arguments","title":"Arguments","text":"<code>tu</code>  string option either \"ms\", \"us\" or \"ns\"  <code>tz</code>  string the Time Zone, see details"},{"location":"man/pl_Datetime/#format","title":"Format","text":"<p>function</p>"},{"location":"man/pl_Datetime/#details","title":"Details","text":"<p>all allowed TimeZone designations can be found in <code>base::OlsonNames()</code></p>"},{"location":"man/pl_Datetime/#value","title":"Value","text":"<p>Datetime DataType</p>"},{"location":"man/pl_Datetime/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$Datetime(\"ns\", \"Pacific/Samoa\")\n</code></pre> <pre><code>#&gt; DataType: Datetime(\n#&gt;     Nanoseconds,\n#&gt;     Some(\n#&gt;         \"Pacific/Samoa\",\n#&gt;     ),\n#&gt; )\n</code></pre>"},{"location":"man/pl_LazyFrame/","title":"Create new LazyFrame","text":"<p>Source code</p>"},{"location":"man/pl_LazyFrame/#description","title":"Description","text":"<p>This is simply a convenience function to create <code>LazyFrame</code>s in a quick way. It is a wrapper around <code>pl$DataFrame()$lazy()</code>. Note that this should only be used for making examples and quick demonstrations.</p>"},{"location":"man/pl_LazyFrame/#usage","title":"Usage","text":"<pre><code>pl_LazyFrame(...)\n</code></pre>"},{"location":"man/pl_LazyFrame/#arguments","title":"Arguments","text":"<code>\u2026</code>  Anything that is accepted by <code>pl$DataFrame()</code>"},{"location":"man/pl_LazyFrame/#value","title":"Value","text":"<p>LazyFrame</p>"},{"location":"man/pl_LazyFrame/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$LazyFrame(\n  a = list(c(1, 2, 3, 4, 5)),\n  b = 1:5,\n  c = letters[1:5],\n  d = list(1:1, 1:2, 1:3, 1:4, 1:5)\n) # directly from vectors\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; DF [\"a\", \"b\", \"c\", \"d\"]; PROJECT */4 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># from a list of vectors or data.frame\npl$LazyFrame(list(\n  a = c(1, 2, 3, 4, 5),\n  b = 1:5,\n  c = letters[1:5],\n  d = list(1L, 1:2, 1:3, 1:4, 1:5)\n))\n</code></pre> <pre><code>#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; DF [\"a\", \"b\", \"c\", \"d\"]; PROJECT */4 COLUMNS; SELECTION: \"None\"\n</code></pre> <pre><code># custom schema\npl$LazyFrame(\n  iris,\n  schema = list(Sepal.Length = pl$Float32, Species = pl$String)\n)$collect()\n</code></pre> <pre><code>#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f32          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_List/","title":"Create List DataType","text":""},{"location":"man/pl_List/#description","title":"Description","text":"<p>Create List DataType</p>"},{"location":"man/pl_List/#arguments","title":"Arguments","text":"<code>datatype</code>  an inner DataType, default is \"Unknown\" (placeholder for when inner DataType does not matter, e.g.\u00a0as used in example)"},{"location":"man/pl_List/#format","title":"Format","text":"<p>function</p>"},{"location":"man/pl_List/#value","title":"Value","text":"<p>a list DataType with an inner DataType</p>"},{"location":"man/pl_List/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# some nested List\npl$List(pl$List(pl$Boolean))\n</code></pre> <pre><code>#&gt; DataType: List(\n#&gt;     List(\n#&gt;         Boolean,\n#&gt;     ),\n#&gt; )\n</code></pre> <pre><code># check if some maybe_list is a List DataType\nmaybe_List = pl$List(pl$UInt64)\npl$same_outer_dt(maybe_List, pl$List())\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre>"},{"location":"man/pl_PTime/","title":"Store Time in R","text":"<p>Source code</p>"},{"location":"man/pl_PTime/#description","title":"Description","text":"<p>Store Time in R</p>"},{"location":"man/pl_PTime/#usage","title":"Usage","text":"<pre><code>pl_PTime(x, tu = c(\"s\", \"ms\", \"us\", \"ns\"), format = \"%H:%M:%S\")\n</code></pre>"},{"location":"man/pl_PTime/#arguments","title":"Arguments","text":"<code>x</code>  an integer or double vector of n epochs since midnight OR a char vector of char times passed to as.POSIXct converted to seconds.  <code>tu</code>  timeunit either \"s\",\"ms\",\"us\",\"ns\"  <code>format</code>  a format string passed to as.POSIXct format via \u2026"},{"location":"man/pl_PTime/#details","title":"Details","text":"<p>PTime should probably be replaced with package nanotime or similar.</p> <p>base R is missing encoding of Time since midnight \"s\" \"ms\", \"us\" and \"ns\". The latter \"ns\" is the standard for the polars Time type.</p> <p>Use PTime to convert R doubles and integers and use as input to polars functions which needs a time.</p> <p>Loosely inspired by data.table::ITime which is i32 only. PTime must support polars native timeunit is nanoseconds. The R double(float64) can imitate a i64 ns with full precision within the full range of 24 hours.</p> <p>PTime does not have a time zone and always prints the time as is no matter local machine time zone.</p> <p>An essential difference between R and polars is R prints POSIXct/lt without a timezone in local time. Polars prints Datetime without a timezone label as is (GMT). For POSIXct/lt taged with a timexone(tzone) and Datetime with a timezone(tz) the behavior is the same conversion is intuitive.</p> <p>It appears behavior of R timezones is subject to change a bit in R 4.3.0, see polars unit test test-expr_datetime.R/\"pl$date_range Date lazy/eager\".</p>"},{"location":"man/pl_PTime/#value","title":"Value","text":"<p>a PTime vector either double or integer, with class \"PTime\" and attribute \"tu\" being either \"s\",\"ms\",\"us\" or \"ns\"</p>"},{"location":"man/pl_PTime/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\n# make PTime in all time units\npl$PTime(runif(5) * 3600 * 24 * 1E0, tu = \"s\")\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ s ] since midnight\n#&gt; [1] \"02:12:50 val: 7970\"  \"21:37:07 val: 77827\" \"20:37:13 val: 74233\"\n#&gt; [4] \"09:15:31 val: 33331\" \"14:23:46 val: 51826\"\n</code></pre> <pre><code>pl$PTime(runif(5) * 3600 * 24 * 1E3, tu = \"ms\")\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ ms ] since midnight\n#&gt; [1] \"20:37:07:680ms val: 74227680\" \"03:37:24:115ms val: 13044115\"\n#&gt; [3] \"18:14:08:854ms val: 65648854\" \"10:34:57:166ms val: 38097166\"\n#&gt; [5] \"21:16:26:337ms val: 76586337\"\n</code></pre> <pre><code>pl$PTime(runif(5) * 3600 * 24 * 1E6, tu = \"us\")\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ us ] since midnight\n#&gt; [1] \"03:45:54:291_357us val: 13554291357\" \"15:06:17:459_449us val: 54377459449\"\n#&gt; [3] \"18:41:08:795_862us val: 67268795862\" \"14:05:23:407_995us val: 50723407995\"\n#&gt; [5] \"03:04:46:898_725us val: 11086898725\"\n</code></pre> <pre><code>pl$PTime(runif(5) * 3600 * 24 * 1E9, tu = \"ns\")\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ ns ] since midnight\n#&gt; [1] \"13:14:34:377_380_311ns val: 47674377380311\"\n#&gt; [2] \"04:48:22:357_750_386ns val: 17302357750386\"\n#&gt; [3] \"15:56:13:374_661_803ns val: 57373374661803\"\n#&gt; [4] \"05:29:07:049_660_235ns val: 19747049660235\"\n#&gt; [5] \"04:21:12:719_496_488ns val: 15672719496488\"\n</code></pre> <pre><code>pl$PTime(\"23:59:59\")\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ s ] since midnight\n#&gt; [1] \"23:59:59 val: 86399\"\n</code></pre> <pre><code>pl$Series(pl$PTime(runif(5) * 3600 * 24 * 1E0, tu = \"s\"))\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [time]\n#&gt; [\n#&gt;  16:32:44\n#&gt;  21:14:59\n#&gt;  02:22:17\n#&gt;  10:54:27\n#&gt;  19:30:46\n#&gt; ]\n</code></pre> <pre><code>pl$lit(pl$PTime(\"23:59:59\"))$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [time]\n#&gt; [\n#&gt;  23:59:59\n#&gt; ]\n</code></pre> <pre><code>pl$lit(pl$PTime(\"23:59:59\"))$to_r()\n</code></pre> <pre><code>#&gt; PTime [ double ]: number of epochs [ ns ] since midnight\n#&gt; [1] \"23:59:59:000_000_000ns val: 8.6399e+13\"\n</code></pre>"},{"location":"man/pl_SQLContext/","title":"Initialise a new SQLContext","text":"<p>Source code</p>"},{"location":"man/pl_SQLContext/#description","title":"Description","text":"<p>Create a new SQLContext and register the given LazyFrames.</p>"},{"location":"man/pl_SQLContext/#usage","title":"Usage","text":"<pre><code>pl_SQLContext(...)\n</code></pre>"},{"location":"man/pl_SQLContext/#arguments","title":"Arguments","text":"<code>\u2026</code>  Name-value pairs of LazyFrame like objects to register."},{"location":"man/pl_SQLContext/#value","title":"Value","text":"<p>RPolarsSQLContext</p>"},{"location":"man/pl_SQLContext/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\nctx = pl$SQLContext(mtcars = mtcars)\nctx\n</code></pre> <pre><code>#&gt; RPolarsSQLContext\n#&gt;   tables: mtcars\n</code></pre>"},{"location":"man/pl_Series/","title":"Create new Series","text":"<p>Source code</p>"},{"location":"man/pl_Series/#description","title":"Description","text":"<p>found in api as pl$Series named Series_constructor internally</p>"},{"location":"man/pl_Series/#usage","title":"Usage","text":"<pre><code>pl_Series(x, name = NULL)\n</code></pre>"},{"location":"man/pl_Series/#arguments","title":"Arguments","text":"<code>x</code>  any vector  <code>name</code>  string"},{"location":"man/pl_Series/#value","title":"Value","text":"<p>Series</p>"},{"location":"man/pl_Series/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n{\n  pl$Series(1:4)\n}\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n</code></pre>"},{"location":"man/pl_Struct_datatype/","title":"Create Struct DataType","text":""},{"location":"man/pl_Struct_datatype/#description","title":"Description","text":"<p>Struct DataType Constructor</p>"},{"location":"man/pl_Struct_datatype/#arguments","title":"Arguments","text":"<code>datatype</code>  an inner DataType"},{"location":"man/pl_Struct_datatype/#format","title":"Format","text":"<p>function</p>"},{"location":"man/pl_Struct_datatype/#value","title":"Value","text":"<p>a list DataType with an inner DataType</p>"},{"location":"man/pl_Struct_datatype/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create a Struct-DataType\npl$List(pl$List(pl$Boolean))\n</code></pre> <pre><code>#&gt; DataType: List(\n#&gt;     List(\n#&gt;         Boolean,\n#&gt;     ),\n#&gt; )\n</code></pre> <pre><code># Find any DataType via pl$dtypes\nprint(pl$dtypes)\n</code></pre> <pre><code>#&gt; $Boolean\n#&gt; DataType: Boolean\n#&gt; \n#&gt; $UInt8\n#&gt; DataType: UInt8\n#&gt; \n#&gt; $UInt16\n#&gt; DataType: UInt16\n#&gt; \n#&gt; $UInt32\n#&gt; DataType: UInt32\n#&gt; \n#&gt; $UInt64\n#&gt; DataType: UInt64\n#&gt; \n#&gt; $Int8\n#&gt; DataType: Int8\n#&gt; \n#&gt; $Int16\n#&gt; DataType: Int16\n#&gt; \n#&gt; $Int32\n#&gt; DataType: Int32\n#&gt; \n#&gt; $Int64\n#&gt; DataType: Int64\n#&gt; \n#&gt; $Float32\n#&gt; DataType: Float32\n#&gt; \n#&gt; $Float64\n#&gt; DataType: Float64\n#&gt; \n#&gt; $String\n#&gt; DataType: String\n#&gt; \n#&gt; $Binary\n#&gt; DataType: Binary\n#&gt; \n#&gt; $Date\n#&gt; DataType: Date\n#&gt; \n#&gt; $Time\n#&gt; DataType: Time\n#&gt; \n#&gt; $Null\n#&gt; DataType: Null\n#&gt; \n#&gt; $Categorical\n#&gt; DataType: Categorical(\n#&gt;     None,\n#&gt;     Physical,\n#&gt; )\n#&gt; \n#&gt; $Unknown\n#&gt; DataType: Unknown\n#&gt; \n#&gt; $Utf8\n#&gt; DataType: String\n#&gt; \n#&gt; $Datetime\n#&gt; function(tu = \"us\", tz = NULL) {\n#&gt;     if (!is.null(tz) &amp;&amp; (!is_string(tz) || !tz %in% base::OlsonNames())) {\n#&gt;       stop(\"Datetime: the tz '%s' is not a valid timezone string, see base::OlsonNames()\", tz)\n#&gt;     }\n#&gt;     unwrap(.pr$DataType$new_datetime(tu, tz))\n#&gt;   }\n#&gt; &lt;bytecode: 0x5560f7e6a060&gt;\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; \n#&gt; $List\n#&gt; function(datatype = \"unknown\") {\n#&gt;     if (is.character(datatype) &amp;&amp; length(datatype) == 1) {\n#&gt;       datatype = .pr$DataType$new(datatype)\n#&gt;     }\n#&gt;     if (!inherits(datatype, \"RPolarsDataType\")) {\n#&gt;       stop(paste(\n#&gt;         \"input for generating a list DataType must be another DataType\",\n#&gt;         \"or an interpretable name thereof.\"\n#&gt;       ))\n#&gt;     }\n#&gt;     .pr$DataType$new_list(datatype)\n#&gt;   }\n#&gt; &lt;bytecode: 0x5560f7e503c8&gt;\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; \n#&gt; $Struct\n#&gt; function(...) {\n#&gt;     result({\n#&gt;       largs = list2(...)\n#&gt;       if (length(largs) &gt;= 1 &amp;&amp; is.list(largs[[1]])) {\n#&gt;         largs = largs[[1]]\n#&gt;         element_name = \"list element\"\n#&gt;       } else {\n#&gt;         element_name = \"positional argument\"\n#&gt;       }\n#&gt;       mapply(\n#&gt;         names(largs) %||% character(length(largs)),\n#&gt;         largs,\n#&gt;         seq_along(largs),\n#&gt;         FUN = \\(name, arg, i) {\n#&gt;           if (inherits(arg, \"RPolarsDataType\")) {\n#&gt;             return(pl$Field(name, arg))\n#&gt;           }\n#&gt;           if (inherits(arg, \"RPolarsRField\")) {\n#&gt;             return(arg)\n#&gt;           }\n#&gt;           stop(\n#&gt;             \"%s [%s] {name:'%s', value:%s} must either be a Field (pl$Field) or a named %s\",\n#&gt;             element_name, i, name, arg, \"DataType see (pl$dtypes), see examples for pl$Struct()\"\n#&gt;           )\n#&gt;         }, SIMPLIFY = FALSE\n#&gt;       )\n#&gt;     }) |&gt;\n#&gt;       and_then(DataType$new_struct) |&gt;\n#&gt;       unwrap(\"in pl$Struct:\")\n#&gt;   }\n#&gt; &lt;bytecode: 0x5560f7d38640&gt;\n#&gt; &lt;environment: namespace:polars&gt;\n</code></pre> <pre><code># check if an element is any kind of Struct()\ntest = pl$Struct(pl$UInt64)\npl$same_outer_dt(test, pl$Struct())\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># `test` is a type of Struct, but it doesn't mean it is equal to an empty Struct\ntest == pl$Struct()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/pl_all/","title":"New Expr referring to all columns","text":"<p>Source code</p>"},{"location":"man/pl_all/#description","title":"Description","text":"<p>Not to mix up with <code>Expr_object$all()</code> which is a \u2018reduce Boolean columns by AND\u2019 method.</p>"},{"location":"man/pl_all/#usage","title":"Usage","text":"<pre><code>pl_all(name = NULL)\n</code></pre>"},{"location":"man/pl_all/#arguments","title":"Arguments","text":"<code>name</code>  Character vector indicating on which columns the AND operation should be applied."},{"location":"man/pl_all/#details","title":"Details","text":"<p>last <code>all()</code> in example is this Expr method, the first <code>pl$all()</code> refers to \"all-columns\" and is an expression constructor</p>"},{"location":"man/pl_all/#value","title":"Value","text":"<p>Boolean literal</p>"},{"location":"man/pl_all/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(list(all = c(TRUE, TRUE), some = c(TRUE, FALSE)))$select(pl$all()$all())\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all  \u2506 some  \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 bool \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_all_horizontal/","title":"Apply the AND logical rowwise","text":"<p>Source code</p>"},{"location":"man/pl_all_horizontal/#description","title":"Description","text":"<p>Apply the AND logical rowwise</p>"},{"location":"man/pl_all_horizontal/#usage","title":"Usage","text":"<pre><code>pl_all_horizontal(...)\n</code></pre>"},{"location":"man/pl_all_horizontal/#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals."},{"location":"man/pl_all_horizontal/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_all_horizontal/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(TRUE, FALSE, NA, NA),\n  b = c(TRUE, FALSE, NA, NA),\n  c = c(TRUE, FALSE, NA, TRUE)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 null  \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(\n  pl$all_horizontal(\"a\", \"b\", \"c\")$alias(\"all\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2506 all   \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2506 true  \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2506 false \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 null  \u2506 null  \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 true  \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># drop rows that have at least one missing value\n# == keep rows that only have non-missing values\ndf$filter(\n  pl$all_horizontal(pl$all()$is_not_null())\n)\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_any_horizontal/","title":"Apply the OR logical rowwise","text":"<p>Source code</p>"},{"location":"man/pl_any_horizontal/#description","title":"Description","text":"<p>Apply the OR logical rowwise</p>"},{"location":"man/pl_any_horizontal/#usage","title":"Usage","text":"<pre><code>pl_any_horizontal(...)\n</code></pre>"},{"location":"man/pl_any_horizontal/#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals."},{"location":"man/pl_any_horizontal/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_any_horizontal/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(FALSE, FALSE, NA, NA),\n  b = c(TRUE, FALSE, NA, NA),\n  c = c(TRUE, FALSE, NA, TRUE)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 null  \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$with_columns(\n  pl$any_horizontal(\"a\", \"b\", \"c\")$alias(\"any\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2506 any   \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2506 true  \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2506 false \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 null  \u2506 null  \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 true  \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># drop rows that only have missing values == keep rows that have at least one\n# non-missing value\ndf$filter(\n  pl$any_horizontal(pl$all()$is_not_null())\n)\n</code></pre> <pre><code>#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2506 b     \u2506 c     \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool  \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2506 true  \u2506 true  \u2502\n#&gt; \u2502 false \u2506 false \u2506 false \u2502\n#&gt; \u2502 null  \u2506 null  \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_approx_n_unique/","title":"Approximate count of unique values.","text":"<p>Source code</p>"},{"location":"man/pl_approx_n_unique/#description","title":"Description","text":"<p>This is done using the HyperLogLog++ algorithm for cardinality estimation.</p>"},{"location":"man/pl_approx_n_unique/#usage","title":"Usage","text":"<pre><code>pl_approx_n_unique(column)\n</code></pre>"},{"location":"man/pl_approx_n_unique/#arguments","title":"Arguments","text":"<code>column</code>   if dtype is:  <ul> <li>  String: syntactic sugar for <code>pl$col(column)$approx_n_unique()</code>, returns Expr  </li> <li>  Expr: syntactic sugar for <code>column$approx_n_unique()</code>, returns Expr  </li> </ul>"},{"location":"man/pl_approx_n_unique/#details","title":"Details","text":"<p>The approx_n_unique is likely only warranted for large columns. See example. It appears approx_n_unique scales better than n_unique, such that the relative performance difference increases with column size.</p>"},{"location":"man/pl_approx_n_unique/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_approx_n_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# column as Series\npl$approx_n_unique(pl$lit(1:4)) == 4\n</code></pre> <pre><code>#&gt; polars Expr: [(Series.approx_n_unique()) == (4.0)]\n</code></pre> <pre><code># column as String\nexpr = pl$approx_n_unique(\"bob\")\nprint(expr)\n</code></pre> <pre><code>#&gt; polars Expr: col(\"bob\").approx_n_unique()\n</code></pre> <pre><code>pl$DataFrame(bob = 1:80)$select(expr)\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bob \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 79  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># colum as Expr\npl$DataFrame(bob = 1:4)$select(pl$approx_n_unique(pl$col(\"bob\")))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bob \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># comparison with n_unique for 2 million integers. (try change example to 20 million ints)\nlit_series = pl$lit(c(1:1E6, 1E6:1, 1:1E6))\nsystem.time(pl$approx_n_unique(lit_series)$to_series()$print())\n</code></pre> <pre><code>#&gt; shape: (1,)\n#&gt; Series: '' [u32]\n#&gt; [\n#&gt;  1014256\n#&gt; ]\n\n#&gt;    user  system elapsed \n#&gt;   0.029   0.001   0.029\n</code></pre> <pre><code>system.time(pl$n_unique(lit_series)$to_series()$print())\n</code></pre> <pre><code>#&gt; shape: (1,)\n#&gt; Series: '' [u32]\n#&gt; [\n#&gt;  1000000\n#&gt; ]\n\n#&gt;    user  system elapsed \n#&gt;   0.123   0.000   0.091\n</code></pre>"},{"location":"man/pl_coalesce/","title":"Coalesce","text":"<p>Source code</p>"},{"location":"man/pl_coalesce/#description","title":"Description","text":"<p>Folds the expressions from left to right, keeping the first non-null value.</p>"},{"location":"man/pl_coalesce/#usage","title":"Usage","text":"<pre><code>pl_coalesce(...)\n</code></pre>"},{"location":"man/pl_coalesce/#arguments","title":"Arguments","text":"<code>\u2026</code>   is a: If one arg:  <ul> <li>  Series or Expr, same as <code>column$sum()</code> </li> <li>  string, same as <code>pl$col(column)$sum()</code> </li> <li>  numeric, same as <code>pl$lit(column)$sum()</code> </li> <li>  list of strings(column names) or expressions to add up as expr1 + expr2 + expr3 + \u2026  </li> </ul> If several args, then wrapped in a list and handled as above."},{"location":"man/pl_coalesce/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_coalesce/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = NA_real_,\n  b = c(1:2, NA_real_, NA_real_),\n  c = c(1:3, NA_real_)\n)\n# use coalesce to get first non Null value for each row, otherwise insert 99.9\ndf$with_columns(\n  pl$coalesce(\"a\", \"b\", \"c\", 99.9)$alias(\"d\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c    \u2506 d    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 1.0  \u2506 1.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 2.0  \u2506 2.0  \u2506 2.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 99.9 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_col/","title":"Start Expression with a column","text":"<p>Source code</p>"},{"location":"man/pl_col/#description","title":"Description","text":"<p>Return an expression representing a column in a DataFrame.</p>"},{"location":"man/pl_col/#usage","title":"Usage","text":"<pre><code>pl_col(name = \"\", ...)\n</code></pre>"},{"location":"man/pl_col/#arguments","title":"Arguments","text":"<code>name</code> <ul> <li>  a single column by a string  </li> <li>  all columns by using a wildcard <code>\u201c\\*\u201c</code> </li> <li>  multiple columns as vector of strings  </li> <li>  column by regular expression if the regex starts with <code>^</code> and ends with <code>$</code> e.g.\u00a0pl$DataFrame(iris)$select(pl$col(c(\"^Sepal.\\*$\")))  </li> <li>  a single DataType or an R list of DataTypes, select any column of any such DataType  </li> <li>  Series of utf8 strings abiding to above options  </li> </ul> <code>\u2026</code>  Additional column names can be passed as strings, separated by commas."},{"location":"man/pl_col/#value","title":"Value","text":"<p>Column Expression</p>"},{"location":"man/pl_col/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\ndf = pl$DataFrame(list(foo = 1, bar = 2L, foobar = \"3\"))\n\n# a single column by a string\ndf$select(pl$col(\"foo\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># two columns as strings separated by commas\ndf$select(pl$col(\"foo\", \"bar\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># all columns by wildcard\ndf$select(pl$col(\"*\"))\n</code></pre> <pre><code>#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 foobar \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 2   \u2506 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$all())\n</code></pre> <pre><code>#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 foobar \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 2   \u2506 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># multiple columns as vector of strings\ndf$select(pl$col(c(\"foo\", \"bar\")))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># column by regular expression if the regex starts with `^` and ends with `$`\ndf$select(pl$col(\"^foo.*$\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 foobar \u2502\n#&gt; \u2502 --- \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># a single DataType\ndf$select(pl$col(pl$dtypes$Float64))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># ... or an R list of DataTypes, select any column of any such DataType\ndf$select(pl$col(list(pl$dtypes$Float64, pl$dtypes$String)))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 foobar \u2502\n#&gt; \u2502 --- \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># from Series of names\ndf$select(pl$col(pl$Series(c(\"bar\", \"foobar\"))))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bar \u2506 foobar \u2502\n#&gt; \u2502 --- \u2506 ---    \u2502\n#&gt; \u2502 i32 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2506 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_concat/","title":"Concat polars objects","text":"<p>Source code</p>"},{"location":"man/pl_concat/#description","title":"Description","text":"<p>Concat polars objects</p>"},{"location":"man/pl_concat/#usage","title":"Usage","text":"<pre><code>pl_concat(\n  ...,\n  how = c(\"vertical\", \"vertical_relaxed\", \"horizontal\", \"diagonal\", \"diagonal_relaxed\"),\n  rechunk = TRUE,\n  parallel = TRUE\n)\n</code></pre>"},{"location":"man/pl_concat/#arguments","title":"Arguments","text":"<code>\u2026</code>  Either individual unpacked args or args wrapped in list(). Args can be eager as DataFrame, Series and R vectors, or lazy as LazyFrame and Expr. The first element determines the output of <code>$concat()</code>: if the first element is lazy, a LazyFrame is returned; otherwise, a DataFrame is returned (note that if the first element is eager, all other elements have to be eager to avoid implicit collect).  <code>how</code>  Bind direction. Can be \"vertical\" (like <code>rbind()</code>), \"horizontal\" (like <code>cbind()</code>), or \"diagonal\". For <code>\u201cvertical\u201d</code> and <code>\u201cdiagonal\u201d</code>, adding the suffix <code>\u201c\\_relaxed\u201d</code> will cast columns to their shared supertypes. For example, if we try to vertically concatenate two columns of types <code>i32</code> and <code>f64</code>, using <code>how = \u201cvertical_relaxed\u201d</code> will cast the column of type <code>i32</code> to <code>f64</code> beforehand.  <code>rechunk</code>  Perform a rechunk at last.  <code>parallel</code>  Only used for LazyFrames. If <code>TRUE</code> (default), lazy computations may be executed in parallel."},{"location":"man/pl_concat/#details","title":"Details","text":"<p>Categorical columns/Series must have been constructed while global string cache enabled. See <code>pl$enable_string_cache()</code>.</p>"},{"location":"man/pl_concat/#value","title":"Value","text":"<p>DataFrame, Series, LazyFrame or Expr</p>"},{"location":"man/pl_concat/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# vertical\nl_ver = lapply(1:10, function(i) {\n  l_internal = list(\n    a = 1:5,\n    b = letters[1:5]\n  )\n  pl$DataFrame(l_internal)\n})\npl$concat(l_ver, how = \"vertical\")\n</code></pre> <pre><code>#&gt; shape: (50, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 d   \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026   \u2502\n#&gt; \u2502 2   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 e   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># horizontal\nl_hor = lapply(1:10, function(i) {\n  l_internal = list(\n    1:5,\n    letters[1:5]\n  )\n  names(l_internal) = paste0(c(\"a\", \"b\"), i)\n  pl$DataFrame(l_internal)\n})\npl$concat(l_hor, how = \"horizontal\")\n</code></pre> <pre><code>#&gt; shape: (5, 20)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a1  \u2506 b1  \u2506 a2  \u2506 b2  \u2506 \u2026 \u2506 a9  \u2506 b9  \u2506 a10 \u2506 b10 \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506   \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 str \u2506 i32 \u2506 str \u2506   \u2506 i32 \u2506 str \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 a   \u2506 1   \u2506 a   \u2506 \u2026 \u2506 1   \u2506 a   \u2506 1   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 b   \u2506 2   \u2506 b   \u2506 \u2026 \u2506 2   \u2506 b   \u2506 2   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 c   \u2506 3   \u2506 c   \u2506 \u2026 \u2506 3   \u2506 c   \u2506 3   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 d   \u2506 4   \u2506 d   \u2506 \u2026 \u2506 4   \u2506 d   \u2506 4   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 e   \u2506 5   \u2506 e   \u2506 \u2026 \u2506 5   \u2506 e   \u2506 5   \u2506 e   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># diagonal\npl$concat(l_hor, how = \"diagonal\")\n</code></pre> <pre><code>#&gt; shape: (50, 20)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a1   \u2506 b1   \u2506 a2   \u2506 b2   \u2506 \u2026 \u2506 a9   \u2506 b9   \u2506 a10  \u2506 b10  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2506   \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 i32  \u2506 str  \u2506 i32  \u2506 str  \u2506   \u2506 i32  \u2506 str  \u2506 i32  \u2506 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 a    \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 2    \u2506 b    \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 3    \u2506 c    \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 4    \u2506 d    \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 2    \u2506 b    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 3    \u2506 c    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 4    \u2506 d    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 \u2026 \u2506 null \u2506 null \u2506 5    \u2506 e    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># if two columns don't share the same type, concat() will error unless we use\n# `how = \"vertical_relaxed\"`:\ntest = pl$DataFrame(x = 1L) # i32\ntest2 = pl$DataFrame(x = 1.0) # f64\n\npl$concat(test, test2, how = \"vertical_relaxed\")\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_concat_list/","title":"Concat the arrays in a Series dtype List in linear time.","text":"<p>Source code</p>"},{"location":"man/pl_concat_list/#description","title":"Description","text":"<p>Folds the expressions from left to right, keeping the first non-null value.</p>"},{"location":"man/pl_concat_list/#usage","title":"Usage","text":"<pre><code>pl_concat_list(exprs)\n</code></pre>"},{"location":"man/pl_concat_list/#arguments","title":"Arguments","text":"<code>exprs</code>  list of Into, strings interpreted as column names"},{"location":"man/pl_concat_list/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_concat_list/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# Create lagged columns and collect them into a list. This mimics a rolling window.\ndf = pl$DataFrame(A = c(1, 2, 9, 2, 13))\ndf$with_columns(lapply(\n  0:2,\n  \\(i) pl$col(\"A\")$shift(i)$alias(paste0(\"A_lag_\", i))\n))$select(\n  pl$concat_list(lapply(2:0, \\(i) pl$col(paste0(\"A_lag_\", i))))$alias(\n    \"A_rolling\"\n  )\n)\n</code></pre> <pre><code>#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A_rolling         \u2502\n#&gt; \u2502 ---               \u2502\n#&gt; \u2502 list[f64]         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [null, null, 1.0] \u2502\n#&gt; \u2502 [null, 1.0, 2.0]  \u2502\n#&gt; \u2502 [1.0, 2.0, 9.0]   \u2502\n#&gt; \u2502 [2.0, 9.0, 2.0]   \u2502\n#&gt; \u2502 [9.0, 2.0, 13.0]  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># concat Expr a Series and an R obejct\npl$concat_list(list(\n  pl$lit(1:5),\n  pl$Series(5:1),\n  rep(0L, 5)\n))$alias(\"alice\")$to_series()\n</code></pre> <pre><code>#&gt; polars Series: shape: (5,)\n#&gt; Series: 'alice' [list[i32]]\n#&gt; [\n#&gt;  [1, 5, 0]\n#&gt;  [2, 4, 0]\n#&gt;  [3, 3, 0]\n#&gt;  [4, 2, 0]\n#&gt;  [5, 1, 0]\n#&gt; ]\n</code></pre>"},{"location":"man/pl_concat_str/","title":"Horizontally concatenate columns into a single string column","text":"<p>Source code</p>"},{"location":"man/pl_concat_str/#description","title":"Description","text":"<p>Horizontally concatenate columns into a single string column</p>"},{"location":"man/pl_concat_str/#usage","title":"Usage","text":"<pre><code>pl_concat_str(..., separator = \"\")\n</code></pre>"},{"location":"man/pl_concat_str/#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals. Non-String columns are cast to String  <code>separator</code>  String that will be used to separate the values of each column."},{"location":"man/pl_concat_str/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_concat_str/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 2, 3),\n  b = c(\"dogs\", \"cats\", NA),\n  c = c(\"play\", \"swim\", \"walk\")\n)\n\ndf$with_columns(\n  pl$concat_str(\n    pl$col(\"a\") * 2,\n    \"b\",\n    \"c\",\n    pl$lit(\"!\"),\n    separator = \" \"\n  )$alias(\"full_sentence\")\n)\n</code></pre> <pre><code>#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b    \u2506 c    \u2506 full_sentence   \u2502\n#&gt; \u2502 --- \u2506 ---  \u2506 ---  \u2506 ---             \u2502\n#&gt; \u2502 f64 \u2506 str  \u2506 str  \u2506 str             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 dogs \u2506 play \u2506 2.0 dogs play ! \u2502\n#&gt; \u2502 2.0 \u2506 cats \u2506 swim \u2506 4.0 cats swim ! \u2502\n#&gt; \u2502 3.0 \u2506 null \u2506 walk \u2506 null            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_corr/","title":"Correlation","text":"<p>Source code</p>"},{"location":"man/pl_corr/#description","title":"Description","text":"<p>Calculates the correlation between two columns</p>"},{"location":"man/pl_corr/#usage","title":"Usage","text":"<pre><code>pl_corr(a, b, method = \"pearson\", ddof = 1, propagate_nans = FALSE)\n</code></pre>"},{"location":"man/pl_corr/#arguments","title":"Arguments","text":"<code>a</code>  One column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>b</code>  Another column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>method</code>  str One of \u2018pearson\u2019 or \u2018spearman\u2019  <code>ddof</code>  integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.  <code>propagate_nans</code>  bool Used only when calculating the spearman rank correlation. If <code>True</code> any <code>NaN</code> encountered will lead to <code>NaN</code> in the output. Defaults to <code>False</code> where <code>NaN</code> are regarded as larger than any finite number and thus lead to the highest rank."},{"location":"man/pl_corr/#value","title":"Value","text":"<p>Expr for the computed correlation</p>"},{"location":"man/pl_corr/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(data.frame(a = c(1, 8, 3), b = c(4, 5, 2)))\nlf$select(pl$corr(\"a\", \"b\", method = \"spearman\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.5 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_count/","title":"pl$count","text":"<p>Source code</p>"},{"location":"man/pl_count/#description","title":"Description","text":"<p>Count the number of values in this column/context.</p>"},{"location":"man/pl_count/#usage","title":"Usage","text":"<pre><code>pl_count(column = NULL)\n</code></pre>"},{"location":"man/pl_count/#arguments","title":"Arguments","text":"<code>column</code>   if dtype is:  <ul> <li>  Series: count length of Series  </li> <li>  str: count values of this column  </li> <li>  NULL: count the number of value in this context.  </li> </ul>"},{"location":"man/pl_count/#value","title":"Value","text":"<p>Expr or value-count in case Series</p>"},{"location":"man/pl_count/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\ndf$select(pl$count())\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 count \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$group_by(\"c\", maintain_order = TRUE)$agg(pl$count())\n</code></pre> <pre><code>#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 c   \u2506 count \u2502\n#&gt; \u2502 --- \u2506 ---   \u2502\n#&gt; \u2502 str \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo \u2506 2     \u2502\n#&gt; \u2502 bar \u2506 1     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_cov/","title":"Covariance","text":"<p>Source code</p>"},{"location":"man/pl_cov/#description","title":"Description","text":"<p>Calculates the covariance between two columns / expressions.</p>"},{"location":"man/pl_cov/#usage","title":"Usage","text":"<pre><code>pl_cov(a, b, ddof = 1)\n</code></pre>"},{"location":"man/pl_cov/#arguments","title":"Arguments","text":"<code>a</code>  One column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>b</code>  Another column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>ddof</code>  integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/pl_cov/#value","title":"Value","text":"<p>Expr for the computed covariance</p>"},{"location":"man/pl_cov/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(data.frame(a = c(1, 8, 3), b = c(4, 5, 2)))\nlf$select(pl$cov(\"a\", \"b\"))$collect()\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$cov(c(1, 8, 3), c(4, 5, 2))$to_r()\n</code></pre> <pre><code>#&gt; [1] 3\n</code></pre>"},{"location":"man/pl_date_range/","title":"New date range","text":"<p>Source code</p>"},{"location":"man/pl_date_range/#description","title":"Description","text":"<p>New date range</p>"},{"location":"man/pl_date_range/#usage","title":"Usage","text":"<pre><code>pl_date_range(\n  start,\n  end,\n  interval,\n  eager = FALSE,\n  closed = \"both\",\n  time_unit = \"us\",\n  time_zone = NULL,\n  explode = TRUE\n)\n</code></pre>"},{"location":"man/pl_date_range/#arguments","title":"Arguments","text":"<code>start</code>  POSIXt or Date preferably with time_zone or double or integer  <code>end</code>  POSIXt or Date preferably with time_zone or double or integer. If <code>end</code> and <code>interval</code> are missing, then a single datetime is constructed.  <code>interval</code>  String, a Polars <code>duration</code> or R <code>difftime()</code>. Can be missing if <code>end</code> is missing also.  <code>eager</code>  If <code>FALSE</code> (default), return an <code>Expr</code>. Otherwise, returns a <code>Series</code>.  <code>closed</code>  One of <code>\u201cboth\u201d</code> (default), <code>\u201cleft\u201d</code>, <code>\u201cnone\u201d</code> or <code>\u201cright\u201d</code>.  <code>time_unit</code>  String (<code>\u201cns\u201d</code>, <code>\u201cus\u201d</code>, <code>\u201cms\u201d</code>) or integer.  <code>time_zone</code>  String describing a timezone. If <code>NULL</code> (default), <code>\u201cGMT</code> is used.  <code>explode</code>  If <code>TRUE</code> (default), all created ranges will be \"unlisted\" into a column. Otherwise, output will be a list of ranges."},{"location":"man/pl_date_range/#details","title":"Details","text":"<p>If param <code>time_zone</code> is not defined the Series will have no time zone.</p> <p>Note that R POSIXt without defined timezones (tzone/tz), so-called naive datetimes, are counter intuitive in R. It is recommended to always set the timezone of start and end. If not output will vary between local machine timezone, R and polars.</p> <p>In R/r-polars it is perfectly fine to mix timezones of params <code>time_zone</code>, <code>start</code> and <code>end</code>.</p>"},{"location":"man/pl_date_range/#value","title":"Value","text":"<p>A datetime</p>"},{"location":"man/pl_date_range/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# All in GMT, straight forward, no mental confusion\ns_gmt = pl$date_range(\n  as.POSIXct(\"2022-01-01\", tz = \"GMT\"),\n  as.POSIXct(\"2022-01-02\", tz = \"GMT\"),\n  interval = \"6h\", time_unit = \"ms\", time_zone = \"GMT\"\n)\ns_gmt\n</code></pre> <pre><code>#&gt; polars Expr: Series.date_range([Series]).explode()\n</code></pre> <pre><code>s_gmt$to_r()\n</code></pre> <pre><code>#&gt; [1] \"2022-01-01 00:00:00 GMT\" \"2022-01-01 06:00:00 GMT\"\n#&gt; [3] \"2022-01-01 12:00:00 GMT\" \"2022-01-01 18:00:00 GMT\"\n#&gt; [5] \"2022-01-02 00:00:00 GMT\"\n</code></pre> <pre><code># polars uses \"GMT\" if time_zone = NULL\ns_null = pl$date_range(\n  as.POSIXct(\"2022-01-01\", tz = \"GMT\"),\n  as.POSIXct(\"2022-01-02\", tz = \"GMT\"),\n  interval = \"6h\", time_unit = \"ms\", time_zone = NULL\n)\n# back to R POSIXct. R prints non tzone tagged POSIXct in local timezone\ns_null$to_r()\n</code></pre> <pre><code>#&gt; [1] \"2022-01-01 00:00:00 GMT\" \"2022-01-01 06:00:00 GMT\"\n#&gt; [3] \"2022-01-01 12:00:00 GMT\" \"2022-01-01 18:00:00 GMT\"\n#&gt; [5] \"2022-01-02 00:00:00 GMT\"\n</code></pre> <pre><code># use of ISOdate\nt1 = ISOdate(2022, 1, 1, 0) # preset GMT\nt2 = ISOdate(2022, 1, 2, 0) # preset GMT\npl$date_range(t1, t2, interval = \"4h\", time_unit = \"ms\", time_zone = \"GMT\")$to_r()\n</code></pre> <pre><code>#&gt; [1] \"2022-01-01 00:00:00 GMT\" \"2022-01-01 04:00:00 GMT\"\n#&gt; [3] \"2022-01-01 08:00:00 GMT\" \"2022-01-01 12:00:00 GMT\"\n#&gt; [5] \"2022-01-01 16:00:00 GMT\" \"2022-01-01 20:00:00 GMT\"\n#&gt; [7] \"2022-01-02 00:00:00 GMT\"\n</code></pre>"},{"location":"man/pl_disable_string_cache/","title":"Disable the global string cache","text":"<p>Source code</p>"},{"location":"man/pl_disable_string_cache/#description","title":"Description","text":"<p>Some functions (e.g joins) can be applied on Categorical series only allowed if using the global string cache is enabled. This function disables the string_cache. In general, you should use <code>pl$with_string_cache()</code> instead.</p>"},{"location":"man/pl_disable_string_cache/#usage","title":"Usage","text":"<pre><code>pl_disable_string_cache()\n</code></pre>"},{"location":"man/pl_disable_string_cache/#value","title":"Value","text":"<p>This doesn\u2019t return any value.</p>"},{"location":"man/pl_disable_string_cache/#see-also","title":"See Also","text":"<p><code>pl$using_string_cache</code> <code>pl$enable_string_cache</code> <code>pl$with_string_cache</code></p>"},{"location":"man/pl_disable_string_cache/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$enable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$disable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/pl_dtypes/","title":"DataTypes (RPolarsDataType)","text":""},{"location":"man/pl_dtypes/#description","title":"Description","text":"<p><code>DataType</code> any polars type (ported so far)</p>"},{"location":"man/pl_dtypes/#value","title":"Value","text":"<p>not applicable</p>"},{"location":"man/pl_dtypes/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nprint(ls(pl$dtypes))\n</code></pre> <pre><code>#&gt;  [1] \"Binary\"      \"Boolean\"     \"Categorical\" \"Date\"        \"Datetime\"   \n#&gt;  [6] \"Float32\"     \"Float64\"     \"Int16\"       \"Int32\"       \"Int64\"      \n#&gt; [11] \"Int8\"        \"List\"        \"Null\"        \"String\"      \"Struct\"     \n#&gt; [16] \"Time\"        \"UInt16\"      \"UInt32\"      \"UInt64\"      \"UInt8\"      \n#&gt; [21] \"Unknown\"     \"Utf8\"\n</code></pre> <pre><code>pl$dtypes$Float64\n</code></pre> <pre><code>#&gt; DataType: Float64\n</code></pre> <pre><code>pl$dtypes$String\n</code></pre> <pre><code>#&gt; DataType: String\n</code></pre> <pre><code>pl$List(pl$List(pl$UInt64))\n</code></pre> <pre><code>#&gt; DataType: List(\n#&gt;     List(\n#&gt;         UInt64,\n#&gt;     ),\n#&gt; )\n</code></pre> <pre><code>pl$Struct(pl$Field(\"CityNames\", pl$String))\n</code></pre> <pre><code>#&gt; DataType: Struct(\n#&gt;     [\n#&gt;         Field {\n#&gt;             name: \"CityNames\",\n#&gt;             dtype: String,\n#&gt;         },\n#&gt;     ],\n#&gt; )\n</code></pre> <pre><code># The function changes type from Int32 to String\n# Specifying the output DataType: String solves the problem\npl$Series(1:4)$map_elements(\\(x) letters[x], datatype = pl$dtypes$String)\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '_apply' [str]\n#&gt; [\n#&gt;  \"a\"\n#&gt;  \"b\"\n#&gt;  \"c\"\n#&gt;  \"d\"\n#&gt; ]\n</code></pre>"},{"location":"man/pl_element/","title":"an element in \u2018eval\u2019-expr","text":"<p>Source code</p>"},{"location":"man/pl_element/#description","title":"Description","text":"<p>Alias for an element in evaluated in an <code>eval</code> expression.</p>"},{"location":"man/pl_element/#usage","title":"Usage","text":"<pre><code>pl_element()\n</code></pre>"},{"location":"man/pl_element/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_element/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$lit(1:5)$cumulative_eval(pl$element()$first() - pl$element()$last()**2)$to_r()\n</code></pre> <pre><code>#&gt; [1]   0  -3  -8 -15 -24\n</code></pre>"},{"location":"man/pl_enable_string_cache/","title":"Enable the global string cache","text":"<p>Source code</p>"},{"location":"man/pl_enable_string_cache/#description","title":"Description","text":"<p>Some functions (e.g joins) can be applied on Categorical series only allowed if using the global string cache is enabled. This function enables the string_cache. In general, you should use <code>pl$with_string_cache()</code> instead.</p>"},{"location":"man/pl_enable_string_cache/#usage","title":"Usage","text":"<pre><code>pl_enable_string_cache()\n</code></pre>"},{"location":"man/pl_enable_string_cache/#value","title":"Value","text":"<p>This doesn\u2019t return any value.</p>"},{"location":"man/pl_enable_string_cache/#see-also","title":"See Also","text":"<p><code>pl$using_string_cache</code> <code>pl$disable_string_cache</code> <code>pl$with_string_cache</code></p>"},{"location":"man/pl_enable_string_cache/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$enable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$disable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/pl_expr_to_r/","title":"Convert an Expr to R output","text":"<p>Source code</p>"},{"location":"man/pl_expr_to_r/#description","title":"Description","text":"<p>This is mostly useful to debug an expression. It evaluates the Expr in an empty DataFrame and return the first Series to R. This is an alias for <code>$to_r()</code>.</p>"},{"location":"man/pl_expr_to_r/#usage","title":"Usage","text":"<pre><code>pl_expr_to_r(expr, df = NULL, i = 0)\n</code></pre>"},{"location":"man/pl_expr_to_r/#arguments","title":"Arguments","text":"<code>expr</code>  An Expr to evaluate.  <code>df</code>  If <code>NULL</code> (default), it evaluates the Expr in an empty DataFrame. Otherwise, provide a DataFrame that the Expr should be evaluated in.  <code>i</code>  Numeric column to extract. Default is zero (which gives the first column)."},{"location":"man/pl_expr_to_r/#value","title":"Value","text":"<p>R object</p>"},{"location":"man/pl_expr_to_r/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$expr_to_r(pl$lit(1:3))\n</code></pre> <pre><code>#&gt; [1] 1 2 3\n</code></pre>"},{"location":"man/pl_first/","title":"pl$first","text":"<p>Source code</p>"},{"location":"man/pl_first/#description","title":"Description","text":"<p>Depending on the input type this function does different things:</p>"},{"location":"man/pl_first/#usage","title":"Usage","text":"<pre><code>pl_first(column = NULL)\n</code></pre>"},{"location":"man/pl_first/#arguments","title":"Arguments","text":"<code>column</code>   if dtype is:  <ul> <li>  Series: Take first value in <code>Series</code> </li> <li>  str: syntactic sugar for <code>pl.col(..).first()</code> </li> <li>  NULL: expression to take first column of a context.  </li> </ul>"},{"location":"man/pl_first/#value","title":"Value","text":"<p>Expr or first value of input Series</p>"},{"location":"man/pl_first/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\ndf$select(pl$first())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 8.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$first(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$first(df$get_column(\"a\"))\n</code></pre> <pre><code>#&gt; [1] 1\n</code></pre>"},{"location":"man/pl_fold_reduce/","title":"Accumulate over multiple columns horizontally with an R function","text":""},{"location":"man/pl_fold_reduce/#description","title":"Description","text":"<p><code>pl$fold()</code> and <code>pl$reduce()</code> allows one to do rowwise operations. The only difference between them is that <code>pl$fold()</code> has an additional argument (<code>acc</code>) that contains the value that will be initialized when the fold starts.</p>"},{"location":"man/pl_fold_reduce/#usage","title":"Usage","text":"<pre><code>pl_fold(acc, lambda, exprs)\n\npl_reduce(lambda, exprs)\n</code></pre>"},{"location":"man/pl_fold_reduce/#arguments","title":"Arguments","text":"<code>acc</code>  an Expr or Into of the initial accumulator.  <code>lambda</code>  R function which takes two polars Series as input and return one.  <code>exprs</code>  Expressions to aggregate over. May also be a wildcard expression."},{"location":"man/pl_fold_reduce/#value","title":"Value","text":"<p>An expression that will be applied rowwise</p>"},{"location":"man/pl_fold_reduce/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(mtcars)\n\n# Make the row-wise sum of all columns with fold, reduce and vectorized \"+\"\ndf$with_columns(\n  pl$reduce(\n    lambda = \\(acc, x) acc + x,\n    exprs = pl$col(\"mpg\", \"drat\")\n  )$alias(\"mpg_drat_sum_reduced\"),\n  pl$fold(\n    acc = pl$lit(0),\n    lambda = \\(acc, x) acc + x,\n    exprs = pl$col(\"mpg\", \"drat\")\n  )$alias(\"mpg_drat_sum_folded\"),\n  (pl$col(\"mpg\") + pl$col(\"drat\"))$alias(\"mpg_drat_vector_sum\")\n)\n</code></pre> <pre><code>#&gt; shape: (32, 14)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 carb \u2506 mpg_drat_sum_redu \u2506 mpg_drat_sum_fold \u2506 mpg_drat_vector_ \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 ---  \u2506 ced               \u2506 ed                \u2506 sum              \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64  \u2506 ---               \u2506 ---               \u2506 ---              \u2502\n#&gt; \u2502      \u2506     \u2506       \u2506       \u2506   \u2506      \u2506 f64               \u2506 f64               \u2506 f64              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 4.0  \u2506 24.9              \u2506 24.9              \u2506 24.9             \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 4.0  \u2506 24.9              \u2506 24.9              \u2506 24.9             \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0  \u2506 26.65             \u2506 26.65             \u2506 26.65            \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0  \u2506 24.48             \u2506 24.48             \u2506 24.48            \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026    \u2506 \u2026                 \u2506 \u2026                 \u2506 \u2026                \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 4.0  \u2506 20.02             \u2506 20.02             \u2506 20.02            \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 6.0  \u2506 23.32             \u2506 23.32             \u2506 23.32            \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 8.0  \u2506 18.54             \u2506 18.54             \u2506 18.54            \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 2.0  \u2506 25.51             \u2506 25.51             \u2506 25.51            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_from_arrow/","title":"from_arrow","text":"<p>Source code</p>"},{"location":"man/pl_from_arrow/#description","title":"Description","text":"<p>import Arrow Table or Array</p>"},{"location":"man/pl_from_arrow/#usage","title":"Usage","text":"<pre><code>pl_from_arrow(\n  data,\n  ...,\n  rechunk = TRUE,\n  schema = NULL,\n  schema_overrides = NULL\n)\n</code></pre>"},{"location":"man/pl_from_arrow/#arguments","title":"Arguments","text":"<code>data</code>  arrow Table or Array or ChunkedArray  <code>\u2026</code>  Ignored.  <code>rechunk</code>  bool rewrite in one array per column, Implemented for ChunkedArray Array is already contiguous. Not implemented for Table. C  <code>schema</code>  named list of DataTypes or char vec of names. Same length as arrow table. If schema names or types do not match arrow table, the columns will be renamed/recast. NULL default is to import columns as is. Takes no effect for Array or ChunkedArray  <code>schema_overrides</code>  named list of DataTypes. Name some columns to recast by the DataType. Takes not effect for Array or ChunkedArray"},{"location":"man/pl_from_arrow/#value","title":"Value","text":"<p>DataFrame or Series</p>"},{"location":"man/pl_from_arrow/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$from_arrow(\n  data = arrow::arrow_table(iris),\n  schema_overrides = list(Sepal.Length = pl$Float32, Species = pl$String)\n)\n</code></pre> <pre><code>#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f32          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>char_schema = names(iris)\nchar_schema[1] = \"Alice\"\npl$from_arrow(\n  data = arrow::arrow_table(iris),\n  schema = char_schema\n)\n</code></pre> <pre><code>#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Alice \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---   \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64   \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1   \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9   \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7   \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6   \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 \u2026     \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n#&gt; \u2502 6.3   \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5   \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2   \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9   \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_head/","title":"Get the first <code>n</code> rows.","text":"<p>Source code</p>"},{"location":"man/pl_head/#description","title":"Description","text":"<p>Get the first <code>n</code> rows.</p>"},{"location":"man/pl_head/#usage","title":"Usage","text":"<pre><code>pl_head(column, n = 10)\n</code></pre>"},{"location":"man/pl_head/#arguments","title":"Arguments","text":"<code>column</code>   if dtype is:  <ul> <li>  Series: Take head value in <code>Series</code> </li> <li>  str or int: syntactic sugar for <code>pl.col(..).head()</code> </li> </ul> <code>n</code>  Number of rows to take"},{"location":"man/pl_head/#value","title":"Value","text":"<p>Expr or head value of input Series</p>"},{"location":"man/pl_head/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\nexpr_head = pl$head(\"a\")\nprint(expr_head)\n</code></pre> <pre><code>#&gt; polars Expr: col(\"a\").slice(offset=0, length=10)\n</code></pre> <pre><code>df$select(expr_head)\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 8.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$head(\"a\", 2))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 8.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$head(df$get_column(\"a\"), 2)\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: 'a' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  8.0\n#&gt; ]\n</code></pre>"},{"location":"man/pl_implode/","title":"Aggregate all column values into a list.","text":"<p>Source code</p>"},{"location":"man/pl_implode/#description","title":"Description","text":"<p>Aggregate all column values into a list.</p>"},{"location":"man/pl_implode/#usage","title":"Usage","text":"<pre><code>pl_implode(name)\n</code></pre>"},{"location":"man/pl_implode/#arguments","title":"Arguments","text":"<code>name</code>  Name of the column(s) that should be imploded, passed to pl$col()"},{"location":"man/pl_implode/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_implode/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$DataFrame(iris)$select(pl$implode(\"Species\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species                           \u2502\n#&gt; \u2502 ---                               \u2502\n#&gt; \u2502 list[cat]                         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"setosa\", \"setosa\", \u2026 \"virginic\u2026 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_is_schema/","title":"check if schema","text":"<p>Source code</p>"},{"location":"man/pl_is_schema/#description","title":"Description","text":"<p>check if schema</p>"},{"location":"man/pl_is_schema/#usage","title":"Usage","text":"<pre><code>pl_is_schema(x)\n</code></pre>"},{"location":"man/pl_is_schema/#arguments","title":"Arguments","text":"<code>x</code>  object to test if schema"},{"location":"man/pl_is_schema/#format","title":"Format","text":"<p>function</p>"},{"location":"man/pl_is_schema/#value","title":"Value","text":"<p>bool</p>"},{"location":"man/pl_is_schema/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$is_schema(pl$DataFrame(iris)$schema)\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$is_schema(list(\"alice\", \"bob\"))\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/pl_last/","title":"pl$last","text":"<p>Source code</p>"},{"location":"man/pl_last/#description","title":"Description","text":"<p>Depending on the input type this function does different things:</p>"},{"location":"man/pl_last/#usage","title":"Usage","text":"<pre><code>pl_last(column = NULL)\n</code></pre>"},{"location":"man/pl_last/#arguments","title":"Arguments","text":"<code>column</code>   if dtype is:  <ul> <li>  Series: Take last value in <code>Series</code> </li> <li>  str: syntactic sugar for <code>pl.col(..).last()</code> </li> <li>  NULL: expression to take last column of a context.  </li> </ul>"},{"location":"man/pl_last/#value","title":"Value","text":"<p>Expr or last value of input Series</p>"},{"location":"man/pl_last/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\ndf$select(pl$last())\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 c   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 bar \u2502\n#&gt; \u2502 foo \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$last(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$last(df$get_column(\"a\"))\n</code></pre> <pre><code>#&gt; [1] 3\n</code></pre>"},{"location":"man/pl_max/","title":"Find maximum value in one or several columns","text":"<p>Source code</p>"},{"location":"man/pl_max/#description","title":"Description","text":"<p>This is syntactic sugar for <code>pl$col(\u2026)$max()</code>.</p>"},{"location":"man/pl_max/#usage","title":"Usage","text":"<pre><code>pl_max(...)\n</code></pre>"},{"location":"man/pl_max/#arguments","title":"Arguments","text":"<code>\u2026</code>   is a: If one arg:  <ul> <li>  Series or Expr, same as <code>column$sum()</code> </li> <li>  string, same as <code>pl$col(column)$sum()</code> </li> <li>  numeric, same as <code>pl$lit(column)$sum()</code> </li> <li>  list of strings(column names) or expressions to add up as expr1 + expr2 + expr3 + \u2026  </li> </ul> If several args, then wrapped in a list and handled as above."},{"location":"man/pl_max/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_max/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = NA_real_,\n  b = c(1:2, NA_real_, NA_real_),\n  c = c(1:4)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c   \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 1.0  \u2506 1   \u2502\n#&gt; \u2502 null \u2506 2.0  \u2506 2   \u2502\n#&gt; \u2502 null \u2506 null \u2506 3   \u2502\n#&gt; \u2502 null \u2506 null \u2506 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_max_horizontal/","title":"Get the maximum value rowwise","text":"<p>Source code</p>"},{"location":"man/pl_max_horizontal/#description","title":"Description","text":"<p>Get the maximum value rowwise</p>"},{"location":"man/pl_max_horizontal/#usage","title":"Usage","text":"<pre><code>pl_max_horizontal(...)\n</code></pre>"},{"location":"man/pl_max_horizontal/#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals."},{"location":"man/pl_max_horizontal/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_max_horizontal/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = NA_real_,\n  b = c(2:1, NA_real_, NA_real_),\n  c = c(1:2, NA_real_, Inf)\n)\ndf$with_columns(\n  pl$max_horizontal(\"a\", \"b\", \"c\", 99.9)$alias(\"max\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c    \u2506 max  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 2.0  \u2506 1.0  \u2506 99.9 \u2502\n#&gt; \u2502 null \u2506 1.0  \u2506 2.0  \u2506 99.9 \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 99.9 \u2502\n#&gt; \u2502 null \u2506 null \u2506 inf  \u2506 inf  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_mean/","title":"pl$mean","text":"<p>Source code</p>"},{"location":"man/pl_mean/#description","title":"Description","text":"<p>Depending on the input type this function does different things:</p>"},{"location":"man/pl_mean/#usage","title":"Usage","text":"<pre><code>pl_mean(...)\n</code></pre>"},{"location":"man/pl_mean/#arguments","title":"Arguments","text":"<code>\u2026</code>   One or several elements:  <ul> <li>  Series: Take mean value in <code>Series</code> </li> <li>  DataFrame or LazyFrame: Take mean value of each column  </li> <li>  character vector: parsed as column names  </li> <li>  NULL: expression to take mean column of a context.  </li> </ul>"},{"location":"man/pl_mean/#value","title":"Value","text":"<p>Expr or mean value of input Series</p>"},{"location":"man/pl_mean/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\ndf$select(pl$mean(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$mean(\"a\", \"b\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0 \u2506 3.666667 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_median/","title":"pl$median","text":"<p>Source code</p>"},{"location":"man/pl_median/#description","title":"Description","text":"<p>Depending on the input type this function does different things:</p>"},{"location":"man/pl_median/#usage","title":"Usage","text":"<pre><code>pl_median(...)\n</code></pre>"},{"location":"man/pl_median/#arguments","title":"Arguments","text":"<code>\u2026</code>   One or several elements:  <ul> <li>  Series: Take mean value in <code>Series</code> </li> <li>  DataFrame or LazyFrame: Take mean value of each column  </li> <li>  character vector: parsed as column names  </li> <li>  NULL: expression to take mean column of a context.  </li> </ul>"},{"location":"man/pl_median/#value","title":"Value","text":"<p>Expr or median value of input Series</p>"},{"location":"man/pl_median/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\ndf$select(pl$median(\"a\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$median(\"a\", \"b\"))\n</code></pre> <pre><code>#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2506 4.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_mem_address/","title":"Get Memory Address","text":"<p>Source code</p>"},{"location":"man/pl_mem_address/#description","title":"Description","text":"<p>Get underlying mem address a rust object (via ExtPtr). Expert use only.</p>"},{"location":"man/pl_mem_address/#usage","title":"Usage","text":"<pre><code>pl_mem_address(robj)\n</code></pre>"},{"location":"man/pl_mem_address/#arguments","title":"Arguments","text":"<code>robj</code>  an R object"},{"location":"man/pl_mem_address/#details","title":"Details","text":"<p>Does not give meaningful answers for regular R objects.</p>"},{"location":"man/pl_mem_address/#value","title":"Value","text":"<p>String of mem address</p>"},{"location":"man/pl_mem_address/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$mem_address(pl$Series(1:3))\n</code></pre> <pre><code>#&gt; [1] \"0x7f3d3e076000\"\n</code></pre>"},{"location":"man/pl_min/","title":"Find minimum value in one or several columns","text":"<p>Source code</p>"},{"location":"man/pl_min/#description","title":"Description","text":"<p>This is syntactic sugar for <code>pl$col(\u2026)$min()</code>.</p>"},{"location":"man/pl_min/#usage","title":"Usage","text":"<pre><code>pl_min(...)\n</code></pre>"},{"location":"man/pl_min/#arguments","title":"Arguments","text":"<code>\u2026</code>   is a: If one arg:  <ul> <li>  Series or Expr, same as <code>column$sum()</code> </li> <li>  string, same as <code>pl$col(column)$sum()</code> </li> <li>  numeric, same as <code>pl$lit(column)$sum()</code> </li> <li>  list of strings(column names) or expressions to add up as expr1 + expr2 + expr3 + \u2026 If several args, then wrapped in a list and handled as above.  </li> </ul>"},{"location":"man/pl_min/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_min/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = NA_real_,\n  b = c(1:2, NA_real_, NA_real_),\n  c = c(1:4)\n)\ndf\n</code></pre> <pre><code>#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c   \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 1.0  \u2506 1   \u2502\n#&gt; \u2502 null \u2506 2.0  \u2506 2   \u2502\n#&gt; \u2502 null \u2506 null \u2506 3   \u2502\n#&gt; \u2502 null \u2506 null \u2506 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_min_horizontal/","title":"Get the minimum value rowwise","text":"<p>Source code</p>"},{"location":"man/pl_min_horizontal/#description","title":"Description","text":"<p>Get the minimum value rowwise</p>"},{"location":"man/pl_min_horizontal/#usage","title":"Usage","text":"<pre><code>pl_min_horizontal(...)\n</code></pre>"},{"location":"man/pl_min_horizontal/#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals."},{"location":"man/pl_min_horizontal/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_min_horizontal/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = NA_real_,\n  b = c(2:1, NA_real_, NA_real_),\n  c = c(1:2, NA_real_, -Inf)\n)\ndf$with_columns(\n  pl$min_horizontal(\"a\", \"b\", \"c\", 99.9)$alias(\"min\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c    \u2506 min  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 2.0  \u2506 1.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 1.0  \u2506 2.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 99.9 \u2502\n#&gt; \u2502 null \u2506 null \u2506 -inf \u2506 -inf \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_n_unique/","title":"Count <code>n</code> unique values","text":"<p>Source code</p>"},{"location":"man/pl_n_unique/#description","title":"Description","text":"<p>Depending on the input type this function does different things:</p>"},{"location":"man/pl_n_unique/#usage","title":"Usage","text":"<pre><code>pl_n_unique(column)\n</code></pre>"},{"location":"man/pl_n_unique/#arguments","title":"Arguments","text":"<code>column</code>   if dtype is:  <ul> <li>  Series: call method n_unique() to return value of unique values.  </li> <li>  String: syntactic sugar for <code>pl$col(column)$n_unique()</code>, returns Expr  </li> <li>  Expr: syntactic sugar for <code>column$n_unique()</code>, returns Expr  </li> </ul>"},{"location":"man/pl_n_unique/#value","title":"Value","text":"<p>Expr or value</p>"},{"location":"man/pl_n_unique/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# column as Series\npl$n_unique(pl$Series(1:4)) == 4\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code># column as String\nexpr = pl$n_unique(\"bob\")\nprint(expr)\n</code></pre> <pre><code>#&gt; polars Expr: col(\"bob\").n_unique()\n</code></pre> <pre><code>pl$DataFrame(bob = 1:4)$select(expr)\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bob \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># colum as Expr\npl$DataFrame(bob = 1:4)$select(pl$n_unique(pl$col(\"bob\")))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bob \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_pl/","title":"The complete polars public API.","text":""},{"location":"man/pl_pl/#description","title":"Description","text":"<p><code>pl</code>-object is a environment of all public functions and class constructors. Public functions are not exported as a normal package as it would be huge namespace collision with base:: and other functions. All object-methods are accessed with object$method() via the new class functions.</p> <p>Having all functions in an namespace is similar to the rust- and python- polars api.</p>"},{"location":"man/pl_pl/#usage","title":"Usage","text":"<pre><code>pl\n</code></pre>"},{"location":"man/pl_pl/#format","title":"Format","text":"<p>An object of class <code>pl_polars_env</code> (inherits from <code>environment</code>) of length 96.</p>"},{"location":"man/pl_pl/#details","title":"Details","text":"<p>If someone do not particularly like the letter combination <code>pl</code>, they are free to bind the environment to another variable name as <code>simon_says = pl</code> or even do <code>attach(pl)</code></p>"},{"location":"man/pl_pl/#value","title":"Value","text":"<p>not applicable</p>"},{"location":"man/pl_pl/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# how to use polars via `pl`\npl$col(\"colname\")$sum() / pl$lit(42L) # expression ~ chain-method / literal-expression\n</code></pre> <pre><code>#&gt; polars Expr: [(col(\"colname\").sum()) // (42)]\n</code></pre> <pre><code># show all public functions, RPolarsDataTypes, classes and methods\npl$show_all_public_functions()\n</code></pre> <pre><code>#&gt; \n#&gt; \n#&gt;     polars public functions via pl$... ( pl_polars_env environment ):\n#&gt;        [ all ; function ]\n#&gt;        [ all_horizontal ; function ]\n#&gt;        [ any_horizontal ; function ]\n#&gt;        [ approx_n_unique ; function ]\n#&gt;        [ Binary ; RPolarsDataType ]\n#&gt;        [ Boolean ; RPolarsDataType ]\n#&gt;        [ Categorical ; RPolarsDataType ]\n#&gt;        [ class_names ; character ]\n#&gt;        [ coalesce ; function ]\n#&gt;        [ col ; function ]\n#&gt;        [ concat ; function ]\n#&gt;        [ concat_list ; function ]\n#&gt;        [ concat_str ; function ]\n#&gt;        [ corr ; function ]\n#&gt;        [ count ; function ]\n#&gt;        [ cov ; function ]\n#&gt;        [ DataFrame ; function ]\n#&gt;        [ Date ; RPolarsDataType ]\n#&gt;        [ date_range ; function ]\n#&gt;        [ Datetime ; function ]\n#&gt;        [ disable_string_cache ; function ]\n#&gt; \n#&gt;        dtypes ( list ):\n#&gt;           [ Binary ; RPolarsDataType ]\n#&gt;           [ Boolean ; RPolarsDataType ]\n#&gt;           [ Categorical ; RPolarsDataType ]\n#&gt;           [ Date ; RPolarsDataType ]\n#&gt;           [ Datetime ; function ]\n#&gt;           [ Float32 ; RPolarsDataType ]\n#&gt;           [ Float64 ; RPolarsDataType ]\n#&gt;           [ Int16 ; RPolarsDataType ]\n#&gt;           [ Int32 ; RPolarsDataType ]\n#&gt;           [ Int64 ; RPolarsDataType ]\n#&gt;           [ Int8 ; RPolarsDataType ]\n#&gt;           [ List ; function ]\n#&gt;           [ Null ; RPolarsDataType ]\n#&gt;           [ String ; RPolarsDataType ]\n#&gt;           [ Struct ; function ]\n#&gt;           [ Time ; RPolarsDataType ]\n#&gt;           [ UInt16 ; RPolarsDataType ]\n#&gt;           [ UInt32 ; RPolarsDataType ]\n#&gt;           [ UInt64 ; RPolarsDataType ]\n#&gt;           [ UInt8 ; RPolarsDataType ]\n#&gt;           [ Unknown ; RPolarsDataType ]\n#&gt;           [ Utf8 ; RPolarsDataType ]\n#&gt; \n#&gt;        [ element ; function ]\n#&gt;        [ enable_string_cache ; function ]\n#&gt;        [ expr_to_r ; function ]\n#&gt;        [ extra_auto_completion ; function ]\n#&gt;        [ Field ; function ]\n#&gt;        [ first ; function ]\n#&gt;        [ Float32 ; RPolarsDataType ]\n#&gt;        [ Float64 ; RPolarsDataType ]\n#&gt;        [ fold ; function ]\n#&gt;        [ from_arrow ; function ]\n#&gt;        [ get_global_rpool_cap ; function ]\n#&gt;        [ head ; function ]\n#&gt;        [ implode ; function ]\n#&gt;        [ Int16 ; RPolarsDataType ]\n#&gt;        [ Int32 ; RPolarsDataType ]\n#&gt;        [ Int64 ; RPolarsDataType ]\n#&gt;        [ Int8 ; RPolarsDataType ]\n#&gt;        [ is_schema ; function ]\n#&gt;        [ last ; function ]\n#&gt;        [ LazyFrame ; function ]\n#&gt;        [ List ; function ]\n#&gt;        [ lit ; function ]\n#&gt;        [ max ; function ]\n#&gt;        [ max_horizontal ; function ]\n#&gt;        [ mean ; function ]\n#&gt;        [ median ; function ]\n#&gt;        [ mem_address ; function ]\n#&gt;        [ min ; function ]\n#&gt;        [ min_horizontal ; function ]\n#&gt;        [ n_unique ; function ]\n#&gt;        [ Null ; RPolarsDataType ]\n#&gt; \n#&gt;        numeric_dtypes ( list ):\n#&gt;           [ Float32 ; RPolarsDataType ]\n#&gt;           [ Float64 ; RPolarsDataType ]\n#&gt;           [ Int16 ; RPolarsDataType ]\n#&gt;           [ Int32 ; RPolarsDataType ]\n#&gt;           [ Int64 ; RPolarsDataType ]\n#&gt;           [ Int8 ; RPolarsDataType ]\n#&gt; \n#&gt; \n#&gt;        options ( list ):\n#&gt;           [ debug_polars ; logical ]\n#&gt;           [ do_not_repeat_call ; logical ]\n#&gt;           [ maintain_order ; logical ]\n#&gt;           [ no_messages ; logical ]\n#&gt;           [ rpool_active ; numeric ]\n#&gt;           [ rpool_cap ; numeric ]\n#&gt;           [ strictly_immutable ; logical ]\n#&gt; \n#&gt;        [ polars_info ; function ]\n#&gt;        [ PTime ; function ]\n#&gt;        [ raw_list ; function ]\n#&gt;        [ read_csv ; function ]\n#&gt;        [ read_ndjson ; function ]\n#&gt;        [ read_parquet ; function ]\n#&gt;        [ reduce ; function ]\n#&gt;        [ reset_options ; function ]\n#&gt;        [ rolling_corr ; function ]\n#&gt;        [ rolling_cov ; function ]\n#&gt;        [ same_outer_dt ; function ]\n#&gt;        [ scan_csv ; function ]\n#&gt;        [ scan_ipc ; function ]\n#&gt;        [ scan_ndjson ; function ]\n#&gt;        [ scan_parquet ; function ]\n#&gt;        [ select ; function ]\n#&gt;        [ Series ; function ]\n#&gt;        [ set_global_rpool_cap ; function ]\n#&gt;        [ set_options ; function ]\n#&gt;        [ show_all_public_functions ; function ]\n#&gt;        [ show_all_public_methods ; function ]\n#&gt;        [ SQLContext ; function ]\n#&gt;        [ std ; function ]\n#&gt;        [ String ; RPolarsDataType ]\n#&gt;        [ struct ; function ]\n#&gt;        [ Struct ; function ]\n#&gt;        [ sum ; function ]\n#&gt;        [ sum_horizontal ; function ]\n#&gt;        [ tail ; function ]\n#&gt;        [ threadpool_size ; function ]\n#&gt;        [ Time ; RPolarsDataType ]\n#&gt;        [ UInt16 ; RPolarsDataType ]\n#&gt;        [ UInt32 ; RPolarsDataType ]\n#&gt;        [ UInt64 ; RPolarsDataType ]\n#&gt;        [ UInt8 ; RPolarsDataType ]\n#&gt;        [ Unknown ; RPolarsDataType ]\n#&gt;        [ using_string_cache ; function ]\n#&gt;        [ Utf8 ; RPolarsDataType ]\n#&gt;        [ var ; function ]\n#&gt;        [ when ; function ]\n#&gt;        [ with_string_cache ; function ]\n</code></pre> <pre><code>pl$show_all_public_methods()\n</code></pre> <pre><code>#&gt; \n#&gt; \n#&gt;      class methods, access via object$method() ( environment ):\n#&gt; \n#&gt;        RPolarsChainedThen ( environment ):\n#&gt;           [ otherwise ; function ]\n#&gt;           [ when ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsChainedWhen ( environment ):\n#&gt;           [ then ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsDataFrame ( environment ):\n#&gt;           [ clone ; function ]\n#&gt;           [ columns ; setter property function ]\n#&gt;           [ describe ; function ]\n#&gt;           [ drop ; function ]\n#&gt;           [ drop_in_place ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dtype_strings ; function ]\n#&gt;           [ dtypes ; property function ]\n#&gt;           [ equals ; function ]\n#&gt;           [ estimated_size ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ get_column ; function ]\n#&gt;           [ get_columns ; function ]\n#&gt;           [ glimpse ; function ]\n#&gt;           [ group_by ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ height ; property function ]\n#&gt;           [ join ; function ]\n#&gt;           [ join_asof ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ lazy ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ melt ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ n_chunks ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ pivot ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ schema ; property function ]\n#&gt;           [ select ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ to_data_frame ; function ]\n#&gt;           [ to_list ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ transpose ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unnest ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ width ; property function ]\n#&gt;           [ with_columns ; function ]\n#&gt;           [ with_row_count ; function ]\n#&gt;           [ write_csv ; function ]\n#&gt;           [ write_json ; function ]\n#&gt;           [ write_ndjson ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsDataType ( environment ):\n#&gt;           [ eq ; function ]\n#&gt;           [ get_all_simple_type_names ; function ]\n#&gt;           [ get_insides ; function ]\n#&gt;           [ is_temporal ; function ]\n#&gt;           [ ne ; function ]\n#&gt;           [ new ; function ]\n#&gt;           [ new_datetime ; function ]\n#&gt;           [ new_duration ; function ]\n#&gt;           [ new_list ; function ]\n#&gt;           [ new_object ; function ]\n#&gt;           [ new_struct ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ same_outer_datatype ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsExpr ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ agg_groups ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ apply ; function ]\n#&gt;           [ approx_n_unique ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ argsort ; function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ bottom_k ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cum_count ; function ]\n#&gt;           [ cum_max ; function ]\n#&gt;           [ cum_min ; function ]\n#&gt;           [ cum_prod ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ eq_missing ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ floor_div ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gather ; function ]\n#&gt;           [ gather_every ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ implode ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first_distinct ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_last_distinct ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ lit ; function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map ; function ]\n#&gt;           [ map_batches ; function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ meta ; property function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mod ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ neq_missing ; function ]\n#&gt;           [ not ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ over ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ peak_max ; function ]\n#&gt;           [ peak_min ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ replace ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rle ; function ]\n#&gt;           [ rle_id ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ where ; function ]\n#&gt;           [ xor ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsLazyFrame ( environment ):\n#&gt;           [ clone ; function ]\n#&gt;           [ collect ; function ]\n#&gt;           [ collect_in_background ; function ]\n#&gt;           [ columns ; property function ]\n#&gt;           [ describe_optimized_plan ; function ]\n#&gt;           [ describe_plan ; function ]\n#&gt;           [ drop ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dtypes ; property function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ fetch ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ get_optimization_toggle ; function ]\n#&gt;           [ group_by ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ join ; function ]\n#&gt;           [ join_asof ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ melt ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ profile ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ schema ; property function ]\n#&gt;           [ select ; function ]\n#&gt;           [ set_optimization_toggle ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ sink_csv ; function ]\n#&gt;           [ sink_ipc ; function ]\n#&gt;           [ sink_parquet ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unnest ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ width ; property function ]\n#&gt;           [ with_columns ; function ]\n#&gt;           [ with_context ; function ]\n#&gt;           [ with_row_count ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsLazyGroupBy ( environment ):\n#&gt;           [ agg ; function ]\n#&gt;           [ apply ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ ungroup ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsSeries ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ apply ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ chunk_lengths ; function ]\n#&gt;           [ clone ; function ]\n#&gt;           [ compare ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dtype ; property function ]\n#&gt;           [ equals ; function ]\n#&gt;           [ expr ; property function ]\n#&gt;           [ flags ; property function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ is_numeric ; function ]\n#&gt;           [ is_sorted ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ print ; function ]\n#&gt;           [ rem ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ to_frame ; function ]\n#&gt;           [ to_lit ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_r_list ; function ]\n#&gt;           [ to_r_vector ; function ]\n#&gt;           [ to_vector ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsSQLContext ( environment ):\n#&gt;           [ execute ; function ]\n#&gt;           [ register ; function ]\n#&gt;           [ register_many ; function ]\n#&gt;           [ tables ; function ]\n#&gt;           [ unregister ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsThen ( environment ):\n#&gt;           [ otherwise ; function ]\n#&gt;           [ when ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsWhen ( environment ):\n#&gt;           [ then ; function ]\n</code></pre>"},{"location":"man/pl_raw_list/","title":"Polars raw list","text":"<p>Source code</p>"},{"location":"man/pl_raw_list/#description","title":"Description","text":"<p>Create an \"rpolars_raw_list\", which is an R list where all elements must be an R raw or <code>NULL</code>.</p>"},{"location":"man/pl_raw_list/#usage","title":"Usage","text":"<pre><code>pl_raw_list(...)\n\n# S3 method for class 'rpolars_raw_list'\nx[index]\n\n# S3 method for class 'rpolars_raw_list'\nas.list(x, ...)\n</code></pre>"},{"location":"man/pl_raw_list/#arguments","title":"Arguments","text":"<code>\u2026</code>  Elements  <code>x</code>  A <code>rpolars_raw_list</code> object created with <code>pl$raw_list()</code> <code>index</code>  Elements to select"},{"location":"man/pl_raw_list/#details","title":"Details","text":"<p>In R, raw can contain a binary sequence of bytes, and the length is the number of bytes. In polars a Series of DataType Binary is more like a vector of vectors of bytes where missing values are allowed, similar to how <code>NA</code>s can be present in vectors.</p> <p>To ensure correct round-trip conversion, r-polars uses an R list where any elements must be raw or <code>NULL</code> (encoded as missing), and the S3 class is <code>c(\u201crpolars_raw_list\u201d,\u201clist\u201d)</code>.</p>"},{"location":"man/pl_raw_list/#value","title":"Value","text":"<p>An R list where any elements must be raw, and the S3 class is <code>c(\u201crpolars_raw_list\u201d,\u201clist\u201d)</code>.</p>"},{"location":"man/pl_raw_list/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# create a rpolars_raw_list\nraw_list = pl$raw_list(raw(1), raw(3), charToRaw(\"alice\"), NULL)\n\n# pass it to Series or lit\npl$Series(raw_list)\n</code></pre> <pre><code>#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [binary]\n#&gt; [\n#&gt;  [binary data]\n#&gt;  [binary data]\n#&gt;  [binary data]\n#&gt;  null\n#&gt; ]\n</code></pre> <pre><code>pl$lit(raw_list)\n</code></pre> <pre><code>#&gt; polars Expr: Series\n</code></pre> <pre><code># convert polars bianry Series to rpolars_raw_list\npl$Series(raw_list)$to_r()\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] 00\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 00 00 00\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 61 6c 69 63 65\n#&gt; \n#&gt; [[4]]\n#&gt; NULL\n#&gt; \n#&gt; attr(,\"class\")\n#&gt; [1] \"rpolars_raw_list\" \"list\"\n</code></pre> <pre><code># NB: a plain list of raws yield a polars Series of DateType [list[Binary]]\n# which is not the same\npl$Series(list(raw(1), raw(2)))\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [list[binary]]\n#&gt; [\n#&gt;  [[binary data]]\n#&gt;  [[binary data]]\n#&gt; ]\n</code></pre> <pre><code># to regular list, use as.list or unclass\nas.list(raw_list)\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; [1] 00\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 00 00 00\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 61 6c 69 63 65\n#&gt; \n#&gt; [[4]]\n#&gt; NULL\n</code></pre> <pre><code># subsetting preserves class\npl$raw_list(NULL, raw(2), raw(3))[1:2]\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; NULL\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 00 00\n#&gt; \n#&gt; attr(,\"class\")\n#&gt; [1] \"rpolars_raw_list\" \"list\"\n</code></pre> <pre><code># to regular list, use as.list or unclass\npl$raw_list(NULL, raw(2), raw(3)) |&gt; as.list()\n</code></pre> <pre><code>#&gt; [[1]]\n#&gt; NULL\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 00 00\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 00 00 00\n</code></pre>"},{"location":"man/pl_rolling_corr/","title":"Rolling correlation","text":"<p>Source code</p>"},{"location":"man/pl_rolling_corr/#description","title":"Description","text":"<p>Calculates the rolling correlation between two columns</p>"},{"location":"man/pl_rolling_corr/#usage","title":"Usage","text":"<pre><code>pl_rolling_corr(a, b, window_size, min_periods = NULL, ddof = 1)\n</code></pre>"},{"location":"man/pl_rolling_corr/#arguments","title":"Arguments","text":"<code>a</code>  One column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>b</code>  Another column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>window_size</code>  int The length of the window  <code>min_periods</code>  NULL or int The number of values in the window that should be non-null before computing a result. If NULL, it will be set equal to window size.  <code>ddof</code>  integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/pl_rolling_corr/#value","title":"Value","text":"<p>Expr for the computed rolling correlation</p>"},{"location":"man/pl_rolling_corr/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(data.frame(a = c(1, 8, 3), b = c(4, 5, 2)))\nlf$select(pl$rolling_corr(\"a\", \"b\", window_size = 2))$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_rolling_cov/","title":"Rolling covariance","text":"<p>Source code</p>"},{"location":"man/pl_rolling_cov/#description","title":"Description","text":"<p>Calculates the rolling covariance between two columns</p>"},{"location":"man/pl_rolling_cov/#usage","title":"Usage","text":"<pre><code>pl_rolling_cov(a, b, window_size, min_periods = NULL, ddof = 1)\n</code></pre>"},{"location":"man/pl_rolling_cov/#arguments","title":"Arguments","text":"<code>a</code>  One column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>b</code>  Another column name or Expr or anything convertible Into via <code>pl$col()</code>.  <code>window_size</code>  int The length of the window  <code>min_periods</code>  NULL or int The number of values in the window that should be non-null before computing a result. If NULL, it will be set equal to window size.  <code>ddof</code>  integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/pl_rolling_cov/#value","title":"Value","text":"<p>Expr for the computed rolling covariance</p>"},{"location":"man/pl_rolling_cov/#examples","title":"Examples","text":"<pre><code>library(polars)\n\nlf = pl$LazyFrame(data.frame(a = c(1, 8, 3), b = c(4, 5, 2)))\nlf$select(pl$rolling_cov(\"a\", \"b\", window_size = 2))$collect()\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 3.5  \u2502\n#&gt; \u2502 7.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_select/","title":"Select from an empty DataFrame","text":"<p>Source code</p>"},{"location":"man/pl_select/#description","title":"Description","text":"<p><code>pl$select(\u2026)</code> is a shorthand for <code>pl$DataFrame(list())$select(\u2026)</code></p>"},{"location":"man/pl_select/#usage","title":"Usage","text":"<pre><code>pl_select(...)\n</code></pre>"},{"location":"man/pl_select/#arguments","title":"Arguments","text":"<code>\u2026</code>  Expressions"},{"location":"man/pl_select/#value","title":"Value","text":"<p>a DataFrame</p>"},{"location":"man/pl_select/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$select(\n  pl$lit(1:4)$alias(\"ints\"),\n  pl$lit(letters[1:4])$alias(\"letters\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 ints \u2506 letters \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 i32  \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 a       \u2502\n#&gt; \u2502 2    \u2506 b       \u2502\n#&gt; \u2502 3    \u2506 c       \u2502\n#&gt; \u2502 4    \u2506 d       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_std/","title":"Standard deviation","text":"<p>Source code</p>"},{"location":"man/pl_std/#description","title":"Description","text":"<p>syntactic sugar for starting a expression with std</p>"},{"location":"man/pl_std/#usage","title":"Usage","text":"<pre><code>pl_std(column, ddof = 1)\n</code></pre>"},{"location":"man/pl_std/#arguments","title":"Arguments","text":"<code>column</code>  Column name.  <code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/pl_std/#value","title":"Value","text":"<p>Expr or Series matching type of input column</p>"},{"location":"man/pl_struct/","title":"struct","text":"<p>Source code</p>"},{"location":"man/pl_struct/#description","title":"Description","text":"<p>Collect several columns into a Series of dtype Struct.</p>"},{"location":"man/pl_struct/#usage","title":"Usage","text":"<pre><code>pl_struct(exprs, eager = FALSE, schema = NULL)\n</code></pre>"},{"location":"man/pl_struct/#arguments","title":"Arguments","text":"<code>exprs</code>  Columns/Expressions to collect into a Struct.  <code>eager</code>  Evaluate immediately.  <code>schema</code>  Optional schema named list that explicitly defines the struct field dtypes. Each name must match a column name wrapped in the struct. Can only be used to cast some or all dtypes, not to change the names. NULL means to include keep columns into the struct by their current DataType. If a column is not included in the schema it is removed from the final struct."},{"location":"man/pl_struct/#details","title":"Details","text":"<p>pl$struct creates Expr or Series of DataType Struct() pl$Struct creates the DataType Struct() In polars a schema is a named list of DataTypes.</p>"},{"location":"man/pl_struct/#a-schema-describes-eg-a-dataframe-more-formally-schemas-consist-of","title":"\u2019 A schema describes e.g.\u00a0a DataFrame. More formally schemas consist of","text":"<p>Fields. A Field is an object describing the name and DataType of a column/Series, but same same. A struct is a DataFrame wrapped into a Series, the DataType is Struct, and each sub-datatype within are Fields. In a dynamic language schema and a Struct (the DataType) are quite the same, except schemas describe DataFrame and Struct\u2019s describe some Series.</p>"},{"location":"man/pl_struct/#value","title":"Value","text":"<p>Eager=FALSE: Expr of Series with dtype Struct | Eager=TRUE: Series with dtype Struct</p>"},{"location":"man/pl_struct/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# isolated expression to wrap all columns in a struct aliased 'my_struct'\npl$struct(pl$all())$alias(\"my_struct\")\n</code></pre> <pre><code>#&gt; polars Expr: *.as_struct().alias(\"my_struct\")\n</code></pre> <pre><code># wrap all column into on column/Series\ndf = pl$DataFrame(\n  int = 1:2,\n  str = c(\"a\", \"b\"),\n  bool = c(TRUE, NA),\n  list = list(1:2, 3L)\n)$select(\n  pl$struct(pl$all())$alias(\"my_struct\")\n)\n\nprint(df)\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 my_struct           \u2502\n#&gt; \u2502 ---                 \u2502\n#&gt; \u2502 struct[4]           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,\"a\",true,[1, 2]} \u2502\n#&gt; \u2502 {2,\"b\",null,[3]}    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>print(df$schema) # returns a schema, a named list containing one element a Struct named my_struct\n</code></pre> <pre><code>#&gt; $my_struct\n#&gt; DataType: Struct(\n#&gt;     [\n#&gt;         Field {\n#&gt;             name: \"int\",\n#&gt;             dtype: Int32,\n#&gt;         },\n#&gt;         Field {\n#&gt;             name: \"str\",\n#&gt;             dtype: String,\n#&gt;         },\n#&gt;         Field {\n#&gt;             name: \"bool\",\n#&gt;             dtype: Boolean,\n#&gt;         },\n#&gt;         Field {\n#&gt;             name: \"list\",\n#&gt;             dtype: List(\n#&gt;                 Int32,\n#&gt;             ),\n#&gt;         },\n#&gt;     ],\n#&gt; )\n</code></pre> <pre><code># wrap two columns in a struct and provide a schema to set all or some DataTypes by name\ne1 = pl$struct(\n  pl$col(c(\"int\", \"str\")),\n  schema = list(int = pl$Int64, str = pl$String)\n)$alias(\"my_struct\")\n# same result as e.g. wrapping the columns in a struct and casting afterwards\ne2 = pl$struct(\n  list(pl$col(\"int\"), pl$col(\"str\"))\n)$cast(\n  pl$Struct(int = pl$Int64, str = pl$String)\n)$alias(\"my_struct\")\n\ndf = pl$DataFrame(\n  int = 1:2,\n  str = c(\"a\", \"b\"),\n  bool = c(TRUE, NA),\n  list = list(1:2, 3L)\n)\n\n# verify equality in R\nidentical(df$select(e1)$to_list(), df$select(e2)$to_list())\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>df$select(e2)\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 my_struct \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 struct[2] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,\"a\"}   \u2502\n#&gt; \u2502 {2,\"b\"}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(e2)$to_data_frame()\n</code></pre> <pre><code>#&gt;                  my_struct\n#&gt; 1 4.94065645841247e-324, a\n#&gt; 2 9.88131291682493e-324, b\n</code></pre>"},{"location":"man/pl_sum/","title":"Compute sum in one or several columns","text":"<p>Source code</p>"},{"location":"man/pl_sum/#description","title":"Description","text":"<p>This is syntactic sugar for <code>pl$col(\u2026)$sum()</code>.</p>"},{"location":"man/pl_sum/#usage","title":"Usage","text":"<pre><code>pl_sum(...)\n</code></pre>"},{"location":"man/pl_sum/#arguments","title":"Arguments","text":"<code>\u2026</code>   One or several elements. Each element can be:  <ul> <li>  Series or Expr  </li> <li>  string, that is parsed as columns  </li> <li>  numeric, that is parsed as literal  </li> </ul>"},{"location":"man/pl_sum/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_sum/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# column as string\npl$DataFrame(iris)$select(pl$sum(\"Petal.Width\"))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Width \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 179.9       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># column as Expr (prefer pl$col(\"Petal.Width\")$sum())\npl$DataFrame(iris)$select(pl$sum(pl$col(\"Petal.Width\")))\n</code></pre> <pre><code>#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Width \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 179.9       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df = pl$DataFrame(a = 1:2, b = 3:4, c = 5:6)\n\n# Compute sum in several columns\ndf$with_columns(pl$sum(\"*\"))\n</code></pre> <pre><code>#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 7   \u2506 11  \u2502\n#&gt; \u2502 3   \u2506 7   \u2506 11  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_sum_horizontal/","title":"Compute the sum rowwise","text":"<p>Source code</p>"},{"location":"man/pl_sum_horizontal/#description","title":"Description","text":"<p>Compute the sum rowwise</p>"},{"location":"man/pl_sum_horizontal/#usage","title":"Usage","text":"<pre><code>pl_sum_horizontal(...)\n</code></pre>"},{"location":"man/pl_sum_horizontal/#arguments","title":"Arguments","text":"<code>\u2026</code>  Columns to concatenate into a single string column. Accepts expressions. Strings are parsed as column names, other non-expression inputs are parsed as literals."},{"location":"man/pl_sum_horizontal/#value","title":"Value","text":"<p>Expr</p>"},{"location":"man/pl_sum_horizontal/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = NA_real_,\n  b = c(3:4, NA_real_, NA_real_),\n  c = c(1:2, NA_real_, -Inf)\n)\ndf$with_columns(\n  pl$sum_horizontal(\"a\", \"b\", \"c\", 2)$alias(\"sum\")\n)\n</code></pre> <pre><code>#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c    \u2506 sum  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 3.0  \u2506 1.0  \u2506 6.0  \u2502\n#&gt; \u2502 null \u2506 4.0  \u2506 2.0  \u2506 8.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 2.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 -inf \u2506 -inf \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/pl_tail/","title":"Get the last <code>n</code> rows.","text":"<p>Source code</p>"},{"location":"man/pl_tail/#description","title":"Description","text":"<p>Get the last <code>n</code> rows.</p>"},{"location":"man/pl_tail/#usage","title":"Usage","text":"<pre><code>pl_tail(column, n = 10)\n</code></pre>"},{"location":"man/pl_tail/#arguments","title":"Arguments","text":"<code>column</code>   if dtype is:  <ul> <li>  Series: Take tail value in <code>Series</code> </li> <li>  str or in: syntactic sugar for <code>pl.col(..).tail()</code> </li> </ul> <code>n</code>  Number of rows to take"},{"location":"man/pl_tail/#value","title":"Value","text":"<p>Expr or tail value of input Series</p>"},{"location":"man/pl_tail/#examples","title":"Examples","text":"<pre><code>library(polars)\n\ndf = pl$DataFrame(\n  a = c(1, 8, 3),\n  b = c(4, 5, 2),\n  c = c(\"foo\", \"bar\", \"foo\")\n)\n\nexpr_tail = pl$head(\"a\")\nprint(expr_tail)\n</code></pre> <pre><code>#&gt; polars Expr: col(\"a\").slice(offset=0, length=10)\n</code></pre> <pre><code>df$select(expr_tail)\n</code></pre> <pre><code>#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 8.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df$select(pl$tail(\"a\", 2))\n</code></pre> <pre><code>#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$tail(df$get_column(\"a\"), 2)\n</code></pre> <pre><code>#&gt; polars Series: shape: (2,)\n#&gt; Series: 'a' [f64]\n#&gt; [\n#&gt;  8.0\n#&gt;  3.0\n#&gt; ]\n</code></pre>"},{"location":"man/pl_threadpool_size/","title":"Get the number of threads in the Polars thread pool.","text":"<p>Source code</p>"},{"location":"man/pl_threadpool_size/#description","title":"Description","text":"<p>The threadpool size can be overridden by setting the <code>POLARS_MAX_THREADS</code> environment variable before process start. (The thread pool is not behind a lock, so it cannot be modified once set). It is strongly recommended not to override this value as it will be set automatically by the engine.</p>"},{"location":"man/pl_threadpool_size/#usage","title":"Usage","text":"<pre><code>pl_threadpool_size()\n</code></pre>"},{"location":"man/pl_threadpool_size/#value","title":"Value","text":"<p>The number of threads</p>"},{"location":"man/pl_threadpool_size/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$threadpool_size()\n</code></pre> <pre><code>#&gt; [1] 4\n</code></pre>"},{"location":"man/pl_using_string_cache/","title":"Check if the global string cache is enabled","text":"<p>Source code</p>"},{"location":"man/pl_using_string_cache/#description","title":"Description","text":"<p>This function simply checks if the global string cache is active.</p>"},{"location":"man/pl_using_string_cache/#usage","title":"Usage","text":"<pre><code>pl_using_string_cache()\n</code></pre>"},{"location":"man/pl_using_string_cache/#value","title":"Value","text":"<p>A boolean</p>"},{"location":"man/pl_using_string_cache/#see-also","title":"See Also","text":"<p><code>pl$with_string_cache</code> <code>pl$enable_enable_cache</code></p>"},{"location":"man/pl_using_string_cache/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$enable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] TRUE\n</code></pre> <pre><code>pl$disable_string_cache()\npl$using_string_cache()\n</code></pre> <pre><code>#&gt; [1] FALSE\n</code></pre>"},{"location":"man/pl_var/","title":"Variance","text":"<p>Source code</p>"},{"location":"man/pl_var/#description","title":"Description","text":"<p>syntactic sugar for starting a expression with var</p>"},{"location":"man/pl_var/#usage","title":"Usage","text":"<pre><code>pl_var(column, ddof = 1)\n</code></pre>"},{"location":"man/pl_var/#arguments","title":"Arguments","text":"<code>column</code>  Column name.  <code>ddof</code>  Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1."},{"location":"man/pl_var/#value","title":"Value","text":"<p>Expr or Series matching type of input column</p>"},{"location":"man/pl_with_string_cache/","title":"Evaluate one or several expressions with global string cache","text":"<p>Source code</p>"},{"location":"man/pl_with_string_cache/#description","title":"Description","text":"<p>This function only temporarily enables the global string cache.</p>"},{"location":"man/pl_with_string_cache/#usage","title":"Usage","text":"<pre><code>pl_with_string_cache(expr)\n</code></pre>"},{"location":"man/pl_with_string_cache/#arguments","title":"Arguments","text":"<code>expr</code>  An Expr to evaluate while the string cache is enabled."},{"location":"man/pl_with_string_cache/#value","title":"Value","text":"<p>return value of expression</p>"},{"location":"man/pl_with_string_cache/#see-also","title":"See Also","text":"<p><code>pl$using_string_cache</code> <code>pl$enable_enable_cache</code></p>"},{"location":"man/pl_with_string_cache/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# activate string cache temporarily when constructing two DataFrame's\npl$with_string_cache({\n  df1 = pl$DataFrame(head(iris, 2))\n  df2 = pl$DataFrame(tail(iris, 2))\n})\n</code></pre> <pre><code>#&gt; shape: (2, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>pl$concat(list(df1, df2))\n</code></pre> <pre><code>#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"man/polars_class_object/","title":"Any polars class object is made of this","text":""},{"location":"man/polars_class_object/#description","title":"Description","text":"<p>One SEXP of Rtype: \"externalptr\" + a class attribute</p>"},{"location":"man/polars_class_object/#details","title":"Details","text":"<ul> <li> <code>object$method()</code> calls are facilitated by a <code>$.ClassName</code>- s3method see \u2018R/after-wrappers.R\u2019  </li> <li>  Code completion is facilitated by <code>.DollarNames.ClassName</code>-s3method see e.g.\u00a0\u2019R/dataframe\\_\\_frame.R\u2019  </li> <li>  Implementation of property-methods as DataFrame_columns() and syntax checking is an extension to <code>$.ClassName</code> See function macro_add_syntax_check_to_class().  </li> </ul>"},{"location":"man/polars_class_object/#value","title":"Value","text":"<p>not applicable</p>"},{"location":"man/polars_class_object/#examples","title":"Examples","text":"<pre><code>library(polars)\n\n# all a polars object is only made of:\nsome_polars_object = pl$DataFrame(iris)\nstr(some_polars_object) # External Pointer tagged with a class attribute.\n</code></pre> <pre><code>#&gt; Class 'RPolarsDataFrame' &lt;externalptr&gt;\n</code></pre> <pre><code># All state is stored on rust side.\n\n# The single exception from the rule is class \"GroupBy\", where objects also have\n# two private attributes \"groupby_input\" and \"maintain_order\".\nstr(pl$DataFrame(iris)$group_by(\"Species\"))\n</code></pre> <pre><code>#&gt; Class 'RPolarsGroupBy' &lt;externalptr&gt; \n#&gt;  - attr(*, \"private\")=List of 2\n#&gt;   ..$ groupby_input :List of 1\n#&gt;   .. ..$ : chr \"Species\"\n#&gt;   ..$ maintain_order: logi FALSE\n</code></pre>"},{"location":"man/polars_info/","title":"Report information of the package","text":"<p>Source code</p>"},{"location":"man/polars_info/#description","title":"Description","text":"<p>This function reports the following information:</p> <ul> <li>  Package versions (the R package version and the dependent Rust Polars version)  </li> <li>  Number of threads used by Polars  </li> <li>  Rust feature flags (See <code>vignette(\u201cinstall\u201d, \u201cpolars\u201d)</code> for details)  </li> </ul>"},{"location":"man/polars_info/#usage","title":"Usage","text":"<pre><code>polars_info()\n</code></pre>"},{"location":"man/polars_info/#value","title":"Value","text":"<p>A list with information of the package</p>"},{"location":"man/polars_info/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npolars_info()\n</code></pre> <pre><code>#&gt; r-polars package version : 0.12.1\n#&gt; rust-polars crate version: 0.36.2\n#&gt; \n#&gt; Thread pool size: 4 \n#&gt; \n#&gt; Features:                         \n#&gt; default              TRUE\n#&gt; full_features        TRUE\n#&gt; simd                 TRUE\n#&gt; sql                  TRUE\n#&gt; rpolars_debug_print FALSE\n</code></pre>"},{"location":"man/polars_options/","title":"Set polars options","text":""},{"location":"man/polars_options/#description","title":"Description","text":"<p>Get and set polars options. See sections \"Value\" and \"Examples\" below for more details.</p>"},{"location":"man/polars_options/#usage","title":"Usage","text":"<pre><code>pl_set_options(\n  strictly_immutable = TRUE,\n  maintain_order = FALSE,\n  do_not_repeat_call = FALSE,\n  debug_polars = FALSE,\n  no_messages = FALSE,\n  rpool_cap = 4\n)\n\npl_reset_options()\n</code></pre>"},{"location":"man/polars_options/#arguments","title":"Arguments","text":"<code>strictly_immutable</code>  Keep polars strictly immutable. Polars/arrow is in general pro \"immutable objects\". Immutability is also classic in R. To mimic the Python-polars API, set this to <code>FALSE.</code> <code>maintain_order</code>  Default for all <code>maintain_order</code> options (present in <code>$group_by()</code> or <code>$unique()</code> for example).  <code>do_not_repeat_call</code>  Do not print the call causing the error in error messages. The default (<code>FALSE</code>) is to show them.  <code>debug_polars</code>  Print additional information to debug Polars.  <code>no_messages</code>  Hide messages.  <code>rpool_cap</code>  The maximum number of R sessions that can be used to process R code in the background. See Details."},{"location":"man/polars_options/#details","title":"Details","text":"<p>All args must be explicitly and fully named.</p> <p><code>pl$options$rpool_active</code> indicates the number of R sessions already spawned in pool. <code>pl$options$rpool_cap</code> indicates the maximum number of new R sessions that can be spawned. Anytime a polars thread worker needs a background R session specifically to run R code embedded in a query via <code>$map_batches(\u2026, in_background = TRUE)</code> or <code>$map_elements(\u2026, in_background = TRUE)</code>, it will obtain any R session idling in rpool, or spawn a new R session (process) and add it to the rpool if <code>rpool_cap</code> is not already reached. If <code>rpool_cap</code> is already reached, the thread worker will sleep until an R session is idling.</p> <p>Background R sessions communicate via polars arrow IPC (series/vectors) or R serialize + shared memory buffers via the rust crate <code>ipc-channel</code>. Multi-process communication has overhead because all data must be serialized/de-serialized and sent via buffers. Using multiple R sessions will likely only give a speed-up in a <code>low io - high cpu</code> scenario. Native polars query syntax runs in threads and have no overhead.</p>"},{"location":"man/polars_options/#value","title":"Value","text":"<p><code>pl$options</code> returns a named list with the value (<code>TRUE</code> or <code>FALSE</code>) of each option.</p> <p><code>pl$set_options()</code> silently modifies the options values.</p> <p><code>pl$reset_options()</code> silently resets the options to their default values.</p>"},{"location":"man/polars_options/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$set_options(maintain_order = TRUE, strictly_immutable = FALSE)\npl$options\n</code></pre> <pre><code>#&gt; $maintain_order\n#&gt; [1] TRUE\n#&gt; \n#&gt; $rpool_cap\n#&gt; [1] 4\n#&gt; \n#&gt; $do_not_repeat_call\n#&gt; [1] FALSE\n#&gt; \n#&gt; $strictly_immutable\n#&gt; [1] FALSE\n#&gt; \n#&gt; $rpool_active\n#&gt; [1] 0\n#&gt; \n#&gt; $debug_polars\n#&gt; [1] FALSE\n#&gt; \n#&gt; $no_messages\n#&gt; [1] FALSE\n</code></pre> <pre><code># these options only accept booleans (TRUE or FALSE)\ntryCatch(\n  pl$set_options(strictly_immutable = 42),\n  error = function(e) print(e)\n)\n</code></pre> <pre><code>#&gt; &lt;RPolarsErr_error: Execution halted with the following contexts\n#&gt;    0: In R: in pl$set_options\n#&gt;    0: During function call [.main()]\n#&gt;    1: The argument [strictly_immutable] caused an error\n#&gt;    2: Got value [Rvalue: 42.0, Rsexp: Doubles, Rclass: [\"numeric\"]]\n#&gt;    3: Input must be TRUE or FALSE\n#&gt; &gt;\n</code></pre> <pre><code># reset options to their default value\npl$reset_options()\n</code></pre>"},{"location":"man/show_all_public_functions/","title":"show all public functions / objects","text":""},{"location":"man/show_all_public_functions/#description","title":"Description","text":"<p>print any object(function, RPolarsDataType) available via <code>pl$</code>.</p>"},{"location":"man/show_all_public_functions/#usage","title":"Usage","text":"<pre><code>pl_show_all_public_functions()\n</code></pre>"},{"location":"man/show_all_public_functions/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$show_all_public_functions()\n</code></pre> <pre><code>#&gt; \n#&gt; \n#&gt;     polars public functions via pl$... ( pl_polars_env environment ):\n#&gt;        [ all ; function ]\n#&gt;        [ all_horizontal ; function ]\n#&gt;        [ any_horizontal ; function ]\n#&gt;        [ approx_n_unique ; function ]\n#&gt;        [ Binary ; RPolarsDataType ]\n#&gt;        [ Boolean ; RPolarsDataType ]\n#&gt;        [ Categorical ; RPolarsDataType ]\n#&gt;        [ class_names ; character ]\n#&gt;        [ coalesce ; function ]\n#&gt;        [ col ; function ]\n#&gt;        [ concat ; function ]\n#&gt;        [ concat_list ; function ]\n#&gt;        [ concat_str ; function ]\n#&gt;        [ corr ; function ]\n#&gt;        [ count ; function ]\n#&gt;        [ cov ; function ]\n#&gt;        [ DataFrame ; function ]\n#&gt;        [ Date ; RPolarsDataType ]\n#&gt;        [ date_range ; function ]\n#&gt;        [ Datetime ; function ]\n#&gt;        [ disable_string_cache ; function ]\n#&gt; \n#&gt;        dtypes ( list ):\n#&gt;           [ Binary ; RPolarsDataType ]\n#&gt;           [ Boolean ; RPolarsDataType ]\n#&gt;           [ Categorical ; RPolarsDataType ]\n#&gt;           [ Date ; RPolarsDataType ]\n#&gt;           [ Datetime ; function ]\n#&gt;           [ Float32 ; RPolarsDataType ]\n#&gt;           [ Float64 ; RPolarsDataType ]\n#&gt;           [ Int16 ; RPolarsDataType ]\n#&gt;           [ Int32 ; RPolarsDataType ]\n#&gt;           [ Int64 ; RPolarsDataType ]\n#&gt;           [ Int8 ; RPolarsDataType ]\n#&gt;           [ List ; function ]\n#&gt;           [ Null ; RPolarsDataType ]\n#&gt;           [ String ; RPolarsDataType ]\n#&gt;           [ Struct ; function ]\n#&gt;           [ Time ; RPolarsDataType ]\n#&gt;           [ UInt16 ; RPolarsDataType ]\n#&gt;           [ UInt32 ; RPolarsDataType ]\n#&gt;           [ UInt64 ; RPolarsDataType ]\n#&gt;           [ UInt8 ; RPolarsDataType ]\n#&gt;           [ Unknown ; RPolarsDataType ]\n#&gt;           [ Utf8 ; RPolarsDataType ]\n#&gt; \n#&gt;        [ element ; function ]\n#&gt;        [ enable_string_cache ; function ]\n#&gt;        [ expr_to_r ; function ]\n#&gt;        [ extra_auto_completion ; function ]\n#&gt;        [ Field ; function ]\n#&gt;        [ first ; function ]\n#&gt;        [ Float32 ; RPolarsDataType ]\n#&gt;        [ Float64 ; RPolarsDataType ]\n#&gt;        [ fold ; function ]\n#&gt;        [ from_arrow ; function ]\n#&gt;        [ get_global_rpool_cap ; function ]\n#&gt;        [ head ; function ]\n#&gt;        [ implode ; function ]\n#&gt;        [ Int16 ; RPolarsDataType ]\n#&gt;        [ Int32 ; RPolarsDataType ]\n#&gt;        [ Int64 ; RPolarsDataType ]\n#&gt;        [ Int8 ; RPolarsDataType ]\n#&gt;        [ is_schema ; function ]\n#&gt;        [ last ; function ]\n#&gt;        [ LazyFrame ; function ]\n#&gt;        [ List ; function ]\n#&gt;        [ lit ; function ]\n#&gt;        [ max ; function ]\n#&gt;        [ max_horizontal ; function ]\n#&gt;        [ mean ; function ]\n#&gt;        [ median ; function ]\n#&gt;        [ mem_address ; function ]\n#&gt;        [ min ; function ]\n#&gt;        [ min_horizontal ; function ]\n#&gt;        [ n_unique ; function ]\n#&gt;        [ Null ; RPolarsDataType ]\n#&gt; \n#&gt;        numeric_dtypes ( list ):\n#&gt;           [ Float32 ; RPolarsDataType ]\n#&gt;           [ Float64 ; RPolarsDataType ]\n#&gt;           [ Int16 ; RPolarsDataType ]\n#&gt;           [ Int32 ; RPolarsDataType ]\n#&gt;           [ Int64 ; RPolarsDataType ]\n#&gt;           [ Int8 ; RPolarsDataType ]\n#&gt; \n#&gt; \n#&gt;        options ( list ):\n#&gt;           [ debug_polars ; logical ]\n#&gt;           [ do_not_repeat_call ; logical ]\n#&gt;           [ maintain_order ; logical ]\n#&gt;           [ no_messages ; logical ]\n#&gt;           [ rpool_active ; numeric ]\n#&gt;           [ rpool_cap ; numeric ]\n#&gt;           [ strictly_immutable ; logical ]\n#&gt; \n#&gt;        [ polars_info ; function ]\n#&gt;        [ PTime ; function ]\n#&gt;        [ raw_list ; function ]\n#&gt;        [ read_csv ; function ]\n#&gt;        [ read_ndjson ; function ]\n#&gt;        [ read_parquet ; function ]\n#&gt;        [ reduce ; function ]\n#&gt;        [ reset_options ; function ]\n#&gt;        [ rolling_corr ; function ]\n#&gt;        [ rolling_cov ; function ]\n#&gt;        [ same_outer_dt ; function ]\n#&gt;        [ scan_csv ; function ]\n#&gt;        [ scan_ipc ; function ]\n#&gt;        [ scan_ndjson ; function ]\n#&gt;        [ scan_parquet ; function ]\n#&gt;        [ select ; function ]\n#&gt;        [ Series ; function ]\n#&gt;        [ set_global_rpool_cap ; function ]\n#&gt;        [ set_options ; function ]\n#&gt;        [ show_all_public_functions ; function ]\n#&gt;        [ show_all_public_methods ; function ]\n#&gt;        [ SQLContext ; function ]\n#&gt;        [ std ; function ]\n#&gt;        [ String ; RPolarsDataType ]\n#&gt;        [ struct ; function ]\n#&gt;        [ Struct ; function ]\n#&gt;        [ sum ; function ]\n#&gt;        [ sum_horizontal ; function ]\n#&gt;        [ tail ; function ]\n#&gt;        [ threadpool_size ; function ]\n#&gt;        [ Time ; RPolarsDataType ]\n#&gt;        [ UInt16 ; RPolarsDataType ]\n#&gt;        [ UInt32 ; RPolarsDataType ]\n#&gt;        [ UInt64 ; RPolarsDataType ]\n#&gt;        [ UInt8 ; RPolarsDataType ]\n#&gt;        [ Unknown ; RPolarsDataType ]\n#&gt;        [ using_string_cache ; function ]\n#&gt;        [ Utf8 ; RPolarsDataType ]\n#&gt;        [ var ; function ]\n#&gt;        [ when ; function ]\n#&gt;        [ with_string_cache ; function ]\n</code></pre>"},{"location":"man/show_all_public_methods/","title":"show all public methods","text":""},{"location":"man/show_all_public_methods/#description","title":"Description","text":"<p>methods are listed by their Class</p>"},{"location":"man/show_all_public_methods/#usage","title":"Usage","text":"<pre><code>pl_show_all_public_methods(class_names = NULL)\n</code></pre>"},{"location":"man/show_all_public_methods/#arguments","title":"Arguments","text":"<code>class_names</code>  character vector of polars class names to show, Default NULL is all."},{"location":"man/show_all_public_methods/#examples","title":"Examples","text":"<pre><code>library(polars)\n\npl$show_all_public_methods()\n</code></pre> <pre><code>#&gt; \n#&gt; \n#&gt;      class methods, access via object$method() ( environment ):\n#&gt; \n#&gt;        RPolarsChainedThen ( environment ):\n#&gt;           [ otherwise ; function ]\n#&gt;           [ when ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsChainedWhen ( environment ):\n#&gt;           [ then ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsDataFrame ( environment ):\n#&gt;           [ clone ; function ]\n#&gt;           [ columns ; setter property function ]\n#&gt;           [ describe ; function ]\n#&gt;           [ drop ; function ]\n#&gt;           [ drop_in_place ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dtype_strings ; function ]\n#&gt;           [ dtypes ; property function ]\n#&gt;           [ equals ; function ]\n#&gt;           [ estimated_size ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ get_column ; function ]\n#&gt;           [ get_columns ; function ]\n#&gt;           [ glimpse ; function ]\n#&gt;           [ group_by ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ height ; property function ]\n#&gt;           [ join ; function ]\n#&gt;           [ join_asof ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ lazy ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ melt ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ n_chunks ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ pivot ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ schema ; property function ]\n#&gt;           [ select ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ to_data_frame ; function ]\n#&gt;           [ to_list ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ transpose ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unnest ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ width ; property function ]\n#&gt;           [ with_columns ; function ]\n#&gt;           [ with_row_count ; function ]\n#&gt;           [ write_csv ; function ]\n#&gt;           [ write_json ; function ]\n#&gt;           [ write_ndjson ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsDataType ( environment ):\n#&gt;           [ eq ; function ]\n#&gt;           [ get_all_simple_type_names ; function ]\n#&gt;           [ get_insides ; function ]\n#&gt;           [ is_temporal ; function ]\n#&gt;           [ ne ; function ]\n#&gt;           [ new ; function ]\n#&gt;           [ new_datetime ; function ]\n#&gt;           [ new_duration ; function ]\n#&gt;           [ new_list ; function ]\n#&gt;           [ new_object ; function ]\n#&gt;           [ new_struct ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ same_outer_datatype ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsExpr ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ agg_groups ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ apply ; function ]\n#&gt;           [ approx_n_unique ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ argsort ; function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ bottom_k ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cum_count ; function ]\n#&gt;           [ cum_max ; function ]\n#&gt;           [ cum_min ; function ]\n#&gt;           [ cum_prod ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ eq_missing ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ floor_div ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gather ; function ]\n#&gt;           [ gather_every ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ implode ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first_distinct ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_last_distinct ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ lit ; function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map ; function ]\n#&gt;           [ map_batches ; function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ meta ; property function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mod ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ neq_missing ; function ]\n#&gt;           [ not ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ over ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ peak_max ; function ]\n#&gt;           [ peak_min ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ replace ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rle ; function ]\n#&gt;           [ rle_id ; function ]\n#&gt;           [ rolling ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ where ; function ]\n#&gt;           [ xor ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsLazyFrame ( environment ):\n#&gt;           [ clone ; function ]\n#&gt;           [ collect ; function ]\n#&gt;           [ collect_in_background ; function ]\n#&gt;           [ columns ; property function ]\n#&gt;           [ describe_optimized_plan ; function ]\n#&gt;           [ describe_plan ; function ]\n#&gt;           [ drop ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dtypes ; property function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ fetch ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ get_optimization_toggle ; function ]\n#&gt;           [ group_by ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ join ; function ]\n#&gt;           [ join_asof ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ melt ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ profile ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ schema ; property function ]\n#&gt;           [ select ; function ]\n#&gt;           [ set_optimization_toggle ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ sink_csv ; function ]\n#&gt;           [ sink_ipc ; function ]\n#&gt;           [ sink_parquet ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unnest ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ width ; property function ]\n#&gt;           [ with_columns ; function ]\n#&gt;           [ with_context ; function ]\n#&gt;           [ with_row_count ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsLazyGroupBy ( environment ):\n#&gt;           [ agg ; function ]\n#&gt;           [ apply ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ ungroup ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsSeries ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ apply ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ chunk_lengths ; function ]\n#&gt;           [ clone ; function ]\n#&gt;           [ compare ; function ]\n#&gt;           [ cum_sum ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dtype ; property function ]\n#&gt;           [ equals ; function ]\n#&gt;           [ expr ; property function ]\n#&gt;           [ flags ; property function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ is_numeric ; function ]\n#&gt;           [ is_sorted ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ list ; property function ]\n#&gt;           [ map_elements ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ print ; function ]\n#&gt;           [ rem ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ to_frame ; function ]\n#&gt;           [ to_lit ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_r_list ; function ]\n#&gt;           [ to_r_vector ; function ]\n#&gt;           [ to_vector ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsSQLContext ( environment ):\n#&gt;           [ execute ; function ]\n#&gt;           [ register ; function ]\n#&gt;           [ register_many ; function ]\n#&gt;           [ tables ; function ]\n#&gt;           [ unregister ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsThen ( environment ):\n#&gt;           [ otherwise ; function ]\n#&gt;           [ when ; function ]\n#&gt; \n#&gt; \n#&gt;        RPolarsWhen ( environment ):\n#&gt;           [ then ; function ]\n</code></pre>"},{"location":"vignettes/install/","title":"installing polars details","text":"<p>The <code>polars</code> package can be installed from R-universe or GitHub.</p> <p>Some platforms can install pre-compiled binaries, and others will need to build from source.</p>"},{"location":"vignettes/install/#how-to-install","title":"How to install","text":""},{"location":"vignettes/install/#from-r-universe-recommended","title":"From R-universe (recommended)","text":"<p>Installing the latest release version.</p> <pre><code>Sys.setenv(NOT_CRAN = \"true\") # Enable installation with pre-built Rust library binary, or enable Rust caching\ninstall.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\")\n</code></pre> <ul> <li>On amd64 architecture Windows and macOS, binary R packages will be     installed.</li> <li>On the other platforms, the pre-built Rust library binary will be     downloaded while building the R source package.</li> <li>If the pre-built Rust library binary is not available, the Rust     library will be built from source (provided that Rust is installed).</li> </ul>"},{"location":"vignettes/install/#from-github-releases","title":"From GitHub releases","text":"<p>Binary packages for the amd64 architecture are available.</p>"},{"location":"vignettes/install/#linux-x86_64","title":"Linux (x86_64)","text":"<pre><code>install.packages(\n  \"https://github.com/pola-rs/r-polars/releases/latest/download/polars__x86_64-pc-linux-gnu.gz\",\n  repos = NULL\n)\n</code></pre>"},{"location":"vignettes/install/#windows-x86_64","title":"Windows (x86_64)","text":"<pre><code>install.packages(\n  \"https://github.com/pola-rs/r-polars/releases/latest/download/polars.zip\",\n  repos = NULL\n)\n</code></pre>"},{"location":"vignettes/install/#macos-x86_64","title":"macOS (x86_64)","text":"<pre><code>install.packages(\n  \"https://github.com/pola-rs/r-polars/releases/latest/download/polars__x86_64-apple-darwin20.tgz\",\n  repos = NULL\n)\n</code></pre>"},{"location":"vignettes/install/#from-github-commits","title":"From GitHub commits","text":"<p>Installing from GitHub commits or GitHub releases can be done using the <code>{remotes}</code> package\u2019s functions.</p> <p>For example, installing the version 0.9.0 from the GitHub release.</p> <pre><code>Sys.setenv(NOT_CRAN = \"true\") # Enable installation with pre-built Rust library binary, or enable Rust caching\nremotes::install_github(\"pola-rs/r-polars@v0.9.0\")\n</code></pre>"},{"location":"vignettes/install/#details-of-installation","title":"Details of installation","text":""},{"location":"vignettes/install/#pre-built-rust-library-binaries","title":"Pre-built Rust library binaries","text":"<p>If one of the following environment variables is set, a pre-built Rust library binary will be tried to be used before building the Rust source.</p> <ul> <li><code>NOT_CRAN=\"true\"</code></li> <li><code>LIBR_POLARS_BUILD=\"false\"</code> (This is prioritized, so if you want to     force a source build, set <code>LIBR_POLARS_BUILD=\"true\"</code>)</li> </ul> <p>By default, the pre-built Rust library binary is downloaded from the URL recorded in <code>tools/lib-sums.tsv</code>. If <code>tools/lib-sums.tsv</code> does not exist, or the corresponding URL does not exist, or the hash of the downloaded file does not match the recorded one, it falls back to building from source.</p> <p>If you want to use a pre-built Rust library binary that exists locally, set the <code>LIBR_POLARS_PATH</code> environment variable to the path to the binary. For example:</p> <pre><code>export LIBR_POLARS_BUILD=\"false\"\nexport LIBR_POLARS_PATH=\"/tmp/libr_polars.a\"\nRscript -e 'install.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\", type = \"source\")'\n</code></pre>"},{"location":"vignettes/install/#rust-build-time-options","title":"Rust build time options","text":"<p>r-polars Rust library has some feature flags that affect the R package features. These flags are set at compile time, and cannot be changed at runtime.</p> <p>The features enabled in the compiled Rust library are shown by the <code>pl$polars_info()</code> function.</p> <pre><code>library(polars)\npl$polars_info()\n#&gt; Warning: pl$polars_info() is deprecated and will be removed in 0.13.0. Use\n#&gt; polars_info() instead.\n#&gt; r-polars package version : 0.12.1\n#&gt; rust-polars crate version: 0.36.2\n#&gt; \n#&gt; Thread pool size: 4 \n#&gt; \n#&gt; Features:                         \n#&gt; default              TRUE\n#&gt; full_features        TRUE\n#&gt; simd                 TRUE\n#&gt; sql                  TRUE\n#&gt; rpolars_debug_print FALSE\n</code></pre> <p>At this time, the following environment variables can be used to change the Rust library build time options.</p> <ul> <li><code>RPOLARS_FULL_FEATURES=\"true\"</code> (Build with nightly feature enabled,     requires Rust nightly toolchain nightly-2023-12-23)</li> <li><code>RPOLARS_PROFILE=\"release-optimized\"</code> (Build with more optimization)</li> </ul>"},{"location":"vignettes/install/#minimum-supported-rust-version-msrv","title":"Minimum Supported Rust Version (MSRV)","text":"<p>The minimum supported Rust version (MSRV) is declared in the <code>src/rust/Cargo.toml</code> file\u2019s <code>package.rust-version</code> field.</p> <p>This MSRV is for the default features. For other features, the nightly Rust toolchain is required.</p>"},{"location":"vignettes/performance/","title":"Optimize <code>polars</code> performance","text":"<p>As highlighted by the DuckDB benchmarks, <code>polars</code> is very efficient to deal with large datasets. Still, one can make <code>polars</code> even faster by following some good practices.</p>"},{"location":"vignettes/performance/#lazy-vs-eager-execution","title":"Lazy vs eager execution","text":""},{"location":"vignettes/performance/#order-of-operations","title":"Order of operations","text":"<p>In the \u201cGet Started\u201d vignette, we mostly used eager execution. This is the classic type of execution in R: write some code, link functions with pipes, run the code and it is executed line by line.</p> <p>Most of the time, this kind of execution is perfectly fine. With datasets of a reasonable size (let\u2019s say up to a few hundreds of thousands of observations and a few dozens columns), we don\u2019t really have to worry about whether our code is optimized to save memory and time.</p> <p>However, when we start dealing with much larger datasets, the order in which functions are applied is extremely important. Indeed, some functions are much more memory intensive than others.</p> <p>For instance, let\u2019s say we have a dataset with 1M observations containing country names and a few numeric columns. We would like to keep just a few of these countries and sort them alphabetically. Here, we have two operations: filtering and sorting. Sorting is much harder to do than filtering. To filter data, we simply check whether each row fills some conditions, but to sort data we have to compare rows between them and rearrange them as we go. If we don\u2019t take this into account, sorting data before filtering it can slow down our pipeline significantly.</p> <pre><code>countries = c(\n  \"France\", \"Germany\", \"United Kingdom\", \"Japan\", \"Columbia\",\n  \"South Korea\", \"Vietnam\", \"South Africa\", \"Senegal\", \"Iran\"\n)\n\nset.seed(123)\ntest = data.frame(\n  country = sample(countries, 1e6, TRUE),\n  x = sample(1:100, 1e6, TRUE),\n  y = sample(1:1000, 1e6, TRUE)\n)\n</code></pre> <pre><code>bench::mark(\n  sort_filter = {\n    tmp = test[order(test$country), ]\n    subset(tmp, country %in% c(\"United Kingdom\", \"Japan\", \"Vietnam\"))\n  },\n  filter_sort = {\n    tmp = subset(test, country %in% c(\"United Kingdom\", \"Japan\", \"Vietnam\"))\n    tmp[order(tmp$country), ]\n  }\n)\n\n#&gt; Warning: Some expressions had a GC in every iteration; so filtering is\n#&gt; disabled.\n#&gt; # A tibble: 2 \u00d7 6\n#&gt;   expression       min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt;  &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 sort_filter    10.4s    10.4s    0.0964    87.2MB    0.193\n#&gt; 2 filter_sort     2.4s     2.4s    0.417     67.1MB    0.835\n</code></pre>"},{"location":"vignettes/performance/#how-does-polars-help","title":"How does <code>polars</code> help?","text":"<p>We have seen that the order in which functions are applied matters a lot. But it already takes a long time to deal with large data, we\u2019re not going to spend even more time trying to optimize our pipeline, right?</p> <p>This is where lazy execution comes into play. The idea is that we write our code as usual, but this time, we won\u2019t apply it directly on a dataset but on a lazy dataset, i.e a dataset that is not loaded in memory yet (in <code>polars</code> terms, these are <code>DataFrame</code>s and <code>LazyFrame</code>s). Once our code is ready, we call <code>collect()</code> at the end of the pipeline. Before executing our code, <code>polars</code> will internally check whether it can be optimized, for example by reordering some operations.</p> <p>Let\u2019s re-use the example above but this time with <code>polars</code> syntax and 10M observations. For the purpose of this vignette, we can create a <code>LazyFrame</code> directly in our session, but if the data was stored in a CSV file for instance, we would have to scan it first with <code>pl$scan_csv()</code>:</p> <pre><code>library(polars)\n\nset.seed(123)\ndf_test = pl$DataFrame(\n  country = sample(countries, 1e7, TRUE),\n  x = sample(1:100, 1e7, TRUE),\n  y = sample(1:1000, 1e7, TRUE)\n)\n\nlf_test = df_test$lazy()\n</code></pre> <p>Now, we can convert the base R code above to a <code>polars</code> query:</p> <pre><code>df_test$\n  sort(pl$col(\"country\"))$\n  filter(\n  pl$col(\"country\")$is_in(pl$lit(c(\"United Kingdom\", \"Japan\", \"Vietnam\")))\n)\n#&gt; shape: (3_000_835, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 country \u2506 x   \u2506 y   \u2502\n#&gt; \u2502 ---     \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 str     \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Japan   \u2506 97  \u2506 7   \u2502\n#&gt; \u2502 Japan   \u2506 96  \u2506 672 \u2502\n#&gt; \u2502 Japan   \u2506 17  \u2506 710 \u2502\n#&gt; \u2502 Japan   \u2506 68  \u2506 41  \u2502\n#&gt; \u2502 \u2026       \u2506 \u2026   \u2506 \u2026   \u2502\n#&gt; \u2502 Vietnam \u2506 62  \u2506 8   \u2502\n#&gt; \u2502 Vietnam \u2506 52  \u2506 988 \u2502\n#&gt; \u2502 Vietnam \u2506 85  \u2506 982 \u2502\n#&gt; \u2502 Vietnam \u2506 74  \u2506 692 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>This works for the <code>DataFrame</code>, that uses eager execution. For the <code>LazyFrame</code>, we can write the same query:</p> <pre><code>lazy_query = lf_test$\n  sort(pl$col(\"country\"))$\n  filter(\n  pl$col(\"country\")$is_in(pl$lit(c(\"United Kingdom\", \"Japan\", \"Vietnam\")))\n)\n\nlazy_query\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; FILTER col(\"country\").is_in([Series]) FROM\n#&gt; SORT BY [col(\"country\")]\n#&gt;   DF [\"country\", \"x\", \"y\"]; PROJECT */3 COLUMNS; SELECTION: \"None\"\n</code></pre> <p>However, this doesn\u2019t do anything to the data until we call <code>collect()</code> at the end. We can now compare the two approaches (in the <code>lazy</code> timing, calling <code>collect()</code> both reads the data and process it, so we include the data loading part in the <code>eager</code> timing as well):</p> <pre><code>bench::mark(\n  eager = df_test$\n    sort(pl$col(\"country\"))$\n    filter(\n      pl$col(\"country\")$is_in(pl$lit(c(\"United Kingdom\", \"Japan\", \"Vietnam\")))\n    ),\n  lazy = lazy_query$collect(),\n  iterations = 10\n)\n\n#&gt; # A tibble: 2 \u00d7 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 eager         1.18s    1.28s     0.754    9.95KB        0\n#&gt; 2 lazy       526.98ms 577.35ms     1.72       864B        0\n</code></pre> <p>On this very simple query, using lazy execution instead of eager execution lead to a 1.7-2.2x decrease in time.</p> <p>So what happened? Under the hood, <code>polars</code> reorganized the query so that it filters rows while reading the csv into memory, and then sorts the remaining data. This can be seen by comparing the original query (<code>describe_plan()</code>) and the optimized query (<code>describe_optimized_plan()</code>):</p> <pre><code>lazy_query$describe_plan()\n#&gt; FILTER col(\"country\").is_in([Series]) FROM\n#&gt; SORT BY [col(\"country\")]\n#&gt;   DF [\"country\", \"x\", \"y\"]; PROJECT */3 COLUMNS; SELECTION: \"None\"\n\nlazy_query$describe_optimized_plan()\n#&gt; SORT BY [col(\"country\")]\n#&gt;   DF [\"country\", \"x\", \"y\"]; PROJECT */3 COLUMNS; SELECTION: \"col(\\\"country\\\").is_in([Series])\"\n</code></pre> <p>Note that the queries must be read from bottom to top, i.e the optimized query is \u201cselect the dataset where the column \u2018country\u2019 matches these values, then sort the data by the values of \u2018country\u2019\u201d.</p>"},{"location":"vignettes/performance/#use-polars-functions","title":"Use <code>polars</code> functions","text":"<p><code>polars</code> comes with a large number of built-in, optimized, basic functions that should cover most aspects of data wrangling. These functions are designed to be very memory efficient. Therefore, using R functions or converting data back and forth between <code>polars</code> and R is discouraged as it can lead to a large decrease in efficiency.</p> <p>Let\u2019s use the test data from the previous section and let\u2019s say that we only want to check whether each country contains \u201cna\u201d. This can be done in (at least) two ways: with the built-in function <code>contains()</code> and with the base R function <code>grepl()</code>. However, using the built-in function is much faster:</p> <pre><code>bench::mark(\n  contains = df_test$with_columns(\n    pl$col(\"country\")$str$contains(\"na\")\n  ),\n  grepl = df_test$with_columns(\n    pl$col(\"country\")$map(\\(s) { # map with a R function\n      grepl(\"na\", s)\n    })\n  ),\n  grepl_nv = df_test$limit(1e6)$with_columns( \n    pl$col(\"country\")$apply(\\(str) {\n      grepl(\"na\", str)\n    }, return_type = pl$Boolean)\n  ),\n  iterations = 10\n)\n\n\n#&gt; Warning: Some expressions had a GC in every iteration; so filtering is\n#&gt; disabled.\n#&gt; # A tibble: 3 \u00d7 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 contains   387.02ms 432.12ms     2.27   401.86KB    0    \n#&gt; 2 grepl         2.06s    2.11s     0.466  114.79MB    0.512\n#&gt; 3 grepl_nv      6.42s    6.52s     0.153    7.65MB   10.3\n</code></pre> <p>Using custom R functions can be useful, but when possible, you should use the functions provided by <code>polars</code>. See the Reference tab for a complete list of functions.</p>"},{"location":"vignettes/performance/#streaming-data","title":"Streaming data","text":"<p>Finally, quoting Polars User Guide:</p> <p>One additional benefit of the lazy API is that it allows queries to be executed in a streaming manner. Instead of processing the data all-at-once Polars can execute the query in batches allowing you to process datasets that are larger-than-memory.</p> <p>To use streaming mode, we can just add <code>streaming = TRUE</code> in <code>collect()</code> (note that this is still an alpha feature):</p> <pre><code>bench::mark(\n  lazy = lazy_query$collect(),\n  lazy_streaming = lazy_query$collect(streaming = TRUE),\n  iterations = 20\n)\n\n#&gt; # A tibble: 2 \u00d7 6\n#&gt;   expression          min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt;     &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 lazy              482ms    546ms      1.85      864B        0\n#&gt; 2 lazy_streaming    292ms    346ms      2.90      864B        0\n</code></pre>"},{"location":"vignettes/polars/","title":"An Introduction to Polars from R","text":""},{"location":"vignettes/polars/#what-is-polars","title":"What is Polars?","text":"<p>Polars is a lightning fast Data Frame library. Its embarrassingly parallel execution, cache efficient algorithms and expressive API makes it perfect for efficient data wrangling, data pipelines, snappy APIs, and much more besides. Polars also supports \u201cstreaming mode\u201d for out-of-memory operations. This allows users to analyze datasets many times larger than RAM.</p> <p>The underlying computation engine is written in Rust and is built on the Apache Arrow columnar memory format. It can be used in Rust or via Python bindings. The polars R-package provides equivalent bindings from R. To help distinguish the different language implementations, we typically use a convention of referring to them with prefixes: rust-polars, py-polars, r-polars, nodejs-polars, etc. But within each language, the relevant library is always just called polars.</p> <p>polars users can expect orders of magnitude(s) improvement compared to dplyr for simple transformations on datasets &gt;500Mb. The automatic Polars optimization framework means that that this speed boost can be even greater for complex queries that chain together many operations. Performance is similar to that of data.table, although polars supports additional functionality via its relationship to the Apache Arrow memory model. For example, it can scan multiple Parquet files and datasets and selectively import random subsets without having to read all of the data.</p> <p>Polars syntax is similar to that of Spark, but the workflow is column-oriented rather than row-oriented. Since R is itself a column-oriented language, this should immediately feel familiar to most R users. Like Spark and modern SQL variants, Polars optimizes queries for memory consumption and speed, so you don\u2019t have to. However, unlike Spark, Polars is natively multithreaded instead of multinoded. This makes (r)polars much simpler to install and can be used as one would any other R package.</p> <p>This R port relies on the excellent extendr package, which is the R equivalent to pyo3+maturin. extendr is very convenient for calling Rust from R, and vice versa, and is what we use to build the polars package. Once built, however, polars has no other dependencies other than R itself. This makes it very fast and lightweight to install, and so polars can immediately be used to tackle your big (or small!) data wrangling tasks.</p>"},{"location":"vignettes/polars/#documentation-and-tutorials","title":"Documentation and tutorials","text":"<p>Users can find detailed documentation for all objects, functions, and methods on the Reference page of this website. This documentation can also be accessed from the R console using the typical <code>?</code> syntax. For example, we will later use the <code>DataFrame()</code> constructor function and apply the <code>group_by()</code> method to a <code>DataFrame</code> object. The documentation for these can be accessed by typing these commands:</p> <pre><code>?DataFrame_class\n?DataFrame_group_by\n</code></pre> <p>The Polars book offers a great introduction to the Polars data frame library, with a very large number of examples in Python and Rust. The syntax and expressions in the <code>polars</code> package for R are (deliberately) as close to the Python implementation as possible, so you can always refer to the polars book for more ideas. Just remember to switch out any \u201c.\u201d (Python) for a \u201c$\u201d (R) when chaining methods. For example, here are two equivalent lines of code for some hypothetical dataset.</p> <pre><code># Python\ndf.group_by(\"id\").mean()\n</code></pre> <pre><code># R\ndf$group_by(\"id\")$mean()\n</code></pre>"},{"location":"vignettes/polars/#series-and-dataframes","title":"<code>Series</code> and <code>DataFrames</code>","text":"<p>In <code>polars</code>, objects of class <code>Series</code> are analogous to R vectors. Objects of class <code>DataFrame</code> are analogous to R data frames. Notice that to avoid collision with classes provided by other packages, the class name of all objects created by <code>polars</code> starts with \u201cRPolars\u201d. For example, a <code>polars</code> <code>DataFrame</code> has the class \u201cRPolarsDataFrame\u201d.</p> <p>To convert R vectors and data frames to Polars <code>Series</code> and <code>DataFrames</code>, we load the library and use constructor functions with the <code>pl$</code> prefix. This prefix is very important, as most of the <code>polars</code> functions are made available via <code>pl$</code>:</p> <pre><code>library(polars)\n\nser = pl$Series((1:5) * 5)\nser\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  5.0\n#&gt;  10.0\n#&gt;  15.0\n#&gt;  20.0\n#&gt;  25.0\n#&gt; ]\n\ndat = pl$DataFrame(mtcars)\ndat\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Both Polars and R are column-orientated. So you can think of <code>DataFrames</code> (data.frames) as being made up of a collection of <code>Series</code> (vectors). In fact, you can create a new Polars <code>DataFrame</code> as a mix of <code>Series</code> and/or regular R vectors.</p> <pre><code>pl$DataFrame(\n  a = pl$Series((1:5) * 5),\n  b = pl$Series(letters[1:5]),\n  c = pl$Series(c(1, 2, 3, 4, 5)),\n  d = c(15, 14, 13, 12, 11),\n  c(5, 4, 3, 2, 1),\n  1:5\n)\n#&gt; shape: (5, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b   \u2506 c   \u2506 d    \u2506 new_column \u2506 new_column_1 \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 --- \u2506 ---  \u2506 ---        \u2506 ---          \u2502\n#&gt; \u2502 f64  \u2506 str \u2506 f64 \u2506 f64  \u2506 f64        \u2506 i32          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.0  \u2506 a   \u2506 1.0 \u2506 15.0 \u2506 5.0        \u2506 1            \u2502\n#&gt; \u2502 10.0 \u2506 b   \u2506 2.0 \u2506 14.0 \u2506 4.0        \u2506 2            \u2502\n#&gt; \u2502 15.0 \u2506 c   \u2506 3.0 \u2506 13.0 \u2506 3.0        \u2506 3            \u2502\n#&gt; \u2502 20.0 \u2506 d   \u2506 4.0 \u2506 12.0 \u2506 2.0        \u2506 4            \u2502\n#&gt; \u2502 25.0 \u2506 e   \u2506 5.0 \u2506 11.0 \u2506 1.0        \u2506 5            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>Series</code> and <code>DataFrame</code> can be operated on using many standard R functions. For example:</p> <pre><code># Series\nlength(ser)\n#&gt; [1] 5\n\nmax(ser)\n#&gt; [1] 25\n\n# DataFrame\ndat[c(1:3, 12), c(\"mpg\", \"hp\")]\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 22.8 \u2506 93.0  \u2502\n#&gt; \u2502 16.4 \u2506 180.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nnames(dat)\n#&gt;  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n#&gt; [11] \"carb\"\n\ndim(dat)\n#&gt; [1] 32 11\n\nhead(dat, n = 2)\n#&gt; shape: (2, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/polars/#methods-and-pipelines","title":"Methods and pipelines","text":"<p>Although some simple R functions work out of the box on polars objects, the full power of Polars is realized via methods. Polars methods are accessed using the <code>$</code> syntax. For example, to convert Polars <code>Series</code> and <code>DataFrames</code> back to standard R objects, we use the <code>$to_vector()</code> and <code>$to_data_frame()</code> methods:</p> <pre><code>ser$to_vector()\n#&gt; [1]  5 10 15 20 25\n</code></pre> <p>There are numerous methods designed to accomplish various tasks:</p> <pre><code>ser$max()\n#&gt; [1] 25\n\ndat$slice(offset = 2, length = 3)\n#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>One advantage of using methods is that many more operations are possible on Polars objects using methods than through base R functions.</p> <p>A second advantage is Methods Chaining, a core part of the Polars workflow. If you are coming from one of the other popular data wrangling libraries in R, then you probably already have an innate sense of what this means. For instance,</p> <ul> <li>In dplyr we use a pipe operator,     e.g.\u00a0<code>dat |&gt; filter(...) |&gt; select(...)</code></li> <li>In data.table we use its indexing syntax,     e.g.\u00a0<code>DT[i, j, by][...]</code></li> <li>Etc.</li> </ul> <p>In polars our method chaining syntax takes the form <code>object$m1()$m2()</code>, where <code>object</code> is our data object, and <code>m1()</code> and <code>m2()</code> are appropriate methods, like subsetting or aggregation expressions.</p> <p>This might all seem a little abstract, so let\u2019s walk through some quick examples to help make things concrete. We continue with the <code>mtcars</code> dataset that we coerced to a <code>DataFrame</code> in the introduction.[1]</p> <p>To start, say we compute the maximum value in each column. We can use the <code>max()</code> method:</p> <pre><code>dat$max()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 33.9 \u2506 8.0 \u2506 472.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Now, we first use the <code>$tail</code> method to select the last 10 rows of the dataset, and then use the <code>$max</code> method to compute the maximums in those 10 rows:</p> <pre><code>dat$tail(10)$max()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 30.4 \u2506 8.0 \u2506 400.0 \u2506 335.0 \u2506 \u2026 \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Finally, we convert the result to a standard R data frame:</p> <pre><code>dat$tail(10)$max()$to_data_frame()\n#&gt;    mpg cyl disp  hp drat    wt qsec vs am gear carb\n#&gt; 1 30.4   8  400 335 4.43 3.845 18.9  1  1    5    8\n</code></pre> <p>Below, we will introduce several other methods, including <code>$select</code>, <code>$filter</code>, and <code>$group_by</code> which allow us to do powerful data manipulations easily. To give you a small taste, we now take group-wise means:</p> <pre><code>dat$group_by(\"cyl\")$mean()\n#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg       \u2506 disp       \u2506 hp         \u2506 \u2026 \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb     \u2502\n#&gt; \u2502 --- \u2506 ---       \u2506 ---        \u2506 ---        \u2506   \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64       \u2506 f64        \u2506 f64        \u2506   \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0 \u2506 15.1      \u2506 353.1      \u2506 209.214286 \u2506 \u2026 \u2506 0.0      \u2506 0.142857 \u2506 3.285714 \u2506 3.5      \u2502\n#&gt; \u2502 4.0 \u2506 26.663636 \u2506 105.136364 \u2506 82.636364  \u2506 \u2026 \u2506 0.909091 \u2506 0.727273 \u2506 4.090909 \u2506 1.545455 \u2502\n#&gt; \u2502 6.0 \u2506 19.742857 \u2506 183.314286 \u2506 122.285714 \u2506 \u2026 \u2506 0.571429 \u2506 0.428571 \u2506 3.857143 \u2506 3.428571 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/polars/#subset","title":"Subset","text":"<p>We can now start chaining together various methods (expressions) to manipulate it in different ways. For example, we can subset the data by rows (<code>filter()</code>) and also columns (<code>select()</code>):</p> <pre><code>dat$filter(pl$col(\"cyl\") == 6)\n#&gt; shape: (7, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 225.0 \u2506 105.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 19.2 \u2506 6.0 \u2506 167.6 \u2506 123.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 167.6 \u2506 123.0 \u2506 \u2026 \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndat$filter(pl$col(\"cyl\") == 6 &amp; pl$col(\"am\") == 1)\n#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndat$select(pl$col(c(\"mpg\", \"hp\")))\n#&gt; shape: (32, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 22.8 \u2506 93.0  \u2502\n#&gt; \u2502 21.4 \u2506 110.0 \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026     \u2502\n#&gt; \u2502 15.8 \u2506 264.0 \u2502\n#&gt; \u2502 19.7 \u2506 175.0 \u2502\n#&gt; \u2502 15.0 \u2506 335.0 \u2502\n#&gt; \u2502 21.4 \u2506 109.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Of course, we can chain those methods to create a pipeline:</p> <pre><code>dat$filter(\n  pl$col(\"cyl\") == 6\n)$select(\n  pl$col(c(\"mpg\", \"hp\", \"cyl\"))\n)\n#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2506 cyl \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.4 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 18.1 \u2506 105.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.2 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 17.8 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.7 \u2506 175.0 \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/polars/#aggregate-and-modify","title":"Aggregate and modify","text":"<p>The <code>select()</code> method that we introduced above also supports data modification, so you can simultaneously transform it while you are subsetting. However, the result will exclude any columns that weren\u2019t specified as part of the expression. To modify or add some columns\u2014whilst preserving all others in the dataset\u2014it is therefore better to use the <code>with_columns()</code> method. This next code chunk is equivalent to <code>mtcars |&gt; dplyr::mutate(sum_mpg=sum(mpg), sum_hp=sum(hp), .by = cyl)</code>.</p> <pre><code># Add the grouped sums of some selected columns.\ndat$with_columns(\n  pl$col(\"mpg\")$sum()$over(\"cyl\")$alias(\"sum_mpg\"),\n  pl$col(\"hp\")$sum()$over(\"cyl\")$alias(\"sum_hp\")\n)\n#&gt; shape: (32, 13)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 gear \u2506 carb \u2506 sum_mpg \u2506 sum_hp \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 ---  \u2506 ---  \u2506 ---     \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64  \u2506 f64  \u2506 f64     \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 4.0  \u2506 1.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 3.0  \u2506 1.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026       \u2506 \u2026      \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 5.0  \u2506 4.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 5.0  \u2506 6.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 5.0  \u2506 8.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 4.0  \u2506 2.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>For what it\u2019s worth, the previous query could have been written more concisely as:</p> <pre><code>dat$with_columns(\n  pl$col(c(\"mpg\", \"hp\"))$sum()$over(\"cyl\")$name$prefix(\"sum_\")\n)\n#&gt; shape: (32, 13)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 \u2026 \u2506 gear \u2506 carb \u2506 sum_mpg \u2506 sum_hp \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506   \u2506 ---  \u2506 ---  \u2506 ---     \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506   \u2506 f64  \u2506 f64  \u2506 f64     \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 \u2026 \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 \u2026 \u2506 4.0  \u2506 1.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 \u2026 \u2506 3.0  \u2506 1.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026   \u2506 \u2026     \u2506 \u2026     \u2506 \u2026 \u2506 \u2026    \u2506 \u2026    \u2506 \u2026       \u2506 \u2026      \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 \u2026 \u2506 5.0  \u2506 4.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 \u2026 \u2506 5.0  \u2506 6.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 \u2026 \u2506 5.0  \u2506 8.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 \u2026 \u2506 4.0  \u2506 2.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Similarly, here\u2019s how we could have aggregated (i.e., collapsed) the dataset by groups instead of modifying them. We need simply invoke the <code>group_by()</code> and <code>agg()</code> methods.</p> <pre><code>dat$group_by(\n  \"cyl\",\n  maintain_order = TRUE\n)$agg(\n  pl$col(c(\"mpg\", \"hp\"))$sum()\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg   \u2506 hp     \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 f64   \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 138.2 \u2506 856.0  \u2502\n#&gt; \u2502 4.0 \u2506 293.3 \u2506 909.0  \u2502\n#&gt; \u2502 8.0 \u2506 211.4 \u2506 2929.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>(arg <code>maintain_order = TRUE</code> is optional, since polars doesn\u2019t sort the results of grouped operations by default. This is similar to what data.table does and is also true for newer versions of dplyr.)</p> <p>The same principles of method chaining can be combined very flexibly to group by multiple variables and aggregation types.</p> <pre><code>dat$group_by(\n  \"cyl\",\n  pl$col(\"am\")$cast(pl$Boolean)$alias(\"manual\")\n)$agg(\n  pl$col(\"mpg\")$mean()$alias(\"mean_mpg\"),\n  pl$col(\"hp\")$median()$alias(\"med_hp\")\n)\n#&gt; shape: (6, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 manual \u2506 mean_mpg  \u2506 med_hp \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 ---       \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 bool   \u2506 f64       \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 false  \u2506 19.125    \u2506 116.5  \u2502\n#&gt; \u2502 4.0 \u2506 false  \u2506 22.9      \u2506 95.0   \u2502\n#&gt; \u2502 8.0 \u2506 true   \u2506 15.4      \u2506 299.5  \u2502\n#&gt; \u2502 6.0 \u2506 true   \u2506 20.566667 \u2506 110.0  \u2502\n#&gt; \u2502 4.0 \u2506 true   \u2506 28.075    \u2506 78.5   \u2502\n#&gt; \u2502 8.0 \u2506 false  \u2506 15.05     \u2506 180.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Note that we used the <code>cast</code> method to convert the data type of the <code>am</code> column. See the section below for more details on data types.</p>"},{"location":"vignettes/polars/#reshape","title":"Reshape","text":"<p>Polars supports data reshaping, going from both long to wide (\u201cpivot\u201d) and wide to long (\u201cmelt\u201d). Let\u2019s switch to the <code>Indometh</code> dataset to demonstrate some basic examples. Note that the data are currently in long format.</p> <pre><code>indo = pl$DataFrame(Indometh)\n</code></pre> <p>To go from long to wide, we use the <code>pivot</code> method. Here we pivot the data so that every subject takes its own column.</p> <pre><code>indo_wide = indo$pivot(values = \"conc\", index = \"time\", columns = \"Subject\")\n</code></pre> <p>To go from wide to long, we use the <code>melt</code> method.</p> <pre><code># indo_wide$melt(id_vars = \"time\") # default column names are \"variable\" and \"value\"\nindo_wide$melt(id_vars = \"time\", variable_name = \"subject\", value_name = \"conc\")\n#&gt; shape: (66, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 time \u2506 subject \u2506 conc \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 str     \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.25 \u2506 1       \u2506 1.5  \u2502\n#&gt; \u2502 0.5  \u2506 1       \u2506 0.94 \u2502\n#&gt; \u2502 0.75 \u2506 1       \u2506 0.78 \u2502\n#&gt; \u2502 1.0  \u2506 1       \u2506 0.48 \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026       \u2506 \u2026    \u2502\n#&gt; \u2502 4.0  \u2506 6       \u2506 0.17 \u2502\n#&gt; \u2502 5.0  \u2506 6       \u2506 0.13 \u2502\n#&gt; \u2502 6.0  \u2506 6       \u2506 0.1  \u2502\n#&gt; \u2502 8.0  \u2506 6       \u2506 0.09 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Basic functionality aside, it should be noted that <code>pivot</code> can perform aggregations as part of the reshaping operation. This is useful when you have multiple observations per ID variable that need to be collapsed into unique values. The aggregating functions can be arbitrarily complex, but let\u2019s consider a relatively simple example using our <code>dat</code> (\u201cmtcars\u201d) DataFrame from earlier: what is the median MPG value (<code>mpg</code>) across cylinders (<code>cyl</code>), cut by different combinations of transmission type (<code>am</code>) and engine shape (<code>vs</code>)?</p> <pre><code>dat$pivot(\n  values = \"mpg\",\n  index = c(\"am\", \"vs\"),\n  columns = \"cyl\",\n  aggregate_fun = \"median\" # aggregating function\n)\n#&gt; shape: (4, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 am  \u2506 vs  \u2506 6.0   \u2506 4.0  \u2506 8.0  \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---   \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64   \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 0.0 \u2506 21.0  \u2506 26.0 \u2506 15.4 \u2502\n#&gt; \u2502 1.0 \u2506 1.0 \u2506 null  \u2506 30.4 \u2506 null \u2502\n#&gt; \u2502 0.0 \u2506 1.0 \u2506 18.65 \u2506 22.8 \u2506 null \u2502\n#&gt; \u2502 0.0 \u2506 0.0 \u2506 null  \u2506 null \u2506 15.2 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Here, <code>\"median\"</code> is a convenience string that is equivalent to the more verbose <code>pl$element()$median()</code>. Other convenience strings include \u201cfirst\u201d, \u201clast\u201d, \u201cmin\u201d, \u201cmax\u201d, \u201cmean\u201d, \u201csum\u201d, and \u201ccount\u201d.</p>"},{"location":"vignettes/polars/#join","title":"Join","text":"<p>As a final example of how polars can be used for standard data wrangling tasks, let\u2019s implement a (left) join. For this example, we\u2019ll borrow some datasets from the nycflights13 package.</p> <pre><code>data(\"flights\", \"planes\", package = \"nycflights13\")\nflights = pl$DataFrame(flights)\nplanes = pl$DataFrame(planes)\n\nflights$join(\n  planes,\n  on = \"tailnum\",\n  how = \"left\"\n)\n#&gt; shape: (336_776, 27)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 year \u2506 month \u2506 day \u2506 dep_time \u2506 \u2026 \u2506 engines \u2506 seats \u2506 speed \u2506 engine    \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2506 ---      \u2506   \u2506 ---     \u2506 ---   \u2506 ---   \u2506 ---       \u2502\n#&gt; \u2502 i32  \u2506 i32   \u2506 i32 \u2506 i32      \u2506   \u2506 i32     \u2506 i32   \u2506 i32   \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 517      \u2506 \u2026 \u2506 2       \u2506 149   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 533      \u2506 \u2026 \u2506 2       \u2506 149   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 542      \u2506 \u2026 \u2506 2       \u2506 178   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 544      \u2506 \u2026 \u2506 2       \u2506 200   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 \u2026    \u2506 \u2026     \u2506 \u2026   \u2506 \u2026        \u2506 \u2026 \u2506 \u2026       \u2506 \u2026     \u2506 \u2026     \u2506 \u2026         \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 \u2026 \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 \u2026 \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 \u2026 \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 \u2026 \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>More information on the polars joining method can be found in the reference manual.</p> <p>The package supports many other data manipulation operations, which we won\u2019t cover here. Hopefully, you will already have a sense of the key syntax features. We now turn to another core idea of the Polars ecosystem: lazy execution.</p>"},{"location":"vignettes/polars/#lazy-execution","title":"Lazy execution","text":"<p>While the \u201ceager\u201d execution engine of polars works perfectly well\u2014as evidenced by all of the previous examples\u2014to get the most out of the package you need to go lazy. Lazy execution enables several benefits, but the most important is that it improves performance. Delaying execution until the last possible moment allows Polars to apply automatic optimization to every query. Let\u2019s take a quick look.</p> <p>To create a so-called \u201cLazyFrame\u201d from an existing object in memory, we can invoke the <code>lazy()</code> constructor.</p> <pre><code>ldat = dat$lazy()\nldat\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <p>Now consider what happens when we run our subsetting query from earlier on this LazyFrame.</p> <pre><code>subset_query = ldat$filter(\n  pl$col(\"cyl\") == 6\n)$select(\n  pl$col(c(\"mpg\", \"hp\", \"cyl\"))\n)\n\nsubset_query\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;  SELECT [col(\"mpg\"), col(\"hp\"), col(\"cyl\")] FROM\n#&gt;   FILTER [(col(\"cyl\")) == (6.0)] FROM\n#&gt; \n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <p>Right now we only have a tree of instructions. But underneath the hood, Polars has already worked out a more optimized version of the query. We can view this optimized plan this by requesting it.</p> <pre><code>subset_query$describe_optimized_plan()\n#&gt; FAST_PROJECT: [mpg, hp, cyl]\n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT 3/11 COLUMNS; SELECTION: \"[(col(\\\"cyl\\\")) == (6.0)]\"\n</code></pre> <p>Here we see a simple, but surprisingly effective component in query optimization: projection. Changing the order in which our subsetting operations occurs\u2014in this case, subsetting on columns first\u2014reduces the memory overhead of the overall query and leads to a downstream speedup. Of course, you would hardly notice a difference for this small dataset. But the same principles carry over to much bigger datasets and more complex queries.</p> <p>To actually execute the plan, we just need to invoke the <code>collect()</code> method. This should feel very familiar if you have previously used other lazy execution engines like those provided by arrow or dbplyr.</p> <pre><code>subset_query$collect()\n#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2506 cyl \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.4 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 18.1 \u2506 105.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.2 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 17.8 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.7 \u2506 175.0 \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/polars/#data-import","title":"Data import","text":"<p>polars supports data import of both CSV and Parquet files formats. Here we demonstrate using the <code>airquality</code> dataset that also comes bundled with base R.</p> <pre><code>write.csv(airquality, \"airquality.csv\")\n\npl$read_csv(\"airquality.csv\")\n#&gt; shape: (153, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2506 Ozone \u2506 Solar.R \u2506 Wind \u2506 Temp \u2506 Month \u2506 Day \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---     \u2506 ---  \u2506 ---  \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 i64 \u2506 str   \u2506 str     \u2506 f64  \u2506 i64  \u2506 i64   \u2506 i64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 41    \u2506 190     \u2506 7.4  \u2506 67   \u2506 5     \u2506 1   \u2502\n#&gt; \u2502 2   \u2506 36    \u2506 118     \u2506 8.0  \u2506 72   \u2506 5     \u2506 2   \u2502\n#&gt; \u2502 3   \u2506 12    \u2506 149     \u2506 12.6 \u2506 74   \u2506 5     \u2506 3   \u2502\n#&gt; \u2502 4   \u2506 18    \u2506 313     \u2506 11.5 \u2506 62   \u2506 5     \u2506 4   \u2502\n#&gt; \u2502 \u2026   \u2506 \u2026     \u2506 \u2026       \u2506 \u2026    \u2506 \u2026    \u2506 \u2026     \u2506 \u2026   \u2502\n#&gt; \u2502 150 \u2506 NA    \u2506 145     \u2506 13.2 \u2506 77   \u2506 9     \u2506 27  \u2502\n#&gt; \u2502 151 \u2506 14    \u2506 191     \u2506 14.3 \u2506 75   \u2506 9     \u2506 28  \u2502\n#&gt; \u2502 152 \u2506 18    \u2506 131     \u2506 8.0  \u2506 76   \u2506 9     \u2506 29  \u2502\n#&gt; \u2502 153 \u2506 20    \u2506 223     \u2506 11.5 \u2506 68   \u2506 9     \u2506 30  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Again, however, the package works best if we take the lazy approach.</p> <pre><code>pl$scan_csv(\"airquality.csv\")\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt; \n#&gt;   Csv SCAN airquality.csv\n#&gt;   PROJECT */7 COLUMNS\n</code></pre> <p>We could obviously append a set of query operators to the above LazyFrame and then collect the results. However, this workflow is even better suited to Parquet files, since we can leverage their efficient storage format on disk. Let\u2019s see an example.</p> <pre><code>library(arrow)\n#&gt; \n#&gt; Attaching package: 'arrow'\n#&gt; The following object is masked from 'package:utils':\n#&gt; \n#&gt;     timestamp\n\nwrite_parquet(airquality, \"airquality.parquet\")\n\n# aq = read_parquet(\"airquality.parquet) # eager version (okay)\naq = pl$scan_parquet(\"airquality.parquet\") # lazy version (better)\n\naq$filter(\n  pl$col(\"Month\") &lt;= 6\n)$group_by(\n  \"Month\"\n)$agg(\n  pl$col(c(\"Ozone\", \"Temp\"))$mean()\n)$collect()\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Month \u2506 Ozone     \u2506 Temp      \u2502\n#&gt; \u2502 ---   \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 i32   \u2506 f64       \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5     \u2506 23.615385 \u2506 65.548387 \u2502\n#&gt; \u2502 6     \u2506 29.444444 \u2506 79.1      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Finally, we can read/scan multiple files in the same directory through pattern globbing.</p> <pre><code>dir.create(\"airquality-ds\")\nwrite_dataset(airquality, \"airquality-ds\", partitioning = \"Month\")\n\n# Use pattern globbing to scan all parquet files in the folder\naq2 = pl$scan_parquet(\"airquality-ds/**/*.parquet\")\n\n# Just print the first two rows.\naq2$limit(2)$collect()\n#&gt; shape: (2, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Ozone \u2506 Solar.R \u2506 Wind \u2506 Temp \u2506 Day \u2506 Month \u2502\n#&gt; \u2502 ---   \u2506 ---     \u2506 ---  \u2506 ---  \u2506 --- \u2506 ---   \u2502\n#&gt; \u2502 i32   \u2506 i32     \u2506 f64  \u2506 i32  \u2506 i32 \u2506 i64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 41    \u2506 190     \u2506 7.4  \u2506 67   \u2506 1   \u2506 5     \u2502\n#&gt; \u2502 36    \u2506 118     \u2506 8.0  \u2506 72   \u2506 2   \u2506 5     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Before continuing, don\u2019t forget to clean up by removing the newly created temp files and directory on disk.</p> <pre><code>file.remove(c(\"airquality.csv\", \"airquality.parquet\"))\n#&gt; [1] TRUE TRUE\nunlink(\"airquality-ds\", recursive = TRUE)\n</code></pre>"},{"location":"vignettes/polars/#execute-r-functions-within-a-polars-query","title":"Execute R functions within a Polars query","text":"<p>It is possible to mix R code with Polars by passing R functions to polars. This can unlock a lot of flexibility, but note that it can inhibit performance. R functions are typically slower, so we recommend using native Polars functions and expressions wherever possible.</p> <pre><code>pl$DataFrame(iris)$select(\n  pl$col(\"Sepal.Length\")$map_batches(\\(s) { # map with a R function\n    x = s$to_vector() # convert from Polars Series to a native R vector\n    x[x &gt;= 5] = 10\n    x[1:10] # if return is R vector, it will automatically be converted to Polars Series again\n  })\n)$to_data_frame()\n#&gt;    Sepal.Length\n#&gt; 1          10.0\n#&gt; 2           4.9\n#&gt; 3           4.7\n#&gt; 4           4.6\n#&gt; 5          10.0\n#&gt; 6          10.0\n#&gt; 7           4.6\n#&gt; 8          10.0\n#&gt; 9           4.4\n#&gt; 10          4.9\n</code></pre>"},{"location":"vignettes/polars/#data-types","title":"Data types","text":"<p>Polars is strongly typed and new types can be created with the <code>dtypes</code> constructor. For example:</p> <pre><code>pl$dtypes$Float64\n#&gt; DataType: Float64\n</code></pre> <p>The full list of valid Polars types can be found by typing <code>pl$dtypes</code> into your R console. These include Boolean, Float32(64), Int32(64), Utf8, Categorical, Date, etc. Note that some type names differ from what they are called in R (e.g., Boolean in Polars is equivalent to <code>logical()</code> in R). This might occasionally require you to look up a specific type. But the good news is that polars generally does a good job of inferring types automatically.</p> <p>[1] Similar to how (most) data.table operations are limited to objects of class <code>data.table</code>, we can only perform polars operations on objects that have been converted to an appropriate polars class. Later on, we\u2019ll see how to read data from disk directly in Polars format.</p>"},{"location":"vignettes/userguide/","title":"Polars - User Guide for R","text":"<p>The Polars User Guide is a detailed tutorial about the Polars DataFrame library. Its goal is to introduce you to Polars by going through examples and comparing it to other solutions. Some design choices are introduced there. The guide also introduces you to optimal usage of Polars. The Polars User Guide is available at this link:</p> <p>https://pola-rs.github.io/polars-book/user-guide/</p> <p>Currently, the User Guide includes code examples in Python and Rust. This page complements the guide with examples in R. The R examples are not complete yet; when they are complete, our goal is to merge them into the main User Guide. If you want to help, please submit a pull request to the R polars Github repository.</p> <p>The current page works as a reference document, for side-by-side comparisons with the Python and Rust examples in the main User Guide.</p>"},{"location":"vignettes/userguide/#introduction","title":"Introduction","text":"<pre><code>library(polars)\n</code></pre>"},{"location":"vignettes/userguide/#getting-started","title":"Getting started","text":"<pre><code>df = pl$read_csv(\"https://j.mp/iriscsv\")\n</code></pre> <pre><code>df$filter(pl$col(\"sepal_length\") &gt; 5)$\n  group_by(\"species\", maintain_order = TRUE)$\n  agg(pl$all()$sum())\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 species    \u2506 sepal_length \u2506 sepal_width \u2506 petal_length \u2506 petal_width \u2502\n#&gt; \u2502 ---        \u2506 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 str        \u2506 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2506 116.9        \u2506 81.7        \u2506 33.2         \u2506 6.1         \u2502\n#&gt; \u2502 versicolor \u2506 281.9        \u2506 131.8       \u2506 202.9        \u2506 63.3        \u2502\n#&gt; \u2502 virginica  \u2506 324.5        \u2506 146.2       \u2506 273.1        \u2506 99.6        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$\n  lazy()$\n  filter(pl$col(\"sepal_length\") &gt; 5)$\n  group_by(\"species\", maintain_order = TRUE)$\n  agg(pl$all()$sum())$\n  collect()\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 species    \u2506 sepal_length \u2506 sepal_width \u2506 petal_length \u2506 petal_width \u2502\n#&gt; \u2502 ---        \u2506 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 str        \u2506 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2506 116.9        \u2506 81.7        \u2506 33.2         \u2506 6.1         \u2502\n#&gt; \u2502 versicolor \u2506 281.9        \u2506 131.8       \u2506 202.9        \u2506 63.3        \u2502\n#&gt; \u2502 virginica  \u2506 324.5        \u2506 146.2       \u2506 273.1        \u2506 99.6        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide/#polars-quick-exploration-guide","title":"Polars quick exploration guide","text":"<pre><code>series = pl$Series(c(1, 2, 3, 4, 5))\nseries\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  2.0\n#&gt;  3.0\n#&gt;  4.0\n#&gt;  5.0\n#&gt; ]\n\ndf = pl$DataFrame(\n  \"integer\" = c(1, 2, 3),\n  \"date\" = as.Date(c(\"2022-1-1\", \"2022-1-2\", \"2022-1-3\")),\n  \"float\" = c(4.0, 5.0, 6.0))\ndf\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 integer \u2506 date       \u2506 float \u2502\n#&gt; \u2502 ---     \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 f64     \u2506 date       \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0     \u2506 2022-01-01 \u2506 4.0   \u2502\n#&gt; \u2502 2.0     \u2506 2022-01-02 \u2506 5.0   \u2502\n#&gt; \u2502 3.0     \u2506 2022-01-03 \u2506 6.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# df$write_csv('output.csv')\n# df_csv_with_dates = pl$read_csv(\"output.csv\", parse_dates=True)\n# print(df_csv_with_dates)\n\n# dataframe$write_json('output.json')\n# df_json = pl$read_json(\"output.json\")\n# print(df_json)\n\n# dataframe$write_parquet('output.parquet')\n# df_parquet = pl$read_parquet(\"output.parquet\")\n# print(df_parquet)\n\ndf = pl$DataFrame(\n  \"a\" = as.numeric(0:7),\n  \"b\" = runif(8),\n  \"c\" = as.Date(sprintf(\"2022-12-%s\", 1:8)),\n  \"d\" = c(1, 2.0, NaN, NaN, 0, -5, -42, NA)\n)\ndf$head(5)\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d   \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.384548 \u2506 2022-12-01 \u2506 1.0 \u2502\n#&gt; \u2502 1.0 \u2506 0.978281 \u2506 2022-12-02 \u2506 2.0 \u2502\n#&gt; \u2502 2.0 \u2506 0.311261 \u2506 2022-12-03 \u2506 NaN \u2502\n#&gt; \u2502 3.0 \u2506 0.345881 \u2506 2022-12-04 \u2506 NaN \u2502\n#&gt; \u2502 4.0 \u2506 0.277752 \u2506 2022-12-05 \u2506 0.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$tail(5)\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d     \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2506 0.345881 \u2506 2022-12-04 \u2506 NaN   \u2502\n#&gt; \u2502 4.0 \u2506 0.277752 \u2506 2022-12-05 \u2506 0.0   \u2502\n#&gt; \u2502 5.0 \u2506 0.80234  \u2506 2022-12-06 \u2506 -5.0  \u2502\n#&gt; \u2502 6.0 \u2506 0.637982 \u2506 2022-12-07 \u2506 -42.0 \u2502\n#&gt; \u2502 7.0 \u2506 0.11955  \u2506 2022-12-08 \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n## not implemented yet\n# df$sample(3)\n\n## not implemented yet\n# df$describe()\n\ndf$select(pl$col(\"*\"))\n#&gt; shape: (8, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d     \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.384548 \u2506 2022-12-01 \u2506 1.0   \u2502\n#&gt; \u2502 1.0 \u2506 0.978281 \u2506 2022-12-02 \u2506 2.0   \u2502\n#&gt; \u2502 2.0 \u2506 0.311261 \u2506 2022-12-03 \u2506 NaN   \u2502\n#&gt; \u2502 3.0 \u2506 0.345881 \u2506 2022-12-04 \u2506 NaN   \u2502\n#&gt; \u2502 4.0 \u2506 0.277752 \u2506 2022-12-05 \u2506 0.0   \u2502\n#&gt; \u2502 5.0 \u2506 0.80234  \u2506 2022-12-06 \u2506 -5.0  \u2502\n#&gt; \u2502 6.0 \u2506 0.637982 \u2506 2022-12-07 \u2506 -42.0 \u2502\n#&gt; \u2502 7.0 \u2506 0.11955  \u2506 2022-12-08 \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(pl$col(c(\"a\", \"b\")))\n#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.384548 \u2502\n#&gt; \u2502 1.0 \u2506 0.978281 \u2502\n#&gt; \u2502 2.0 \u2506 0.311261 \u2502\n#&gt; \u2502 3.0 \u2506 0.345881 \u2502\n#&gt; \u2502 4.0 \u2506 0.277752 \u2502\n#&gt; \u2502 5.0 \u2506 0.80234  \u2502\n#&gt; \u2502 6.0 \u2506 0.637982 \u2502\n#&gt; \u2502 7.0 \u2506 0.11955  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(pl$col(c(\"a\", \"b\")))\n#&gt; shape: (8, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.384548 \u2502\n#&gt; \u2502 1.0 \u2506 0.978281 \u2502\n#&gt; \u2502 2.0 \u2506 0.311261 \u2502\n#&gt; \u2502 3.0 \u2506 0.345881 \u2502\n#&gt; \u2502 4.0 \u2506 0.277752 \u2502\n#&gt; \u2502 5.0 \u2506 0.80234  \u2502\n#&gt; \u2502 6.0 \u2506 0.637982 \u2502\n#&gt; \u2502 7.0 \u2506 0.11955  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(pl$col(\"a\"), pl$col(\"b\"))$limit(3)\n#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2502\n#&gt; \u2502 --- \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.384548 \u2502\n#&gt; \u2502 1.0 \u2506 0.978281 \u2502\n#&gt; \u2502 2.0 \u2506 0.311261 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(pl$all()$exclude(\"a\"))\n#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b        \u2506 c          \u2506 d     \u2502\n#&gt; \u2502 ---      \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 f64      \u2506 date       \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.384548 \u2506 2022-12-01 \u2506 1.0   \u2502\n#&gt; \u2502 0.978281 \u2506 2022-12-02 \u2506 2.0   \u2502\n#&gt; \u2502 0.311261 \u2506 2022-12-03 \u2506 NaN   \u2502\n#&gt; \u2502 0.345881 \u2506 2022-12-04 \u2506 NaN   \u2502\n#&gt; \u2502 0.277752 \u2506 2022-12-05 \u2506 0.0   \u2502\n#&gt; \u2502 0.80234  \u2506 2022-12-06 \u2506 -5.0  \u2502\n#&gt; \u2502 0.637982 \u2506 2022-12-07 \u2506 -42.0 \u2502\n#&gt; \u2502 0.11955  \u2506 2022-12-08 \u2506 null  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$filter(\n    pl$col(\"c\")$is_between(as.Date(\"2022-12-2\"), as.Date(\"2022-12-8\"))\n)\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d     \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 ---   \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2.0 \u2506 0.311261 \u2506 2022-12-03 \u2506 NaN   \u2502\n#&gt; \u2502 3.0 \u2506 0.345881 \u2506 2022-12-04 \u2506 NaN   \u2502\n#&gt; \u2502 4.0 \u2506 0.277752 \u2506 2022-12-05 \u2506 0.0   \u2502\n#&gt; \u2502 5.0 \u2506 0.80234  \u2506 2022-12-06 \u2506 -5.0  \u2502\n#&gt; \u2502 6.0 \u2506 0.637982 \u2506 2022-12-07 \u2506 -42.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$filter((pl$col(\"a\") &lt;= 3) &amp; (pl$col(\"d\")$is_not_nan()))\n#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d   \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.384548 \u2506 2022-12-01 \u2506 1.0 \u2502\n#&gt; \u2502 1.0 \u2506 0.978281 \u2506 2022-12-02 \u2506 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$with_columns(pl$col(\"b\")$sum()$alias(\"e\"), (pl$col(\"b\") + 42)$alias(\"b+42\"))\n#&gt; shape: (8, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d     \u2506 e        \u2506 b+42      \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 ---   \u2506 ---      \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 date       \u2506 f64   \u2506 f64      \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.384548 \u2506 2022-12-01 \u2506 1.0   \u2506 3.857595 \u2506 42.384548 \u2502\n#&gt; \u2502 1.0 \u2506 0.978281 \u2506 2022-12-02 \u2506 2.0   \u2506 3.857595 \u2506 42.978281 \u2502\n#&gt; \u2502 2.0 \u2506 0.311261 \u2506 2022-12-03 \u2506 NaN   \u2506 3.857595 \u2506 42.311261 \u2502\n#&gt; \u2502 3.0 \u2506 0.345881 \u2506 2022-12-04 \u2506 NaN   \u2506 3.857595 \u2506 42.345881 \u2502\n#&gt; \u2502 4.0 \u2506 0.277752 \u2506 2022-12-05 \u2506 0.0   \u2506 3.857595 \u2506 42.277752 \u2502\n#&gt; \u2502 5.0 \u2506 0.80234  \u2506 2022-12-06 \u2506 -5.0  \u2506 3.857595 \u2506 42.80234  \u2502\n#&gt; \u2502 6.0 \u2506 0.637982 \u2506 2022-12-07 \u2506 -42.0 \u2506 3.857595 \u2506 42.637982 \u2502\n#&gt; \u2502 7.0 \u2506 0.11955  \u2506 2022-12-08 \u2506 null  \u2506 3.857595 \u2506 42.11955  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$with_columns((pl$col(\"a\") * pl$col(\"b\"))$alias(\"a * b\"))$select(pl$all()$exclude(c(\"c\", \"d\")))\n#&gt; shape: (8, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 a * b    \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2506 0.384548 \u2506 0.0      \u2502\n#&gt; \u2502 1.0 \u2506 0.978281 \u2506 0.978281 \u2502\n#&gt; \u2502 2.0 \u2506 0.311261 \u2506 0.622523 \u2502\n#&gt; \u2502 3.0 \u2506 0.345881 \u2506 1.037644 \u2502\n#&gt; \u2502 4.0 \u2506 0.277752 \u2506 1.111007 \u2502\n#&gt; \u2502 5.0 \u2506 0.80234  \u2506 4.011702 \u2502\n#&gt; \u2502 6.0 \u2506 0.637982 \u2506 3.827889 \u2502\n#&gt; \u2502 7.0 \u2506 0.11955  \u2506 0.836848 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf = pl$DataFrame(\"x\" = 0:7, \"y\" = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"X\", \"X\"))\n\ndf$\n  group_by(\"y\", maintain_order = FALSE)$\n  agg(\n    pl$col(\"*\")$count()$alias(\"count\"),\n    pl$col(\"*\")$sum()$alias(\"sum\")\n  )\n#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 y   \u2506 count \u2506 sum \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 str \u2506 u32   \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 X   \u2506 2     \u2506 13  \u2502\n#&gt; \u2502 A   \u2506 3     \u2506 3   \u2502\n#&gt; \u2502 C   \u2506 1     \u2506 5   \u2502\n#&gt; \u2502 B   \u2506 2     \u2506 7   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf1 = pl$DataFrame(\n  \"a\" = 0:7,\n  \"b\" = runif(8),\n  \"c\" = as.Date(sprintf(\"2022-12-%s\", 1:8)),\n  \"d\" = c(1, 2.0, NaN, NaN, 0, -5, -42, NA)\n)\ndf2 = pl$DataFrame(\"x\" = 0:7, \"y\" = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"X\", \"X\"))\n\npl$concat(c(df1, df2), how = \"horizontal\")\n#&gt; shape: (8, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b        \u2506 c          \u2506 d     \u2506 x   \u2506 y   \u2502\n#&gt; \u2502 --- \u2506 ---      \u2506 ---        \u2506 ---   \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 f64      \u2506 date       \u2506 f64   \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 0.358282 \u2506 2022-12-01 \u2506 1.0   \u2506 0   \u2506 A   \u2502\n#&gt; \u2502 1   \u2506 0.800007 \u2506 2022-12-02 \u2506 2.0   \u2506 1   \u2506 A   \u2502\n#&gt; \u2502 2   \u2506 0.80001  \u2506 2022-12-03 \u2506 NaN   \u2506 2   \u2506 A   \u2502\n#&gt; \u2502 3   \u2506 0.380511 \u2506 2022-12-04 \u2506 NaN   \u2506 3   \u2506 B   \u2502\n#&gt; \u2502 4   \u2506 0.853204 \u2506 2022-12-05 \u2506 0.0   \u2506 4   \u2506 B   \u2502\n#&gt; \u2502 5   \u2506 0.16966  \u2506 2022-12-06 \u2506 -5.0  \u2506 5   \u2506 C   \u2502\n#&gt; \u2502 6   \u2506 0.500435 \u2506 2022-12-07 \u2506 -42.0 \u2506 6   \u2506 X   \u2502\n#&gt; \u2502 7   \u2506 0.232534 \u2506 2022-12-08 \u2506 null  \u2506 7   \u2506 X   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide/#polars-expressions","title":"Polars expressions","text":""},{"location":"vignettes/userguide/#expressions","title":"Expressions","text":"<pre><code>df = pl$DataFrame(\n  \"nrs\" = c(1, 2, 3, NA, 5),\n  \"names\" = c(\"foo\", \"ham\", \"spam\", \"egg\", NA),\n  \"random\" = runif(5),\n  \"groups\" = c(\"A\", \"A\", \"B\", \"C\", \"B\")\n)\ndf\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 nrs  \u2506 names \u2506 random   \u2506 groups \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 str   \u2506 f64      \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 foo   \u2506 0.025309 \u2506 A      \u2502\n#&gt; \u2502 2.0  \u2506 ham   \u2506 0.567438 \u2506 A      \u2502\n#&gt; \u2502 3.0  \u2506 spam  \u2506 0.728529 \u2506 B      \u2502\n#&gt; \u2502 null \u2506 egg   \u2506 0.486093 \u2506 C      \u2502\n#&gt; \u2502 5.0  \u2506 null  \u2506 0.813456 \u2506 B      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$col(\"names\")$n_unique()$alias(\"unique_names_1\"),\n  pl$col(\"names\")$unique()$count()$alias(\"unique_names_2\")\n)\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 unique_names_1 \u2506 unique_names_2 \u2502\n#&gt; \u2502 ---            \u2506 ---            \u2502\n#&gt; \u2502 u32            \u2506 u32            \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5              \u2506 4              \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$sum(\"random\")$alias(\"sum\"),\n  pl$min(\"random\")$alias(\"min\"),\n  pl$max(\"random\")$alias(\"max\"),\n  pl$col(\"random\")$max()$alias(\"other_max\"),\n  pl$std(\"random\")$alias(\"std dev\"),\n  pl$var(\"random\")$alias(\"variance\")\n)\n#&gt; shape: (1, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 sum      \u2506 min      \u2506 max      \u2506 other_max \u2506 std dev  \u2506 variance \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2506 ---      \u2506 ---       \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2506 f64      \u2506 f64       \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2.620824 \u2506 0.025309 \u2506 0.813456 \u2506 0.813456  \u2506 0.307259 \u2506 0.094408 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$col(\"names\")$filter(pl$col(\"names\")$str$contains(\"am$\"))$count()\n)\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 names \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$when(pl$col(\"random\") &gt; 0.5)$then(0)$otherwise(pl$col(\"random\")) * pl$sum(\"nrs\")\n)\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal  \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.278398 \u2502\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2502 5.347023 \u2502\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$when(pl$col(\"groups\") == \"A\")$then(1)$when(pl$col(\"random\") &gt; 0.5)$then(0)$otherwise(pl$col(\"random\"))\n)\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal  \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0      \u2502\n#&gt; \u2502 1.0      \u2502\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2502 0.486093 \u2502\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$select(\n  pl$col(\"*\"),  # select all\n  pl$col(\"random\")$sum()$over(\"groups\")$alias(\"sumc(random)/groups\"),\n  pl$col(\"random\")$implode()$over(\"names\")$alias(\"random/name\")\n)\n#&gt; shape: (5, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 nrs  \u2506 names \u2506 random   \u2506 groups \u2506 sumc(random)/groups \u2506 random/name \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---    \u2506 ---                 \u2506 ---         \u2502\n#&gt; \u2502 f64  \u2506 str   \u2506 f64      \u2506 str    \u2506 f64                 \u2506 list[f64]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 foo   \u2506 0.025309 \u2506 A      \u2506 0.592747            \u2506 [0.025309]  \u2502\n#&gt; \u2502 2.0  \u2506 ham   \u2506 0.567438 \u2506 A      \u2506 0.592747            \u2506 [0.567438]  \u2502\n#&gt; \u2502 3.0  \u2506 spam  \u2506 0.728529 \u2506 B      \u2506 1.541984            \u2506 [0.728529]  \u2502\n#&gt; \u2502 null \u2506 egg   \u2506 0.486093 \u2506 C      \u2506 0.486093            \u2506 [0.486093]  \u2502\n#&gt; \u2502 5.0  \u2506 null  \u2506 0.813456 \u2506 B      \u2506 1.541984            \u2506 [0.813456]  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide/#contexts","title":"Contexts","text":"<pre><code>df$select(\n  pl$sum(\"nrs\"),\n  pl$col(\"names\")$sort(),\n  pl$col(\"names\")$first()$alias(\"first name\"),\n  (pl$mean(\"nrs\") * 10)$alias(\"10xnrs\")\n)\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 nrs  \u2506 names \u2506 first name \u2506 10xnrs \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---        \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 str   \u2506 str        \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 11.0 \u2506 null  \u2506 foo        \u2506 27.5   \u2502\n#&gt; \u2502 11.0 \u2506 egg   \u2506 foo        \u2506 27.5   \u2502\n#&gt; \u2502 11.0 \u2506 foo   \u2506 foo        \u2506 27.5   \u2502\n#&gt; \u2502 11.0 \u2506 ham   \u2506 foo        \u2506 27.5   \u2502\n#&gt; \u2502 11.0 \u2506 spam  \u2506 foo        \u2506 27.5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$with_columns(\n  pl$sum(\"nrs\")$alias(\"nrs_sum\"),\n  pl$col(\"random\")$count()$alias(\"count\")\n)\n#&gt; shape: (5, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 nrs  \u2506 names \u2506 random   \u2506 groups \u2506 nrs_sum \u2506 count \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---    \u2506 ---     \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 str   \u2506 f64      \u2506 str    \u2506 f64     \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2506 foo   \u2506 0.025309 \u2506 A      \u2506 11.0    \u2506 5     \u2502\n#&gt; \u2502 2.0  \u2506 ham   \u2506 0.567438 \u2506 A      \u2506 11.0    \u2506 5     \u2502\n#&gt; \u2502 3.0  \u2506 spam  \u2506 0.728529 \u2506 B      \u2506 11.0    \u2506 5     \u2502\n#&gt; \u2502 null \u2506 egg   \u2506 0.486093 \u2506 C      \u2506 11.0    \u2506 5     \u2502\n#&gt; \u2502 5.0  \u2506 null  \u2506 0.813456 \u2506 B      \u2506 11.0    \u2506 5     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndf$group_by(\"groups\")$agg(\n  pl$sum(\"nrs\"),  # sum nrs by groups\n  pl$col(\"random\")$count()$alias(\"count\"),  # count group members\n  # sum random where name != null\n  pl$col(\"random\")$filter(pl$col(\"names\")$is_not_null())$sum()$name$suffix(\"_sum\"),\n  pl$col(\"names\")$reverse()$alias((\"reversed names\"))\n)\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 groups \u2506 nrs \u2506 count \u2506 random_sum \u2506 reversed names \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---   \u2506 ---        \u2506 ---            \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 u32   \u2506 f64        \u2506 list[str]      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 C      \u2506 0.0 \u2506 1     \u2506 0.486093   \u2506 [\"egg\"]        \u2502\n#&gt; \u2502 B      \u2506 8.0 \u2506 2     \u2506 0.728529   \u2506 [null, \"spam\"] \u2502\n#&gt; \u2502 A      \u2506 3.0 \u2506 2     \u2506 0.592747   \u2506 [\"ham\", \"foo\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide/#groupby","title":"GroupBy","text":"<pre><code>url = \"https://theunitedstates.io/congress-legislators/legislators-historical.csv\"\n\ndtypes = list(\n    \"first_name\" = pl$Categorical,\n    \"gender\" = pl$Categorical,\n    \"type\" = pl$Categorical,\n    \"state\" = pl$Categorical,\n    \"party\" = pl$Categorical\n)\n\n# dtypes argument\ndataset = pl$read_csv(url)$with_columns(pl$col(\"birthday\")$str$strptime(pl$Date, \"%Y-%m-%d\"))\n#&gt; tmp file placed in \n#&gt;  /tmp/Rtmpa25YoB/https...theunitedstates.io.congress.legislators.legislators.historical.csv\n\ndataset$\n  lazy()$\n  group_by(\"first_name\")$\n  agg(\n    pl$count(),\n    pl$col(\"gender\"),\n    pl$first(\"last_name\"))$\n  sort(\"count\", descending = TRUE)$\n  limit(5)$\n  collect()\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 first_name \u2506 count \u2506 gender            \u2506 last_name \u2502\n#&gt; \u2502 ---        \u2506 ---   \u2506 ---               \u2506 ---       \u2502\n#&gt; \u2502 str        \u2506 u32   \u2506 list[str]         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 John       \u2506 1256  \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Walker    \u2502\n#&gt; \u2502 William    \u2506 1022  \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Few       \u2502\n#&gt; \u2502 James      \u2506 714   \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Armstrong \u2502\n#&gt; \u2502 Thomas     \u2506 454   \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Tucker    \u2502\n#&gt; \u2502 Charles    \u2506 439   \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Carroll   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ndataset$lazy()$\n  group_by(\"state\")$\n  agg(\n    (pl$col(\"party\") == \"Anti-Administration\")$sum()$alias(\"anti\"),\n    (pl$col(\"party\") == \"Pro-Administration\")$sum()$alias(\"pro\"))$\n  sort(\"pro\", descending = TRUE)$\n  limit(5)$\n  collect()\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 state \u2506 anti \u2506 pro \u2502\n#&gt; \u2502 ---   \u2506 ---  \u2506 --- \u2502\n#&gt; \u2502 str   \u2506 u32  \u2506 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 NJ    \u2506 0    \u2506 3   \u2502\n#&gt; \u2502 CT    \u2506 0    \u2506 3   \u2502\n#&gt; \u2502 NC    \u2506 1    \u2506 2   \u2502\n#&gt; \u2502 SC    \u2506 0    \u2506 1   \u2502\n#&gt; \u2502 VA    \u2506 3    \u2506 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\ndataset$\n  lazy()$\n  group_by(c(\"state\", \"party\"))$\n  agg(pl$count(\"party\")$alias(\"count\"))$\n  filter((pl$col(\"party\") == \"Anti-Administration\") | (pl$col(\"party\") == \"Pro-Administration\"))$\n  sort(\"count\", descending = TRUE)$\n  head(5)$\n  collect()\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 state \u2506 party               \u2506 count \u2502\n#&gt; \u2502 ---   \u2506 ---                 \u2506 ---   \u2502\n#&gt; \u2502 str   \u2506 str                 \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 VA    \u2506 Anti-Administration \u2506 3     \u2502\n#&gt; \u2502 NJ    \u2506 Pro-Administration  \u2506 3     \u2502\n#&gt; \u2502 CT    \u2506 Pro-Administration  \u2506 3     \u2502\n#&gt; \u2502 NC    \u2506 Pro-Administration  \u2506 2     \u2502\n#&gt; \u2502 PA    \u2506 Anti-Administration \u2506 1     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide/#folds","title":"Folds","text":""},{"location":"vignettes/userguide/#window-functions","title":"Window functions","text":"<pre><code>df = pl$read_csv(\n  \"https://gist.githubusercontent.com/ritchie46/cac6b337ea52281aa23c049250a4ff03/raw/89a957ff3919d90e6ef2d34235e6bf22304f3366/pokemon.csv\"\n)\n</code></pre> <pre><code>filtered = df$\n  filter(pl$col(\"Type 2\") == \"Psychic\")$\n  select(c(\"Name\", \"Type 1\", \"Speed\"))\nfiltered\n#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Name                \u2506 Type 1 \u2506 Speed \u2502\n#&gt; \u2502 ---                 \u2506 ---    \u2506 ---   \u2502\n#&gt; \u2502 str                 \u2506 str    \u2506 i64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Slowpoke            \u2506 Water  \u2506 15    \u2502\n#&gt; \u2502 Slowbro             \u2506 Water  \u2506 30    \u2502\n#&gt; \u2502 SlowbroMega Slowbro \u2506 Water  \u2506 30    \u2502\n#&gt; \u2502 Exeggcute           \u2506 Grass  \u2506 40    \u2502\n#&gt; \u2502 Exeggutor           \u2506 Grass  \u2506 55    \u2502\n#&gt; \u2502 Starmie             \u2506 Water  \u2506 115   \u2502\n#&gt; \u2502 Jynx                \u2506 Ice    \u2506 95    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nfiltered$with_columns(\n  pl$col(c(\"Name\", \"Speed\"))$sort()$over(\"Type 1\")\n)\n#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Name                \u2506 Type 1 \u2506 Speed \u2502\n#&gt; \u2502 ---                 \u2506 ---    \u2506 ---   \u2502\n#&gt; \u2502 str                 \u2506 str    \u2506 i64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Slowbro             \u2506 Water  \u2506 15    \u2502\n#&gt; \u2502 SlowbroMega Slowbro \u2506 Water  \u2506 30    \u2502\n#&gt; \u2502 Slowpoke            \u2506 Water  \u2506 30    \u2502\n#&gt; \u2502 Exeggcute           \u2506 Grass  \u2506 40    \u2502\n#&gt; \u2502 Exeggutor           \u2506 Grass  \u2506 55    \u2502\n#&gt; \u2502 Starmie             \u2506 Water  \u2506 115   \u2502\n#&gt; \u2502 Jynx                \u2506 Ice    \u2506 95    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# aggregate and broadcast within a group\n# output type: -&gt; Int32\npl$sum(\"foo\")$over(\"groups\")\n#&gt; polars Expr: col(\"foo\").sum().over([col(\"groups\")])\n\n# sum within a group and multiply with group elements\n# output type: -&gt; Int32\n(pl$col(\"x\")$sum() * pl$col(\"y\"))$over(\"groups\")\n#&gt; polars Expr: [(col(\"x\").sum()) * (col(\"y\"))].over([col(\"groups\")])\n\n# sum within a group and multiply with group elements \n# and aggregate/implode the group to a list\n# output type: -&gt; List(Int32)\n(pl$col(\"x\")$sum() * pl$col(\"y\"))$implode()$over(\"groups\")\n#&gt; polars Expr: [(col(\"x\").sum()) * (col(\"y\"))].list().over([col(\"groups\")])\n\n# note that it will require an explicit `implode()` call\n# sum within a group and multiply with group elements \n# and aggregate/implode the group to a list\n# the explode call unpack the list and combine inner elements to one column\n\n# This is the fastest method to do things over groups when the groups are sorted\n(pl$col(\"x\")$sum() * pl$col(\"y\"))$implode()$over(\"groups\")$explode()\n#&gt; polars Expr: [(col(\"x\").sum()) * (col(\"y\"))].list().over([col(\"groups\")]).explode()\n\ndf$sort(\"Type 1\")$select(\n  pl$col(\"Type 1\")$head(3)$implode()$over(\"Type 1\")$explode(),\n  pl$col(\"Name\")$sort_by(pl$col(\"Speed\"))$head(3)$implode()$over(\"Type 1\")$explode()$alias(\"fastest/group\"),\n  pl$col(\"Name\")$sort_by(pl$col(\"Attack\"))$head(3)$implode()$over(\"Type 1\")$explode()$alias(\"strongest/group\"),\n  pl$col(\"Name\")$sort()$head(3)$implode()$over(\"Type 1\")$explode()$alias(\"sorted_by_alphabet\")\n)\n#&gt; shape: (43, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Type 1 \u2506 fastest/group       \u2506 strongest/group \u2506 sorted_by_alphabet      \u2502\n#&gt; \u2502 ---    \u2506 ---                 \u2506 ---             \u2506 ---                     \u2502\n#&gt; \u2502 str    \u2506 str                 \u2506 str             \u2506 str                     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Bug    \u2506 Paras               \u2506 Metapod         \u2506 Beedrill                \u2502\n#&gt; \u2502 Bug    \u2506 Metapod             \u2506 Kakuna          \u2506 BeedrillMega Beedrill   \u2502\n#&gt; \u2502 Bug    \u2506 Parasect            \u2506 Caterpie        \u2506 Butterfree              \u2502\n#&gt; \u2502 Dragon \u2506 Dratini             \u2506 Dratini         \u2506 Dragonair               \u2502\n#&gt; \u2502 \u2026      \u2506 \u2026                   \u2506 \u2026               \u2506 \u2026                       \u2502\n#&gt; \u2502 Rock   \u2506 Omanyte             \u2506 Omastar         \u2506 Geodude                 \u2502\n#&gt; \u2502 Water  \u2506 Slowpoke            \u2506 Magikarp        \u2506 Blastoise               \u2502\n#&gt; \u2502 Water  \u2506 Slowbro             \u2506 Tentacool       \u2506 BlastoiseMega Blastoise \u2502\n#&gt; \u2502 Water  \u2506 SlowbroMega Slowbro \u2506 Horsea          \u2506 Cloyster                \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vignettes/userguide/#list-context-and-row-wise-computations","title":"List context and row wise computations","text":""},{"location":"vignettes/userguide/#r-examples","title":"R examples","text":"<pre><code>df = pl$DataFrame(\n  \"A\" = c(1, 2, 3, 4, 5),\n  \"fruits\" = c(\"banana\", \"banana\", \"apple\", \"apple\", \"banana\"),\n  \"B\" = c(5, 4, 3, 2, 1),\n  \"cars\" = c(\"beetle\", \"audi\", \"beetle\", \"beetle\", \"beetle\"),\n  \"optional\" = c(28, 300, NA, 2, -30)\n)\ndf\n#&gt; shape: (5, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2506 fruits \u2506 B   \u2506 cars   \u2506 optional \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 --- \u2506 ---    \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 str    \u2506 f64 \u2506 str    \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 banana \u2506 5.0 \u2506 beetle \u2506 28.0     \u2502\n#&gt; \u2502 2.0 \u2506 banana \u2506 4.0 \u2506 audi   \u2506 300.0    \u2502\n#&gt; \u2502 3.0 \u2506 apple  \u2506 3.0 \u2506 beetle \u2506 null     \u2502\n#&gt; \u2502 4.0 \u2506 apple  \u2506 2.0 \u2506 beetle \u2506 2.0      \u2502\n#&gt; \u2502 5.0 \u2506 banana \u2506 1.0 \u2506 beetle \u2506 -30.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# Within select, we can use the col function to refer to columns$\n# If we are not applying any function to the column, we can also use the column name as a string$\ndf$select(\n  pl$col(\"A\"),\n  \"B\",         # the col part is inferred\n  pl$lit(\"B\")  # the pl$lit functions tell polars we mean the literal \"B\"\n)\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2506 B   \u2506 literal \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---     \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 5.0 \u2506 B       \u2502\n#&gt; \u2502 2.0 \u2506 4.0 \u2506 B       \u2502\n#&gt; \u2502 3.0 \u2506 3.0 \u2506 B       \u2502\n#&gt; \u2502 4.0 \u2506 2.0 \u2506 B       \u2502\n#&gt; \u2502 5.0 \u2506 1.0 \u2506 B       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can use a list within select (example above) or a comma-separated list of expressions (this example)$\ndf$select(\n  pl$col(\"A\"),\n  \"B\",      \n  pl$lit(\"B\")\n)\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2506 B   \u2506 literal \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---     \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 5.0 \u2506 B       \u2502\n#&gt; \u2502 2.0 \u2506 4.0 \u2506 B       \u2502\n#&gt; \u2502 3.0 \u2506 3.0 \u2506 B       \u2502\n#&gt; \u2502 4.0 \u2506 2.0 \u2506 B       \u2502\n#&gt; \u2502 5.0 \u2506 1.0 \u2506 B       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can select columns with a regex if the regex starts with '^' and ends with '$'\ndf$select(    \n  pl$col(\"^A|B$\")$sum()\n)\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A    \u2506 B    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.0 \u2506 15.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can select multiple columns by name\ndf$select(\n  pl$col(c(\"A\", \"B\"))$sum()\n)\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A    \u2506 B    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.0 \u2506 15.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We select everything in normal order\n# Then we select everything in reversed order\ndf$select(\n  pl$all(),\n  pl$all()$reverse()$name$suffix(\"_reverse\")\n)\n#&gt; shape: (5, 10)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2506 fruits \u2506 B   \u2506 cars   \u2506 \u2026 \u2506 fruits_reverse \u2506 B_reverse \u2506 cars_reverse \u2506 optional_reverse \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 --- \u2506 ---    \u2506   \u2506 ---            \u2506 ---       \u2506 ---          \u2506 ---              \u2502\n#&gt; \u2502 f64 \u2506 str    \u2506 f64 \u2506 str    \u2506   \u2506 str            \u2506 f64       \u2506 str          \u2506 f64              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 banana \u2506 5.0 \u2506 beetle \u2506 \u2026 \u2506 banana         \u2506 1.0       \u2506 beetle       \u2506 -30.0            \u2502\n#&gt; \u2502 2.0 \u2506 banana \u2506 4.0 \u2506 audi   \u2506 \u2026 \u2506 apple          \u2506 2.0       \u2506 beetle       \u2506 2.0              \u2502\n#&gt; \u2502 3.0 \u2506 apple  \u2506 3.0 \u2506 beetle \u2506 \u2026 \u2506 apple          \u2506 3.0       \u2506 beetle       \u2506 null             \u2502\n#&gt; \u2502 4.0 \u2506 apple  \u2506 2.0 \u2506 beetle \u2506 \u2026 \u2506 banana         \u2506 4.0       \u2506 audi         \u2506 300.0            \u2502\n#&gt; \u2502 5.0 \u2506 banana \u2506 1.0 \u2506 beetle \u2506 \u2026 \u2506 banana         \u2506 5.0       \u2506 beetle       \u2506 28.0             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# All expressions run in parallel\n# Single valued `Series` are broadcasted to the shape of the `DataFrame`\ndf$select(\n  pl$all(),\n  pl$all()$sum()$name$suffix(\"_sum\") # This is a single valued Series broadcasted to the shape of the DataFrame\n)\n#&gt; shape: (5, 10)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2506 fruits \u2506 B   \u2506 cars   \u2506 \u2026 \u2506 fruits_sum \u2506 B_sum \u2506 cars_sum \u2506 optional_sum \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 --- \u2506 ---    \u2506   \u2506 ---        \u2506 ---   \u2506 ---      \u2506 ---          \u2502\n#&gt; \u2502 f64 \u2506 str    \u2506 f64 \u2506 str    \u2506   \u2506 str        \u2506 f64   \u2506 str      \u2506 f64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 banana \u2506 5.0 \u2506 beetle \u2506 \u2026 \u2506 null       \u2506 15.0  \u2506 null     \u2506 300.0        \u2502\n#&gt; \u2502 2.0 \u2506 banana \u2506 4.0 \u2506 audi   \u2506 \u2026 \u2506 null       \u2506 15.0  \u2506 null     \u2506 300.0        \u2502\n#&gt; \u2502 3.0 \u2506 apple  \u2506 3.0 \u2506 beetle \u2506 \u2026 \u2506 null       \u2506 15.0  \u2506 null     \u2506 300.0        \u2502\n#&gt; \u2502 4.0 \u2506 apple  \u2506 2.0 \u2506 beetle \u2506 \u2026 \u2506 null       \u2506 15.0  \u2506 null     \u2506 300.0        \u2502\n#&gt; \u2502 5.0 \u2506 banana \u2506 1.0 \u2506 beetle \u2506 \u2026 \u2506 null       \u2506 15.0  \u2506 null     \u2506 300.0        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# Filters can also be applied within an expression\ndf$select(\n  # Sum the values of A where the fruits column starts with 'b'\n  pl$col(\"A\")$filter(pl$col(\"fruits\")$str$contains(\"^b$*\"))$sum()\n)\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can do arithmetic on columns\ndf$select(\n  ((pl$col(\"A\") / 124.0 * pl$col(\"B\")) / pl$sum(\"B\"))$alias(\"computed\")\n)\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 computed \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.002688 \u2502\n#&gt; \u2502 0.004301 \u2502\n#&gt; \u2502 0.004839 \u2502\n#&gt; \u2502 0.004301 \u2502\n#&gt; \u2502 0.002688 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can combine columns by a predicate\n# For example when the `fruits` column is 'banana' we set the value equal to the\n# value in `B` column for that row, otherwise we set the value to be -1\ndf$select(\n  \"fruits\",\n  \"B\",\n  pl$when(pl$col(\"fruits\") == \"banana\")$then(pl$col(\"B\"))$otherwise(-1)$alias(\"b\")\n)\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 B   \u2506 b    \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 5.0 \u2506 5.0  \u2502\n#&gt; \u2502 banana \u2506 4.0 \u2506 4.0  \u2502\n#&gt; \u2502 apple  \u2506 3.0 \u2506 -1.0 \u2502\n#&gt; \u2502 apple  \u2506 2.0 \u2506 -1.0 \u2502\n#&gt; \u2502 banana \u2506 1.0 \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can combine columns by a fold operation on column level$\n# For example we do a horizontal sum where we:\n# - start with 0\n# - add the value in the `A` column\n# - add the value in the `B` column\n# - add the value in the `B` column squared\n# df$select(\n#   \"A\",\n#   \"B\",\n#   pl$fold(0, function(a, b) a + b, c( pl$col(\"A\"), \"B\", pl$col(\"B\")**2,))$alias(\"fold\")\n# )\n\ndf$group_by(\"fruits\")$\n  agg(\n    pl$col(\"B\")$count()$alias(\"B_count\"),\n    pl$col(\"B\")$sum()$alias(\"B_sum\")\n  )\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 B_count \u2506 B_sum \u2502\n#&gt; \u2502 ---    \u2506 ---     \u2506 ---   \u2502\n#&gt; \u2502 str    \u2506 u32     \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 2       \u2506 5.0   \u2502\n#&gt; \u2502 banana \u2506 3       \u2506 10.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can aggregate many expressions at once\ndf$group_by(\"fruits\")$\n  agg(\n            pl$col(\"B\")$sum()$alias(\"B_sum\"),# Sum of B\n            # pl$first(\"fruits\")$alias(\"fruits_first\"),# First value of fruits\n            # pl$count(\"A\")$alias(\"count\"),# Count of A\n            pl$col(\"cars\")$reverse() # Reverse the cars column - not an aggregation\n            # so the output is a pl$List\n  )\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 B_sum \u2506 cars                         \u2502\n#&gt; \u2502 ---    \u2506 ---   \u2506 ---                          \u2502\n#&gt; \u2502 str    \u2506 f64   \u2506 list[str]                    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 5.0   \u2506 [\"beetle\", \"beetle\"]         \u2502\n#&gt; \u2502 banana \u2506 10.0  \u2506 [\"beetle\", \"audi\", \"beetle\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># We can also get a list of the row indices for each group with `agg_groups()`\ndf$\n  group_by(\"fruits\")$\n  agg(pl$col(\"B\")$agg_groups()$alias(\"group_row_indices\"))\n#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 group_row_indices \u2502\n#&gt; \u2502 ---    \u2506 ---               \u2502\n#&gt; \u2502 str    \u2506 list[u32]         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 [0, 1, 4]         \u2502\n#&gt; \u2502 apple  \u2506 [2, 3]            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can also do filter predicates in group_by\n# In this example we do not include values of B that are smaller than 1\n# in the sum\ndf$\n  group_by(\"fruits\")$\n  agg(pl$col(\"B\")$filter(pl$col(\"B\") &gt; 1)$sum())\n#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 B   \u2502\n#&gt; \u2502 ---    \u2506 --- \u2502\n#&gt; \u2502 str    \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 9.0 \u2502\n#&gt; \u2502 apple  \u2506 5.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n# Here we add a new column with the sum of B grouped by fruits\ndf$\n  select(\n    \"fruits\",\n    \"cars\",\n    \"B\",\n    pl$col(\"B\")$sum()$over(\"fruits\")$alias(\"B_sum_by_fruits\"))\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 cars   \u2506 B   \u2506 B_sum_by_fruits \u2502\n#&gt; \u2502 ---    \u2506 ---    \u2506 --- \u2506 ---             \u2502\n#&gt; \u2502 str    \u2506 str    \u2506 f64 \u2506 f64             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 beetle \u2506 5.0 \u2506 10.0            \u2502\n#&gt; \u2502 banana \u2506 audi   \u2506 4.0 \u2506 10.0            \u2502\n#&gt; \u2502 apple  \u2506 beetle \u2506 3.0 \u2506 5.0             \u2502\n#&gt; \u2502 apple  \u2506 beetle \u2506 2.0 \u2506 5.0             \u2502\n#&gt; \u2502 banana \u2506 beetle \u2506 1.0 \u2506 10.0            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# We can also use window functions to do group_by over multiple columns\ndf$\n  select(\n    \"fruits\",\n    \"cars\",\n    \"B\",\n    pl$col(\"B\")$sum()$over(\"fruits\")$alias(\"B_sum_by_fruits\"),\n    pl$col(\"B\")$sum()$over(\"cars\")$alias(\"B_sum_by_cars\"))\n#&gt; shape: (5, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 cars   \u2506 B   \u2506 B_sum_by_fruits \u2506 B_sum_by_cars \u2502\n#&gt; \u2502 ---    \u2506 ---    \u2506 --- \u2506 ---             \u2506 ---           \u2502\n#&gt; \u2502 str    \u2506 str    \u2506 f64 \u2506 f64             \u2506 f64           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 beetle \u2506 5.0 \u2506 10.0            \u2506 11.0          \u2502\n#&gt; \u2502 banana \u2506 audi   \u2506 4.0 \u2506 10.0            \u2506 4.0           \u2502\n#&gt; \u2502 apple  \u2506 beetle \u2506 3.0 \u2506 5.0             \u2506 11.0          \u2502\n#&gt; \u2502 apple  \u2506 beetle \u2506 2.0 \u2506 5.0             \u2506 11.0          \u2502\n#&gt; \u2502 banana \u2506 beetle \u2506 1.0 \u2506 10.0            \u2506 11.0          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# Here we use a window function to lag column B within \"fruits\"\ndf$\n  select(\n    \"fruits\",\n    \"B\",\n    pl$col(\"B\")$shift()$over(\"fruits\")$alias(\"lag_B_by_fruits\"))\n#&gt; shape: (5, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 B   \u2506 lag_B_by_fruits \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---             \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 banana \u2506 5.0 \u2506 null            \u2502\n#&gt; \u2502 banana \u2506 4.0 \u2506 5.0             \u2502\n#&gt; \u2502 apple  \u2506 3.0 \u2506 null            \u2502\n#&gt; \u2502 apple  \u2506 2.0 \u2506 3.0             \u2502\n#&gt; \u2502 banana \u2506 1.0 \u2506 4.0             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"}]}